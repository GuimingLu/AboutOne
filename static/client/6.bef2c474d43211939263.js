(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[6],{

/***/ 1573:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "B", function() { return saveConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "w", function() { return reloadConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return adminResetMfa; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return getClusterStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "t", function() { return ldapTest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return invalidateAllCaches; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "v", function() { return recycleDatabaseConnection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return adminResetPassword; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return adminResetEmail; });
/* unused harmony export samlCertificateStatus */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return getOAuthAppInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return allowOAuth2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return emailToLdap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return emailToOAuth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "u", function() { return oauthToEmail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F", function() { return uploadBrandImage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "H", function() { return uploadLicenseFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "y", function() { return removeLicenseFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "J", function() { return uploadPublicSamlCertificate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "I", function() { return uploadPrivateSamlCertificate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "G", function() { return uploadIdpSamlCertificate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "A", function() { return removePublicSamlCertificate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "z", function() { return removePrivateSamlCertificate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "x", function() { return removeIdpSamlCertificate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return getStandardAnalytics; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return getAdvancedAnalytics; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return getPostsPerDayAnalytics; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return getUsersPerDayAnalytics; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return elasticsearchTest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "D", function() { return testS3Connection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return elasticsearchPurgeIndexes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "C", function() { return setNavigationBlocked; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return deferNavigation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return cancelNavigation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return confirmNavigation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return invalidateAllEmailInvites; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "E", function() { return testSmtp; });
/* harmony import */ var mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1609);
/* harmony import */ var mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var mattermost_redux_actions_users__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(35);
/* harmony import */ var mattermost_redux_actions_users__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(mattermost_redux_actions_users__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var mattermost_redux_actions_teams__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(299);
/* harmony import */ var mattermost_redux_actions_teams__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(mattermost_redux_actions_teams__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var mattermost_redux_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(27);
/* harmony import */ var mattermost_redux_client__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(mattermost_redux_client__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var mattermost_redux_actions_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(117);
/* harmony import */ var mattermost_redux_actions_helpers__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(mattermost_redux_actions_helpers__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var actions_global_actions_jsx__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1567);
/* harmony import */ var selectors_views_admin__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(1645);
/* harmony import */ var stores_redux_store_jsx__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(14);
/* harmony import */ var utils_constants_jsx__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(0);
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.









const dispatch = stores_redux_store_jsx__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].dispatch;
const getState = stores_redux_store_jsx__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].getState;
async function saveConfig(config, success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["updateConfig"](config)(dispatch, getState);

  if (data && success) {
    success(data);
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function reloadConfig(success, error) {
  const {
    data,
    error: err
  } = await dispatch(mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["reloadConfig"]());

  if (data && success) {
    dispatch(mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["getConfig"]());
    dispatch(mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["getEnvironmentConfig"]());
    success(data);
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function adminResetMfa(userId, success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_users__WEBPACK_IMPORTED_MODULE_1__["updateUserMfa"](userId, false)(dispatch, getState);

  if (data && success) {
    success(data);
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function getClusterStatus(success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["getClusterStatus"]()(dispatch, getState);

  if (data && success) {
    success(data);
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function ldapTest(success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["testLdap"]()(dispatch, getState);

  if (data && success) {
    success(data);
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function invalidateAllCaches(success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["invalidateCaches"]()(dispatch, getState);

  if (data && success) {
    success(data);
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function recycleDatabaseConnection(success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["recycleDatabase"]()(dispatch, getState);

  if (data && success) {
    success(data);
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function adminResetPassword(userId, currentPassword, password, success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_users__WEBPACK_IMPORTED_MODULE_1__["updateUserPassword"](userId, currentPassword, password)(dispatch, getState);

  if (data && success) {
    success(data);
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function adminResetEmail(user, success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_users__WEBPACK_IMPORTED_MODULE_1__["patchUser"](user)(dispatch, getState);

  if (data && success) {
    success(data);
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function samlCertificateStatus(success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["getSamlCertificateStatus"]()(dispatch, getState);

  if (data && success) {
    success(data);
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
function getOAuthAppInfo(clientId) {
  return Object(mattermost_redux_actions_helpers__WEBPACK_IMPORTED_MODULE_4__["bindClientFunc"])({
    clientFunc: mattermost_redux_client__WEBPACK_IMPORTED_MODULE_3__["Client4"].getOAuthAppInfo,
    params: [clientId]
  });
}
function allowOAuth2({
  responseType,
  clientId,
  redirectUri,
  state,
  scope
}) {
  return Object(mattermost_redux_actions_helpers__WEBPACK_IMPORTED_MODULE_4__["bindClientFunc"])({
    clientFunc: mattermost_redux_client__WEBPACK_IMPORTED_MODULE_3__["Client4"].authorizeOAuthApp,
    params: [responseType, clientId, redirectUri, state, scope]
  });
}
async function emailToLdap(loginId, password, token, ldapId, ldapPassword, success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_users__WEBPACK_IMPORTED_MODULE_1__["switchEmailToLdap"](loginId, password, ldapId, ldapPassword, token)(dispatch, getState);

  if (data && success) {
    success(data);
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function emailToOAuth(loginId, password, token, newType, success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_users__WEBPACK_IMPORTED_MODULE_1__["switchEmailToOAuth"](newType, loginId, password, token)(dispatch, getState);

  if (data && success) {
    success(data);
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function oauthToEmail(currentService, email, password, success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_users__WEBPACK_IMPORTED_MODULE_1__["switchOAuthToEmail"](currentService, email, password)(dispatch, getState);

  if (data) {
    if (data.follow_link) {
      Object(actions_global_actions_jsx__WEBPACK_IMPORTED_MODULE_5__[/* emitUserLoggedOutEvent */ "e"])(data.follow_link);
    }

    if (success) {
      success(data);
    }
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function uploadBrandImage(brandImage, success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["uploadBrandImage"](brandImage)(dispatch, getState);

  if (data && success) {
    success(data);
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function uploadLicenseFile(file, success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["uploadLicense"](file)(dispatch, getState);

  if (data && success) {
    success(data);
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function removeLicenseFile(success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["removeLicense"]()(dispatch, getState);

  if (data && success) {
    success(data);
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function uploadPublicSamlCertificate(file, success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["uploadPublicSamlCertificate"](file)(dispatch, getState);

  if (data && success) {
    success('saml-public.crt');
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function uploadPrivateSamlCertificate(file, success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["uploadPrivateSamlCertificate"](file)(dispatch, getState);

  if (data && success) {
    success('saml-private.key');
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function uploadIdpSamlCertificate(file, success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["uploadIdpSamlCertificate"](file)(dispatch, getState);

  if (data && success) {
    success('saml-idp.crt');
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function removePublicSamlCertificate(success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["removePublicSamlCertificate"]()(dispatch, getState);

  if (data && success) {
    success(data);
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function removePrivateSamlCertificate(success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["removePrivateSamlCertificate"]()(dispatch, getState);

  if (data && success) {
    success(data);
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function removeIdpSamlCertificate(success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["removeIdpSamlCertificate"]()(dispatch, getState);

  if (data && success) {
    success(data);
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function getStandardAnalytics(teamId) {
  await mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["getStandardAnalytics"](teamId)(dispatch, getState);
}
async function getAdvancedAnalytics(teamId) {
  await mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["getAdvancedAnalytics"](teamId)(dispatch, getState);
}
async function getPostsPerDayAnalytics(teamId) {
  await mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["getPostsPerDayAnalytics"](teamId)(dispatch, getState);
}
async function getUsersPerDayAnalytics(teamId) {
  await mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["getUsersPerDayAnalytics"](teamId)(dispatch, getState);
}
async function elasticsearchTest(config, success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["testElasticsearch"](config)(dispatch, getState);

  if (data && success) {
    success(data);
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function testS3Connection(success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["testS3Connection"]()(dispatch, getState);

  if (data && success) {
    success(data);
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function elasticsearchPurgeIndexes(success, error) {
  const {
    data,
    error: err
  } = await mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["purgeElasticsearchIndexes"]()(dispatch, getState);

  if (data && success) {
    success(data);
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
function setNavigationBlocked(blocked) {
  return {
    type: utils_constants_jsx__WEBPACK_IMPORTED_MODULE_8__[/* ActionTypes */ "b"].SET_NAVIGATION_BLOCKED,
    blocked
  };
}
function deferNavigation(onNavigationConfirmed) {
  return {
    type: utils_constants_jsx__WEBPACK_IMPORTED_MODULE_8__[/* ActionTypes */ "b"].DEFER_NAVIGATION,
    onNavigationConfirmed
  };
}
function cancelNavigation() {
  return {
    type: utils_constants_jsx__WEBPACK_IMPORTED_MODULE_8__[/* ActionTypes */ "b"].CANCEL_NAVIGATION
  };
}
function confirmNavigation() {
  // have to rename these because of lint no-shadow
  return (thunkDispatch, thunkGetState) => {
    const callback = Object(selectors_views_admin__WEBPACK_IMPORTED_MODULE_6__[/* getOnNavigationConfirmed */ "b"])(thunkGetState());

    if (callback) {
      callback();
    }

    thunkDispatch({
      type: utils_constants_jsx__WEBPACK_IMPORTED_MODULE_8__[/* ActionTypes */ "b"].CONFIRM_NAVIGATION
    });
  };
}
async function invalidateAllEmailInvites(success, error) {
  const {
    data,
    error: err
  } = await dispatch(mattermost_redux_actions_teams__WEBPACK_IMPORTED_MODULE_2__["invalidateAllEmailInvites"]());

  if (data && success) {
    success(data);
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}
async function testSmtp(success, error) {
  const {
    data,
    error: err
  } = await dispatch(mattermost_redux_actions_admin__WEBPACK_IMPORTED_MODULE_0__["testEmail"]());

  if (data && success) {
    success(data);
  } else if (err && error) {
    error({
      id: err.server_error_id,
      ...err
    });
  }
}

/***/ }),

/***/ 1644:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return NextIcon; });
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_intl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(52);
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.



class NextIcon extends react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent {
  render() {
    const className = 'fa fa-1x fa-angle-right' + (this.props.additionalClassName ? ' ' + this.props.additionalClassName : '');
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(react_intl__WEBPACK_IMPORTED_MODULE_2__[/* FormattedMessage */ "c"], {
      id: "generic_icons.next",
      defaultMessage: "Next Icon"
    }, title => react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
      className: className,
      title: title
    }));
  }

}

_defineProperty(NextIcon, "propTypes", {
  additionalClassName: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.string
});

_defineProperty(NextIcon, "defaultProps", {
  additionalClassName: null
});

/***/ }),

/***/ 1645:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getNavigationBlocked; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return showNavigationPrompt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getOnNavigationConfirmed; });
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
function getNavigationBlocked(state) {
  return state.views.admin.navigationBlock.blocked;
}
function showNavigationPrompt(state) {
  return state.views.admin.navigationBlock.showNavigationPrompt;
}
function getOnNavigationConfirmed(state) {
  return state.views.admin.navigationBlock.onNavigationConfirmed;
}

/***/ }),

/***/ 1683:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLogs = getLogs;
exports.getAudits = getAudits;
exports.getConfig = getConfig;
exports.getLdapGroups = getLdapGroups;
exports.getLdapGroupsCount = getLdapGroupsCount;
exports.getEnvironmentConfig = getEnvironmentConfig;
exports.getComplianceReports = getComplianceReports;
exports.getClusterInfo = getClusterInfo;
exports.getUserAccessTokens = getUserAccessTokens; // Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

function getLogs(state) {
  return state.entities.admin.logs;
}

function getAudits(state) {
  return state.entities.admin.audits;
}

function getConfig(state) {
  return state.entities.admin.config;
}

function getLdapGroups(state) {
  return state.entities.admin.ldapGroups;
}

function getLdapGroupsCount(state) {
  return state.entities.admin.ldapGroupsCount;
}

function getEnvironmentConfig(state) {
  return state.entities.admin.environmentConfig;
}

function getComplianceReports(state) {
  return state.entities.admin.complianceReports;
}

function getClusterInfo(state) {
  return state.entities.admin.clusterInfo;
}

function getUserAccessTokens(state) {
  return state.entities.admin.userAccessTokens;
}

/***/ }),

/***/ 1714:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PreviousIcon; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_intl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.



class PreviousIcon extends react__WEBPACK_IMPORTED_MODULE_0___default.a.PureComponent {
  render() {
    const className = 'fa fa-1x fa-angle-left' + (this.props.additionalClassName ? ' ' + this.props.additionalClassName : '');
    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_intl__WEBPACK_IMPORTED_MODULE_1__[/* FormattedMessage */ "c"], {
      id: "generic_icons.previous",
      defaultMessage: "Previous Icon"
    }, title => react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
      className: className,
      title: title
    }));
  }

}

_defineProperty(PreviousIcon, "propTypes", {
  additionalClassName: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string
});

_defineProperty(PreviousIcon, "defaultProps", {
  additionalClassName: null
});

/***/ }),

/***/ 1746:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBotAccounts = getBotAccounts; // Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

function getBotAccounts(state) {
  return state.entities.bots.accounts;
}

/***/ }),

/***/ 1816:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBot = createBot;
exports.patchBot = patchBot;
exports.loadBot = loadBot;
exports.loadBots = loadBots;
exports.disableBot = disableBot;
exports.enableBot = enableBot;
exports.assignBot = assignBot;

var _client = __webpack_require__(27);

var _action_types = __webpack_require__(8);

var _helpers = __webpack_require__(117); // Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.


var BOTS_PER_PAGE_DEFAULT = 20;

function createBot(bot) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.createBot,
    onSuccess: _action_types.BotTypes.RECEIVED_BOT_ACCOUNT,
    params: [bot]
  });
}

function patchBot(botUserId, botPatch) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.patchBot,
    onSuccess: _action_types.BotTypes.RECEIVED_BOT_ACCOUNT,
    params: [botUserId, botPatch]
  });
}

function loadBot(botUserId) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getBot,
    onSuccess: _action_types.BotTypes.RECEIVED_BOT_ACCOUNT,
    params: [botUserId]
  });
}

function loadBots() {
  var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var perPage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BOTS_PER_PAGE_DEFAULT;
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getBotsIncludeDeleted,
    onSuccess: _action_types.BotTypes.RECEIVED_BOT_ACCOUNTS,
    params: [page, perPage]
  });
}

function disableBot(botUserId) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.disableBot,
    onSuccess: _action_types.BotTypes.RECEIVED_BOT_ACCOUNT,
    params: [botUserId]
  });
}

function enableBot(botUserId) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.enableBot,
    onSuccess: _action_types.BotTypes.RECEIVED_BOT_ACCOUNT,
    params: [botUserId]
  });
}

function assignBot(botUserId, newOwnerId) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.assignBot,
    onSuccess: _action_types.BotTypes.RECEIVED_BOT_ACCOUNT,
    params: [botUserId, newOwnerId]
  });
}

/***/ }),

/***/ 1958:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getScheme = getScheme;
exports.getSchemes = getSchemes;
exports.createScheme = createScheme;
exports.deleteScheme = deleteScheme;
exports.patchScheme = patchScheme;
exports.getSchemeTeams = getSchemeTeams;
exports.getSchemeChannels = getSchemeChannels;

__webpack_require__(83);

__webpack_require__(84);

var _client = __webpack_require__(27);

var _action_types = __webpack_require__(8);

var _constants = __webpack_require__(17);

var _reduxBatchedActions = __webpack_require__(132);

var _helpers = __webpack_require__(117);

var _errors = __webpack_require__(105);

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function getScheme(schemeId
/*: string*/
)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getScheme,
    onRequest: _action_types.SchemeTypes.GET_SCHEME_REQUEST,
    onSuccess: [_action_types.SchemeTypes.RECEIVED_SCHEME, _action_types.SchemeTypes.GET_SCHEME_SUCCESS],
    onFailure: _action_types.SchemeTypes.GET_SCHEME_FAILURE,
    params: [schemeId]
  });
}

function getSchemes(scope
/*: SchemeScope*/
)
/*: ActionFunc*/
{
  var page
  /*: number*/
  = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var perPage
  /*: number*/
  = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _constants.General.PAGE_SIZE_DEFAULT;
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getSchemes,
    onRequest: _action_types.SchemeTypes.GET_SCHEMES_REQUEST,
    onSuccess: [_action_types.SchemeTypes.RECEIVED_SCHEMES, _action_types.SchemeTypes.GET_SCHEMES_SUCCESS],
    onFailure: _action_types.SchemeTypes.GET_SCHEMES_FAILURE,
    params: [scope, page, perPage]
  });
}

function createScheme(scheme
/*: Scheme*/
)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.createScheme,
    onRequest: _action_types.SchemeTypes.CREATE_SCHEME_REQUEST,
    onSuccess: [_action_types.SchemeTypes.CREATED_SCHEME, _action_types.SchemeTypes.CREATE_SCHEME_SUCCESS],
    onFailure: _action_types.SchemeTypes.CREATE_SCHEME_FAILURE,
    params: [scheme]
  });
}

function deleteScheme(schemeId
/*: string*/
)
/*: ActionFunc*/
{
  return (
    /*#__PURE__*/
    function () {
      var _ref = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee(dispatch, getState) {
        var data;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                dispatch({
                  type: _action_types.SchemeTypes.DELETE_SCHEME_REQUEST,
                  data: null
                }, getState);
                data = null;
                _context.prev = 2;
                _context.next = 5;
                return _client.Client4.deleteScheme(schemeId);

              case 5:
                data = _context.sent;
                _context.next = 13;
                break;

              case 8:
                _context.prev = 8;
                _context.t0 = _context["catch"](2);
                (0, _helpers.forceLogoutIfNecessary)(_context.t0, dispatch, getState);
                dispatch((0, _reduxBatchedActions.batchActions)([{
                  type: _action_types.SchemeTypes.DELETE_SCHEME_FAILURE,
                  error: _context.t0
                }, (0, _errors.logError)(_context.t0)]), getState);
                return _context.abrupt("return", {
                  error: _context.t0
                });

              case 13:
                dispatch({
                  type: _action_types.SchemeTypes.DELETED_SCHEME,
                  data: {
                    schemeId: schemeId
                  }
                }, getState);
                dispatch({
                  type: _action_types.SchemeTypes.DELETE_SCHEME_SUCCESS,
                  data: null
                }, getState);
                return _context.abrupt("return", {
                  data: data
                });

              case 16:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[2, 8]]);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }()
  );
}

function patchScheme(schemeId
/*: string*/
, scheme
/*: SchemePatch*/
)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.patchScheme,
    onRequest: _action_types.SchemeTypes.PATCH_SCHEME_REQUEST,
    onSuccess: [_action_types.SchemeTypes.PATCHED_SCHEME, _action_types.SchemeTypes.PATCH_SCHEME_SUCCESS],
    onFailure: _action_types.SchemeTypes.PATCH_SCHEME_FAILURE,
    params: [schemeId, scheme]
  });
}

function getSchemeTeams(schemeId
/*: string*/
)
/*: ActionFunc*/
{
  var page
  /*: number*/
  = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var perPage
  /*: number*/
  = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _constants.General.PAGE_SIZE_DEFAULT;
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getSchemeTeams,
    onRequest: _action_types.SchemeTypes.GET_SCHEME_TEAMS_REQUEST,
    onSuccess: [_action_types.SchemeTypes.RECEIVED_SCHEME_TEAMS, _action_types.SchemeTypes.GET_SCHEME_TEAMS_SUCCESS],
    onFailure: _action_types.SchemeTypes.GET_SCHEME_TEAMS_FAILURE,
    params: [schemeId, page, perPage]
  });
}

function getSchemeChannels(schemeId
/*: string*/
)
/*: ActionFunc*/
{
  var page
  /*: number*/
  = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var perPage
  /*: number*/
  = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _constants.General.PAGE_SIZE_DEFAULT;
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getSchemeChannels,
    onRequest: _action_types.SchemeTypes.GET_SCHEME_CHANNELS_REQUEST,
    onSuccess: [_action_types.SchemeTypes.RECEIVED_SCHEME_CHANNELS, _action_types.SchemeTypes.GET_SCHEME_CHANNELS_SUCCESS],
    onFailure: _action_types.SchemeTypes.GET_SCHEME_CHANNELS_FAILURE,
    params: [schemeId, page, perPage]
  });
}

/***/ }),

/***/ 1959:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSchemes = getSchemes;
exports.getScheme = getScheme;
exports.makeGetSchemeChannels = makeGetSchemeChannels;
exports.makeGetSchemeTeams = makeGetSchemeTeams;

__webpack_require__(36);

__webpack_require__(19);

__webpack_require__(20);

__webpack_require__(13);

__webpack_require__(419);

__webpack_require__(12);

var _reselect = __webpack_require__(94);

var _channels = __webpack_require__(15);

var _teams = __webpack_require__(32);

var _schemes = __webpack_require__(3416);

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function _iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function getSchemes(state
/*: GlobalState*/
)
/*: { [string]: Scheme }*/
{
  return state.entities.schemes.schemes;
}

function getScheme(state
/*: GlobalState*/
, id
/*: string*/
)
/*: Scheme*/
{
  var schemes = getSchemes(state);
  return schemes[id];
}

function makeGetSchemeChannels() {
  return (0, _reselect.createSelector)(_channels.getAllChannels, function (state, props
  /*: {schemeId: string}*/
  ) {
    return getScheme(state, props.schemeId);
  }, function (allChannels, scheme) {
    if (!scheme) {
      return [];
    }

    if (scheme.scope === _schemes.ScopeTypes.TEAM) {
      var msg = "Not implemented: scheme '".concat(scheme.id, "' is team-scope but 'getSchemeChannels' only accepts channel-scoped schemes.");
      console.log(msg); // eslint-disable-line no-console

      return [];
    }

    var schemeChannels
    /*: Array<Channel>*/
    = []; // $FlowFixMe

    Object.entries(allChannels).forEach(function (item
    /*: [string, Channel]*/
    ) {
      var _item = _slicedToArray(item, 2),
          channel
      /*: Channel*/
      = _item[1];

      if (channel.scheme_id === scheme.id) {
        schemeChannels.push(channel);
      }
    });
    return schemeChannels;
  })
  /*: (GlobalState, {schemeId: string}) => Array<Channel>*/
  ;
}

function makeGetSchemeTeams() {
  return (0, _reselect.createSelector)(_teams.getTeams, function (state, props
  /*: {schemeId: string}*/
  ) {
    return getScheme(state, props.schemeId);
  }, function (allTeams, scheme) {
    if (!scheme) {
      return [];
    }

    if (scheme.scope === _schemes.ScopeTypes.CHANNEL) {
      var msg = "Error: scheme '".concat(scheme.id, "' is channel-scoped but 'getSchemeChannels' only accepts team-scoped schemes.");
      console.log(msg); // eslint-disable-line no-console

      return [];
    }

    var schemeTeams
    /*: Array<Team>*/
    = []; // $FlowFixMe

    Object.entries(allTeams).forEach(function (item
    /*: [string, Team]*/
    ) {
      var _item2 = _slicedToArray(item, 2),
          team
      /*: Team*/
      = _item2[1];

      if (team.scheme_id === scheme.id) {
        schemeTeams.push(team);
      }
    });
    return schemeTeams;
  })
  /*: (GlobalState, {schemeId: string}) => Array<Team>*/
  ;
}

/***/ }),

/***/ 1966:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/react-redux/es/index.js + 15 modules
var es = __webpack_require__(405);

// EXTERNAL MODULE: ./mattermost-redux/selectors/entities/users.js
var users = __webpack_require__(10);

// EXTERNAL MODULE: ./mattermost-redux/selectors/entities/channels.js
var channels = __webpack_require__(15);

// EXTERNAL MODULE: ./node_modules/prop-types/index.js
var prop_types = __webpack_require__(6);
var prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);

// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(1);
var react_default = /*#__PURE__*/__webpack_require__.n(react);

// EXTERNAL MODULE: ./node_modules/react-intl/lib/index.es.js + 1 modules
var index_es = __webpack_require__(52);

// EXTERNAL MODULE: ./utils/utils.jsx + 1 modules
var utils = __webpack_require__(22);

// EXTERNAL MODULE: ./utils/i18n.jsx
var i18n = __webpack_require__(53);

// CONCATENATED MODULE: ./components/audit_table/audit_table.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





const holders = Object(index_es["g" /* defineMessages */])({
  sessionRevoked: {
    id: Object(i18n["b" /* t */])('audit_table.sessionRevoked'),
    defaultMessage: 'The session with id {sessionId} was revoked'
  },
  channelCreated: {
    id: Object(i18n["b" /* t */])('audit_table.channelCreated'),
    defaultMessage: 'Created the {channelName} channel'
  },
  establishedDM: {
    id: Object(i18n["b" /* t */])('audit_table.establishedDM'),
    defaultMessage: 'Established a direct message channel with {username}'
  },
  nameUpdated: {
    id: Object(i18n["b" /* t */])('audit_table.nameUpdated'),
    defaultMessage: 'Updated the {channelName} channel name'
  },
  headerUpdated: {
    id: Object(i18n["b" /* t */])('audit_table.headerUpdated'),
    defaultMessage: 'Updated the {channelName} channel header'
  },
  channelDeleted: {
    id: Object(i18n["b" /* t */])('audit_table.channelDeleted'),
    defaultMessage: 'Archived the channel with the URL {url}'
  },
  userAdded: {
    id: Object(i18n["b" /* t */])('audit_table.userAdded'),
    defaultMessage: 'Added {username} to the {channelName} channel'
  },
  userRemoved: {
    id: Object(i18n["b" /* t */])('audit_table.userRemoved'),
    defaultMessage: 'Removed {username} to the {channelName} channel'
  },
  attemptedRegisterApp: {
    id: Object(i18n["b" /* t */])('audit_table.attemptedRegisterApp'),
    defaultMessage: 'Attempted to register a new OAuth Application with ID {id}'
  },
  attemptedAllowOAuthAccess: {
    id: Object(i18n["b" /* t */])('audit_table.attemptedAllowOAuthAccess'),
    defaultMessage: 'Attempted to allow a new OAuth service access'
  },
  successfullOAuthAccess: {
    id: Object(i18n["b" /* t */])('audit_table.successfullOAuthAccess'),
    defaultMessage: 'Successfully gave a new OAuth service access'
  },
  failedOAuthAccess: {
    id: Object(i18n["b" /* t */])('audit_table.failedOAuthAccess'),
    defaultMessage: 'Failed to allow a new OAuth service access - the redirect URI did not match the previously registered callback'
  },
  attemptedOAuthToken: {
    id: Object(i18n["b" /* t */])('audit_table.attemptedOAuthToken'),
    defaultMessage: 'Attempted to get an OAuth access token'
  },
  successfullOAuthToken: {
    id: Object(i18n["b" /* t */])('audit_table.successfullOAuthToken'),
    defaultMessage: 'Successfully added a new OAuth service'
  },
  oauthTokenFailed: {
    id: Object(i18n["b" /* t */])('audit_table.oauthTokenFailed'),
    defaultMessage: 'Failed to get an OAuth access token - {token}'
  },
  attemptedLogin: {
    id: Object(i18n["b" /* t */])('audit_table.attemptedLogin'),
    defaultMessage: 'Attempted to login'
  },
  authenticated: {
    id: Object(i18n["b" /* t */])('audit_table.authenticated'),
    defauleMessage: 'Successfully authenticated'
  },
  successfullLogin: {
    id: Object(i18n["b" /* t */])('audit_table.successfullLogin'),
    defaultMessage: 'Successfully logged in'
  },
  failedLogin: {
    id: Object(i18n["b" /* t */])('audit_table.failedLogin'),
    defaultMessage: 'FAILED login attempt'
  },
  updatePicture: {
    id: Object(i18n["b" /* t */])('audit_table.updatePicture'),
    defaultMessage: 'Updated your profile picture'
  },
  updateGeneral: {
    id: Object(i18n["b" /* t */])('audit_table.updateGeneral'),
    defaultMessage: 'Updated the general settings of your account'
  },
  attemptedPassword: {
    id: Object(i18n["b" /* t */])('audit_table.attemptedPassword'),
    defaultMessage: 'Attempted to change password'
  },
  successfullPassword: {
    id: Object(i18n["b" /* t */])('audit_table.successfullPassword'),
    defaultMessage: 'Successfully changed password'
  },
  failedPassword: {
    id: Object(i18n["b" /* t */])('audit_table.failedPassword'),
    defaultMessage: 'Failed to change password - tried to update user password who was logged in through OAuth'
  },
  updatedRol: {
    id: Object(i18n["b" /* t */])('audit_table.updatedRol'),
    defaultMessage: 'Updated user role(s) to '
  },
  member: {
    id: Object(i18n["b" /* t */])('audit_table.member'),
    defaultMessage: 'member'
  },
  accountActive: {
    id: Object(i18n["b" /* t */])('audit_table.accountActive'),
    defaultMessage: 'Account activated'
  },
  accountInactive: {
    id: Object(i18n["b" /* t */])('audit_table.accountInactive'),
    defaultMessage: 'Account deactivated'
  },
  by: {
    id: Object(i18n["b" /* t */])('audit_table.by'),
    defaultMessage: ' by {username}'
  },
  byAdmin: {
    id: Object(i18n["b" /* t */])('audit_table.byAdmin'),
    defaultMessage: ' by an admin'
  },
  sentEmail: {
    id: Object(i18n["b" /* t */])('audit_table.sentEmail'),
    defaultMessage: 'Sent an email to {email} to reset your password'
  },
  attemptedReset: {
    id: Object(i18n["b" /* t */])('audit_table.attemptedReset'),
    defaultMessage: 'Attempted to reset password'
  },
  successfullReset: {
    id: Object(i18n["b" /* t */])('audit_table.successfullReset'),
    defaultMessage: 'Successfully reset password'
  },
  updateGlobalNotifications: {
    id: Object(i18n["b" /* t */])('audit_table.updateGlobalNotifications'),
    defaultMessage: 'Updated your global notification settings'
  },
  attemptedWebhookCreate: {
    id: Object(i18n["b" /* t */])('audit_table.attemptedWebhookCreate'),
    defaultMessage: 'Attempted to create a webhook'
  },
  succcessfullWebhookCreate: {
    id: Object(i18n["b" /* t */])('audit_table.successfullWebhookCreate'),
    defaultMessage: 'Successfully created a webhook'
  },
  failedWebhookCreate: {
    id: Object(i18n["b" /* t */])('audit_table.failedWebhookCreate'),
    defaultMessage: 'Failed to create a webhook - bad channel permissions'
  },
  attemptedWebhookDelete: {
    id: Object(i18n["b" /* t */])('audit_table.attemptedWebhookDelete'),
    defaultMessage: 'Attempted to delete a webhook'
  },
  successfullWebhookDelete: {
    id: Object(i18n["b" /* t */])('audit_table.successfullWebhookDelete'),
    defaultMessage: 'Successfully deleted a webhook'
  },
  failedWebhookDelete: {
    id: Object(i18n["b" /* t */])('audit_table.failedWebhookDelete'),
    defaultMessage: 'Failed to delete a webhook - inappropriate conditions'
  },
  logout: {
    id: Object(i18n["b" /* t */])('audit_table.logout'),
    defaultMessage: 'Logged out of your account'
  },
  verified: {
    id: Object(i18n["b" /* t */])('audit_table.verified'),
    defaultMessage: 'Successfully verified your email address'
  },
  revokedAll: {
    id: Object(i18n["b" /* t */])('audit_table.revokedAll'),
    defaultMessage: 'Revoked all current sessions for the team'
  },
  loginAttempt: {
    id: Object(i18n["b" /* t */])('audit_table.loginAttempt'),
    defaultMessage: ' (Login attempt)'
  },
  loginFailure: {
    id: Object(i18n["b" /* t */])('audit_table.loginFailure'),
    defaultMessage: ' (Login failure)'
  },
  attemptedLicenseAdd: {
    id: Object(i18n["b" /* t */])('audit_table.attemptedLicenseAdd'),
    defaultMessage: 'Attempted to add new license'
  },
  successfullLicenseAdd: {
    id: Object(i18n["b" /* t */])('audit_table.successfullLicenseAdd'),
    defaultMessage: 'Successfully added new license'
  },
  failedExpiredLicenseAdd: {
    id: Object(i18n["b" /* t */])('audit_table.failedExpiredLicenseAdd'),
    defaultMessage: 'Failed to add a new license as it has either expired or not yet been started'
  },
  failedInvalidLicenseAdd: {
    id: Object(i18n["b" /* t */])('audit_table.failedInvalidLicenseAdd'),
    defaultMessage: 'Failed to add an invalid license'
  },
  licenseRemoved: {
    id: Object(i18n["b" /* t */])('audit_table.licenseRemoved'),
    defaultMessage: 'Successfully removed a license'
  }
});

function AuditTable(props) {
  var accessList = [];
  const {
    formatMessage
  } = props.intl;

  for (var i = 0; i < props.audits.length; i++) {
    const audit = props.audits[i];
    const auditInfo = formatAuditInfo(audit, formatMessage, props.currentUser, props.getByName, props.getUser);
    let uContent;

    if (props.showUserId) {
      const profile = props.getUser(auditInfo.userId);
      const data = profile ? profile.email : auditInfo.userId;
      uContent = react_default.a.createElement("td", {
        className: "word-break--all"
      }, data);
    }

    let iContent;

    if (props.showIp) {
      iContent = react_default.a.createElement("td", {
        className: "whitespace--nowrap word-break--all"
      }, auditInfo.ip);
    }

    let sContent;

    if (props.showSession) {
      sContent = react_default.a.createElement("td", {
        className: "whitespace--nowrap word-break--all"
      }, auditInfo.sessionId);
    }

    let descStyle = '';

    if (auditInfo.desc.toLowerCase().indexOf('fail') !== -1) {
      descStyle = ' color--error';
    }

    accessList[i] = react_default.a.createElement("tr", {
      key: audit.id
    }, react_default.a.createElement("td", {
      className: "whitespace--nowrap word-break--all"
    }, auditInfo.timestamp), uContent, react_default.a.createElement("td", {
      className: 'word-break--all' + descStyle
    }, auditInfo.desc), iContent, sContent);
  }

  let userIdContent;

  if (props.showUserId) {
    userIdContent = react_default.a.createElement("th", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "audit_table.userId",
      defaultMessage: "User ID"
    }));
  }

  let ipContent;

  if (props.showIp) {
    ipContent = react_default.a.createElement("th", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "audit_table.ip",
      defaultMessage: "IP Address"
    }));
  }

  let sessionContent;

  if (props.showSession) {
    sessionContent = react_default.a.createElement("th", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "audit_table.session",
      defaultMessage: "Session ID"
    }));
  }

  return react_default.a.createElement("table", {
    className: "table"
  }, react_default.a.createElement("thead", null, react_default.a.createElement("tr", null, react_default.a.createElement("th", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: "audit_table.timestamp",
    defaultMessage: "Timestamp"
  })), userIdContent, react_default.a.createElement("th", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: "audit_table.action",
    defaultMessage: "Action"
  })), ipContent, sessionContent)), react_default.a.createElement("tbody", null, accessList));
}

AuditTable.propTypes = {
  intl: index_es["i" /* intlShape */].isRequired,
  audits: prop_types_default.a.array.isRequired,
  showUserId: prop_types_default.a.bool,
  showIp: prop_types_default.a.bool,
  showSession: prop_types_default.a.bool,
  currentUser: prop_types_default.a.object.isRequired,
  getUser: prop_types_default.a.func.isRequired,
  getByName: prop_types_default.a.func.isRequired
};
/* harmony default export */ var audit_table = (Object(index_es["h" /* injectIntl */])(AuditTable));
function formatAuditInfo(audit, formatMessage, currentUser, getByName, getUser) {
  const actionURL = audit.action.replace(/\/api\/v[1-9]/, '');
  let auditDesc = '';

  if (actionURL.indexOf('/channels') === 0) {
    const channelInfo = audit.extra_info.split(' ');
    const channelNameField = channelInfo[0].split('=');
    let channelURL = '';
    let channelObj;
    let channelName = '';

    if (channelNameField.indexOf('name') >= 0) {
      channelURL = channelNameField[channelNameField.indexOf('name') + 1];
      channelObj = getByName(channelURL);

      if (channelObj) {
        channelName = channelObj.display_name;
      } else {
        channelName = channelURL;
      }
    }

    switch (actionURL) {
      case '/channels/create':
        auditDesc = formatMessage(holders.channelCreated, {
          channelName
        });
        break;

      case '/channels/create_direct':
        auditDesc = formatMessage(holders.establishedDM, {
          username: Object(utils["v" /* getDirectTeammate */])(channelObj.id).username
        });
        break;

      case '/channels/update':
        auditDesc = formatMessage(holders.nameUpdated, {
          channelName
        });
        break;

      case '/channels/update_desc': // support the old path

      case '/channels/update_header':
        auditDesc = formatMessage(holders.headerUpdated, {
          channelName
        });
        break;

      default:
        {
          let userIdField = [];
          let userId = '';
          let username = '';

          if (channelInfo[1]) {
            userIdField = channelInfo[1].split('=');

            if (userIdField.indexOf('user_id') >= 0) {
              userId = userIdField[userIdField.indexOf('user_id') + 1];
              var profile = getUser(userId);

              if (profile) {
                username = profile.username;
              }
            }
          }

          if (/\/channels\/[A-Za-z0-9]+\/delete/.test(actionURL)) {
            auditDesc = formatMessage(holders.channelDeleted, {
              url: channelURL
            });
          } else if (/\/channels\/[A-Za-z0-9]+\/add/.test(actionURL)) {
            auditDesc = formatMessage(holders.userAdded, {
              username,
              channelName
            });
          } else if (/\/channels\/[A-Za-z0-9]+\/remove/.test(actionURL)) {
            auditDesc = formatMessage(holders.userRemoved, {
              username,
              channelName
            });
          }

          break;
        }
    }
  } else if (actionURL.indexOf('/oauth') === 0) {
    const oauthInfo = audit.extra_info.split(' ');

    switch (actionURL) {
      case '/oauth/register':
        {
          const clientIdField = oauthInfo[0].split('=');

          if (clientIdField[0] === 'client_id') {
            auditDesc = formatMessage(holders.attemptedRegisterApp, {
              id: clientIdField[1]
            });
          }

          break;
        }

      case '/oauth/allow':
        if (oauthInfo[0] === 'attempt') {
          auditDesc = formatMessage(holders.attemptedAllowOAuthAccess);
        } else if (oauthInfo[0] === 'success') {
          auditDesc = formatMessage(holders.successfullOAuthAccess);
        } else if (oauthInfo[0] === 'fail - redirect_uri did not match registered callback') {
          auditDesc = formatMessage(holders.failedOAuthAccess);
        }

        break;

      case '/oauth/access_token':
        if (oauthInfo[0] === 'attempt') {
          auditDesc = formatMessage(holders.attemptedOAuthToken);
        } else if (oauthInfo[0] === 'success') {
          auditDesc = formatMessage(holders.successfullOAuthToken);
        } else {
          const oauthTokenFailure = oauthInfo[0].split('-');

          if (oauthTokenFailure[0].trim() === 'fail' && oauthTokenFailure[1]) {
            auditDesc = formatMessage(oauthTokenFailure, {
              token: oauthTokenFailure[1].trim()
            });
          }
        }

        break;

      default:
        break;
    }
  } else if (actionURL.indexOf('/users') === 0) {
    const userInfo = audit.extra_info.split(' ');

    switch (actionURL) {
      case '/users/login':
        if (userInfo[0] === 'attempt') {
          auditDesc = formatMessage(holders.attemptedLogin);
        } else if (userInfo[0] === 'success') {
          auditDesc = formatMessage(holders.successfullLogin);
        } else if (userInfo[0] === 'authenticated') {
          auditDesc = formatMessage(holders.authenticated);
        } else if (userInfo[0]) {
          auditDesc = formatMessage(holders.failedLogin);
        }

        break;

      case '/users/revoke_session':
        auditDesc = formatMessage(holders.sessionRevoked, {
          sessionId: userInfo[0].split('=')[1]
        });
        break;

      case '/users/newimage':
        auditDesc = formatMessage(holders.updatePicture);
        break;

      case '/users/update':
        auditDesc = formatMessage(holders.updateGeneral);
        break;

      case '/users/newpassword':
        if (userInfo[0] === 'attempted') {
          auditDesc = formatMessage(holders.attemptedPassword);
        } else if (userInfo[0] === 'completed') {
          auditDesc = formatMessage(holders.successfullPassword);
        } else if (userInfo[0] === 'failed - tried to update user password who was logged in through oauth') {
          auditDesc = formatMessage(holders.failedPassword);
        }

        break;

      case '/users/update_roles':
        {
          const userRoles = userInfo[0].split('=')[1];
          auditDesc = formatMessage(holders.updatedRol);

          if (userRoles.trim()) {
            auditDesc += userRoles;
          } else {
            auditDesc += formatMessage(holders.member);
          }

          break;
        }

      case '/users/update_active':
        {
          const updateType = userInfo[0].split('=')[0];
          const updateField = userInfo[0].split('=')[1];
          /* Either describes account activation/deactivation or a revoked session as part of an account deactivation */

          if (updateType === 'active') {
            if (updateField === 'true') {
              auditDesc = formatMessage(holders.accountActive);
            } else if (updateField === 'false') {
              auditDesc = formatMessage(holders.accountInactive);
            }

            const actingUserInfo = userInfo[1].split('=');

            if (actingUserInfo[0] === 'session_user') {
              const actingUser = getUser(actingUserInfo[1]);
              const user = currentUser;

              if (user && actingUser && Object(utils["ab" /* isSystemAdmin */])(user.roles)) {
                auditDesc += formatMessage(holders.by, {
                  username: actingUser.username
                });
              } else if (user && actingUser) {
                auditDesc += formatMessage(holders.byAdmin);
              }
            }
          } else if (updateType === 'session_id') {
            auditDesc = formatMessage(holders.sessionRevoked, {
              sessionId: updateField
            });
          }

          break;
        }

      case '/users/send_password_reset':
        auditDesc = formatMessage(holders.sentEmail, {
          email: userInfo[0].split('=')[1]
        });
        break;

      case '/users/reset_password':
        if (userInfo[0] === 'attempt') {
          auditDesc = formatMessage(holders.attemptedReset);
        } else if (userInfo[0] === 'success') {
          auditDesc = formatMessage(holders.successfullReset);
        }

        break;

      case '/users/update_notify':
        auditDesc = formatMessage(holders.updateGlobalNotifications);
        break;

      default:
        break;
    }
  } else if (actionURL.indexOf('/hooks') === 0) {
    const webhookInfo = audit.extra_info;

    switch (actionURL) {
      case '/hooks/incoming/create':
        if (webhookInfo === 'attempt') {
          auditDesc = formatMessage(holders.attemptedWebhookCreate);
        } else if (webhookInfo === 'success') {
          auditDesc = formatMessage(holders.succcessfullWebhookCreate);
        } else if (webhookInfo === 'fail - bad channel permissions') {
          auditDesc = formatMessage(holders.failedWebhookCreate);
        }

        break;

      case '/hooks/incoming/delete':
        if (webhookInfo === 'attempt') {
          auditDesc = formatMessage(holders.attemptedWebhookDelete);
        } else if (webhookInfo === 'success') {
          auditDesc = formatMessage(holders.successfullWebhookDelete);
        } else if (webhookInfo === 'fail - inappropriate conditions') {
          auditDesc = formatMessage(holders.failedWebhookDelete);
        }

        break;

      default:
        break;
    }
  } else if (actionURL.indexOf('/license') === 0) {
    const licenseInfo = audit.extra_info;

    switch (actionURL) {
      case '/license/add':
        if (licenseInfo === 'attempt') {
          auditDesc = formatMessage(holders.attemptedLicenseAdd);
        } else if (licenseInfo === 'success') {
          auditDesc = formatMessage(holders.successfullLicenseAdd);
        } else if (licenseInfo === 'failed - expired or non-started license') {
          auditDesc = formatMessage(holders.failedExpiredLicenseAdd);
        } else if (licenseInfo === 'failed - invalid license') {
          auditDesc = formatMessage(holders.failedInvalidLicenseAdd);
        }

        break;

      case '/license/remove':
        auditDesc = formatMessage(holders.licenseRemoved);
        break;

      default:
        break;
    }
  } else if (actionURL.indexOf('/admin/download_compliance_report') === 0) {
    auditDesc = Object(utils["qb" /* toTitleCase */])(audit.extra_info);
  } else {
    switch (actionURL) {
      case '/logout':
        auditDesc = formatMessage(holders.logout);
        break;

      case '/verify_email':
        auditDesc = formatMessage(holders.verified);
        break;

      default:
        break;
    }
  }
  /* If all else fails... */


  if (!auditDesc) {
    /* Currently not called anywhere */
    if (audit.extra_info.indexOf('revoked_all=') >= 0) {
      auditDesc = formatMessage(holders.revokedAll);
    } else {
      let actionDesc = '';

      if (actionURL && actionURL.lastIndexOf('/') !== -1) {
        actionDesc = actionURL.substring(actionURL.lastIndexOf('/') + 1).replace('_', ' ');
        actionDesc = Object(utils["qb" /* toTitleCase */])(actionDesc);
      }

      let extraInfoDesc = '';

      if (audit.extra_info) {
        extraInfoDesc = audit.extra_info;

        if (extraInfoDesc.indexOf('=') !== -1) {
          extraInfoDesc = extraInfoDesc.substring(extraInfoDesc.indexOf('=') + 1);
        }
      }

      auditDesc = actionDesc + ' ' + extraInfoDesc;
    }
  }

  const date = new Date(audit.create_at);
  const auditInfo = {};
  auditInfo.timestamp = react_default.a.createElement("div", null, react_default.a.createElement("div", null, react_default.a.createElement(index_es["a" /* FormattedDate */], {
    value: date,
    day: "2-digit",
    month: "short",
    year: "numeric"
  })), react_default.a.createElement("div", null, react_default.a.createElement(index_es["d" /* FormattedTime */], {
    value: date,
    hour: "2-digit",
    minute: "2-digit"
  })));
  auditInfo.userId = audit.user_id;
  auditInfo.desc = auditDesc;
  auditInfo.ip = audit.ip_address;
  auditInfo.sessionId = audit.session_id;
  return auditInfo;
}
// CONCATENATED MODULE: ./components/audit_table/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





function mapStateToProps(state) {
  return {
    currentUser: Object(users["getCurrentUser"])(state),
    getUser: userId => Object(users["getUser"])(state, userId),
    getByName: channelName => Object(channels["getChannelByName"])(state, channelName)
  };
}

/* harmony default export */ var components_audit_table = __webpack_exports__["a"] = (Object(es["connect"])(mapStateToProps)(audit_table));

/***/ }),

/***/ 2234:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 2237:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 3413:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createJob = createJob;
exports.getJob = getJob;
exports.getJobs = getJobs;
exports.getJobsByType = getJobsByType;
exports.cancelJob = cancelJob;

var _action_types = __webpack_require__(8);

var _client = __webpack_require__(27);

var _constants = __webpack_require__(17);

var _helpers = __webpack_require__(117); // Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
// @flow


function createJob(job
/*: Job*/
)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.createJob,
    onRequest: _action_types.JobTypes.CREATE_JOB_REQUEST,
    onSuccess: [_action_types.JobTypes.RECEIVED_JOB, _action_types.JobTypes.CREATE_JOB_SUCCESS],
    onFailure: _action_types.JobTypes.CREATE_JOB_FAILURE,
    params: [job]
  });
}

function getJob(id
/*: string*/
)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getJob,
    onRequest: _action_types.JobTypes.GET_JOB_REQUEST,
    onSuccess: [_action_types.JobTypes.RECEIVED_JOB, _action_types.JobTypes.GET_JOB_SUCCESS],
    onFailure: _action_types.JobTypes.GET_JOB_FAILURE,
    params: [id]
  });
}

function getJobs()
/*: ActionFunc*/
{
  var page
  /*: number*/
  = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var perPage
  /*: number*/
  = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _constants.General.JOBS_CHUNK_SIZE;
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getJobs,
    onRequest: _action_types.JobTypes.GET_JOBS_REQUEST,
    onSuccess: [_action_types.JobTypes.RECEIVED_JOBS, _action_types.JobTypes.GET_JOBS_SUCCESS],
    onFailure: _action_types.JobTypes.GET_JOBS_FAILURE,
    params: [page, perPage]
  });
}

function getJobsByType(type
/*: JobType*/
)
/*: ActionFunc*/
{
  var page
  /*: number*/
  = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var perPage
  /*: number*/
  = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _constants.General.JOBS_CHUNK_SIZE;
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getJobsByType,
    onRequest: _action_types.JobTypes.GET_JOBS_REQUEST,
    onSuccess: [_action_types.JobTypes.RECEIVED_JOBS, _action_types.JobTypes.RECEIVED_JOBS_BY_TYPE, _action_types.JobTypes.GET_JOBS_SUCCESS],
    onFailure: _action_types.JobTypes.GET_JOBS_FAILURE,
    params: [type, page, perPage]
  });
}

function cancelJob(job
/*: string*/
)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.cancelJob,
    onRequest: _action_types.JobTypes.CANCEL_JOB_REQUEST,
    onSuccess: _action_types.JobTypes.CANCEL_JOB_SUCCESS,
    onFailure: _action_types.JobTypes.CANCEL_JOB_FAILURE,
    params: [job]
  });
}

/***/ }),

/***/ 3414:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAllJobs = getAllJobs;
exports.getJobsByType = getJobsByType;
exports.makeGetJobsByType = makeGetJobsByType;

var _reselect = __webpack_require__(94); // Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
// @flow


function getAllJobs(state
/*: GlobalState*/
)
/*: IDMappedObjects<Job>*/
{
  return state.entities.jobs.jobs;
}

function getJobsByType(state
/*: GlobalState*/
)
/*: {[JobType]: Array<Job>}*/
{
  return state.entities.jobs.jobsByTypeList;
}

function makeGetJobsByType(type
/*: JobType*/
)
/*: (state: GlobalState) => Array<Job>*/
{
  return (0, _reselect.createSelector)(getJobsByType, function (jobsByType) {
    return jobsByType[type] || [];
  });
}

/***/ }),

/***/ 3416:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScopeTypes = void 0; // Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
// @flow

var ScopeTypes = {
  TEAM: 'team',
  CHANNEL: 'channel'
};
exports.ScopeTypes = ScopeTypes;

/***/ }),

/***/ 3417:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "files/f7199ef7df8f38eedb0ee2ca2b4ad893.png";

/***/ }),

/***/ 3418:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "files/d5143a5f3054c6cc9b04a6313998d24e.png";

/***/ }),

/***/ 3425:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./node_modules/react-redux/es/index.js + 15 modules
var es = __webpack_require__(405);

// EXTERNAL MODULE: ./node_modules/redux/es/redux.js
var redux = __webpack_require__(16);

// EXTERNAL MODULE: ./mattermost-redux/actions/admin.js
var admin = __webpack_require__(1609);

// EXTERNAL MODULE: ./mattermost-redux/actions/roles.js
var actions_roles = __webpack_require__(245);

// EXTERNAL MODULE: ./mattermost-redux/selectors/entities/admin.js
var entities_admin = __webpack_require__(1683);

// EXTERNAL MODULE: ./node_modules/react-router/esm/react-router.js + 1 modules
var react_router = __webpack_require__(433);

// EXTERNAL MODULE: ./mattermost-redux/selectors/entities/general.js
var general = __webpack_require__(26);

// EXTERNAL MODULE: ./mattermost-redux/selectors/entities/roles.js
var entities_roles = __webpack_require__(90);

// EXTERNAL MODULE: ./mattermost-redux/selectors/entities/users.js
var entities_users = __webpack_require__(10);

// EXTERNAL MODULE: ./actions/admin_actions.jsx
var admin_actions = __webpack_require__(1573);

// EXTERNAL MODULE: ./selectors/views/admin.js
var views_admin = __webpack_require__(1645);

// EXTERNAL MODULE: ./node_modules/bootstrap/dist/js/npm.js
var npm = __webpack_require__(2187);

// EXTERNAL MODULE: ./node_modules/prop-types/index.js
var prop_types = __webpack_require__(6);
var prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);

// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(1);
var react_default = /*#__PURE__*/__webpack_require__.n(react);

// EXTERNAL MODULE: ./components/announcement_bar/index.js + 9 modules
var announcement_bar = __webpack_require__(1664);

// EXTERNAL MODULE: ./components/system_notice/index.js + 2 modules
var system_notice = __webpack_require__(1965);

// EXTERNAL MODULE: ./components/modal_controller/index.js + 1 modules
var modal_controller = __webpack_require__(2273);

// EXTERNAL MODULE: ./node_modules/react-intl/lib/index.es.js + 1 modules
var index_es = __webpack_require__(52);

// EXTERNAL MODULE: ./node_modules/react-bootstrap/es/Overlay.js
var Overlay = __webpack_require__(1852);

// EXTERNAL MODULE: ./node_modules/react-bootstrap/es/Tooltip.js
var Tooltip = __webpack_require__(1998);

// EXTERNAL MODULE: ./i18n/i18n.jsx
var i18n = __webpack_require__(416);

// EXTERNAL MODULE: ./utils/constants.jsx
var constants = __webpack_require__(0);

// EXTERNAL MODULE: ./mattermost-redux/constants/index.js
var mattermost_redux_constants = __webpack_require__(17);

// CONCATENATED MODULE: ./utils/policy_roles_adapter.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

const MAPPING = {
  enableTeamCreation: {
    true: [{
      roleName: 'system_user',
      permission: mattermost_redux_constants["Permissions"].CREATE_TEAM,
      shouldHave: true
    }],
    false: [{
      roleName: 'system_user',
      permission: mattermost_redux_constants["Permissions"].CREATE_TEAM,
      shouldHave: false
    }]
  },
  editOthersPosts: {
    true: [{
      roleName: 'system_admin',
      permission: mattermost_redux_constants["Permissions"].EDIT_OTHERS_POSTS,
      shouldHave: true
    }, {
      roleName: 'team_admin',
      permission: mattermost_redux_constants["Permissions"].EDIT_OTHERS_POSTS,
      shouldHave: true
    }],
    false: [{
      roleName: 'team_admin',
      permission: mattermost_redux_constants["Permissions"].EDIT_OTHERS_POSTS,
      shouldHave: false
    }, {
      roleName: 'system_admin',
      permission: mattermost_redux_constants["Permissions"].EDIT_OTHERS_POSTS,
      shouldHave: true
    }]
  },
  enableOnlyAdminIntegrations: {
    true: [{
      roleName: 'team_user',
      permission: mattermost_redux_constants["Permissions"].MANAGE_INCOMING_WEBHOOKS,
      shouldHave: false
    }, {
      roleName: 'team_user',
      permission: mattermost_redux_constants["Permissions"].MANAGE_OUTGOING_WEBHOOKS,
      shouldHave: false
    }, {
      roleName: 'team_user',
      permission: mattermost_redux_constants["Permissions"].MANAGE_SLASH_COMMANDS,
      shouldHave: false
    }, {
      roleName: 'system_user',
      permission: mattermost_redux_constants["Permissions"].MANAGE_OAUTH,
      shouldHave: false
    }],
    false: [{
      roleName: 'team_user',
      permission: mattermost_redux_constants["Permissions"].MANAGE_INCOMING_WEBHOOKS,
      shouldHave: true
    }, {
      roleName: 'team_user',
      permission: mattermost_redux_constants["Permissions"].MANAGE_OUTGOING_WEBHOOKS,
      shouldHave: true
    }, {
      roleName: 'team_user',
      permission: mattermost_redux_constants["Permissions"].MANAGE_SLASH_COMMANDS,
      shouldHave: true
    }, {
      roleName: 'system_user',
      permission: mattermost_redux_constants["Permissions"].MANAGE_OAUTH,
      shouldHave: true
    }]
  }
};
/**
 * Get the roles that were changed (but unsaved) for given mapping key/values.
 *
 * @param {object} mappingValues key/value to indicate which mapping items to use to update the roles.
 * @param {object} roles same structure as returned by mattermost-redux `getRoles`.
 * @return {object} the updated roles (only) in the same structure as returned by mattermost-redux `getRoles`.
 */

function rolesFromMapping(mappingValues, roles) {
  const rolesClone = JSON.parse(JSON.stringify(roles)); // Purge roles that aren't present in MAPPING, we don't care about them.

  purgeNonPertinentRoles(rolesClone);
  Object.keys(MAPPING).forEach(mappingKey => {
    const value = mappingValues[mappingKey];

    if (value) {
      mutateRolesBasedOnMapping(mappingKey, value, rolesClone);
    }
  }); // Purge roles that didn't have permissions changes, we don't care about them.

  Object.entries(rolesClone).forEach(([roleName, roleClone]) => {
    const originalPermissionSet = new Set(roles[roleName].permissions);
    const newPermissionSet = new Set(roleClone.permissions);
    const difference = [...newPermissionSet].filter(x => !originalPermissionSet.has(x));

    if (originalPermissionSet.size === newPermissionSet.size && difference.length === 0) {
      delete rolesClone[roleName];
    }
  });
  return rolesClone;
}
/**
 * Get the mapping value that matches for a given set of roles.
 *
 * @param {string} key to match under in the mapping.
 * @param {object} roles same structure as returned by mattermost-redux `getRoles`.
 * @return {string} the value that the roles/permissions assignment match in the mapping.
 */

function mappingValueFromRoles(key, roles) {
  for (const o of mappingPartIterator(MAPPING[key], roles)) {
    if (o.allConditionsAreMet) {
      return o.value;
    }
  }

  throw new Error(`No matching mapping value found for key '${key}' with the given roles.`);
}

function purgeNonPertinentRoles(roles) {
  const pertinentRoleNames = roleNamesInMapping();
  Object.keys(roles).forEach(key => {
    if (!pertinentRoleNames.includes(key)) {
      delete roles[key];
    }
  });
}

function mutateRolesBasedOnMapping(mappingKey, value, roles) {
  const roleRules = MAPPING[mappingKey][value];

  if (typeof roleRules === 'undefined') {
    throw new Error(`Value '${value}' not present in MAPPING for key '${mappingKey}'.`);
  }

  roleRules.forEach(item => {
    const role = roles[item.roleName];

    if (item.shouldHave) {
      addPermissionToRole(item.permission, role);
    } else {
      removePermissionFromRole(item.permission, role);
    }
  });
} // Returns a set of the role names present in MAPPING.


function roleNamesInMapping() {
  let roleNames = [];
  Object.values(MAPPING).forEach(v1 => {
    Object.values(v1).forEach(v2 => {
      const names = v2.map(item => item.roleName); // eslint-disable-line max-nested-callbacks

      roleNames = roleNames.concat(names);
    });
  });
  return [...new Set(roleNames.map(item => item))];
}

function* mappingPartIterator(mappingPart, roles) {
  for (const value in mappingPart) {
    if (mappingPart.hasOwnProperty(value)) {
      const roleRules = mappingPart[value];
      const hasUnmetCondition = roleRules.some(item => {
        const role = roles[item.roleName];
        return item.shouldHave && !role.permissions.includes(item.permission) || !item.shouldHave && role.permissions.includes(item.permission);
      });
      yield {
        value,
        allConditionsAreMet: !hasUnmetCondition
      };
    }
  }
}

function addPermissionToRole(permission, role) {
  if (!role.permissions.includes(permission)) {
    role.permissions.push(permission);
  }
}

function removePermissionFromRole(permission, role) {
  const permissionIndex = role.permissions.indexOf(permission);

  if (permissionIndex !== -1) {
    role.permissions.splice(permissionIndex, 1);
  }
}
// EXTERNAL MODULE: ./utils/utils.jsx + 1 modules
var utils = __webpack_require__(22);

// EXTERNAL MODULE: ./utils/i18n.jsx
var utils_i18n = __webpack_require__(53);

// EXTERNAL MODULE: ./components/widgets/loading/loading_wrapper.jsx
var loading_wrapper = __webpack_require__(1608);

// EXTERNAL MODULE: ./components/icon/success_icon.jsx
var success_icon = __webpack_require__(1695);

// EXTERNAL MODULE: ./components/icon/warning_icon.jsx
var warning_icon = __webpack_require__(1621);

// CONCATENATED MODULE: ./components/admin_console/request_button/request_button.jsx
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.








/**
 * A button which, when clicked, performs an action and displays
 * its outcome as either success, or failure accompanied by the
 * `message` property of the `err` object.
 */

class request_button_RequestButton extends react_default.a.Component {
  constructor(props) {
    super(props);
    this.handleRequest = this.handleRequest.bind(this);
    this.state = {
      busy: false,
      fail: null,
      success: false
    };
  }

  handleRequest(e) {
    e.preventDefault();
    this.setState({
      busy: true,
      fail: null,
      success: false
    });

    const doRequest = () => {
      //eslint-disable-line func-style
      this.props.requestAction(() => {
        this.setState({
          busy: false,
          success: true
        });
      }, err => {
        let errMsg = err.message;

        if (this.props.includeDetailedError) {
          errMsg += ' - ' + err.detailed_error;
        }

        this.setState({
          busy: false,
          fail: errMsg
        });
      });
    };

    if (this.props.saveNeeded) {
      this.props.saveConfigAction(doRequest);
    } else {
      doRequest();
    }
  }

  render() {
    let message = null;

    if (this.state.fail) {
      message = react_default.a.createElement("div", null, react_default.a.createElement("div", {
        className: "alert alert-warning"
      }, react_default.a.createElement(warning_icon["a" /* default */], null), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: this.props.errorMessage.id,
        defaultMessage: this.props.errorMessage.defaultMessage,
        values: {
          error: this.state.fail
        }
      })));
    } else if (this.state.success && this.props.showSuccessMessage) {
      message = react_default.a.createElement("div", null, react_default.a.createElement("div", {
        className: "alert alert-success"
      }, react_default.a.createElement(success_icon["a" /* default */], null), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: this.props.successMessage.id,
        defaultMessage: this.props.successMessage.defaultMessage
      })));
    }

    let widgetClassNames = 'col-sm-8';
    let label = null;

    if (this.props.label) {
      label = react_default.a.createElement("label", {
        className: "control-label col-sm-4"
      }, this.props.label);
    } else {
      widgetClassNames = 'col-sm-offset-4 ' + widgetClassNames;
    }

    return react_default.a.createElement("div", {
      className: "form-group"
    }, label, react_default.a.createElement("div", {
      className: widgetClassNames
    }, react_default.a.createElement("div", null, react_default.a.createElement("button", {
      className: "btn btn-default",
      onClick: this.handleRequest,
      disabled: this.props.disabled
    }, react_default.a.createElement(loading_wrapper["a" /* default */], {
      loading: this.state.busy,
      text: this.props.loadingText || utils["gb" /* localizeMessage */]('admin.requestButton.loading', ' Loading...')
    }, this.props.buttonText)), this.props.alternativeActionElement, message), react_default.a.createElement("div", {
      className: "help-text"
    }, this.props.helpText)));
  }

}

_defineProperty(request_button_RequestButton, "propTypes", {
  /**
   * The action to be called to carry out the request.
   */
  requestAction: prop_types_default.a.func.isRequired,

  /**
   * A component that displays help text for the request button.
   *
   * Typically, this will be a <FormattedMessage/>.
   */
  helpText: prop_types_default.a.element,

  /**
   * A component to be displayed on the button.
   *
   * Typically, this will be a <FormattedMessage/>
   */
  loadingText: prop_types_default.a.string,

  /**
   * A component to be displayed on the button.
   *
   * Typically, this will be a <FormattedMessage/>
   */
  buttonText: prop_types_default.a.element.isRequired,

  /**
   * The element to display as the field label.
   *
   * Typically, this will be a <FormattedMessage/>
   */
  label: prop_types_default.a.element,

  /**
   * True if the button form control should be disabled, otherwise false.
   */
  disabled: prop_types_default.a.bool,

  /**
   * True if the config needs to be saved before running the request, otherwise false.
   *
   * If set to true, the action provided in the `saveConfigAction` property will be
   * called before the action provided in the `requestAction` property, with the later
   * only being called if the former is successful.
   */
  saveNeeded: prop_types_default.a.bool,

  /**
   * Action to be called to save the config, if saveNeeded is set to true.
   */
  saveConfigAction: prop_types_default.a.func,

  /**
   * True if the success message should be show when the request completes successfully,
   * otherwise false.
   */
  showSuccessMessage: prop_types_default.a.bool,

  /**
   * The message to show when the request completes successfully.
   */
  successMessage: prop_types_default.a.shape({
    /**
     * The i18n string ID for the success message.
     */
    id: prop_types_default.a.string.isRequired,

    /**
     * The i18n default value for the success message.
     */
    defaultMessage: prop_types_default.a.string.isRequired
  }),

  /**
   * The message to show when the request returns an error.
   */
  errorMessage: prop_types_default.a.shape({
    /**
     * The i18n string ID for the error message.
     */
    id: prop_types_default.a.string.isRequired,

    /**
     * The i18n default value for the error message.
     *
     * The placeholder {error} may be used to include the error message returned
     * by the server in response to the failed request.
     */
    defaultMessage: prop_types_default.a.string.isRequired
  }),

  /**
   * True if the {error} placeholder for the `errorMessage` property should include both
   * the `message` and `detailed_error` properties of the error returned from the server,
   * otherwise false to include only the `message` property.
   */
  includeDetailedError: prop_types_default.a.bool,

  /**
   * An element to display adjacent to the request button.
   */
  alternativeActionElement: prop_types_default.a.element
});

_defineProperty(request_button_RequestButton, "defaultProps", {
  disabled: false,
  saveNeeded: false,
  showSuccessMessage: true,
  includeDetailedError: false,
  successMessage: {
    id: Object(utils_i18n["b" /* t */])('admin.requestButton.requestSuccess'),
    defaultMessage: 'Test Successful'
  },
  errorMessage: {
    id: Object(utils_i18n["b" /* t */])('admin.requestButton.requestFailure'),
    defaultMessage: 'Test Failure: {error}'
  }
});
// EXTERNAL MODULE: ./components/loading_screen.jsx
var loading_screen = __webpack_require__(1569);

// CONCATENATED MODULE: ./components/admin_console/set_by_env.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.


/* harmony default export */ var set_by_env = (function () {
  return react_default.a.createElement("div", {
    className: "alert alert-warning"
  }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: "admin.set_by_env",
    defaultMessage: "This setting has been set through an environment variable. It cannot be changed through the System Console."
  }));
});
// CONCATENATED MODULE: ./components/admin_console/setting.jsx
function setting_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.



class setting_Settings extends react["PureComponent"] {
  render() {
    const {
      children,
      setByEnv,
      helpText,
      inputId,
      label
    } = this.props;
    return react_default.a.createElement("div", {
      className: "form-group"
    }, react_default.a.createElement("label", {
      className: "control-label col-sm-4",
      htmlFor: inputId
    }, label), react_default.a.createElement("div", {
      className: "col-sm-8"
    }, children, react_default.a.createElement("div", {
      className: "help-text"
    }, helpText), setByEnv ? react_default.a.createElement(set_by_env, null) : null));
  }

}

setting_defineProperty(setting_Settings, "propTypes", {
  inputId: prop_types_default.a.string,
  label: prop_types_default.a.node.isRequired,
  children: prop_types_default.a.node.isRequired,
  helpText: prop_types_default.a.node,
  setByEnv: prop_types_default.a.bool
});
// CONCATENATED MODULE: ./components/admin_console/boolean_setting.jsx
function boolean_setting_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





class boolean_setting_BooleanSetting extends react_default.a.Component {
  constructor(props) {
    super(props);
    this.handleChange = this.handleChange.bind(this);
  }

  handleChange(e) {
    this.props.onChange(this.props.id, e.target.value === 'true');
  }

  render() {
    let helpText;

    if (this.props.disabled && this.props.disabledText) {
      helpText = react_default.a.createElement("div", null, react_default.a.createElement("span", {
        className: "admin-console__disabled-text"
      }, this.props.disabledText), this.props.helpText);
    } else {
      helpText = this.props.helpText;
    }

    return react_default.a.createElement(setting_Settings, {
      label: this.props.label,
      helpText: helpText,
      setByEnv: this.props.setByEnv
    }, react_default.a.createElement("a", {
      name: this.props.id
    }), react_default.a.createElement("label", {
      className: "radio-inline"
    }, react_default.a.createElement("input", {
      type: "radio",
      value: "true",
      id: utils["h" /* createSafeId */](this.props.id) + 'true',
      name: this.props.id,
      checked: this.props.value,
      onChange: this.handleChange,
      disabled: this.props.disabled || this.props.setByEnv
    }), this.props.trueText), react_default.a.createElement("label", {
      className: "radio-inline"
    }, react_default.a.createElement("input", {
      type: "radio",
      value: "false",
      id: utils["h" /* createSafeId */](this.props.id) + 'false',
      name: this.props.id,
      checked: !this.props.value,
      onChange: this.handleChange,
      disabled: this.props.disabled || this.props.setByEnv
    }), this.props.falseText));
  }

}

boolean_setting_defineProperty(boolean_setting_BooleanSetting, "propTypes", {
  id: prop_types_default.a.string.isRequired,
  label: prop_types_default.a.node.isRequired,
  value: prop_types_default.a.bool.isRequired,
  onChange: prop_types_default.a.func.isRequired,
  trueText: prop_types_default.a.node,
  falseText: prop_types_default.a.node,
  disabled: prop_types_default.a.bool.isRequired,
  setByEnv: prop_types_default.a.bool.isRequired,
  disabledText: prop_types_default.a.node,
  helpText: prop_types_default.a.node.isRequired
});

boolean_setting_defineProperty(boolean_setting_BooleanSetting, "defaultProps", {
  trueText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: "admin.true",
    defaultMessage: "true"
  }),
  falseText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: "admin.false",
    defaultMessage: "false"
  }),
  disabled: false
});
// EXTERNAL MODULE: ./components/widgets/settings/text_setting.jsx + 1 modules
var text_setting = __webpack_require__(2268);

// CONCATENATED MODULE: ./components/admin_console/text_setting.jsx
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





const AdminTextSetting = props => {
  const {
    setByEnv,
    disabled,
    ...sharedProps
  } = props;
  return react_default.a.createElement(text_setting["a" /* default */], _extends({}, sharedProps, {
    labelClassName: "col-sm-4",
    inputClassName: "col-sm-8",
    disabled: disabled || setByEnv,
    footer: setByEnv ? react_default.a.createElement(set_by_env, null) : null
  }));
};

AdminTextSetting.propTypes = { ...text_setting["a" /* default */].propTypes,
  setByEnv: prop_types_default.a.bool.isRequired
};
/* harmony default export */ var admin_console_text_setting = (AdminTextSetting);
// CONCATENATED MODULE: ./components/admin_console/dropdown_setting.jsx
function dropdown_setting_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.



class dropdown_setting_DropdownSetting extends react_default.a.Component {
  constructor(...args) {
    super(...args);

    dropdown_setting_defineProperty(this, "handleChange", e => {
      this.props.onChange(this.props.id, e.target.value);
    });
  }

  render() {
    const options = [];

    for (const {
      value,
      text
    } of this.props.values) {
      options.push(react_default.a.createElement("option", {
        value: value,
        key: value
      }, text));
    }

    return react_default.a.createElement(setting_Settings, {
      label: this.props.label,
      inputId: this.props.id,
      helpText: this.props.helpText,
      setByEnv: this.props.setByEnv
    }, react_default.a.createElement("select", {
      className: "form-control",
      id: this.props.id,
      value: this.props.value,
      onChange: this.handleChange,
      disabled: this.props.disabled || this.props.setByEnv
    }, options));
  }

}

dropdown_setting_defineProperty(dropdown_setting_DropdownSetting, "propTypes", {
  id: prop_types_default.a.string.isRequired,
  values: prop_types_default.a.array.isRequired,
  label: prop_types_default.a.node.isRequired,
  value: prop_types_default.a.string.isRequired,
  onChange: prop_types_default.a.func.isRequired,
  disabled: prop_types_default.a.bool,
  setByEnv: prop_types_default.a.bool.isRequired,
  helpText: prop_types_default.a.node
});

dropdown_setting_defineProperty(dropdown_setting_DropdownSetting, "defaultProps", {
  isDisabled: false
});
// EXTERNAL MODULE: ./node_modules/react-select/dist/react-select.esm.js + 1 modules
var react_select_esm = __webpack_require__(1967);

// EXTERNAL MODULE: ./components/form_error.jsx
var form_error = __webpack_require__(1584);

// CONCATENATED MODULE: ./components/admin_console/multiselect_settings.jsx
function multiselect_settings_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





class multiselect_settings_MultiSelectSetting extends react_default.a.Component {
  constructor(props) {
    super(props);

    multiselect_settings_defineProperty(this, "calculateValue", () => {
      return this.props.selected.reduce((values, item) => {
        const found = this.props.values.find(e => {
          return e.value === item;
        });

        if (found !== null) {
          values.push(found);
        }

        return values;
      }, []);
    });

    multiselect_settings_defineProperty(this, "getOptionLabel", ({
      text
    }) => text);

    this.handleChange = this.handleChange.bind(this);
    this.state = {
      error: false
    };
  }

  handleChange(newValue) {
    const values = newValue.map(n => {
      return n.value;
    });

    if (this.props.selected.length > 0 && this.props.mustBePresent && values.join(',').indexOf(this.props.mustBePresent) === -1) {
      this.setState({
        error: this.props.notPresent
      });
    } else {
      this.props.onChange(this.props.id, values);
      this.setState({
        error: false
      });
    }
  }

  UNSAFE_componentWillReceiveProps(newProps) {
    // eslint-disable-line camelcase
    if (newProps.selected.length > 0 && newProps.mustBePresent && newProps.selected.join(',').indexOf(newProps.mustBePresent) === -1) {
      this.setState({
        error: this.props.notPresent
      });
    } else {
      this.setState({
        error: false
      });
    }
  }

  render() {
    return react_default.a.createElement(setting_Settings, {
      label: this.props.label,
      inputId: this.props.id,
      helpText: this.props.helpText,
      setByEnv: this.props.setByEnv
    }, react_default.a.createElement(react_select_esm["a" /* default */], {
      id: this.props.id,
      isMulti: true,
      getOptionLabel: this.getOptionLabel,
      options: this.props.values,
      delimiter: ',',
      clearable: false,
      disabled: this.props.disabled || this.props.setByEnv,
      noResultsText: this.props.noResultText,
      onChange: this.handleChange,
      value: this.calculateValue()
    }), react_default.a.createElement(form_error["a" /* default */], {
      error: this.state.error
    }));
  }

}

multiselect_settings_defineProperty(multiselect_settings_MultiSelectSetting, "propTypes", {
  id: prop_types_default.a.string.isRequired,
  values: prop_types_default.a.array.isRequired,
  label: prop_types_default.a.node.isRequired,
  selected: prop_types_default.a.array.isRequired,
  mustBePresent: prop_types_default.a.string,
  onChange: prop_types_default.a.func.isRequired,
  disabled: prop_types_default.a.bool,
  setByEnv: prop_types_default.a.bool.isRequired,
  helpText: prop_types_default.a.node,
  noResultText: prop_types_default.a.node,
  errorText: prop_types_default.a.node,
  notPresent: prop_types_default.a.node
});

multiselect_settings_defineProperty(multiselect_settings_MultiSelectSetting, "defaultProps", {
  disabled: false
});
// CONCATENATED MODULE: ./components/admin_console/radio_setting.jsx
function radio_setting_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.



class radio_setting_RadioSetting extends react_default.a.Component {
  constructor(props) {
    super(props);
    this.handleChange = this.handleChange.bind(this);
  }

  handleChange(e) {
    this.props.onChange(this.props.id, e.target.value);
  }

  render() {
    const options = [];

    for (const {
      value,
      text
    } of this.props.values) {
      options.push(react_default.a.createElement("div", {
        className: "radio",
        key: value
      }, react_default.a.createElement("label", null, react_default.a.createElement("input", {
        type: "radio",
        value: value,
        name: this.props.id,
        checked: value === this.props.value,
        onChange: this.handleChange,
        disabled: this.props.disabled || this.props.setByEnv
      }), text)));
    }

    return react_default.a.createElement(setting_Settings, {
      label: this.props.label,
      inputId: this.props.id,
      helpText: this.props.helpText,
      setByEnv: this.props.setByEnv
    }, options);
  }

}

radio_setting_defineProperty(radio_setting_RadioSetting, "propTypes", {
  id: prop_types_default.a.string.isRequired,
  values: prop_types_default.a.array.isRequired,
  label: prop_types_default.a.node.isRequired,
  value: prop_types_default.a.string.isRequired,
  onChange: prop_types_default.a.func.isRequired,
  disabled: prop_types_default.a.bool,
  setByEnv: prop_types_default.a.bool.isRequired,
  helpText: prop_types_default.a.node
});

radio_setting_defineProperty(radio_setting_RadioSetting, "defaultProps", {
  disabled: false
});
// EXTERNAL MODULE: ./node_modules/react-color/lib/index.js
var lib = __webpack_require__(2208);

// CONCATENATED MODULE: ./components/admin_console/color_setting.jsx
function color_setting_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




class color_setting_ColorSetting extends react_default.a.PureComponent {
  constructor(props) {
    super(props);

    color_setting_defineProperty(this, "handleChange", color => {
      this.props.onChange(this.props.id, color.hex);
    });

    color_setting_defineProperty(this, "togglePicker", () => {
      if (this.props.disabled) {
        this.setState({
          showPicker: false
        });
      } else {
        this.setState({
          showPicker: !this.state.showPicker
        });
      }
    });

    color_setting_defineProperty(this, "closePicker", e => {
      if (!e.target.closest('.' + this.getPickerClass())) {
        this.setState({
          showPicker: false
        });
      }
    });

    color_setting_defineProperty(this, "onTextInput", e => {
      this.props.onChange(this.props.id, e.target.value);
    });

    color_setting_defineProperty(this, "getPickerClass", () => {
      return this.props.id ? 'picker-' + this.props.id.replace('.', '-') : '';
    });

    this.state = {
      showPicker: false
    };
  }

  componentDidMount() {
    document.addEventListener('click', this.closePicker);
  }

  componentWillUnmount() {
    document.removeEventListener('click', this.closePicker);
  }

  render() {
    let picker;

    if (this.state.showPicker) {
      picker = react_default.a.createElement("div", {
        className: 'color-picker__popover ' + this.getPickerClass()
      }, react_default.a.createElement(lib["ChromePicker"], {
        color: this.props.value,
        onChange: this.handleChange
      }));
    }

    return react_default.a.createElement(setting_Settings, {
      label: this.props.label,
      helpText: this.props.helpText,
      inputId: this.props.id
    }, react_default.a.createElement("div", {
      className: "input-group color-picker colorpicker-element"
    }, react_default.a.createElement("input", {
      type: "text",
      className: "form-control",
      value: this.props.value,
      onChange: this.onTextInput,
      disabled: this.props.disabled
    }), react_default.a.createElement("span", {
      className: 'input-group-addon ' + this.getPickerClass(),
      onClick: this.togglePicker
    }, react_default.a.createElement("i", {
      style: {
        backgroundColor: this.props.value
      }
    })), picker));
  }

}

color_setting_defineProperty(color_setting_ColorSetting, "propTypes", {
  /*
   * The unique identifer for the admin console setting
   */
  id: prop_types_default.a.string.isRequired,

  /*
   * The text/jsx display name for the setting
   */
  label: prop_types_default.a.node.isRequired,

  /*
   * The text/jsx help text to display underneath the setting
   */
  helpText: prop_types_default.a.node,

  /*
   * The hex color value
   */
  value: prop_types_default.a.string.isRequired,

  /*
   * Function called when the input changes
   */
  onChange: prop_types_default.a.func,

  /*
   * Set to disable the setting
   */
  disabled: prop_types_default.a.bool
});
// EXTERNAL MODULE: ./node_modules/crypto-browserify/index.js
var crypto_browserify = __webpack_require__(2217);
var crypto_browserify_default = /*#__PURE__*/__webpack_require__.n(crypto_browserify);

// CONCATENATED MODULE: ./components/admin_console/generated_setting.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





class generated_setting_GeneratedSetting extends react_default.a.Component {
  static get propTypes() {
    return {
      id: prop_types_default.a.string.isRequired,
      label: prop_types_default.a.node.isRequired,
      placeholder: prop_types_default.a.string,
      value: prop_types_default.a.string.isRequired,
      onChange: prop_types_default.a.func.isRequired,
      disabled: prop_types_default.a.bool.isRequired,
      setByEnv: prop_types_default.a.bool.isRequired,
      disabledText: prop_types_default.a.node,
      helpText: prop_types_default.a.node.isRequired,
      regenerateText: prop_types_default.a.node,
      regenerateHelpText: prop_types_default.a.node
    };
  }

  static get defaultProps() {
    return {
      disabled: false,
      regenerateText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.regenerate",
        defaultMessage: "Regenerate"
      })
    };
  }

  constructor(props) {
    super(props);
    this.regenerate = this.regenerate.bind(this);
  }

  regenerate(e) {
    e.preventDefault();
    this.props.onChange(this.props.id, crypto_browserify_default.a.randomBytes(256).toString('base64').substring(0, 32));
  }

  render() {
    let disabledText = null;

    if (this.props.disabled && this.props.disabledText) {
      disabledText = react_default.a.createElement("div", {
        className: "admin-console__disabled-text"
      }, this.props.disabledText);
    }

    let regenerateHelpText = null;

    if (this.props.regenerateHelpText) {
      regenerateHelpText = react_default.a.createElement("div", {
        className: "help-text"
      }, this.props.regenerateHelpText);
    }

    let text = this.props.value;

    if (!text) {
      text = react_default.a.createElement("span", {
        className: "placeholder-text"
      }, this.props.placeholder);
    }

    return react_default.a.createElement("div", {
      className: "form-group"
    }, react_default.a.createElement("label", {
      className: "control-label col-sm-4",
      htmlFor: this.props.id
    }, this.props.label), react_default.a.createElement("div", {
      className: "col-sm-8"
    }, react_default.a.createElement("div", {
      className: "form-control disabled",
      id: this.props.id
    }, text), disabledText, react_default.a.createElement("div", {
      className: "help-text"
    }, this.props.helpText), react_default.a.createElement("div", {
      className: "help-text"
    }, react_default.a.createElement("button", {
      className: "btn btn-default",
      onClick: this.regenerate,
      disabled: this.props.disabled || this.props.setByEnv
    }, this.props.regenerateText)), regenerateHelpText, this.props.setByEnv ? react_default.a.createElement(set_by_env, null) : null));
  }

}
// EXTERNAL MODULE: ./components/suggestion/generic_user_provider.jsx
var generic_user_provider = __webpack_require__(1844);

// EXTERNAL MODULE: ./components/suggestion/suggestion_box.jsx
var suggestion_box = __webpack_require__(1652);

// EXTERNAL MODULE: ./components/suggestion/suggestion_list.jsx
var suggestion_list = __webpack_require__(1667);

// CONCATENATED MODULE: ./components/admin_console/user_autocomplete_setting.jsx
function user_autocomplete_setting_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






class user_autocomplete_setting_UserAutocompleteSetting extends react_default.a.Component {
  static get propTypes() {
    return {
      id: prop_types_default.a.string.isRequired,
      label: prop_types_default.a.node.isRequired,
      placeholder: prop_types_default.a.string,
      helpText: prop_types_default.a.node,
      value: prop_types_default.a.string,
      onChange: prop_types_default.a.func,
      disabled: prop_types_default.a.bool
    };
  }

  constructor(props) {
    super(props);

    user_autocomplete_setting_defineProperty(this, "handleChange", e => {
      this.props.onChange(this.props.id, e.target.value);
    });

    user_autocomplete_setting_defineProperty(this, "handleUserSelected", user => {
      this.props.onChange(this.props.id, user.username);
    });

    this.userSuggestionProviders = [new generic_user_provider["a" /* default */]()];
  }

  render() {
    return react_default.a.createElement(setting_Settings, {
      label: this.props.label,
      helpText: this.props.helpText,
      inputId: this.props.id
    }, react_default.a.createElement("div", {
      className: "admin-setting-user__dropdown"
    }, react_default.a.createElement(suggestion_box["a" /* default */], {
      id: 'admin_user_setting_' + this.props.id,
      className: "form-control",
      placeholder: this.props.placeholder,
      value: this.props.value,
      onChange: this.handleChange,
      onItemSelected: this.handleUserSelected,
      listComponent: suggestion_list["a" /* default */],
      listStyle: "bottom",
      providers: this.userSuggestionProviders,
      disabled: this.props.disabled,
      requiredCharacters: 0,
      openOnFocus: true
    })));
  }

}
// CONCATENATED MODULE: ./components/admin_console/settings_group.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.


class settings_group_SettingsGroup extends react_default.a.Component {
  static get propTypes() {
    return {
      show: prop_types_default.a.bool.isRequired,
      header: prop_types_default.a.node,
      children: prop_types_default.a.node,
      container: prop_types_default.a.bool
    };
  }

  static get defaultProps() {
    return {
      show: true,
      container: true
    };
  }

  render() {
    let wrapperClass = '';
    let contentClass = '';

    if (!this.props.show) {
      return null;
    }

    if (this.props.container) {
      wrapperClass = 'admin-console__wrapper';
      contentClass = 'admin-console__content';
    }

    let header = null;

    if (this.props.header) {
      header = react_default.a.createElement("h4", null, this.props.header);
    }

    return react_default.a.createElement("div", {
      className: wrapperClass
    }, react_default.a.createElement("div", {
      className: contentClass
    }, header, this.props.children));
  }

}
// EXTERNAL MODULE: ./mattermost-redux/actions/jobs.js
var jobs = __webpack_require__(3413);

// EXTERNAL MODULE: ./mattermost-redux/selectors/entities/jobs.js
var entities_jobs = __webpack_require__(3414);

// CONCATENATED MODULE: ./components/admin_console/jobs/table.jsx
function table_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






class table_JobTable extends react_default.a.PureComponent {
  constructor(props) {
    super(props);

    table_defineProperty(this, "getStatus", job => {
      const formatMessage = this.props.intl.formatMessage;

      if (job.status === constants["m" /* JobStatuses */].PENDING) {
        return react_default.a.createElement("span", {
          className: "status-icon-warning",
          title: formatMessage({
            id: 'admin.jobTable.jobId',
            defaultMessage: 'Job ID: '
          }) + job.id
        }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.jobTable.statusPending",
          defaultMessage: "Pending"
        }));
      } else if (job.status === constants["m" /* JobStatuses */].IN_PROGRESS) {
        return react_default.a.createElement("span", {
          className: "status-icon-warning",
          title: formatMessage({
            id: 'admin.jobTable.jobId',
            defaultMessage: 'Job ID: '
          }) + job.id
        }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.jobTable.statusInProgress",
          defaultMessage: "In Progress"
        }));
      } else if (job.status === constants["m" /* JobStatuses */].SUCCESS) {
        return react_default.a.createElement("span", {
          className: "status-icon-success",
          title: formatMessage({
            id: 'admin.jobTable.jobId',
            defaultMessage: 'Job ID: '
          }) + job.id
        }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.jobTable.statusSuccess",
          defaultMessage: "Success"
        }));
      } else if (job.status === constants["m" /* JobStatuses */].ERROR) {
        return react_default.a.createElement("span", {
          className: "status-icon-error",
          title: formatMessage({
            id: 'admin.jobTable.jobId',
            defaultMessage: 'Job ID: '
          }) + job.id
        }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.jobTable.statusError",
          defaultMessage: "Error"
        }));
      } else if (job.status === constants["m" /* JobStatuses */].CANCEL_REQUESTED) {
        return react_default.a.createElement("span", {
          className: "status-icon-warning",
          title: formatMessage({
            id: 'admin.jobTable.jobId',
            defaultMessage: 'Job ID: '
          }) + job.id
        }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.jobTable.statusCanceling",
          defaultMessage: "Canceling..."
        }));
      } else if (job.status === constants["m" /* JobStatuses */].CANCELED) {
        return react_default.a.createElement("span", {
          className: "status-icon-error",
          title: formatMessage({
            id: 'admin.jobTable.jobId',
            defaultMessage: 'Job ID: '
          }) + job.id
        }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.jobTable.statusCanceled",
          defaultMessage: "Canceled"
        }));
      }

      return react_default.a.createElement("span", {
        title: formatMessage({
          id: 'admin.jobTable.jobId',
          defaultMessage: 'Job ID: '
        }) + job.id
      }, job.status);
    });

    table_defineProperty(this, "getExtraInfoText", job => {
      if (job.data && job.data.error && job.data.error.length > 0) {
        return react_default.a.createElement("span", {
          title: job.data.error
        }, job.data.error);
      }

      if (this.props.getExtraInfoText) {
        return this.props.getExtraInfoText(job);
      }

      return react_default.a.createElement("span", null);
    });

    table_defineProperty(this, "getRunLength", job => {
      let millis = job.last_activity_at - job.start_at;

      if (job.status === constants["m" /* JobStatuses */].IN_PROGRESS) {
        const runningMillis = Date.now() - job.start_at;

        if (runningMillis > millis) {
          millis = runningMillis;
        }
      }

      let lastActivity = utils["gb" /* localizeMessage */]('admin.jobTable.lastActivityAt', 'Last Activity: ') + '--';

      if (job.last_activity_at > 0) {
        lastActivity = utils["gb" /* localizeMessage */]('admin.jobTable.lastActivityAt', 'Last Activity: ') + this.props.intl.formatDate(new Date(job.last_activity_at), {
          year: 'numeric',
          month: 'short',
          day: '2-digit'
        }) + ' - ' + this.props.intl.formatTime(new Date(job.last_activity_at), {
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit'
        });
      }

      var seconds = Math.round(millis / 1000);
      var minutes = Math.round(millis / (1000 * 60));

      if (millis <= 0 || job.status === constants["m" /* JobStatuses */].CANCELED) {
        return react_default.a.createElement("span", {
          className: "whitespace--nowrap"
        }, '--');
      }

      if (seconds <= 120) {
        return react_default.a.createElement("span", {
          className: "whitespace--nowrap",
          title: lastActivity
        }, seconds + utils["gb" /* localizeMessage */]('admin.jobTable.runLengthSeconds', ' seconds'));
      }

      return react_default.a.createElement("span", {
        className: "whitespace--nowrap",
        title: lastActivity
      }, minutes + utils["gb" /* localizeMessage */]('admin.jobTable.runLengthMinutes', ' minutes'));
    });

    table_defineProperty(this, "getFinishAt", (status, millis) => {
      if (millis === 0 || status === constants["m" /* JobStatuses */].PENDING || status === constants["m" /* JobStatuses */].IN_PROGRESS || status === constants["m" /* JobStatuses */].CANCEL_REQUESTED) {
        return react_default.a.createElement("span", {
          className: "whitespace--nowrap"
        }, '--');
      }

      const date = new Date(millis);
      return react_default.a.createElement("span", {
        className: "whitespace--nowrap"
      }, react_default.a.createElement(index_es["a" /* FormattedDate */], {
        value: date,
        day: "2-digit",
        month: "short",
        year: "numeric"
      }), ' - ', react_default.a.createElement(index_es["d" /* FormattedTime */], {
        value: date,
        hour: "2-digit",
        minute: "2-digit"
      }));
    });

    table_defineProperty(this, "reload", () => {
      this.setState({
        loading: true
      });
      this.props.actions.getJobsByType(this.props.jobType).then(() => {
        this.setState({
          loading: false
        });
      });
    });

    table_defineProperty(this, "handleCancelJob", async e => {
      e.preventDefault();
      const jobId = e.currentTarget.getAttribute('data-job-id');
      await this.props.actions.cancelJob(jobId);
      this.reload();
    });

    table_defineProperty(this, "handleCreateJob", async e => {
      e.preventDefault();
      const job = {
        type: this.props.jobType
      };
      await this.props.actions.createJob(job);
      this.reload();
    });

    table_defineProperty(this, "getCancelButton", job => {
      const formatMessage = this.props.intl.formatMessage;
      let cancelButton = null;

      if (!this.props.disabled && (job.status === constants["m" /* JobStatuses */].PENDING || job.status === constants["m" /* JobStatuses */].IN_PROGRESS)) {
        cancelButton = react_default.a.createElement("span", {
          "data-job-id": job.id,
          onClick: this.handleCancelJob,
          className: "job-table__cancel-button",
          title: formatMessage({
            id: 'admin.jobTable.cancelButton',
            defaultMessage: 'Cancel'
          })
        }, '×');
      }

      return cancelButton;
    });

    this.interval = null;
    this.state = {
      loading: true
    };
  }

  UNSAFE_componentWillMount() {
    // eslint-disable-line camelcase
    this.interval = setInterval(this.reload, 15000);
  }

  componentDidMount() {
    this.props.actions.getJobsByType(this.props.jobType).then(() => this.setState({
      loading: false
    }));
  }

  componentWillUnmount() {
    if (this.interval) {
      clearInterval(this.interval);
    }
  }

  render() {
    var items = this.props.jobs.map(job => {
      return react_default.a.createElement("tr", {
        key: job.id
      }, react_default.a.createElement("td", {
        width: "30px",
        className: "whitespace--nowrap text-center"
      }, this.getCancelButton(job)), react_default.a.createElement("td", {
        className: "whitespace--nowrap"
      }, this.getStatus(job)), react_default.a.createElement("td", {
        className: "whitespace--nowrap"
      }, this.getFinishAt(job.status, job.last_activity_at)), react_default.a.createElement("td", {
        className: "whitespace--nowrap"
      }, this.getRunLength(job)), react_default.a.createElement("td", null, this.getExtraInfoText(job)));
    });
    return react_default.a.createElement("div", {
      className: "job-table__panel"
    }, react_default.a.createElement("div", {
      className: "job-table__create-button"
    }, react_default.a.createElement("div", null, react_default.a.createElement("button", {
      className: "btn btn-default",
      onClick: this.handleCreateJob,
      disabled: this.props.disabled
    }, this.props.createJobButtonText)), react_default.a.createElement("div", {
      className: "help-text"
    }, this.props.createJobHelpText)), react_default.a.createElement("div", {
      className: "job-table__table"
    }, react_default.a.createElement("table", {
      className: "table"
    }, react_default.a.createElement("thead", null, react_default.a.createElement("tr", null, react_default.a.createElement("th", {
      width: "30px"
    }), react_default.a.createElement("th", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.jobTable.headerStatus",
      defaultMessage: "Status"
    })), react_default.a.createElement("th", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.jobTable.headerFinishAt",
      defaultMessage: "Finish Time"
    })), react_default.a.createElement("th", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.jobTable.headerRunTime",
      defaultMessage: "Run Time"
    })), react_default.a.createElement("th", {
      colSpan: "3"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.jobTable.headerExtraInfo",
      defaultMessage: "Details"
    })))), react_default.a.createElement("tbody", null, items))));
  }

}

table_defineProperty(table_JobTable, "propTypes", {
  /**
   * Used for formatting dates
   */
  intl: index_es["i" /* intlShape */].isRequired,

  /**
   * Array of jobs
   */
  jobs: prop_types_default.a.arrayOf(prop_types_default.a.object).isRequired,

  /**
   * Function called when displaying extra text.
   */
  getExtraInfoText: prop_types_default.a.func,

  /**
   * Grey buttons out when disabled
   */
  disabled: prop_types_default.a.bool,

  /**
   * Help text under the create job button
   */
  createJobHelpText: prop_types_default.a.element.isRequired,

  /**
   * Button text to create a new job
   */
  createJobButtonText: prop_types_default.a.element.isRequired,

  /**
   * The type of jobs to include in this table.
   */
  jobType: prop_types_default.a.string.isRequired,
  actions: prop_types_default.a.shape({
    getJobsByType: prop_types_default.a.func.isRequired,
    cancelJob: prop_types_default.a.func.isRequired,
    createJob: prop_types_default.a.func.isRequired
  }).isRequired
});

/* harmony default export */ var table = (Object(index_es["h" /* injectIntl */])(table_JobTable));
// CONCATENATED MODULE: ./components/admin_console/jobs/index.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






function mapStateToProps(state, ownProps) {
  return {
    jobs: entities_jobs["makeGetJobsByType"](ownProps.jobType)(state)
  };
}

function mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      getJobsByType: jobs["getJobsByType"],
      createJob: jobs["createJob"],
      cancelJob: jobs["cancelJob"]
    }, dispatch)
  };
}

/* harmony default export */ var admin_console_jobs = (Object(es["connect"])(mapStateToProps, mapDispatchToProps)(table));
// EXTERNAL MODULE: ./node_modules/jquery/src/jquery.js
var jquery = __webpack_require__(175);
var jquery_default = /*#__PURE__*/__webpack_require__.n(jquery);

// CONCATENATED MODULE: ./components/admin_console/file_upload_setting.jsx
function file_upload_setting_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






class file_upload_setting_FileUploadSetting extends setting_Settings {
  static get propTypes() {
    return {
      id: prop_types_default.a.string.isRequired,
      label: prop_types_default.a.node.isRequired,
      helpText: prop_types_default.a.node,
      uploadingText: prop_types_default.a.node,
      onSubmit: prop_types_default.a.func.isRequired,
      disabled: prop_types_default.a.bool,
      fileType: prop_types_default.a.string.isRequired,
      error: prop_types_default.a.string
    };
  }

  constructor(props) {
    super(props);

    file_upload_setting_defineProperty(this, "handleChange", () => {
      const files = this.refs.fileInput.files;

      if (files && files.length > 0) {
        this.setState({
          fileSelected: true,
          fileName: files[0].name
        });
      }
    });

    file_upload_setting_defineProperty(this, "handleSubmit", e => {
      e.preventDefault();
      jquery_default()(this.refs.upload_button).button('loading');
      this.props.onSubmit(this.props.id, this.refs.fileInput.files[0], error => {
        jquery_default()(this.refs.upload_button).button('reset');

        if (error) {
          utils["d" /* clearFileInput */](this.refs.fileInput);
        }
      });
    });

    this.state = {
      fileName: null,
      serverError: props.error
    };
  }

  render() {
    let serverError;

    if (this.state.serverError) {
      serverError = react_default.a.createElement("div", {
        className: "form-group has-error"
      }, react_default.a.createElement("label", {
        className: "control-label"
      }, this.state.serverError));
    }

    let btnClass = 'btn';

    if (this.state.fileSelected) {
      btnClass = 'btn btn-primary';
    }

    let fileName;

    if (this.state.fileName) {
      fileName = this.state.fileName;
    } else {
      fileName = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.file_upload.noFile",
        defaultMessage: "No file uploaded"
      });
    }

    return react_default.a.createElement(setting_Settings, {
      label: this.props.label,
      helpText: this.props.helpText,
      inputId: this.props.id
    }, react_default.a.createElement("div", null, react_default.a.createElement("div", {
      className: "file__upload"
    }, react_default.a.createElement("button", {
      className: "btn btn-default",
      disabled: this.props.disabled
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.file_upload.chooseFile",
      defaultMessage: "Choose File"
    })), react_default.a.createElement("input", {
      ref: "fileInput",
      type: "file",
      disabled: this.props.disabled,
      accept: this.props.fileType,
      onChange: this.handleChange
    })), react_default.a.createElement("button", {
      className: btnClass,
      disabled: !this.state.fileSelected,
      onClick: this.handleSubmit,
      ref: "upload_button",
      "data-loading-text": `<span class='glyphicon glyphicon-refresh glyphicon-refresh-animate'></span> ${this.props.uploadingText}`
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.file_upload.uploadFile",
      defaultMessage: "Upload"
    })), react_default.a.createElement("div", {
      className: "help-text no-margin"
    }, fileName), serverError));
  }

}
// CONCATENATED MODULE: ./components/admin_console/remove_file_setting.jsx
function remove_file_setting_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




class remove_file_setting_RemoveFileSetting extends setting_Settings {
  constructor(...args) {
    super(...args);

    remove_file_setting_defineProperty(this, "handleRemove", e => {
      e.preventDefault();
      jquery_default()(this.refs.remove_button).button('loading');
      this.props.onSubmit(this.props.id, () => {
        jquery_default()(this.refs.remove_button).button('reset');
      });
    });
  }

  static get propTypes() {
    return {
      id: prop_types_default.a.string.isRequired,
      label: prop_types_default.a.node.isRequired,
      helpText: prop_types_default.a.node,
      removeButtonText: prop_types_default.a.node.isRequired,
      removingText: prop_types_default.a.node,
      fileName: prop_types_default.a.string.isRequired,
      onSubmit: prop_types_default.a.func.isRequired,
      disabled: prop_types_default.a.bool
    };
  }

  render() {
    return react_default.a.createElement(setting_Settings, {
      label: this.props.label,
      helpText: this.props.helpText,
      inputId: this.props.id
    }, react_default.a.createElement("div", null, react_default.a.createElement("div", {
      className: "help-text remove-filename"
    }, this.props.fileName), react_default.a.createElement("button", {
      className: "btn btn-danger",
      onClick: this.handleRemove,
      ref: "remove_button",
      disabled: this.props.disabled,
      "data-loading-text": `<span class='glyphicon glyphicon-refresh glyphicon-refresh-animate'></span> ${this.props.removingText}`
    }, this.props.removeButtonText)));
  }

}
// EXTERNAL MODULE: ./node_modules/marked/lib/marked.js
var marked = __webpack_require__(89);
var marked_default = /*#__PURE__*/__webpack_require__.n(marked);

// EXTERNAL MODULE: ./components/formatted_markdown_message.jsx
var formatted_markdown_message = __webpack_require__(1564);

// CONCATENATED MODULE: ./components/admin_console/schema_text.jsx
function schema_text_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





class schema_text_SchemaText extends react_default.a.PureComponent {
  constructor(...args) {
    super(...args);

    schema_text_defineProperty(this, "renderTranslated", () => {
      const {
        isMarkdown,
        text,
        textDefault,
        textValues
      } = this.props;

      if (typeof text === 'object') {
        return text;
      }

      if (isMarkdown) {
        return react_default.a.createElement(formatted_markdown_message["b" /* default */], {
          id: text,
          defaultMessage: textDefault,
          values: textValues
        });
      }

      return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: text,
        values: textValues,
        defaultMessage: textDefault
      });
    });

    schema_text_defineProperty(this, "renderUntranslated", () => {
      if (this.props.isMarkdown) {
        const html = marked_default()(this.props.text, {
          breaks: true,
          sanitize: true,
          renderer: new formatted_markdown_message["a" /* CustomRenderer */]()
        });
        return react_default.a.createElement("span", {
          dangerouslySetInnerHTML: {
            __html: html
          }
        });
      }

      return react_default.a.createElement("span", null, this.props.text);
    });
  }

  render() {
    return this.props.isTranslated ? this.renderTranslated() : this.renderUntranslated();
  }

}

schema_text_defineProperty(schema_text_SchemaText, "propTypes", {
  isMarkdown: prop_types_default.a.bool,
  isTranslated: prop_types_default.a.bool,
  text: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.object]).isRequired,
  textDefault: prop_types_default.a.string,
  textValues: prop_types_default.a.object
});

schema_text_defineProperty(schema_text_SchemaText, "defaultProps", {
  isTranslated: true
});
// EXTERNAL MODULE: ./components/save_button.jsx
var save_button = __webpack_require__(1612);

// CONCATENATED MODULE: ./components/widgets/admin_console/admin_header.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.


class admin_header_AdminHeader extends react_default.a.Component {
  static get propTypes() {
    return {
      children: prop_types_default.a.node.isRequired
    };
  }

  render() {
    return react_default.a.createElement("div", {
      className: 'admin-console__header'
    }, this.props.children);
  }

}
// CONCATENATED MODULE: ./components/widgets/admin_console/formatted_admin_header.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





const FormattedAdminHeader = props => react_default.a.createElement(admin_header_AdminHeader, null, react_default.a.createElement(formatted_markdown_message["b" /* default */], {
  id: props.id,
  defaultMessage: props.defaultMessage,
  values: props.values
}));

FormattedAdminHeader.propTypes = {
  id: prop_types_default.a.string.isRequired,
  defaultMessage: prop_types_default.a.string.isRequired,
  values: prop_types_default.a.object
};
FormattedAdminHeader.defaultProps = {
  values: {}
};
/* harmony default export */ var formatted_admin_header = (FormattedAdminHeader);
// CONCATENATED MODULE: ./components/admin_console/schema_admin_settings.jsx
function schema_admin_settings_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





























class schema_admin_settings_SchemaAdminSettings extends react_default.a.Component {
  constructor(props) {
    super(props);

    schema_admin_settings_defineProperty(this, "handleSubmit", async e => {
      e.preventDefault();
      this.setState({
        saving: true,
        serverError: null
      });

      if (this.state.saveNeeded === 'both' || this.state.saveNeeded === 'permissions') {
        const settings = this.props.schema && this.props.schema.settings || [];
        const rolesBinding = settings.reduce((acc, val) => {
          if (val.type === constants["N" /* default */].SettingsTypes.TYPE_PERMISSION) {
            acc[val.permissions_mapping_name] = this.state[val.key].toString();
          }

          return acc;
        }, {});
        const updatedRoles = rolesFromMapping(rolesBinding, this.props.roles);
        let success = true;
        await Promise.all(Object.values(updatedRoles).map(async item => {
          try {
            await this.props.editRole(item);
          } catch (err) {
            success = false;
            this.setState({
              saving: false,
              serverError: err.message
            });
          }
        }));

        if (!success) {
          return;
        }
      }

      if (this.state.saveNeeded === 'both' || this.state.saveNeeded === 'config') {
        this.doSubmit(null, schema_admin_settings_SchemaAdminSettings.getStateFromConfig);
      } else {
        this.setState({
          saving: false,
          saveNeeded: false,
          serverError: null
        });
        this.props.setNavigationBlocked(false);
      }
    });

    schema_admin_settings_defineProperty(this, "renderTitle", () => {
      if (!this.props.schema) {
        return '';
      }

      if (this.props.schema.translate === false) {
        return react_default.a.createElement(admin_header_AdminHeader, null, this.props.schema.name || this.props.schema.id);
      }

      return react_default.a.createElement(formatted_admin_header, {
        id: this.props.schema.name || this.props.schema.id,
        defaultMessage: this.props.schema.name_default || this.props.schema.id
      });
    });

    schema_admin_settings_defineProperty(this, "renderBanner", setting => {
      if (!this.props.schema) {
        return react_default.a.createElement("span", null, '');
      }

      if (this.props.schema.translate === false) {
        return react_default.a.createElement("span", null, setting.label);
      }

      if (typeof setting.label === 'string') {
        if (setting.label_markdown) {
          return react_default.a.createElement(formatted_markdown_message["b" /* default */], {
            id: setting.label,
            values: setting.label_values,
            defaultMessage: setting.label_default
          });
        }

        return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: setting.label,
          defaultMessage: setting.label_default,
          values: setting.label_values
        });
      }

      return setting.label;
    });

    schema_admin_settings_defineProperty(this, "renderHelpText", setting => {
      if (!this.props.schema) {
        return react_default.a.createElement("span", null, '');
      }

      if (!setting.help_text) {
        return null;
      }

      let helpText;
      let isMarkdown;
      let helpTextValues;
      let helpTextDefault;

      if (setting.disabled_help_text && this.isDisabled(setting)) {
        helpText = setting.disabled_help_text;
        isMarkdown = setting.disabled_help_text_markdown;
        helpTextValues = setting.disabled_help_text_values;
        helpTextDefault = setting.disabled_help_text_default;
      } else {
        helpText = setting.help_text;
        isMarkdown = setting.help_text_markdown;
        helpTextValues = setting.help_text_values;
        helpTextDefault = setting.help_text_default;
      }

      return react_default.a.createElement(schema_text_SchemaText, {
        isMarkdown: isMarkdown,
        isTranslated: this.props.schema.translate,
        text: helpText,
        textDefault: helpTextDefault,
        textValues: helpTextValues
      });
    });

    schema_admin_settings_defineProperty(this, "renderLabel", setting => {
      if (!this.props.schema) {
        return '';
      }

      if (this.props.schema.translate === false) {
        return setting.label;
      }

      return utils["gb" /* localizeMessage */](setting.label, setting.label_default);
    });

    schema_admin_settings_defineProperty(this, "isDisabled", setting => {
      if (typeof setting.isDisabled === 'function') {
        return setting.isDisabled(this.props.config, this.state, this.props.license);
      }

      return Boolean(setting.isDisabled);
    });

    schema_admin_settings_defineProperty(this, "isHidden", setting => {
      if (typeof setting.isHidden === 'function') {
        return setting.isHidden(this.props.config, this.state, this.props.license);
      }

      return Boolean(setting.isHidden);
    });

    schema_admin_settings_defineProperty(this, "buildButtonSetting", setting => {
      return react_default.a.createElement(request_button_RequestButton, {
        key: this.props.schema.id + '_text_' + setting.key,
        requestAction: setting.action,
        helpText: this.renderHelpText(setting),
        loadingText: utils["gb" /* localizeMessage */](setting.loading, setting.loading_default),
        buttonText: react_default.a.createElement("span", null, this.renderLabel(setting)),
        showSuccessMessage: Boolean(setting.success_message),
        includeDetailedError: true,
        errorMessage: {
          id: setting.error_message,
          defaultMessage: setting.error_message_default
        },
        successMessage: setting.success_message && {
          id: setting.success_message,
          defaultMessage: setting.success_message_default
        }
      });
    });

    schema_admin_settings_defineProperty(this, "buildTextSetting", setting => {
      let inputType = 'input';

      if (setting.type === constants["N" /* default */].SettingsTypes.TYPE_NUMBER) {
        inputType = 'number';
      } else if (setting.type === constants["N" /* default */].SettingsTypes.TYPE_LONG_TEXT) {
        inputType = 'textarea';
      }

      let value = this.state[setting.key] || '';

      if (setting.dynamic_value) {
        value = setting.dynamic_value(value, this.props.config, this.state, this.props.license);
      }

      return react_default.a.createElement(admin_console_text_setting, {
        key: this.props.schema.id + '_text_' + setting.key,
        id: setting.key,
        type: inputType,
        label: this.renderLabel(setting),
        helpText: this.renderHelpText(setting),
        placeholder: utils["gb" /* localizeMessage */](setting.placeholder, setting.placeholder_default),
        value: value,
        disabled: this.isDisabled(setting),
        setByEnv: this.isSetByEnv(setting.key),
        onChange: this.handleChange,
        maxLength: setting.max_length
      });
    });

    schema_admin_settings_defineProperty(this, "buildColorSetting", setting => {
      return react_default.a.createElement(color_setting_ColorSetting, {
        key: this.props.schema.id + '_text_' + setting.key,
        id: setting.key,
        label: this.renderLabel(setting),
        helpText: this.renderHelpText(setting),
        placeholder: utils["gb" /* localizeMessage */](setting.placeholder, setting.placeholder_default),
        value: this.state[setting.key] || '',
        disabled: this.isDisabled(setting),
        onChange: this.handleChange
      });
    });

    schema_admin_settings_defineProperty(this, "buildBoolSetting", setting => {
      return react_default.a.createElement(boolean_setting_BooleanSetting, {
        key: this.props.schema.id + '_bool_' + setting.key,
        id: setting.key,
        label: this.renderLabel(setting),
        helpText: this.renderHelpText(setting),
        value: !this.isDisabled(setting) && this.state[setting.key] || false,
        disabled: this.isDisabled(setting),
        setByEnv: this.isSetByEnv(setting.key),
        onChange: this.handleChange
      });
    });

    schema_admin_settings_defineProperty(this, "buildPermissionSetting", setting => {
      return react_default.a.createElement(boolean_setting_BooleanSetting, {
        key: this.props.schema.id + '_bool_' + setting.key,
        id: setting.key,
        label: this.renderLabel(setting),
        helpText: this.renderHelpText(setting),
        value: !this.isDisabled(setting) && this.state[setting.key] || false,
        disabled: this.isDisabled(setting),
        setByEnv: this.isSetByEnv(setting.key),
        onChange: this.handlePermissionChange
      });
    });

    schema_admin_settings_defineProperty(this, "buildDropdownSetting", setting => {
      const options = setting.options || [];
      const values = options.map(o => ({
        value: o.value,
        text: utils["gb" /* localizeMessage */](o.display_name)
      }));
      const selectedValue = this.state[setting.key] || values[0].value;
      let selectedOptionForHelpText = null;

      for (const option of options) {
        if (option.help_text && option.value === selectedValue) {
          selectedOptionForHelpText = option;
          break;
        }
      }

      return react_default.a.createElement(dropdown_setting_DropdownSetting, {
        key: this.props.schema.id + '_dropdown_' + setting.key,
        id: setting.key,
        values: values,
        label: this.renderLabel(setting),
        helpText: this.renderHelpText(selectedOptionForHelpText || setting),
        value: selectedValue,
        disabled: this.isDisabled(setting),
        setByEnv: this.isSetByEnv(setting.key),
        onChange: this.handleChange
      });
    });

    schema_admin_settings_defineProperty(this, "buildLanguageSetting", setting => {
      const locales = i18n["b" /* getAllLanguages */]();
      const values = Object.keys(locales).map(l => {
        return {
          value: locales[l].value,
          text: locales[l].name,
          order: locales[l].order
        };
      }).sort((a, b) => a.order - b.order);

      if (setting.multiple) {
        const noResultText = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: setting.no_result,
          defaultMessage: setting.no_result_default
        });
        const notPresent = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: setting.not_present,
          defaultMessage: setting.not_present_default
        });
        return react_default.a.createElement(multiselect_settings_MultiSelectSetting, {
          key: this.props.schema.id + '_language_' + setting.key,
          id: setting.key,
          label: this.renderLabel(setting),
          values: values,
          helpText: this.renderHelpText(setting),
          selected: this.state[setting.key] && this.state[setting.key].split(',') || [],
          disabled: this.isDisabled(setting),
          setByEnv: this.isSetByEnv(setting.key),
          onChange: (changedId, value) => this.handleChange(changedId, value.join(',')),
          noResultText: noResultText,
          notPresent: notPresent
        });
      }

      return react_default.a.createElement(dropdown_setting_DropdownSetting, {
        key: this.props.schema.id + '_language_' + setting.key,
        id: setting.key,
        label: this.renderLabel(setting),
        values: values,
        helpText: this.renderHelpText(setting),
        value: this.state[setting.key] || values[0].value,
        disabled: this.isDisabled(setting),
        setByEnv: this.isSetByEnv(setting.key),
        onChange: this.handleChange
      });
    });

    schema_admin_settings_defineProperty(this, "buildRadioSetting", setting => {
      const options = setting.options || [];
      const values = options.map(o => ({
        value: o.value,
        text: o.display_name
      }));
      return react_default.a.createElement(radio_setting_RadioSetting, {
        key: this.props.schema.id + '_radio_' + setting.key,
        id: setting.key,
        values: values,
        label: this.renderLabel(setting),
        helpText: this.renderHelpText(setting),
        value: this.state[setting.key] || values[0],
        disabled: this.isDisabled(setting),
        setByEnv: this.isSetByEnv(setting.key),
        onChange: this.handleChange
      });
    });

    schema_admin_settings_defineProperty(this, "buildBannerSetting", setting => {
      if (this.isDisabled(setting)) {
        return null;
      }

      return react_default.a.createElement("div", {
        className: 'banner ' + setting.banner_type,
        key: this.props.schema.id + '_bool_' + setting.key
      }, react_default.a.createElement("div", {
        className: "banner__content"
      }, react_default.a.createElement("span", null, this.renderBanner(setting))));
    });

    schema_admin_settings_defineProperty(this, "buildGeneratedSetting", setting => {
      return react_default.a.createElement(generated_setting_GeneratedSetting, {
        key: this.props.schema.id + '_generated_' + setting.key,
        id: setting.key,
        label: this.renderLabel(setting),
        helpText: this.renderHelpText(setting),
        regenerateHelpText: setting.regenerate_help_text,
        placeholder: utils["gb" /* localizeMessage */](setting.placeholder, setting.placeholder_default),
        value: this.state[setting.key] || '',
        disabled: this.isDisabled(setting),
        setByEnv: this.isSetByEnv(setting.key),
        onChange: this.handleGeneratedChange
      });
    });

    schema_admin_settings_defineProperty(this, "handleGeneratedChange", (id, s) => {
      this.handleChange(id, s.replace('+', '-').replace('/', '_'));
    });

    schema_admin_settings_defineProperty(this, "handleChange", (id, value) => {
      let saveNeeded = 'config';

      if (this.state.saveNeeded === 'permissions') {
        saveNeeded = 'both';
      }

      this.setState({
        saveNeeded,
        [id]: value
      });
      this.props.setNavigationBlocked(true);
    });

    schema_admin_settings_defineProperty(this, "handlePermissionChange", (id, value) => {
      let saveNeeded = 'permissions';

      if (this.state.saveNeeded === 'config') {
        saveNeeded = 'both';
      }

      this.setState({
        saveNeeded,
        [id]: value
      });
      this.props.setNavigationBlocked(true);
    });

    schema_admin_settings_defineProperty(this, "buildUsernameSetting", setting => {
      return react_default.a.createElement(user_autocomplete_setting_UserAutocompleteSetting, {
        key: this.props.schema.id + '_userautocomplete_' + setting.key,
        id: setting.key,
        label: this.renderLabel(setting),
        helpText: this.renderHelpText(setting),
        placeholder: utils["gb" /* localizeMessage */](setting.placeholder, setting.placeholder_default) || utils["gb" /* localizeMessage */]('search_bar.search', 'Search'),
        value: this.state[setting.key] || '',
        disabled: this.isDisabled(setting),
        onChange: this.handleChange
      });
    });

    schema_admin_settings_defineProperty(this, "buildJobsTableSetting", setting => {
      return react_default.a.createElement(admin_console_jobs, {
        key: this.props.schema.id + '_userautocomplete_' + setting.key,
        jobType: setting.job_type,
        getExtraInfoText: setting.render_job,
        disabled: this.isDisabled(setting),
        createJobButtonText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: setting.label,
          defaultMessage: setting.label_default
        }),
        createJobHelpText: react_default.a.createElement(formatted_markdown_message["b" /* default */], {
          id: setting.help_text,
          defaultMessage: setting.help_text_default
        })
      });
    });

    schema_admin_settings_defineProperty(this, "buildFileUploadSetting", setting => {
      if (this.state[setting.key]) {
        const removeFile = (id, callback) => {
          const successCallback = () => {
            this.handleChange(setting.key, '');
            this.setState({
              [setting.key]: null,
              [`${setting.key}Error`]: null
            });
          };

          const errorCallback = error => {
            callback();
            this.setState({
              [setting.key]: null,
              [`${setting.key}Error`]: error.message
            });
          };

          setting.remove_action(successCallback, errorCallback);
        };

        return react_default.a.createElement(remove_file_setting_RemoveFileSetting, {
          id: this.props.schema.id,
          key: this.props.schema.id + '_fileupload_' + setting.key,
          label: this.renderLabel(setting),
          helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
            id: setting.remove_help_text,
            defaultMessage: setting.remove_help_text_default
          }),
          removeButtonText: utils["gb" /* localizeMessage */](setting.remove_button_text, setting.remove_button_text_default),
          removingText: utils["gb" /* localizeMessage */](setting.removing_text, setting.removing_text_default),
          fileName: this.state[setting.key],
          onSubmit: removeFile,
          disabled: this.isDisabled(setting),
          setByEnv: this.isSetByEnv(setting.key)
        });
      }

      const uploadFile = (id, file, callback) => {
        const successCallback = filename => {
          this.handleChange(id, filename);
          this.setState({
            [setting.key]: filename,
            [`${setting.key}Error`]: null
          });

          if (callback && typeof callback === 'function') {
            callback();
          }
        };

        const errorCallback = error => {
          if (callback && typeof callback === 'function') {
            callback(error.message);
          }
        };

        setting.upload_action(file, successCallback, errorCallback);
      };

      return react_default.a.createElement(file_upload_setting_FileUploadSetting, {
        id: setting.key,
        key: this.props.schema.id + '_fileupload_' + setting.key,
        label: this.renderLabel(setting),
        helpText: this.renderHelpText(setting),
        uploadingText: utils["gb" /* localizeMessage */](setting.uploading_text, setting.uploading_text_default),
        disabled: this.isDisabled(setting),
        fileType: setting.fileType,
        onSubmit: uploadFile,
        error: this.state.idpCertificateFileError,
        setByEnv: this.isSetByEnv(setting.key)
      });
    });

    schema_admin_settings_defineProperty(this, "buildCustomSetting", setting => {
      const CustomComponent = setting.component;
      return react_default.a.createElement(CustomComponent, {
        key: this.props.schema.id + '_userautocomplete_' + setting.key,
        id: setting.key,
        value: this.state[setting.key] || '',
        disabled: this.isDisabled(setting),
        setByEnv: this.isSetByEnv(setting.key),
        onChange: this.handleChange
      });
    });

    schema_admin_settings_defineProperty(this, "renderSettings", () => {
      const schema = this.props.schema;

      if (!schema) {
        return react_default.a.createElement(loading_screen["a" /* default */], null);
      }

      const settingsList = [];

      if (schema.settings) {
        schema.settings.forEach(setting => {
          if (this.buildSettingFunctions[setting.type] && !this.isHidden(setting)) {
            // This is a hack required as plugin settings are case insensitive
            let s = setting;

            if (this.isPlugin) {
              s = { ...setting,
                key: setting.key.toLowerCase()
              };
            }

            settingsList.push(this.buildSettingFunctions[setting.type](s));
          }
        });
      }

      let header;

      if (schema.header) {
        header = react_default.a.createElement("div", {
          className: "banner"
        }, react_default.a.createElement(schema_text_SchemaText, {
          text: schema.header,
          isMarkdown: true
        }));
      }

      let footer;

      if (schema.footer) {
        footer = react_default.a.createElement("div", {
          className: "banner"
        }, react_default.a.createElement(schema_text_SchemaText, {
          text: schema.footer,
          isMarkdown: true
        }));
      }

      return react_default.a.createElement(settings_group_SettingsGroup, {
        container: false
      }, header, settingsList, footer);
    });

    schema_admin_settings_defineProperty(this, "closeTooltip", () => {
      this.setState({
        errorTooltip: false
      });
    });

    schema_admin_settings_defineProperty(this, "openTooltip", e => {
      const elm = e.currentTarget.querySelector('.control-label');
      const isElipsis = elm.offsetWidth < elm.scrollWidth;
      this.setState({
        errorTooltip: isElipsis
      });
    });

    schema_admin_settings_defineProperty(this, "doSubmit", (callback, getStateFromConfig) => {
      this.setState({
        saving: true,
        serverError: null
      }); // clone config so that we aren't modifying data in the stores

      let config = JSON.parse(JSON.stringify(this.props.config));
      config = this.getConfigFromState(config);
      Object(admin_actions["B" /* saveConfig */])(config, savedConfig => {
        this.setState(getStateFromConfig(savedConfig));
        this.setState({
          saveNeeded: false,
          saving: false
        });
        this.props.setNavigationBlocked(false);

        if (callback) {
          callback();
        }

        if (this.handleSaved) {
          this.handleSaved(config);
        }
      }, err => {
        this.setState({
          saving: false,
          serverError: err.message,
          serverErrorId: err.id
        });

        if (callback) {
          callback();
        }

        if (this.handleSaved) {
          this.handleSaved(config);
        }
      });
    });

    schema_admin_settings_defineProperty(this, "isSetByEnv", path => {
      return Boolean(schema_admin_settings_SchemaAdminSettings.getConfigValue(this.props.environmentConfig, path));
    });

    schema_admin_settings_defineProperty(this, "hybridSchemaAndComponent", () => {
      const schema = this.props.schema;

      if (schema && schema.component && schema.settings) {
        const CustomComponent = schema.component;
        return react_default.a.createElement(CustomComponent, this.props);
      }

      return null;
    });

    schema_admin_settings_defineProperty(this, "render", () => {
      const schema = this.props.schema;

      if (schema && schema.component && !schema.settings) {
        const CustomComponent = schema.component;
        return react_default.a.createElement(CustomComponent, this.props);
      }

      return react_default.a.createElement("div", {
        className: 'wrapper--fixed ' + this.state.customComponentWrapperClass
      }, this.renderTitle(), react_default.a.createElement("div", {
        className: "admin-console__wrapper"
      }, react_default.a.createElement("div", {
        className: "admin-console__content"
      }, react_default.a.createElement("form", {
        className: "form-horizontal",
        role: "form",
        onSubmit: this.handleSubmit
      }, this.renderSettings()), this.hybridSchemaAndComponent())), react_default.a.createElement("div", {
        className: "admin-console-save"
      }, react_default.a.createElement(save_button["a" /* default */], {
        saving: this.state.saving,
        disabled: !this.state.saveNeeded || this.canSave && !this.canSave(),
        onClick: this.handleSubmit,
        savingMessage: utils["gb" /* localizeMessage */]('admin.saving', 'Saving Config...')
      }), react_default.a.createElement("div", {
        className: "error-message",
        ref: "errorMessage",
        onMouseOver: this.openTooltip,
        onMouseOut: this.closeTooltip
      }, react_default.a.createElement(form_error["a" /* default */], {
        error: this.state.serverError
      })), react_default.a.createElement(Overlay["a" /* default */], {
        show: this.state.errorTooltip,
        delayShow: constants["N" /* default */].OVERLAY_TIME_DELAY,
        placement: "top",
        target: this.refs.errorMessage
      }, react_default.a.createElement(Tooltip["a" /* default */], {
        id: "error-tooltip"
      }, this.state.serverError))));
    });

    this.isPlugin = false;
    this.buildSettingFunctions = {
      [constants["N" /* default */].SettingsTypes.TYPE_TEXT]: this.buildTextSetting,
      [constants["N" /* default */].SettingsTypes.TYPE_LONG_TEXT]: this.buildTextSetting,
      [constants["N" /* default */].SettingsTypes.TYPE_NUMBER]: this.buildTextSetting,
      [constants["N" /* default */].SettingsTypes.TYPE_COLOR]: this.buildColorSetting,
      [constants["N" /* default */].SettingsTypes.TYPE_BOOL]: this.buildBoolSetting,
      [constants["N" /* default */].SettingsTypes.TYPE_PERMISSION]: this.buildPermissionSetting,
      [constants["N" /* default */].SettingsTypes.TYPE_DROPDOWN]: this.buildDropdownSetting,
      [constants["N" /* default */].SettingsTypes.TYPE_RADIO]: this.buildRadioSetting,
      [constants["N" /* default */].SettingsTypes.TYPE_BANNER]: this.buildBannerSetting,
      [constants["N" /* default */].SettingsTypes.TYPE_GENERATED]: this.buildGeneratedSetting,
      [constants["N" /* default */].SettingsTypes.TYPE_USERNAME]: this.buildUsernameSetting,
      [constants["N" /* default */].SettingsTypes.TYPE_BUTTON]: this.buildButtonSetting,
      [constants["N" /* default */].SettingsTypes.TYPE_LANGUAGE]: this.buildLanguageSetting,
      [constants["N" /* default */].SettingsTypes.TYPE_JOBSTABLE]: this.buildJobsTableSetting,
      [constants["N" /* default */].SettingsTypes.TYPE_FILE_UPLOAD]: this.buildFileUploadSetting,
      [constants["N" /* default */].SettingsTypes.TYPE_CUSTOM]: this.buildCustomSetting
    };
    this.state = {
      saveNeeded: false,
      saving: false,
      serverError: null,
      errorTooltip: false,
      customComponentWrapperClass: ''
    };
  }

  static getDerivedStateFromProps(props, state) {
    if (props.schema && props.schema.id !== state.prevSchemaId) {
      return {
        prevSchemaId: props.schema.id,
        saveNeeded: false,
        saving: false,
        serverError: null,
        errorTooltip: false,
        ...schema_admin_settings_SchemaAdminSettings.getStateFromConfig(props.config, props.schema, props.roles)
      };
    }

    return null;
  }

  getConfigFromState(config) {
    const schema = this.props.schema;

    if (schema) {
      const settings = schema.settings || [];
      settings.forEach(setting => {
        if (!setting.key) {
          return;
        }

        if (setting.type === constants["N" /* default */].SettingsTypes.TYPE_PERMISSION) {
          this.setConfigValue(config, setting.key, null);
          return;
        }

        let value = this.getSettingValue(setting);
        const previousValue = schema_admin_settings_SchemaAdminSettings.getConfigValue(config, setting.key);

        if (setting.onConfigSave) {
          value = setting.onConfigSave(value, previousValue);
        }

        this.setConfigValue(config, setting.key, value);
      });

      if (schema.onConfigSave) {
        return schema.onConfigSave(config, this.props.config);
      }
    }

    return config;
  }

  static getStateFromConfig(config, schema, roles) {
    let state = {};

    if (schema) {
      const settings = schema.settings || [];
      settings.forEach(setting => {
        if (!setting.key) {
          return;
        }

        if (setting.type === constants["N" /* default */].SettingsTypes.TYPE_PERMISSION) {
          try {
            state[setting.key] = mappingValueFromRoles(setting.permissions_mapping_name, roles) === 'true';
          } catch (e) {
            state[setting.key] = false;
          }

          return;
        }

        let value = schema_admin_settings_SchemaAdminSettings.getConfigValue(config, setting.key);

        if (setting.onConfigLoad) {
          value = setting.onConfigLoad(value, config);
        }

        state[setting.key] = value == null ? setting.default : value;
      });

      if (schema.onConfigLoad) {
        state = { ...state,
          ...schema.onConfigLoad(config)
        };
      }
    }

    return state;
  }

  getSetting(key) {
    for (const setting of this.props.schema.settings) {
      if (setting.key === key) {
        return setting;
      }
    }

    return null;
  }

  getSettingValue(setting) {
    // Force boolean values to false when disabled.
    if (setting.type === constants["N" /* default */].SettingsTypes.TYPE_BOOL) {
      if (this.isDisabled(setting)) {
        return false;
      }
    }

    if (setting.type === constants["N" /* default */].SettingsTypes.TYPE_TEXT && setting.dynamic_value) {
      return setting.dynamic_value(this.state[setting.key], this.props.config, this.state, this.props.license);
    }

    return this.state[setting.key];
  }

  static getConfigValue(config, path) {
    const pathParts = path.split('.');
    return pathParts.reduce((obj, pathPart) => {
      if (!obj) {
        return null;
      }

      return obj[pathPart];
    }, config);
  }

  setConfigValue(config, path, value) {
    function setValue(obj, pathParts) {
      const part = pathParts[0];

      if (pathParts.length === 1) {
        obj[part] = value;
      } else {
        if (obj[part] == null) {
          obj[part] = {};
        }

        setValue(obj[part], pathParts.slice(1));
      }
    }

    setValue(config, path.split('.'));
  }

}

schema_admin_settings_defineProperty(schema_admin_settings_SchemaAdminSettings, "propTypes", {
  config: prop_types_default.a.object,
  environmentConfig: prop_types_default.a.object,
  setNavigationBlocked: prop_types_default.a.func,
  schema: prop_types_default.a.object,
  roles: prop_types_default.a.object,
  license: prop_types_default.a.object,
  editRole: prop_types_default.a.func
});
// EXTERNAL MODULE: ./components/confirm_modal.jsx
var confirm_modal = __webpack_require__(1576);

// CONCATENATED MODULE: ./components/discard_changes_modal.jsx
function discard_changes_modal_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




class discard_changes_modal_DiscardChangesModal extends react_default.a.PureComponent {
  render() {
    const title = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "discard_changes_modal.title",
      defaultMessage: "Discard Changes?"
    });
    const message = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "discard_changes_modal.message",
      defaultMessage: "You have unsaved changes, are you sure you want to discard them?"
    });
    const buttonClass = 'btn btn-primary';
    const button = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "discard_changes_modal.leave",
      defaultMessage: "Yes, Discard"
    });
    const modalClass = 'discard-changes-modal';
    const {
      show,
      onConfirm,
      onCancel
    } = this.props;
    return react_default.a.createElement(confirm_modal["a" /* default */], {
      show: show,
      title: title,
      message: message,
      modalClass: modalClass,
      confirmButtonClass: buttonClass,
      confirmButtonText: button,
      onConfirm: onConfirm,
      onCancel: onCancel
    });
  }

}

discard_changes_modal_defineProperty(discard_changes_modal_DiscardChangesModal, "propTypes", {
  /*
   * Bool whether the modal is shown
   */
  show: prop_types_default.a.bool.isRequired,

  /*
   * Action to call on confirm
   */
  onConfirm: prop_types_default.a.func.isRequired,

  /*
   * Action to call on cancel
   */
  onCancel: prop_types_default.a.func.isRequired
});
// EXTERNAL MODULE: ./node_modules/react-bootstrap/es/OverlayTrigger.js
var OverlayTrigger = __webpack_require__(1995);

// EXTERNAL MODULE: ./node_modules/flexsearch/dist/flexsearch.es5.js
var flexsearch_es5 = __webpack_require__(3415);
var flexsearch_es5_default = /*#__PURE__*/__webpack_require__.n(flexsearch_es5);

// EXTERNAL MODULE: ./utils/url.jsx + 1 modules
var url = __webpack_require__(298);

// EXTERNAL MODULE: ./node_modules/react-dom/index.js
var react_dom = __webpack_require__(33);
var react_dom_default = /*#__PURE__*/__webpack_require__.n(react_dom);

// EXTERNAL MODULE: ./node_modules/chart.js/dist/Chart.js
var Chart = __webpack_require__(2250);
var Chart_default = /*#__PURE__*/__webpack_require__.n(Chart);

// CONCATENATED MODULE: ./components/analytics/doughnut_chart.jsx
function doughnut_chart_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






class doughnut_chart_DoughnutChart extends react_default.a.PureComponent {
  constructor(...args) {
    super(...args);

    doughnut_chart_defineProperty(this, "chart", null);

    doughnut_chart_defineProperty(this, "initChart", update => {
      if (!this.refs.canvas) {
        return;
      }

      var el = react_dom_default.a.findDOMNode(this.refs.canvas);
      var ctx = el.getContext('2d');
      const dataCopy = JSON.parse(JSON.stringify(this.props.data));
      this.chart = new Chart_default.a(ctx, {
        type: 'doughnut',
        data: dataCopy,
        options: {}
      });

      if (update) {
        this.chart.update();
      }
    });
  }

  componentDidMount() {
    this.initChart();
  }

  componentDidUpdate(prevProps) {
    if (!utils["c" /* areObjectsEqual */](prevProps.data, this.props.data)) {
      this.initChart(true);
    }
  }

  componentWillUnmount() {
    if (this.chart && this.refs.canvas) {
      this.chart.destroy();
    }
  }

  render() {
    let content;

    if (this.props.data == null) {
      content = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "analytics.chart.loading",
        defaultMessage: "Loading..."
      });
    } else {
      content = react_default.a.createElement("canvas", {
        ref: "canvas",
        width: this.props.width,
        height: this.props.height
      });
    }

    return react_default.a.createElement("div", {
      className: "col-sm-6"
    }, react_default.a.createElement("div", {
      className: "total-count"
    }, react_default.a.createElement("div", {
      className: "title"
    }, this.props.title), react_default.a.createElement("div", {
      className: "content"
    }, content)));
  }

}

doughnut_chart_defineProperty(doughnut_chart_DoughnutChart, "propTypes", {
  /*
   * Chart title
   */
  title: prop_types_default.a.node,

  /*
   * Chart width
   */
  width: prop_types_default.a.number,

  /*
   * Chart height
   */
  height: prop_types_default.a.number,

  /*
   * Chart data
   */
  data: prop_types_default.a.object
});
// CONCATENATED MODULE: ./components/analytics/line_chart.jsx
function line_chart_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






class line_chart_LineChart extends react_default.a.PureComponent {
  constructor(...args) {
    super(...args);

    line_chart_defineProperty(this, "chart", null);

    line_chart_defineProperty(this, "chartOptions", {
      legend: {
        display: false
      }
    });

    line_chart_defineProperty(this, "initChart", update => {
      if (!this.refs.canvas) {
        return;
      }

      var el = react_dom_default.a.findDOMNode(this.refs.canvas);
      var ctx = el.getContext('2d');
      const dataCopy = JSON.parse(JSON.stringify(this.props.data));
      this.chart = new Chart_default.a(ctx, {
        type: 'line',
        data: dataCopy,
        options: this.chartOptions || {}
      });

      if (update) {
        this.chart.update();
      }
    });
  }

  componentDidMount() {
    this.initChart();
  }

  UNSAFE_componentWillUpdate(nextProps) {
    // eslint-disable-line camelcase
    const willHaveData = nextProps.data && nextProps.data.labels.length > 0;
    const hasChart = Boolean(this.chart);

    if (!willHaveData && hasChart) {
      // Clean up the rendered chart before we render and destroy its context
      this.chart.destroy();
      this.chart = null;
    }
  }

  componentDidUpdate(prevProps) {
    if (utils["c" /* areObjectsEqual */](prevProps.data, this.props.data)) {
      return;
    }

    const hasData = this.props.data && this.props.data.labels.length > 0;
    const hasChart = Boolean(this.chart);

    if (hasData) {
      // Update the rendered chart or initialize it as necessary
      this.initChart(hasChart);
    }
  }

  componentWillUnmount() {
    if (this.chart) {
      this.chart.destroy();
    }
  }

  render() {
    let content;

    if (this.props.data == null) {
      content = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "analytics.chart.loading",
        defaultMessage: "Loading..."
      });
    } else if (this.props.data.labels.length === 0) {
      content = react_default.a.createElement("h5", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "analytics.chart.meaningful",
        defaultMessage: "Not enough data for a meaningful representation."
      }));
    } else {
      content = react_default.a.createElement("canvas", {
        ref: "canvas",
        width: this.props.width,
        height: this.props.height
      });
    }

    return react_default.a.createElement("div", {
      className: "col-sm-12"
    }, react_default.a.createElement("div", {
      className: "total-count by-day"
    }, react_default.a.createElement("div", {
      className: "title"
    }, this.props.title), react_default.a.createElement("div", {
      className: "content"
    }, content)));
  }

}

line_chart_defineProperty(line_chart_LineChart, "propTypes", {
  /*
   * Chart title
   */
  title: prop_types_default.a.node.isRequired,

  /*
   * Chart width
   */
  width: prop_types_default.a.number.isRequired,

  /*
   * Chart height
   */
  height: prop_types_default.a.number.isRequired,

  /*
   * Chart data
   */
  data: prop_types_default.a.object
});
// CONCATENATED MODULE: ./components/analytics/statistic_count.jsx
function statistic_count_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.



class statistic_count_StatisticCount extends react_default.a.PureComponent {
  render() {
    const loading = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "analytics.chart.loading",
      defaultMessage: "Loading..."
    });
    return react_default.a.createElement("div", {
      className: "col-lg-3 col-md-4 col-sm-6"
    }, react_default.a.createElement("div", {
      className: "total-count"
    }, react_default.a.createElement("div", {
      className: "title"
    }, this.props.title, react_default.a.createElement("i", {
      className: 'fa ' + this.props.icon
    })), react_default.a.createElement("div", {
      className: "content"
    }, isNaN(this.props.count) ? loading : this.props.count)));
  }

}

statistic_count_defineProperty(statistic_count_StatisticCount, "propTypes", {
  /*
   * Statistic title
   */
  title: prop_types_default.a.node.isRequired,

  /*
   * Statistic icon
   */
  icon: prop_types_default.a.string.isRequired,

  /*
   * Data count
   */
  count: prop_types_default.a.number
});
// CONCATENATED MODULE: ./components/analytics/format.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

function formatChannelDoughtnutData(totalPublic, totalPrivate) {
  const channelTypeData = {
    labels: [utils["gb" /* localizeMessage */]('analytics.system.publicChannels', 'Public Channels'), utils["gb" /* localizeMessage */]('analytics.system.privateGroups', 'Private Channels')],
    datasets: [{
      data: [totalPublic, totalPrivate],
      backgroundColor: ['#46BFBD', '#FDB45C'],
      hoverBackgroundColor: ['#5AD3D1', '#FFC870']
    }]
  };
  return channelTypeData;
}
function formatPostDoughtnutData(filePosts, hashtagPosts, totalPosts) {
  const postTypeData = {
    labels: [utils["gb" /* localizeMessage */]('analytics.system.totalFilePosts', 'Posts with Files'), utils["gb" /* localizeMessage */]('analytics.system.totalHashtagPosts', 'Posts with Hashtags'), utils["gb" /* localizeMessage */]('analytics.system.textPosts', 'Posts with Text-only')],
    datasets: [{
      data: [filePosts, hashtagPosts, totalPosts - filePosts - hashtagPosts],
      backgroundColor: ['#46BFBD', '#F7464A', '#FDB45C'],
      hoverBackgroundColor: ['#5AD3D1', '#FF5A5E', '#FFC870']
    }]
  };
  return postTypeData;
}
function formatPostsPerDayData(data) {
  var chartData = {
    labels: [],
    datasets: [{
      fillColor: 'rgba(151,187,205,0.2)',
      borderColor: 'rgba(151,187,205,1)',
      pointBackgroundColor: 'rgba(151,187,205,1)',
      pointBorderColor: '#fff',
      pointHoverBackgroundColor: '#fff',
      pointHoverBorderColor: 'rgba(151,187,205,1)',
      data: []
    }]
  };

  for (var index in data) {
    if (data[index]) {
      var row = data[index];
      chartData.labels.push(row.name);
      chartData.datasets[0].data.push(row.value);
    }
  }

  return chartData;
}
function formatUsersWithPostsPerDayData(data) {
  var chartData = {
    labels: [],
    datasets: [{
      label: '',
      fillColor: 'rgba(151,187,205,0.2)',
      borderColor: 'rgba(151,187,205,1)',
      pointBackgroundColor: 'rgba(151,187,205,1)',
      pointBorderColor: '#fff',
      pointHoverBackgroundColor: '#fff',
      pointHoverBorderColor: 'rgba(151,187,205,1)',
      data: []
    }]
  };

  for (var index in data) {
    if (data[index]) {
      var row = data[index];
      chartData.labels.push(row.name);
      chartData.datasets[0].data.push(row.value);
    }
  }

  return chartData;
}
// CONCATENATED MODULE: ./components/analytics/system_analytics/system_analytics.jsx
function system_analytics_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.











const StatTypes = constants["N" /* default */].StatTypes;
class system_analytics_SystemAnalytics extends react_default.a.PureComponent {
  componentDidMount() {
    admin_actions["p" /* getStandardAnalytics */]();
    admin_actions["o" /* getPostsPerDayAnalytics */]();
    admin_actions["q" /* getUsersPerDayAnalytics */]();

    if (this.props.isLicensed) {
      admin_actions["l" /* getAdvancedAnalytics */]();
    }
  }

  render() {
    const stats = this.props.stats;
    const isLicensed = this.props.isLicensed;
    const skippedIntensiveQueries = stats[StatTypes.TOTAL_POSTS] === -1;
    const postCountsDay = formatPostsPerDayData(stats[StatTypes.POST_PER_DAY]);
    const userCountsWithPostsDay = formatUsersWithPostsPerDayData(stats[StatTypes.USERS_WITH_POSTS_PER_DAY]);
    let banner;
    let postCount;
    let postTotalGraph;
    let activeUserGraph;

    if (skippedIntensiveQueries) {
      banner = react_default.a.createElement("div", {
        className: "banner"
      }, react_default.a.createElement("div", {
        className: "banner__content"
      }, react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "analytics.system.skippedIntensiveQueries",
        defaultMessage: "To maximize performance, some statistics are disabled. You can [re-enable them in config.json](!https://docs.mattermost.com/administration/statistics.html)."
      })));
    } else {
      postCount = react_default.a.createElement(statistic_count_StatisticCount, {
        title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "analytics.system.totalPosts",
          defaultMessage: "Total Posts"
        }),
        icon: "fa-comment",
        count: stats[StatTypes.TOTAL_POSTS]
      });
      postTotalGraph = react_default.a.createElement("div", {
        className: "row"
      }, react_default.a.createElement(line_chart_LineChart, {
        title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "analytics.system.totalPosts",
          defaultMessage: "Total Posts"
        }),
        data: postCountsDay,
        width: 740,
        height: 225
      }));
      activeUserGraph = react_default.a.createElement("div", {
        className: "row"
      }, react_default.a.createElement(line_chart_LineChart, {
        title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "analytics.system.activeUsers",
          defaultMessage: "Active Users With Posts"
        }),
        data: userCountsWithPostsDay,
        width: 740,
        height: 225
      }));
    }

    let advancedStats;
    let advancedGraphs;
    let sessionCount;
    let commandCount;
    let incomingCount;
    let outgoingCount;

    if (this.props.isLicensed) {
      sessionCount = react_default.a.createElement(statistic_count_StatisticCount, {
        title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "analytics.system.totalSessions",
          defaultMessage: "Total Sessions"
        }),
        icon: "fa-signal",
        count: stats[StatTypes.TOTAL_SESSIONS]
      });
      commandCount = react_default.a.createElement(statistic_count_StatisticCount, {
        title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "analytics.system.totalCommands",
          defaultMessage: "Total Commands"
        }),
        icon: "fa-terminal",
        count: stats[StatTypes.TOTAL_COMMANDS]
      });
      incomingCount = react_default.a.createElement(statistic_count_StatisticCount, {
        title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "analytics.system.totalIncomingWebhooks",
          defaultMessage: "Incoming Webhooks"
        }),
        icon: "fa-arrow-down",
        count: stats[StatTypes.TOTAL_IHOOKS]
      });
      outgoingCount = react_default.a.createElement(statistic_count_StatisticCount, {
        title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "analytics.system.totalOutgoingWebhooks",
          defaultMessage: "Outgoing Webhooks"
        }),
        icon: "fa-arrow-up",
        count: stats[StatTypes.TOTAL_OHOOKS]
      });
      advancedStats = react_default.a.createElement("div", null, react_default.a.createElement(statistic_count_StatisticCount, {
        title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "analytics.system.totalWebsockets",
          defaultMessage: "WebSocket Conns"
        }),
        icon: "fa-user",
        count: stats[StatTypes.TOTAL_WEBSOCKET_CONNECTIONS]
      }), react_default.a.createElement(statistic_count_StatisticCount, {
        title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "analytics.system.totalMasterDbConnections",
          defaultMessage: "Master DB Conns"
        }),
        icon: "fa-terminal",
        count: stats[StatTypes.TOTAL_MASTER_DB_CONNECTIONS]
      }), react_default.a.createElement(statistic_count_StatisticCount, {
        title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "analytics.system.totalReadDbConnections",
          defaultMessage: "Replica DB Conns"
        }),
        icon: "fa-terminal",
        count: stats[StatTypes.TOTAL_READ_DB_CONNECTIONS]
      }));
      const channelTypeData = formatChannelDoughtnutData(stats[StatTypes.TOTAL_PUBLIC_CHANNELS], stats[StatTypes.TOTAL_PRIVATE_GROUPS]);
      const postTypeData = formatPostDoughtnutData(stats[StatTypes.TOTAL_FILE_POSTS], stats[StatTypes.TOTAL_HASHTAG_POSTS], stats[StatTypes.TOTAL_POSTS]);
      let postTypeGraph;

      if (stats[StatTypes.TOTAL_POSTS] !== -1) {
        postTypeGraph = react_default.a.createElement(doughnut_chart_DoughnutChart, {
          title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
            id: "analytics.system.postTypes",
            defaultMessage: "Posts, Files and Hashtags"
          }),
          data: postTypeData,
          width: 300,
          height: 225
        });
      }

      advancedGraphs = react_default.a.createElement("div", {
        className: "row"
      }, react_default.a.createElement(doughnut_chart_DoughnutChart, {
        title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "analytics.system.channelTypes",
          defaultMessage: "Channel Types"
        }),
        data: channelTypeData,
        width: 300,
        height: 225
      }), postTypeGraph);
    }

    const userCount = react_default.a.createElement(statistic_count_StatisticCount, {
      title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "analytics.system.totalUsers",
        defaultMessage: "Total Active Users"
      }),
      icon: "fa-user",
      count: stats[StatTypes.TOTAL_USERS]
    });
    const teamCount = react_default.a.createElement(statistic_count_StatisticCount, {
      title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "analytics.system.totalTeams",
        defaultMessage: "Total Teams"
      }),
      icon: "fa-users",
      count: stats[StatTypes.TOTAL_TEAMS]
    });
    const channelCount = react_default.a.createElement(statistic_count_StatisticCount, {
      title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "analytics.system.totalChannels",
        defaultMessage: "Total Channels"
      }),
      icon: "fa-globe",
      count: stats[StatTypes.TOTAL_PUBLIC_CHANNELS] + stats[StatTypes.TOTAL_PRIVATE_GROUPS]
    });
    const dailyActiveUsers = react_default.a.createElement(statistic_count_StatisticCount, {
      title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "analytics.system.dailyActiveUsers",
        defaultMessage: "Daily Active Users"
      }),
      icon: "fa-users",
      count: stats[StatTypes.DAILY_ACTIVE_USERS]
    });
    const monthlyActiveUsers = react_default.a.createElement(statistic_count_StatisticCount, {
      title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "analytics.system.monthlyActiveUsers",
        defaultMessage: "Monthly Active Users"
      }),
      icon: "fa-users",
      count: stats[StatTypes.MONTHLY_ACTIVE_USERS]
    });
    let firstRow;
    let secondRow;

    if (isLicensed && skippedIntensiveQueries) {
      firstRow = react_default.a.createElement("div", null, userCount, teamCount, channelCount, sessionCount);
      secondRow = react_default.a.createElement("div", null, commandCount, incomingCount, outgoingCount);
    } else if (isLicensed && !skippedIntensiveQueries) {
      firstRow = react_default.a.createElement("div", null, userCount, teamCount, channelCount, postCount);
      secondRow = react_default.a.createElement("div", null, sessionCount, commandCount, incomingCount, outgoingCount);
    } else if (!isLicensed) {
      firstRow = react_default.a.createElement("div", null, userCount, teamCount, channelCount, postCount);
    }

    const thirdRow = react_default.a.createElement("div", null, dailyActiveUsers, monthlyActiveUsers);
    return react_default.a.createElement("div", {
      className: "wrapper--fixed team_statistics"
    }, react_default.a.createElement(formatted_admin_header, {
      id: "analytics.system.title",
      defaultMessage: "System Statistics"
    }), react_default.a.createElement("div", {
      className: "admin-console__wrapper"
    }, react_default.a.createElement("div", {
      className: "admin-console__content"
    }, banner, react_default.a.createElement("div", {
      className: "row"
    }, firstRow, secondRow, thirdRow, advancedStats), advancedGraphs, postTotalGraph, activeUserGraph)));
  }

}

system_analytics_defineProperty(system_analytics_SystemAnalytics, "propTypes", {
  isLicensed: prop_types_default.a.bool.isRequired,
  stats: prop_types_default.a.object
});
// CONCATENATED MODULE: ./components/analytics/system_analytics/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




function system_analytics_mapStateToProps(state) {
  const license = Object(general["getLicense"])(state);
  const isLicensed = license.IsLicensed === 'true';
  return {
    isLicensed,
    stats: state.entities.admin.analytics
  };
}

/* harmony default export */ var system_analytics = (Object(es["connect"])(system_analytics_mapStateToProps)(system_analytics_SystemAnalytics));
// EXTERNAL MODULE: ./mattermost-redux/actions/teams.js
var actions_teams = __webpack_require__(299);

// EXTERNAL MODULE: ./mattermost-redux/actions/users.js
var actions_users = __webpack_require__(35);

// EXTERNAL MODULE: ./mattermost-redux/selectors/entities/teams.js
var entities_teams = __webpack_require__(32);

// EXTERNAL MODULE: ./stores/browser_store.jsx
var browser_store = __webpack_require__(1767);

// EXTERNAL MODULE: ./selectors/i18n.js
var selectors_i18n = __webpack_require__(302);

// CONCATENATED MODULE: ./components/admin_console/banner.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.



function Banner(props) {
  let title = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: "admin.banner.heading",
    defaultMessage: "Note:"
  });

  if (props.title) {
    title = props.title;
  }

  return react_default.a.createElement("div", {
    className: "banner"
  }, react_default.a.createElement("div", {
    className: "banner__content"
  }, react_default.a.createElement("h4", {
    className: "banner__heading"
  }, title), react_default.a.createElement("p", null, props.description)));
}
Banner.defaultProps = {};
Banner.propTypes = {
  title: prop_types_default.a.node,
  description: prop_types_default.a.node.isRequired
};
// CONCATENATED MODULE: ./components/analytics/table_chart.jsx
function table_chart_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




class table_chart_TableChart extends react_default.a.PureComponent {
  render() {
    return react_default.a.createElement("div", {
      className: "col-sm-6"
    }, react_default.a.createElement("div", {
      className: "total-count recent-active-users"
    }, react_default.a.createElement("div", {
      className: "title"
    }, this.props.title), react_default.a.createElement("div", {
      className: "content"
    }, react_default.a.createElement("table", null, react_default.a.createElement("tbody", null, this.props.data.map(item => {
      const tooltip = react_default.a.createElement(Tooltip["a" /* default */], {
        id: 'tip-table-entry-' + item.name
      }, item.tip);
      return react_default.a.createElement("tr", {
        key: 'table-entry-' + item.name
      }, react_default.a.createElement("td", null, react_default.a.createElement(OverlayTrigger["a" /* default */], {
        trigger: ['hover', 'focus'],
        delayShow: constants["N" /* default */].OVERLAY_TIME_DELAY,
        placement: "top",
        overlay: tooltip
      }, react_default.a.createElement("time", null, item.name))), react_default.a.createElement("td", null, item.value));
    }))))));
  }

}

table_chart_defineProperty(table_chart_TableChart, "propTypes", {
  /*
   * Table title
   */
  title: prop_types_default.a.node.isRequired,

  /*
   * Table data
   */
  data: prop_types_default.a.arrayOf(prop_types_default.a.shape({
    name: prop_types_default.a.string.isRequired,
    tip: prop_types_default.a.string.isRequired,
    value: prop_types_default.a.node.isRequired
  })).isRequired
});
// CONCATENATED MODULE: ./components/analytics/team_analytics/team_analytics.jsx
function team_analytics_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.















const LAST_ANALYTICS_TEAM = 'last_analytics_team';
class team_analytics_TeamAnalytics extends react_default.a.Component {
  constructor(props) {
    super(props);

    team_analytics_defineProperty(this, "getData", async id => {
      admin_actions["p" /* getStandardAnalytics */](id);
      admin_actions["o" /* getPostsPerDayAnalytics */](id);
      admin_actions["q" /* getUsersPerDayAnalytics */](id);
      const {
        data: recentlyActiveUsers
      } = await this.props.actions.getProfilesInTeam(id, 0, mattermost_redux_constants["General"].PROFILE_CHUNK_SIZE, 'last_activity_at');
      const {
        data: newUsers
      } = await this.props.actions.getProfilesInTeam(id, 0, mattermost_redux_constants["General"].PROFILE_CHUNK_SIZE, 'create_at');
      this.setState({
        recentlyActiveUsers,
        newUsers
      });
    });

    team_analytics_defineProperty(this, "handleTeamChange", e => {
      const teamId = e.target.value;
      let team;
      this.props.teams.forEach(t => {
        if (t.id === teamId) {
          team = t;
        }
      });
      this.setState({
        team
      });
      browser_store["a" /* default */].setGlobalItem(LAST_ANALYTICS_TEAM, teamId);
    });

    this.state = {
      team: props.initialTeam,
      recentlyActiveUsers: [],
      newUsers: []
    };
  }

  componentDidMount() {
    if (this.state.team) {
      this.getData(this.state.team.id);
    }

    this.props.actions.getTeams(0, 1000);
  }

  UNSAFE_componentWillUpdate(nextProps, nextState) {
    // eslint-disable-line camelcase
    if (nextState.team && nextState.team !== this.state.team) {
      this.getData(nextState.team.id);
    }
  }

  render() {
    if (this.props.teams.length === 0 || !this.state.team || !this.props.stats[this.state.team.id]) {
      return react_default.a.createElement(loading_screen["a" /* default */], null);
    }

    if (this.state.team == null) {
      return react_default.a.createElement(Banner, {
        description: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "analytics.team.noTeams",
          defaultMessage: "There are no teams on this server for which to view statistics."
        })
      });
    }

    const stats = this.props.stats[this.state.team.id];
    const postCountsDay = formatPostsPerDayData(stats[constants["E" /* StatTypes */].POST_PER_DAY]);
    const userCountsWithPostsDay = formatUsersWithPostsPerDayData(stats[constants["E" /* StatTypes */].USERS_WITH_POSTS_PER_DAY]);
    let banner = react_default.a.createElement("div", {
      className: "banner"
    }, react_default.a.createElement("div", {
      className: "banner__content"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "analytics.system.info",
      defaultMessage: "Only data for the chosen team is calculated. Excludes posts made in direct message channels, which are not tied to a team."
    })));
    let totalPostsCount;
    let postTotalGraph;
    let userActiveGraph;

    if (stats[constants["E" /* StatTypes */].TOTAL_POSTS] === -1) {
      banner = react_default.a.createElement("div", {
        className: "banner"
      }, react_default.a.createElement("div", {
        className: "banner__content"
      }, react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "analytics.system.infoAndSkippedIntensiveQueries",
        defaultMessage: "Only data for the chosen team is calculated. Excludes posts made in direct message channels, which are not tied to a team. \\n \\n Some statistics have been omitted because they put too much load on the system to calculate. See [https://docs.mattermost.com/administration/statistics.html](!https://docs.mattermost.com/administration/statistics.html) for more details."
      })));
    } else {
      totalPostsCount = react_default.a.createElement(statistic_count_StatisticCount, {
        title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "analytics.team.totalPosts",
          defaultMessage: "Total Posts"
        }),
        icon: "fa-comment",
        count: stats[constants["E" /* StatTypes */].TOTAL_POSTS]
      });
      postTotalGraph = react_default.a.createElement("div", {
        className: "row"
      }, react_default.a.createElement(line_chart_LineChart, {
        key: this.state.team.id,
        title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "analytics.team.totalPosts",
          defaultMessage: "Total Posts"
        }),
        data: postCountsDay,
        width: 740,
        height: 225
      }));
      userActiveGraph = react_default.a.createElement("div", {
        className: "row"
      }, react_default.a.createElement(line_chart_LineChart, {
        key: this.state.team.id,
        title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "analytics.team.activeUsers",
          defaultMessage: "Active Users With Posts"
        }),
        data: userCountsWithPostsDay,
        width: 740,
        height: 225
      }));
    }

    const recentActiveUsers = formatRecentUsersData(this.state.recentlyActiveUsers, this.props.locale);
    const newlyCreatedUsers = formatNewUsersData(this.state.newUsers, this.props.locale);
    const teams = this.props.teams.sort((a, b) => {
      const aName = a.display_name.toUpperCase();
      const bName = b.display_name.toUpperCase();

      if (aName === bName) {
        return 0;
      }

      if (aName > bName) {
        return 1;
      }

      return -1;
    }).map(team => {
      return react_default.a.createElement("option", {
        key: team.id,
        value: team.id
      }, team.display_name);
    });
    return react_default.a.createElement("div", {
      className: "wrapper--fixed team_statistics"
    }, react_default.a.createElement("div", {
      className: "admin-console__header team-statistics__header-row"
    }, react_default.a.createElement("div", {
      className: "team-statistics__header"
    }, react_default.a.createElement(formatted_markdown_message["b" /* default */], {
      id: "analytics.team.title",
      defaultMessage: "Team Statistics for {team}",
      values: {
        team: this.state.team.display_name
      }
    })), react_default.a.createElement("div", {
      className: "team-statistics__team-filter"
    }, react_default.a.createElement("select", {
      className: "form-control team-statistics__team-filter__dropdown",
      onChange: this.handleTeamChange,
      value: this.state.team.id
    }, teams))), react_default.a.createElement("div", {
      className: "admin-console__wrapper"
    }, react_default.a.createElement("div", {
      className: "admin-console__content"
    }, banner, react_default.a.createElement("div", {
      className: "row"
    }, react_default.a.createElement(statistic_count_StatisticCount, {
      title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "analytics.team.totalUsers",
        defaultMessage: "Total Active Users"
      }),
      icon: "fa-users",
      count: stats[constants["E" /* StatTypes */].TOTAL_USERS]
    }), react_default.a.createElement(statistic_count_StatisticCount, {
      title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "analytics.team.publicChannels",
        defaultMessage: "Public Channels"
      }),
      icon: "fa-globe",
      count: stats[constants["E" /* StatTypes */].TOTAL_PUBLIC_CHANNELS]
    }), react_default.a.createElement(statistic_count_StatisticCount, {
      title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "analytics.team.privateGroups",
        defaultMessage: "Private Channels"
      }),
      icon: "fa-lock",
      count: stats[constants["E" /* StatTypes */].TOTAL_PRIVATE_GROUPS]
    }), totalPostsCount), postTotalGraph, userActiveGraph, react_default.a.createElement("div", {
      className: "row"
    }, react_default.a.createElement(table_chart_TableChart, {
      title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "analytics.team.recentUsers",
        defaultMessage: "Recent Active Users"
      }),
      data: recentActiveUsers
    }), react_default.a.createElement(table_chart_TableChart, {
      title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "analytics.team.newlyCreated",
        defaultMessage: "Newly Created Users"
      }),
      data: newlyCreatedUsers
    })))));
  }

}

team_analytics_defineProperty(team_analytics_TeamAnalytics, "propTypes", {
  /*
   * Array of team objects
   */
  teams: prop_types_default.a.arrayOf(prop_types_default.a.object).isRequired,

  /*
   * Initial team to load analytics for
   */
  initialTeam: prop_types_default.a.object,

  /**
   * The locale of the current user
    */
  locale: prop_types_default.a.string.isRequired,
  stats: prop_types_default.a.object.isRequired,
  actions: prop_types_default.a.shape({
    /*
     * Function to get teams
     */
    getTeams: prop_types_default.a.func.isRequired,

    /*
     * Function to get users in a team
     */
    getProfilesInTeam: prop_types_default.a.func.isRequired
  }).isRequired
});

function formatRecentUsersData(data, locale) {
  if (data == null) {
    return [];
  }

  const formattedData = data.map(user => {
    const item = {};
    item.name = user.username;
    item.value = react_default.a.createElement(index_es["a" /* FormattedDate */], {
      value: user.last_activity_at,
      day: "numeric",
      month: Object(utils_i18n["a" /* getMonthLong */])(locale),
      year: "numeric",
      hour12: true,
      hour: "2-digit",
      minute: "2-digit"
    });
    item.tip = user.email;
    return item;
  });
  return formattedData;
}
function formatNewUsersData(data, locale) {
  if (data == null) {
    return [];
  }

  const formattedData = data.map(user => {
    const item = {};
    item.name = user.username;
    item.value = react_default.a.createElement(index_es["a" /* FormattedDate */], {
      value: user.create_at,
      day: "numeric",
      month: Object(utils_i18n["a" /* getMonthLong */])(locale),
      year: "numeric",
      hour12: true,
      hour: "2-digit",
      minute: "2-digit"
    });
    item.tip = user.email;
    return item;
  });
  return formattedData;
}
// CONCATENATED MODULE: ./components/analytics/team_analytics/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.








const team_analytics_LAST_ANALYTICS_TEAM = 'last_analytics_team';

function team_analytics_mapStateToProps(state) {
  const teams = Object(entities_teams["getTeamsList"])(state);
  const teamId = browser_store["a" /* default */].getGlobalItem(team_analytics_LAST_ANALYTICS_TEAM, null);
  const initialTeam = state.entities.teams.teams[teamId] || (teams.length > 0 ? teams[0] : null);
  return {
    initialTeam,
    locale: Object(selectors_i18n["a" /* getCurrentLocale */])(state),
    teams,
    stats: state.entities.admin.teamAnalytics
  };
}

function team_analytics_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      getTeams: actions_teams["getTeams"],
      getProfilesInTeam: actions_users["getProfilesInTeam"]
    }, dispatch)
  };
}

/* harmony default export */ var team_analytics = (Object(es["connect"])(team_analytics_mapStateToProps, team_analytics_mapDispatchToProps)(team_analytics_TeamAnalytics));
// EXTERNAL MODULE: ./node_modules/react-router-dom/esm/react-router-dom.js + 1 modules
var react_router_dom = __webpack_require__(1553);

// EXTERNAL MODULE: ./mattermost-redux/constants/plugins.js
var constants_plugins = __webpack_require__(447);
var plugins_default = /*#__PURE__*/__webpack_require__.n(constants_plugins);

// CONCATENATED MODULE: ./components/admin_console/admin_settings.jsx
function admin_settings_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.









class admin_settings_AdminSettings extends react_default.a.Component {
  constructor(props) {
    super(props);

    admin_settings_defineProperty(this, "closeTooltip", () => {
      this.setState({
        errorTooltip: false
      });
    });

    admin_settings_defineProperty(this, "openTooltip", e => {
      const elm = e.currentTarget.querySelector('.control-label');
      const isElipsis = elm.offsetWidth < elm.scrollWidth;
      this.setState({
        errorTooltip: isElipsis
      });
    });

    admin_settings_defineProperty(this, "handleChange", (id, value) => {
      this.setState({
        saveNeeded: true,
        [id]: value
      });
      this.props.setNavigationBlocked(true);
    });

    admin_settings_defineProperty(this, "handleSubmit", e => {
      e.preventDefault();
      this.doSubmit();
    });

    admin_settings_defineProperty(this, "doSubmit", callback => {
      this.setState({
        saving: true,
        serverError: null
      }); // clone config so that we aren't modifying data in the stores

      let config = JSON.parse(JSON.stringify(this.props.config));
      config = this.getConfigFromState(config);
      Object(admin_actions["B" /* saveConfig */])(config, savedConfig => {
        this.setState(this.getStateFromConfig(savedConfig));
        this.setState({
          saveNeeded: false,
          saving: false
        });
        this.props.setNavigationBlocked(false);

        if (callback) {
          callback();
        }

        if (this.handleSaved) {
          this.handleSaved(config);
        }
      }, err => {
        this.setState({
          saving: false,
          serverError: err.message,
          serverErrorId: err.id
        });

        if (callback) {
          callback();
        }

        if (this.handleSaved) {
          this.handleSaved(config);
        }
      });
    });

    admin_settings_defineProperty(this, "parseInt", (str, defaultValue) => {
      const n = parseInt(str, 10);

      if (isNaN(n)) {
        if (defaultValue) {
          return defaultValue;
        }

        return 0;
      }

      return n;
    });

    admin_settings_defineProperty(this, "parseIntNonNegative", (str, defaultValue) => {
      const n = parseInt(str, 10);

      if (isNaN(n) || n < 0) {
        if (defaultValue) {
          return defaultValue;
        }

        return 0;
      }

      return n;
    });

    admin_settings_defineProperty(this, "parseIntNonZero", (str, defaultValue, minimumValue = 1) => {
      const n = parseInt(str, 10);

      if (isNaN(n) || n < minimumValue) {
        if (defaultValue) {
          return defaultValue;
        }

        return 1;
      }

      return n;
    });

    admin_settings_defineProperty(this, "isSetByEnv", path => {
      return Boolean(this.getConfigValue(this.props.environmentConfig, path));
    });

    this.state = Object.assign(this.getStateFromConfig(props.config), {
      saveNeeded: false,
      saving: false,
      serverError: null,
      errorTooltip: false
    });
  }

  getConfigValue(config, path) {
    const pathParts = path.split('.');
    return pathParts.reduce((obj, pathPart) => {
      if (!obj) {
        return null;
      }

      return obj[pathPart];
    }, config);
  }

  setConfigValue(config, path, value) {
    function setValue(obj, pathParts) {
      const part = pathParts[0];

      if (pathParts.length === 1) {
        obj[part] = value;
      } else {
        if (obj[part] == null) {
          obj[part] = {};
        }

        setValue(obj[part], pathParts.slice(1));
      }
    }

    setValue(config, path.split('.'));
  }

  render() {
    return react_default.a.createElement("form", {
      className: "form-horizontal",
      role: "form",
      onSubmit: this.handleSubmit
    }, react_default.a.createElement("div", {
      className: "wrapper--fixed"
    }, react_default.a.createElement(admin_header_AdminHeader, null, this.renderTitle()), this.renderSettings(), react_default.a.createElement("div", {
      className: "admin-console-save"
    }, react_default.a.createElement(save_button["a" /* default */], {
      saving: this.state.saving,
      disabled: !this.state.saveNeeded || this.canSave && !this.canSave(),
      onClick: this.handleSubmit,
      savingMessage: Object(utils["gb" /* localizeMessage */])('admin.saving', 'Saving Config...')
    }), react_default.a.createElement("div", {
      className: "error-message",
      ref: "errorMessage",
      onMouseOver: this.openTooltip,
      onMouseOut: this.closeTooltip
    }, react_default.a.createElement(form_error["a" /* default */], {
      error: this.state.serverError
    })), react_default.a.createElement(Overlay["a" /* default */], {
      show: this.state.errorTooltip,
      delayShow: constants["N" /* default */].OVERLAY_TIME_DELAY,
      placement: "top",
      target: this.refs.errorMessage
    }, react_default.a.createElement(Tooltip["a" /* default */], {
      id: "error-tooltip"
    }, this.state.serverError)))));
  }

}

admin_settings_defineProperty(admin_settings_AdminSettings, "propTypes", {
  /*
   * Object representing the config file
   */
  config: prop_types_default.a.object,

  /*
   * Object containing config fields that have been set through environment variables
   */
  environmentConfig: prop_types_default.a.object,

  /*
   * Action for whether a save is needed
   */
  setNavigationBlocked: prop_types_default.a.func
});
// CONCATENATED MODULE: ./components/admin_console/plugin_management/plugin_management.jsx
function plugin_management_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.













const PluginItemState = ({
  state
}) => {
  switch (state) {
    case plugins_default.a.PLUGIN_STATE_NOT_RUNNING:
      return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.state.not_running",
        defaultMessage: "Not running"
      });

    case plugins_default.a.PLUGIN_STATE_STARTING:
      return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.state.starting",
        defaultMessage: "Starting"
      });

    case plugins_default.a.PLUGIN_STATE_RUNNING:
      return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.state.running",
        defaultMessage: "Running"
      });

    case plugins_default.a.PLUGIN_STATE_FAILED_TO_START:
      return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.state.failed_to_start",
        defaultMessage: "Failed to start"
      });

    case plugins_default.a.PLUGIN_STATE_FAILED_TO_STAY_RUNNING:
      return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.state.failed_to_stay_running",
        defaultMessage: "Crashing"
      });

    case plugins_default.a.PLUGIN_STATE_STOPPING:
      return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.state.stopping",
        defaultMessage: "Stopping"
      });

    default:
      return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.state.unknown",
        defaultMessage: "Unknown"
      });
  }
};

PluginItemState.propTypes = {
  state: prop_types_default.a.number.isRequired
};

const PluginItemStateDescription = ({
  state
}) => {
  switch (state) {
    case plugins_default.a.PLUGIN_STATE_NOT_RUNNING:
      return react_default.a.createElement("div", {
        className: "alert alert-info"
      }, react_default.a.createElement("i", {
        className: "fa fa-ban"
      }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.state.not_running.description",
        defaultMessage: "This plugin is not enabled."
      }));

    case plugins_default.a.PLUGIN_STATE_STARTING:
      return react_default.a.createElement("div", {
        className: "alert alert-success"
      }, react_default.a.createElement("i", {
        className: "fa fa-info"
      }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.state.starting.description",
        defaultMessage: "This plugin is starting."
      }));

    case plugins_default.a.PLUGIN_STATE_RUNNING:
      return react_default.a.createElement("div", {
        className: "alert alert-success"
      }, react_default.a.createElement("i", {
        className: "fa fa-check"
      }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.state.running.description",
        defaultMessage: "This plugin is running."
      }));

    case plugins_default.a.PLUGIN_STATE_FAILED_TO_START:
      return react_default.a.createElement("div", {
        className: "alert alert-warning"
      }, react_default.a.createElement("i", {
        className: "fa fa-warning"
      }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.state.failed_to_start.description",
        defaultMessage: "This plugin failed to start. Check your system logs for errors."
      }));

    case plugins_default.a.PLUGIN_STATE_FAILED_TO_STAY_RUNNING:
      return react_default.a.createElement("div", {
        className: "alert alert-warning"
      }, react_default.a.createElement("i", {
        className: "fa fa-warning"
      }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.state.failed_to_stay_running.description",
        defaultMessage: "This plugin crashed multiple times and is no longer running. Check your system logs for errors."
      }));

    case plugins_default.a.PLUGIN_STATE_STOPPING:
      return react_default.a.createElement("div", {
        className: "alert alert-info"
      }, react_default.a.createElement("i", {
        className: "fa fa-info"
      }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.state.stopping.description",
        defaultMessage: "This plugin is stopping."
      }));

    default:
      return null;
  }
};

PluginItemStateDescription.propTypes = {
  state: prop_types_default.a.number.isRequired
};

const PluginItem = ({
  pluginStatus,
  removing,
  handleEnable,
  handleDisable,
  handleRemove,
  showInstances,
  hasSettings
}) => {
  let activateButton;
  const activating = pluginStatus.state === plugins_default.a.PLUGIN_STATE_STARTING;
  const deactivating = pluginStatus.state === plugins_default.a.PLUGIN_STATE_STOPPING;

  if (pluginStatus.active) {
    activateButton = react_default.a.createElement("a", {
      "data-plugin-id": pluginStatus.id,
      disabled: deactivating,
      onClick: handleDisable
    }, deactivating ? react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.plugin.disabling",
      defaultMessage: "Disabling..."
    }) : react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.plugin.disable",
      defaultMessage: "Disable"
    }));
  } else {
    activateButton = react_default.a.createElement("a", {
      "data-plugin-id": pluginStatus.id,
      disabled: activating,
      onClick: handleEnable
    }, activating ? react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.plugin.enabling",
      defaultMessage: "Enabling..."
    }) : react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.plugin.enable",
      defaultMessage: "Enable"
    }));
  }

  let settingsButton = null;

  if (hasSettings) {
    settingsButton = react_default.a.createElement("span", null, ' - ', react_default.a.createElement(react_router_dom["a" /* Link */], {
      to: '/admin_console/plugins/plugin_' + pluginStatus.id
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.plugin.settingsButton",
      defaultMessage: "Settings"
    })));
  }

  let removeButton;

  if (!pluginStatus.is_prepackaged) {
    let removeButtonText;

    if (removing) {
      removeButtonText = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.removing",
        defaultMessage: "Removing..."
      });
    } else {
      removeButtonText = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.remove",
        defaultMessage: "Remove"
      });
    }

    removeButton = react_default.a.createElement("span", null, ' - ', react_default.a.createElement("a", {
      "data-plugin-id": pluginStatus.id,
      disabled: removing,
      onClick: handleRemove
    }, removeButtonText));
  }

  let description;

  if (pluginStatus.description) {
    description = react_default.a.createElement("div", {
      className: "padding-top"
    }, pluginStatus.description);
  }

  let prepackagedLabel;

  if (pluginStatus.is_prepackaged) {
    prepackagedLabel = react_default.a.createElement("span", null, ', ', react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.plugin.prepackaged",
      defaultMessage: "pre-packaged"
    }));
  }

  const notices = [];

  if (pluginStatus.instances.some(instance => instance.version !== pluginStatus.version)) {
    notices.push(react_default.a.createElement("div", {
      key: "multiple-versions",
      className: "alert alert-warning"
    }, react_default.a.createElement("i", {
      className: "fa fa-warning"
    }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.plugin.multiple_versions_warning",
      defaultMessage: "There are multiple versions of this plugin installed across your cluster. Re-install this plugin to ensure it works consistently."
    })));
  }

  notices.push(react_default.a.createElement(PluginItemStateDescription, {
    key: "state-description",
    state: pluginStatus.state
  }));
  const instances = pluginStatus.instances.slice();
  instances.sort((a, b) => {
    if (a.cluster_id < b.cluster_id) {
      return -1;
    } else if (a.cluster_id > b.cluster_id) {
      return 1;
    }

    return 0;
  });
  let clusterSummary;

  if (showInstances) {
    clusterSummary = react_default.a.createElement("div", {
      className: "padding-top x2 padding-bottom"
    }, react_default.a.createElement("div", {
      className: "row"
    }, react_default.a.createElement("div", {
      className: "col-md-6"
    }, react_default.a.createElement("strong", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.plugin.cluster_instance",
      defaultMessage: "Cluster Instance"
    }))), react_default.a.createElement("div", {
      className: "col-md-3"
    }, react_default.a.createElement("strong", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.plugin.version_title",
      defaultMessage: "Version"
    }))), react_default.a.createElement("div", {
      className: "col-md-3"
    }, react_default.a.createElement("strong", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.plugin.state",
      defaultMessage: "State"
    })))), instances.map(instance => react_default.a.createElement("div", {
      key: instance.cluster_id,
      className: "row"
    }, react_default.a.createElement("div", {
      className: "col-md-6"
    }, instance.cluster_id), react_default.a.createElement("div", {
      className: "col-md-3"
    }, instance.version), react_default.a.createElement("div", {
      className: "col-md-3"
    }, react_default.a.createElement(PluginItemState, {
      state: instance.state
    })))));
  }

  return react_default.a.createElement("div", null, react_default.a.createElement("div", null, react_default.a.createElement("strong", null, pluginStatus.name), ' (', pluginStatus.id, ' - ', pluginStatus.version, prepackagedLabel, ')'), description, react_default.a.createElement("div", {
    className: "padding-top"
  }, activateButton, removeButton, settingsButton), react_default.a.createElement("div", null, notices), react_default.a.createElement("div", null, clusterSummary), react_default.a.createElement("hr", null));
};

PluginItem.propTypes = {
  pluginStatus: prop_types_default.a.object.isRequired,
  removing: prop_types_default.a.bool.isRequired,
  handleEnable: prop_types_default.a.func.isRequired,
  handleDisable: prop_types_default.a.func.isRequired,
  handleRemove: prop_types_default.a.func.isRequired,
  showInstances: prop_types_default.a.bool.isRequired,
  hasSettings: prop_types_default.a.bool.isRequired
};
class plugin_management_PluginManagement extends admin_settings_AdminSettings {
  constructor(props) {
    super(props);

    plugin_management_defineProperty(this, "handleUpload", () => {
      this.setState({
        lastMessage: null,
        serverError: null
      });
      const element = this.refs.fileInput;

      if (element.files.length > 0) {
        this.setState({
          fileSelected: true,
          file: element.files[0]
        });
      }
    });

    plugin_management_defineProperty(this, "helpSubmitUpload", async (file, force) => {
      this.setState({
        uploading: true
      });
      const {
        error
      } = await this.props.actions.uploadPlugin(file, force);

      if (error) {
        if (error.server_error_id === 'app.plugin.install_id.app_error' && !force) {
          this.setState({
            confirmOverwriteUploadModal: true,
            overwritingUpload: true
          });
          return;
        }

        this.setState({
          file: null,
          fileSelected: false,
          uploading: false
        });

        if (error.server_error_id === 'app.plugin.activate.app_error') {
          this.setState({
            serverError: utils["gb" /* localizeMessage */]('admin.plugin.error.activate', 'Unable to upload the plugin. It may conflict with another plugin on your server.')
          });
        } else if (error.server_error_id === 'app.plugin.extract.app_error') {
          this.setState({
            serverError: utils["gb" /* localizeMessage */]('admin.plugin.error.extract', 'Encountered an error when extracting the plugin. Review your plugin file content and try again.')
          });
        } else {
          this.setState({
            serverError: error.message
          });
        }

        this.setState({
          file: null,
          fileSelected: false
        });
        return;
      }

      this.setState({
        loading: true
      });
      await this.props.actions.getPlugins();
      let msg = `Successfully uploaded plugin from ${file.name}`;

      if (this.state.overwritingUpload) {
        msg = `Successfully updated plugin from ${file.name}`;
      }

      this.setState({
        file: null,
        fileSelected: false,
        serverError: null,
        lastMessage: msg,
        overwritingUpload: false,
        uploading: false,
        loading: false
      });
    });

    plugin_management_defineProperty(this, "handleSubmitUpload", e => {
      e.preventDefault();
      const element = this.refs.fileInput;

      if (element.files.length === 0) {
        return;
      }

      const file = element.files[0];
      this.helpSubmitUpload(file, false);
      utils["d" /* clearFileInput */](element);
    });

    plugin_management_defineProperty(this, "handleOverwriteUploadPluginCancel", () => {
      this.setState({
        file: null,
        fileSelected: false,
        serverError: null,
        confirmOverwriteUploadModal: false,
        lastMessage: null,
        uploading: false
      });
    });

    plugin_management_defineProperty(this, "handleOverwriteUploadPlugin", () => {
      this.setState({
        confirmOverwriteUploadModal: false
      });
      this.helpSubmitUpload(this.state.file, true);
    });

    plugin_management_defineProperty(this, "onPluginDownloadUrlChange", e => {
      this.setState({
        pluginDownloadUrl: e.target.value
      });
    });

    plugin_management_defineProperty(this, "installFromUrl", async force => {
      const {
        pluginDownloadUrl
      } = this.state;
      this.setState({
        installing: true,
        serverError: null,
        lastMessage: null
      });
      const {
        error
      } = await this.props.actions.installPluginFromUrl(pluginDownloadUrl, force);

      if (error) {
        if (error.server_error_id === 'app.plugin.install_id.app_error' && !force) {
          this.setState({
            confirmOverwriteInstallModal: true,
            overwritingInstall: true
          });
          return;
        }

        this.setState({
          installing: false
        });

        if (error.server_error_id === 'app.plugin.extract.app_error') {
          this.setState({
            serverError: utils["gb" /* localizeMessage */]('admin.plugin.error.extract', 'Encountered an error when extracting the plugin. Review your plugin file content and try again.')
          });
        } else {
          this.setState({
            serverError: error.message
          });
        }

        return;
      }

      this.setState({
        loading: true
      });
      await this.props.actions.getPlugins();
      let msg = `Successfully installed plugin from ${pluginDownloadUrl}`;

      if (this.state.overwritingInstall) {
        msg = `Successfully updated plugin from ${pluginDownloadUrl}`;
      }

      this.setState({
        serverError: null,
        lastMessage: msg,
        overwritingInstall: false,
        installing: false,
        loading: false
      });
    });

    plugin_management_defineProperty(this, "handleSubmitInstall", e => {
      e.preventDefault();
      return this.installFromUrl(false);
    });

    plugin_management_defineProperty(this, "handleOverwriteInstallPluginCancel", () => {
      this.setState({
        confirmOverwriteInstallModal: false,
        installing: false,
        serverError: null,
        lastMessage: null
      });
    });

    plugin_management_defineProperty(this, "handleOverwriteInstallPlugin", () => {
      this.setState({
        confirmOverwriteInstallModal: false
      });
      return this.installFromUrl(true);
    });

    plugin_management_defineProperty(this, "handleRemove", async e => {
      this.setState({
        lastMessage: null,
        serverError: null
      });
      e.preventDefault();
      const pluginId = e.currentTarget.getAttribute('data-plugin-id');
      this.setState({
        removing: pluginId
      });
      const {
        error
      } = await this.props.actions.removePlugin(pluginId);
      this.setState({
        removing: null
      });

      if (error) {
        this.setState({
          serverError: error.message
        });
      }
    });

    plugin_management_defineProperty(this, "handleEnable", async e => {
      e.preventDefault();
      this.setState({
        lastMessage: null,
        serverError: null
      });
      const pluginId = e.currentTarget.getAttribute('data-plugin-id');
      const {
        error
      } = await this.props.actions.enablePlugin(pluginId);

      if (error) {
        this.setState({
          serverError: error.message
        });
      }
    });

    plugin_management_defineProperty(this, "handleDisable", async e => {
      this.setState({
        lastMessage: null,
        serverError: null
      });
      e.preventDefault();
      const pluginId = e.currentTarget.getAttribute('data-plugin-id');
      const {
        error
      } = await this.props.actions.disablePlugin(pluginId);

      if (error) {
        this.setState({
          serverError: error.message
        });
      }
    });

    plugin_management_defineProperty(this, "renderOverwritePluginModal", ({
      show,
      onConfirm,
      onCancel
    }) => {
      const title = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.upload.overwrite_modal.title",
        defaultMessage: "Overwrite existing plugin?"
      });
      const message = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.upload.overwrite_modal.desc",
        defaultMessage: "A plugin with this ID already exists. Would you like to overwrite it?"
      });
      const overwriteButton = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.upload.overwrite_modal.overwrite",
        defaultMessage: "Overwrite"
      });
      return react_default.a.createElement(confirm_modal["a" /* default */], {
        show: show,
        title: title,
        message: message,
        confirmButtonClass: "btn btn-danger",
        confirmButtonText: overwriteButton,
        onConfirm: onConfirm,
        onCancel: onCancel
      });
    });

    plugin_management_defineProperty(this, "renderEnablePluginsSetting", () => {
      const hideEnablePlugins = this.props.config.ExperimentalSettings.RestrictSystemAdmin;

      if (!hideEnablePlugins) {
        return react_default.a.createElement(boolean_setting_BooleanSetting, {
          id: "enable",
          label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
            id: "admin.plugins.settings.enable",
            defaultMessage: "Enable Plugins: "
          }),
          helpText: react_default.a.createElement(formatted_markdown_message["b" /* default */], {
            id: "admin.plugins.settings.enableDesc",
            defaultMessage: "When true, enables plugins on your Mattermost server. Use plugins to integrate with third-party systems, extend functionality, or customize the user interface of your Mattermost server. See [documentation](https://about.mattermost.com/default-plugin-uploads) to learn more."
          }),
          value: this.state.enable,
          onChange: this.handleChange,
          setByEnv: this.isSetByEnv('PluginSettings.Enable')
        });
      }

      return null;
    });

    this.getConfigFromState = this.getConfigFromState.bind(this);
    this.renderSettings = this.renderSettings.bind(this);
    this.state = Object.assign(this.state, {
      loading: true,
      fileSelected: false,
      file: null,
      pluginDownloadUrl: '',
      serverError: null,
      lastMessage: null,
      uploading: false,
      installing: false,
      overwritingUpload: false,
      confirmOverwriteUploadModal: false,
      overwritingInstall: false,
      confirmOverwriteInstallModal: false
    });
  }

  getConfigFromState(config) {
    config.PluginSettings.Enable = this.state.enable;
    config.PluginSettings.EnableUploads = this.state.enableUploads;
    config.PluginSettings.AllowInsecureDownloadUrl = this.state.allowInsecureDownloadUrl;
    return config;
  }

  getStateFromConfig(config) {
    const state = {
      enable: config.PluginSettings.Enable,
      enableUploads: config.PluginSettings.EnableUploads,
      allowInsecureDownloadUrl: config.PluginSettings.AllowInsecureDownloadUrl
    };
    return state;
  }

  componentDidMount() {
    if (this.state.enable) {
      this.props.actions.getPluginStatuses().then(() => this.setState({
        loading: false
      }));
    }
  }

  renderTitle() {
    return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.plugin.management.title",
      defaultMessage: "Management"
    });
  }

  renderSettings() {
    const {
      enableUploads
    } = this.state;
    const enable = this.props.config.PluginSettings.Enable;
    let serverError = '';
    let lastMessage = '';

    if (this.state.serverError) {
      serverError = react_default.a.createElement("div", {
        className: "col-sm-12"
      }, react_default.a.createElement("div", {
        className: "form-group has-error half"
      }, react_default.a.createElement("label", {
        className: "control-label"
      }, this.state.serverError)));
    }

    if (this.state.lastMessage) {
      lastMessage = react_default.a.createElement("div", {
        className: "col-sm-12"
      }, react_default.a.createElement("div", {
        className: "form-group half"
      }, this.state.lastMessage));
    }

    let btnClass = 'btn';

    if (this.state.fileSelected) {
      btnClass = 'btn btn-primary';
    }

    let fileName;

    if (this.state.file) {
      fileName = this.state.file.name;
    }

    let uploadButtonText;

    if (this.state.uploading) {
      uploadButtonText = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.uploading",
        defaultMessage: "Uploading..."
      });
    } else {
      uploadButtonText = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.upload",
        defaultMessage: "Upload"
      });
    }

    let installButtonText;

    if (this.state.installing) {
      installButtonText = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.installing",
        defaultMessage: "Installing..."
      });
    } else {
      installButtonText = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.install",
        defaultMessage: "Install"
      });
    }

    let pluginsList;
    let pluginsContainer;
    let pluginsListContainer;
    const plugins = Object.values(this.props.pluginStatuses);

    if (this.state.loading) {
      pluginsList = react_default.a.createElement(loading_screen["a" /* default */], null);
    } else if (plugins.length === 0) {
      pluginsListContainer = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.no_plugins",
        defaultMessage: "No installed plugins."
      });
    } else {
      const showInstances = plugins.some(pluginStatus => pluginStatus.instances.length > 1);
      plugins.sort((a, b) => {
        if (a.name < b.name) {
          return -1;
        } else if (a.name > b.name) {
          return 1;
        }

        return 0;
      });
      pluginsList = plugins.map(pluginStatus => {
        const p = this.props.plugins[pluginStatus.id];
        const hasSettings = Boolean(p && p.settings_schema && (p.settings_schema.header || p.settings_schema.footer || p.settings_schema.settings && p.settings_schema.settings.length > 0));
        return react_default.a.createElement(PluginItem, {
          key: pluginStatus.id,
          pluginStatus: pluginStatus,
          removing: this.state.removing === pluginStatus.id,
          handleEnable: this.handleEnable,
          handleDisable: this.handleDisable,
          handleRemove: this.handleRemove,
          showInstances: showInstances,
          hasSettings: hasSettings
        });
      });
      pluginsListContainer = react_default.a.createElement("div", {
        className: "alert alert-transparent"
      }, pluginsList);
    }

    if (enable) {
      pluginsContainer = react_default.a.createElement("div", {
        className: "form-group"
      }, react_default.a.createElement("label", {
        className: "control-label col-sm-4"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugin.installedTitle",
        defaultMessage: "Installed Plugins: "
      })), react_default.a.createElement("div", {
        className: "col-sm-8"
      }, react_default.a.createElement("p", {
        className: "help-text"
      }, react_default.a.createElement(index_es["b" /* FormattedHTMLMessage */], {
        id: "admin.plugin.installedDesc",
        defaultMessage: "Installed plugins on your Mattermost server. Pre-packaged plugins are installed by default, and can be disabled but not removed."
      })), react_default.a.createElement("br", null), pluginsListContainer));
    }

    let uploadHelpText;

    if (enableUploads && enable) {
      uploadHelpText = react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "admin.plugin.uploadDesc",
        defaultMessage: "Upload a plugin for your Mattermost server. See [documentation](!https://about.mattermost.com/default-plugin-uploads) to learn more."
      });
    } else if (enable === true && enableUploads === false) {
      uploadHelpText = react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "admin.plugin.uploadDisabledDesc",
        defaultMessage: "Enable plugin uploads in config.json. See [documentation](!https://about.mattermost.com/default-plugin-uploads) to learn more."
      });
    } else {
      uploadHelpText = react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "admin.plugin.uploadAndPluginDisabledDesc",
        defaultMessage: "To enable plugins, set **Enable Plugins** to true. See [documentation](!https://about.mattermost.com/default-plugin-uploads) to learn more."
      });
    }

    const uploadBtnClass = enableUploads ? 'btn btn-primary' : 'btn';
    const overwriteUploadPluginModal = this.state.confirmOverwriteUploadModal && this.renderOverwritePluginModal({
      show: this.state.confirmOverwriteUploadModal,
      onConfirm: this.handleOverwriteUploadPlugin,
      onCancel: this.handleOverwriteUploadPluginCancel
    });
    const overwriteInstallPluginModal = this.state.confirmOverwriteInstallModal && this.renderOverwritePluginModal({
      show: this.state.confirmOverwriteInstallModal,
      onConfirm: this.handleOverwriteInstallPlugin,
      onCancel: this.handleOverwriteInstallPluginCancel
    });
    return react_default.a.createElement("div", {
      className: "admin-console__wrapper"
    }, react_default.a.createElement("div", {
      className: "admin-console__content"
    }, react_default.a.createElement(settings_group_SettingsGroup, {
      id: 'PluginSettings',
      container: false
    }, this.renderEnablePluginsSetting(), react_default.a.createElement("div", {
      className: "form-group"
    }, react_default.a.createElement("label", {
      className: "control-label col-sm-4"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.plugin.uploadTitle",
      defaultMessage: "Upload Plugin: "
    })), react_default.a.createElement("div", {
      className: "col-sm-8"
    }, react_default.a.createElement("div", {
      className: "file__upload"
    }, react_default.a.createElement("button", {
      className: uploadBtnClass,
      disabled: !enableUploads || !enable
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.plugin.choose",
      defaultMessage: "Choose File"
    })), react_default.a.createElement("input", {
      ref: "fileInput",
      type: "file",
      accept: ".gz",
      onChange: this.handleUpload,
      disabled: !enableUploads || !enable
    })), react_default.a.createElement("button", {
      className: btnClass,
      disabled: !this.state.fileSelected,
      onClick: this.handleSubmitUpload
    }, uploadButtonText), react_default.a.createElement("div", {
      className: "help-text no-margin"
    }, fileName), serverError, lastMessage, react_default.a.createElement("p", {
      className: "help-text"
    }, uploadHelpText))), react_default.a.createElement("div", {
      className: "form-group"
    }, react_default.a.createElement("label", {
      className: "control-label col-sm-4"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.plugin.installTitle",
      defaultMessage: "Install Plugin from URL: "
    })), react_default.a.createElement("div", {
      className: "col-sm-8"
    }, react_default.a.createElement("p", null, react_default.a.createElement("input", {
      style: {
        width: '100%'
      },
      onChange: this.onPluginDownloadUrlChange,
      value: this.state.pluginDownloadUrl,
      type: "text"
    }))), react_default.a.createElement("div", {
      className: "col-sm-4"
    }), react_default.a.createElement("div", {
      className: "col-sm-8"
    }, react_default.a.createElement("p", null, react_default.a.createElement("button", {
      id: "installPluginButton",
      className: btnClass,
      disabled: this.state.installing || !this.state.pluginDownloadUrl,
      onClick: this.handleSubmitInstall
    }, installButtonText)))), react_default.a.createElement(boolean_setting_BooleanSetting, {
      id: "allowInsecureDownloadUrl",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.plugins.settings.allowInsecureUrl",
        defaultMessage: "Allow Insecure Install URL:"
      }),
      helpText: react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "admin.plugins.settings.allowInsecureUrlDesc",
        defaultMessage: "When false, URLs provided must use the HTTPS protocol."
      }),
      value: this.state.allowInsecureDownloadUrl,
      onChange: this.handleChange,
      setByEnv: this.isSetByEnv('PluginSettings.AllowInsecureDownloadUrl')
    }), pluginsContainer), overwriteUploadPluginModal, overwriteInstallPluginModal));
  }

}

plugin_management_defineProperty(plugin_management_PluginManagement, "propTypes", {
  config: prop_types_default.a.object.isRequired,
  pluginStatuses: prop_types_default.a.object.isRequired,
  plugins: prop_types_default.a.object.isRequired,
  actions: prop_types_default.a.shape({
    uploadPlugin: prop_types_default.a.func.isRequired,
    removePlugin: prop_types_default.a.func.isRequired,
    getPlugins: prop_types_default.a.func.isRequired,
    getPluginStatuses: prop_types_default.a.func.isRequired,
    enablePlugin: prop_types_default.a.func.isRequired,
    disablePlugin: prop_types_default.a.func.isRequired,
    installPluginFromUrl: prop_types_default.a.func.isRequired
  }).isRequired
});
// CONCATENATED MODULE: ./components/admin_console/plugin_management/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





function plugin_management_mapStateToProps(state) {
  return {
    plugins: state.entities.admin.plugins,
    pluginStatuses: state.entities.admin.pluginStatuses
  };
}

function plugin_management_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      uploadPlugin: admin["uploadPlugin"],
      installPluginFromUrl: admin["installPluginFromUrl"],
      removePlugin: admin["removePlugin"],
      getPlugins: admin["getPlugins"],
      getPluginStatuses: admin["getPluginStatuses"],
      enablePlugin: admin["enablePlugin"],
      disablePlugin: admin["disablePlugin"]
    }, dispatch)
  };
}

/* harmony default export */ var plugin_management = (Object(es["connect"])(plugin_management_mapStateToProps, plugin_management_mapDispatchToProps)(plugin_management_PluginManagement));
// EXTERNAL MODULE: ./node_modules/reselect/es/index.js
var reselect_es = __webpack_require__(150);

// CONCATENATED MODULE: ./components/admin_console/custom_plugin_settings/custom_plugin_settings.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

class custom_plugin_settings_CustomPluginSettings extends schema_admin_settings_SchemaAdminSettings {
  constructor(props) {
    super(props);
    this.isPlugin = true;
    this.getStateFromConfig = custom_plugin_settings_CustomPluginSettings.getStateFromConfig;
  }

  static getDerivedStateFromProps(props, state) {
    if (props.schema && props.schema.id !== state.prevSchemaId) {
      return {
        prevSchemaId: props.schema.id,
        saveNeeded: false,
        saving: false,
        serverError: null,
        errorTooltip: false,
        ...custom_plugin_settings_CustomPluginSettings.getStateFromConfig(props.config, props.schema, props.roles)
      };
    }

    return null;
  }

  getConfigFromState(config) {
    const schema = this.props.schema;

    if (schema) {
      if (!config.PluginSettings.Plugins[schema.id]) {
        config.PluginSettings.Plugins[schema.id] = {};
      }

      const configSettings = config.PluginSettings.Plugins[schema.id];
      const settings = schema.settings || [];
      settings.forEach(setting => {
        const lowerKey = setting.key.toLowerCase();
        const value = this.state[lowerKey];

        if (value == null && setting.default == null) {
          Reflect.deleteProperty(configSettings, lowerKey);
        } else if (value == null) {
          configSettings[lowerKey] = setting.default;
        } else {
          configSettings[lowerKey] = value;
        }
      });
    }

    return config;
  }

  static getStateFromConfig(config, schema) {
    const state = {};

    if (schema) {
      const configSettings = config.PluginSettings.Plugins[schema.id] || {};
      const settings = schema.settings || [];
      settings.forEach(setting => {
        const lowerKey = setting.key.toLowerCase();
        state[lowerKey] = configSettings[lowerKey] == null ? setting.default : configSettings[lowerKey];
      });
    }

    return state;
  }

}
// CONCATENATED MODULE: ./components/admin_console/custom_plugin_settings/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





function makeGetPluginSchema() {
  return Object(reselect_es["a" /* createSelector */])((state, pluginId) => state.entities.admin.plugins[pluginId], plugin => {
    if (!plugin) {
      return null;
    }

    let settings;

    if (plugin.settings_schema && plugin.settings_schema.settings) {
      settings = plugin.settings_schema.settings.map(setting => {
        return { ...setting,
          help_text_markdown: true,
          label: setting.display_name
        };
      });
    }

    return { ...plugin.settings_schema,
      id: plugin.id,
      name: plugin.name,
      settings,
      translate: Boolean(plugin.translate)
    };
  });
}

function makeMapStateToProps() {
  const getPluginSchema = makeGetPluginSchema();
  return (state, ownProps) => {
    const pluginId = ownProps.match.params.plugin_id;
    return {
      schema: getPluginSchema(state, pluginId),
      roles: Object(entities_roles["getRoles"])(state)
    };
  };
}

/* harmony default export */ var custom_plugin_settings = (Object(es["connect"])(makeMapStateToProps)(custom_plugin_settings_CustomPluginSettings));
// EXTERNAL MODULE: ./actions/diagnostics_actions.jsx
var diagnostics_actions = __webpack_require__(300);

// EXTERNAL MODULE: ./mattermost-redux/client/index.js
var client = __webpack_require__(27);

// CONCATENATED MODULE: ./components/icon/reload_icon.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.


class reload_icon_ReloadIcon extends react_default.a.PureComponent {
  render() {
    return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "generic_icons.reload",
      defaultMessage: "Reload Icon"
    }, title => react_default.a.createElement("i", {
      className: "fa fa-refresh",
      title: title
    }));
  }

}
// EXTERNAL MODULE: ./components/localized_input/localized_input.jsx
var localized_input = __webpack_require__(1577);

// CONCATENATED MODULE: ./components/admin_console/compliance_reports/compliance_reports.jsx
function compliance_reports_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.








class compliance_reports_ComplianceReports extends react_default.a.PureComponent {
  constructor(props) {
    super(props);

    compliance_reports_defineProperty(this, "reload", () => {
      this.setState({
        loadingReports: true
      });
      this.props.actions.getComplianceReports().then(() => this.setState({
        loadingReports: false
      }));
    });

    compliance_reports_defineProperty(this, "runReport", e => {
      e.preventDefault();
      this.setState({
        runningReport: true
      });
      const job = {};
      job.desc = this.refs.desc.value;
      job.emails = this.refs.emails.value;
      job.keywords = this.refs.keywords.value;
      job.start_at = Date.parse(this.refs.from.value);
      job.end_at = Date.parse(this.refs.to.value);
      this.props.actions.createComplianceReport(job).then(({
        data
      }) => {
        if (data) {
          this.refs.emails.value = '';
          this.refs.keywords.value = '';
          this.refs.desc.value = '';
          this.refs.from.value = '';
          this.refs.to.value = '';
        }

        this.setState({
          runningReport: false
        });
      });
    });

    this.state = {
      loadingReports: true
    };
  }

  componentDidMount() {
    if (!this.props.isLicensed || !this.props.enabled) {
      return;
    }

    this.props.actions.getComplianceReports().then(() => this.setState({
      loadingReports: false
    }));
  }

  getDateTime(millis) {
    const date = new Date(millis);
    return react_default.a.createElement("span", {
      style: compliance_reports_style.date
    }, react_default.a.createElement(index_es["a" /* FormattedDate */], {
      value: date,
      day: "2-digit",
      month: "short",
      year: "numeric"
    }), ' - ', react_default.a.createElement(index_es["d" /* FormattedTime */], {
      value: date,
      hour: "2-digit",
      minute: "2-digit"
    }));
  }

  render() {
    if (!this.props.isLicensed || !this.props.enabled) {
      return react_default.a.createElement("div", null);
    }

    let content = null;

    if (this.state.loadingReports) {
      content = react_default.a.createElement(loading_screen["a" /* default */], null);
    } else {
      var list = [];

      for (var i = 0; i < this.props.reports.length; i++) {
        const report = this.props.reports[i];
        let params = '';

        if (report.type === 'adhoc') {
          params = react_default.a.createElement("span", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
            id: "admin.compliance_reports.from",
            defaultMessage: "From:"
          }), ' ', this.getDateTime(report.start_at), react_default.a.createElement("br", null), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
            id: "admin.compliance_reports.to",
            defaultMessage: "To:"
          }), ' ', this.getDateTime(report.end_at), react_default.a.createElement("br", null), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
            id: "admin.compliance_reports.emails",
            defaultMessage: "Emails:"
          }), ' ', report.emails, react_default.a.createElement("br", null), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
            id: "admin.compliance_reports.keywords",
            defaultMessage: "Keywords:"
          }), ' ', report.keywords);
        }

        let download = '';
        let status = '';

        if (report.status === 'finished') {
          download = react_default.a.createElement("a", {
            href: `${client["Client4"].getBaseRoute()}/compliance/reports/${report.id}/download`
          }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
            id: "admin.compliance_table.download",
            defaultMessage: "Download"
          }));
          status = react_default.a.createElement("span", {
            style: compliance_reports_style.greenStatus
          }, report.status);
        } else if (report.status === 'failed') {
          status = react_default.a.createElement("span", {
            style: compliance_reports_style.redStatus
          }, report.status);
        }

        let user = report.user_id;
        const profile = this.props.users[report.user_id];

        if (profile) {
          user = profile.email;
        }

        list[i] = react_default.a.createElement("tr", {
          key: report.id
        }, react_default.a.createElement("td", {
          style: compliance_reports_style.dataCell
        }, download), react_default.a.createElement("td", null, this.getDateTime(report.create_at)), react_default.a.createElement("td", null, status), react_default.a.createElement("td", null, report.count), react_default.a.createElement("td", null, report.type), react_default.a.createElement("td", {
          style: compliance_reports_style.dataCell
        }, report.desc), react_default.a.createElement("td", null, user), react_default.a.createElement("td", {
          style: compliance_reports_style.dataCell
        }, params));
      }

      content = react_default.a.createElement("div", {
        style: compliance_reports_style.content
      }, react_default.a.createElement("table", {
        className: "table"
      }, react_default.a.createElement("thead", null, react_default.a.createElement("tr", null, react_default.a.createElement("th", null), react_default.a.createElement("th", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.compliance_table.timestamp",
        defaultMessage: "Timestamp"
      })), react_default.a.createElement("th", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.compliance_table.status",
        defaultMessage: "Status"
      })), react_default.a.createElement("th", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.compliance_table.records",
        defaultMessage: "Records"
      })), react_default.a.createElement("th", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.compliance_table.type",
        defaultMessage: "Type"
      })), react_default.a.createElement("th", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.compliance_table.desc",
        defaultMessage: "Description"
      })), react_default.a.createElement("th", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.compliance_table.userId",
        defaultMessage: "Requested By"
      })), react_default.a.createElement("th", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.compliance_table.params",
        defaultMessage: "Params"
      })))), react_default.a.createElement("tbody", null, list)));
    }

    let serverError = '';

    if (this.props.serverError) {
      serverError = react_default.a.createElement("div", {
        className: "form-group has-error",
        style: compliance_reports_style.serverError
      }, react_default.a.createElement("label", {
        className: "control-label"
      }, this.props.serverError));
    }

    return react_default.a.createElement("div", {
      className: "panel compliance-panel"
    }, react_default.a.createElement("h4", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.compliance_reports.title",
      defaultMessage: "Compliance Reports"
    })), react_default.a.createElement("div", {
      className: "row"
    }, react_default.a.createElement("div", {
      className: "col-sm-6 col-md-4 form-group"
    }, react_default.a.createElement("label", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.compliance_reports.desc",
      defaultMessage: "Job Name:"
    })), react_default.a.createElement(localized_input["a" /* default */], {
      type: "text",
      className: "form-control",
      id: "desc",
      ref: "desc",
      placeholder: {
        id: Object(utils_i18n["b" /* t */])('admin.compliance_reports.desc_placeholder'),
        defaultMessage: 'E.g. "Audit 445 for HR"'
      }
    })), react_default.a.createElement("div", {
      className: "col-sm-3 col-md-2 form-group"
    }, react_default.a.createElement("label", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.compliance_reports.from",
      defaultMessage: "From:"
    })), react_default.a.createElement(localized_input["a" /* default */], {
      type: "text",
      className: "form-control",
      id: "from",
      ref: "from",
      placeholder: {
        id: Object(utils_i18n["b" /* t */])('admin.compliance_reports.from_placeholder'),
        defaultMessage: 'E.g. "2016-03-11"'
      }
    })), react_default.a.createElement("div", {
      className: "col-sm-3 col-md-2 form-group"
    }, react_default.a.createElement("label", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.compliance_reports.to",
      defaultMessage: "To:"
    })), react_default.a.createElement(localized_input["a" /* default */], {
      type: "text",
      className: "form-control",
      id: "to",
      ref: "to",
      placeholder: {
        id: Object(utils_i18n["b" /* t */])('admin.compliance_reports.to_placeholder'),
        defaultMessage: 'E.g. "2016-03-15"'
      }
    }))), react_default.a.createElement("div", {
      className: "row"
    }, react_default.a.createElement("div", {
      className: "col-sm-6 col-md-4 form-group"
    }, react_default.a.createElement("label", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.compliance_reports.emails",
      defaultMessage: "Emails:"
    })), react_default.a.createElement(localized_input["a" /* default */], {
      type: "text",
      className: "form-control",
      id: "emails",
      ref: "emails",
      placeholder: {
        id: Object(utils_i18n["b" /* t */])('admin.compliance_reports.emails_placeholder'),
        defaultMessage: 'E.g. "bill@example.com, bob@example.com"'
      }
    })), react_default.a.createElement("div", {
      className: "col-sm-6 col-md-4 form-group"
    }, react_default.a.createElement("label", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.compliance_reports.keywords",
      defaultMessage: "Keywords:"
    })), react_default.a.createElement(localized_input["a" /* default */], {
      type: "text",
      className: "form-control",
      id: "keywords",
      ref: "keywords",
      placeholder: {
        id: Object(utils_i18n["b" /* t */])('admin.compliance_reports.keywords_placeholder'),
        defaultMessage: 'E.g. "shorting stock"'
      }
    }))), react_default.a.createElement("div", {
      className: "clearfix"
    }, react_default.a.createElement("button", {
      id: "run-button",
      type: "submit",
      className: "btn btn-primary",
      onClick: this.runReport
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.compliance_reports.run",
      defaultMessage: "Run Compliance Report"
    }))), serverError, react_default.a.createElement("div", {
      className: "text-right"
    }, react_default.a.createElement("button", {
      type: "submit",
      className: "btn btn-link",
      disabled: this.state.runningReport,
      onClick: this.reload
    }, react_default.a.createElement(reload_icon_ReloadIcon, null), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.compliance_reports.reload",
      defaultMessage: "Reload Completed Compliance Reports"
    }))), react_default.a.createElement("div", {
      className: "compliance-panel__table"
    }, content));
  }

}

compliance_reports_defineProperty(compliance_reports_ComplianceReports, "propTypes", {
  /*
   * Set if compliance reports are licensed
   */
  isLicensed: prop_types_default.a.bool.isRequired,

  /*
   * Set if compliance reports are enabled in the config
   */
  enabled: prop_types_default.a.bool.isRequired,

  /*
   * Array of reports to render
   */
  reports: prop_types_default.a.arrayOf(prop_types_default.a.object).isRequired,
  users: prop_types_default.a.object.isRequired,

  /*
   * Error message to display
   */
  serverError: prop_types_default.a.string,
  actions: prop_types_default.a.shape({
    /*
     * Function to get compliance reports
     */
    getComplianceReports: prop_types_default.a.func.isRequired,

    /*
     * Function to save compliance reports
     */
    createComplianceReport: prop_types_default.a.func.isRequired
  }).isRequired
});

const compliance_reports_style = {
  content: {
    margin: 10
  },
  greenStatus: {
    color: 'green'
  },
  redStatus: {
    color: 'red'
  },
  dataCell: {
    whiteSpace: 'nowrap'
  },
  date: {
    whiteSpace: 'nowrap'
  },
  serverError: {
    marginTop: '10px'
  }
};
// CONCATENATED MODULE: ./components/admin_console/compliance_reports/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.







const getUsersForReports = Object(reselect_es["a" /* createSelector */])(state => state.entities.users.profiles, state => state.entities.admin.complianceReports, (users, reports) => {
  const usersMap = {};
  Object.values(reports).forEach(r => {
    const u = users[r.user_id];

    if (u) {
      usersMap[u.id] = u;
    }
  });
  return usersMap;
});

function compliance_reports_mapStateToProps(state) {
  const license = Object(general["getLicense"])(state);
  const isLicensed = license.IsLicensed === 'true';
  let enabled = false;
  const config = Object(entities_admin["getConfig"])(state);

  if (config && config.ComplianceSettings) {
    enabled = config.ComplianceSettings.Enable;
  }

  let serverError;
  const error = state.requests.admin.createCompliance.error;

  if (error) {
    serverError = error.message;
  }

  const reports = Object.values(Object(entities_admin["getComplianceReports"])(state)).sort((a, b) => {
    return b.create_at - a.create_at;
  });
  return {
    isLicensed,
    enabled,
    reports,
    serverError,
    users: getUsersForReports(state)
  };
}

function compliance_reports_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      getComplianceReports: admin["getComplianceReports"],
      createComplianceReport: admin["createComplianceReport"]
    }, dispatch)
  };
}

/* harmony default export */ var compliance_reports = (Object(es["connect"])(compliance_reports_mapStateToProps, compliance_reports_mapDispatchToProps)(compliance_reports_ComplianceReports));
// EXTERNAL MODULE: ./components/audit_table/index.js + 1 modules
var audit_table = __webpack_require__(1966);

// CONCATENATED MODULE: ./components/admin_console/audits/audits.jsx
function audits_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.







class audits_Audits extends react_default.a.PureComponent {
  constructor(props) {
    super(props);

    audits_defineProperty(this, "reload", () => {
      this.setState({
        loadingAudits: true
      });
      this.props.actions.getAudits().then(() => this.setState({
        loadingAudits: false
      }));
    });

    audits_defineProperty(this, "activityLogHeader", () => {
      const h4Style = {
        display: 'inline-block',
        marginBottom: '6px'
      };
      const divStyle = {
        clear: 'both'
      };
      return react_default.a.createElement("div", {
        style: divStyle
      }, react_default.a.createElement("h4", {
        style: h4Style
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.complianceMonitoring.userActivityLogsTitle",
        defaultMessage: "User Activity Logs"
      })), react_default.a.createElement("button", {
        type: "submit",
        className: "btn btn-link pull-right",
        onClick: this.reload
      }, react_default.a.createElement(reload_icon_ReloadIcon, null), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.audits.reload",
        defaultMessage: "Reload User Activity Logs"
      })));
    });

    audits_defineProperty(this, "renderComplianceReports", () => {
      if (!this.props.isLicensed) {
        return react_default.a.createElement("div", null);
      }

      return react_default.a.createElement(compliance_reports, null);
    });

    this.state = {
      loadingAudits: true
    };
  }

  componentDidMount() {
    this.props.actions.getAudits().then(() => this.setState({
      loadingAudits: false
    }));
  }

  render() {
    let content = null;

    if (this.state.loadingAudits) {
      content = react_default.a.createElement(loading_screen["a" /* default */], null);
    } else {
      content = react_default.a.createElement("div", null, react_default.a.createElement(audit_table["a" /* default */], {
        audits: this.props.audits,
        showUserId: true,
        showIp: true,
        showSession: true
      }));
    }

    return react_default.a.createElement("div", null, this.renderComplianceReports(), react_default.a.createElement("div", {
      className: "panel compliance-panel"
    }, this.activityLogHeader(), react_default.a.createElement("div", {
      className: "compliance-panel__table"
    }, content)));
  }

}

audits_defineProperty(audits_Audits, "propTypes", {
  isLicensed: prop_types_default.a.bool.isRequired,

  /*
   * Array of audits to render
   */
  audits: prop_types_default.a.arrayOf(prop_types_default.a.object).isRequired,
  actions: prop_types_default.a.shape({
    /*
     * Function to fetch audits
     */
    getAudits: prop_types_default.a.func.isRequired
  }).isRequired
});
// CONCATENATED MODULE: ./components/admin_console/audits/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.







function audits_mapStateToProps(state) {
  const license = Object(general["getLicense"])(state);
  const isLicensed = license.Compliance === 'true';
  return {
    isLicensed,
    audits: Object.values(entities_admin["getAudits"](state))
  };
}

function audits_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      getAudits: admin["getAudits"]
    }, dispatch)
  };
}

/* harmony default export */ var audits = (Object(es["connect"])(audits_mapStateToProps, audits_mapDispatchToProps)(audits_Audits));
// CONCATENATED MODULE: ./components/admin_console/custom_url_schemes_setting.jsx
function custom_url_schemes_setting_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






class custom_url_schemes_setting_CustomUrlSchemesSetting extends react_default.a.Component {
  static get propTypes() {
    return {
      id: prop_types_default.a.string.isRequired,
      value: prop_types_default.a.array.isRequired,
      onChange: prop_types_default.a.func.isRequired,
      disabled: prop_types_default.a.bool,
      setByEnv: prop_types_default.a.bool.isRequired
    };
  }

  constructor(props) {
    super(props);

    custom_url_schemes_setting_defineProperty(this, "stringToArray", str => {
      return str.split(',').map(s => s.trim()).filter(Boolean);
    });

    custom_url_schemes_setting_defineProperty(this, "arrayToString", arr => {
      return arr.join(',');
    });

    custom_url_schemes_setting_defineProperty(this, "handleChange", e => {
      const valueAsArray = this.stringToArray(e.target.value);
      this.props.onChange(this.props.id, valueAsArray);
      this.setState({
        value: e.target.value
      });
    });

    this.state = {
      value: this.arrayToString(props.value)
    };
  }

  render() {
    const label = utils["gb" /* localizeMessage */]('admin.customization.customUrlSchemes', 'Custom URL Schemes:');
    const helpText = utils["gb" /* localizeMessage */]('admin.customization.customUrlSchemesDesc', 'Allows message text to link if it begins with any of the comma-separated URL schemes listed. By default, the following schemes will create links: "http", "https", "ftp", "tel", and "mailto".');
    return react_default.a.createElement(setting_Settings, {
      label: label,
      helpText: helpText,
      inputId: this.props.id,
      setByEnv: this.props.setByEnv
    }, react_default.a.createElement(localized_input["a" /* default */], {
      id: this.props.id,
      className: "form-control",
      type: "text",
      placeholder: {
        id: Object(utils_i18n["b" /* t */])('admin.customization.customUrlSchemesPlaceholder'),
        defaultMessage: 'E.g.: "git,smtp"'
      },
      value: this.state.value,
      onChange: this.handleChange,
      disabled: this.props.disabled || this.props.setByEnv
    }));
  }

}
// CONCATENATED MODULE: ./components/admin_console/license_settings.jsx
function license_settings_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.







class license_settings_LicenseSettings extends react_default.a.Component {
  constructor(props) {
    super(props);

    license_settings_defineProperty(this, "handleChange", () => {
      const element = this.refs.fileInput;

      if (element && element.files.length > 0) {
        this.setState({
          fileSelected: true,
          fileName: element.files[0].name
        });
      }
    });

    license_settings_defineProperty(this, "handleSubmit", e => {
      e.preventDefault();
      const element = this.refs.fileInput;

      if (!element || element.files.length === 0) {
        return;
      }

      const file = element.files[0];
      this.setState({
        uploading: true
      });
      Object(admin_actions["H" /* uploadLicenseFile */])(file, () => {
        this.setState({
          fileSelected: false,
          fileName: null,
          serverError: null,
          uploading: false
        });
        window.location.reload(true);
      }, error => {
        utils["d" /* clearFileInput */](element[0]);
        this.setState({
          fileSelected: false,
          fileName: null,
          serverError: error.message,
          uploading: false
        });
      });
    });

    license_settings_defineProperty(this, "handleRemove", e => {
      e.preventDefault();
      this.setState({
        removing: true
      });
      Object(admin_actions["y" /* removeLicenseFile */])(() => {
        this.setState({
          fileSelected: false,
          fileName: null,
          serverError: null,
          removing: false
        });
        window.location.reload(true);
      }, error => {
        this.setState({
          fileSelected: false,
          fileName: null,
          serverError: error.message,
          removing: false
        });
      });
    });

    this.state = {
      fileSelected: false,
      fileName: null,
      serverError: null,
      removing: false,
      uploading: false
    };
  }

  render() {
    var serverError = '';

    if (this.state.serverError) {
      serverError = react_default.a.createElement("div", {
        className: "col-sm-12"
      }, react_default.a.createElement("div", {
        className: "form-group has-error"
      }, react_default.a.createElement("label", {
        className: "control-label"
      }, this.state.serverError)));
    }

    var btnClass = 'btn';

    if (this.state.fileSelected) {
      btnClass = 'btn btn-primary';
    }

    const {
      license
    } = this.props;
    let edition;
    let licenseType;
    let licenseKey;
    const issued = utils["l" /* displayDate */](parseInt(license.IssuedAt, 10)) + ' ' + utils["n" /* displayTime */](parseInt(license.IssuedAt, 10), true);
    const startsAt = utils["l" /* displayDate */](parseInt(license.StartsAt, 10));
    const expiresAt = utils["l" /* displayDate */](parseInt(license.ExpiresAt, 10));

    if (license.IsLicensed === 'true') {
      // Note: DO NOT LOCALISE THESE STRINGS. Legally we can not since the license is in English.
      const sku = license.SkuShortName ? react_default.a.createElement(react_default.a.Fragment, null, `Edition: Mattermost Enterprise Edition ${license.SkuShortName}`, react_default.a.createElement("br", null)) : null;
      edition = 'Mattermost Enterprise Edition. Enterprise features on this server have been unlocked with a license key and a valid subscription.';
      licenseType = react_default.a.createElement("div", null, react_default.a.createElement("p", null, 'This software is offered under a commercial license.\n\nSee ENTERPRISE-EDITION-LICENSE.txt in your root install directory for details. See NOTICE.txt for information about open source software used in this system.\n\nYour subscription details are as follows:'), `Name: ${license.Name}`, react_default.a.createElement("br", null), `Company or organization name: ${license.Company}`, react_default.a.createElement("br", null), sku, `Number of users: ${license.Users}`, react_default.a.createElement("br", null), `License issued: ${issued}`, react_default.a.createElement("br", null), `Start date of license: ${startsAt}`, react_default.a.createElement("br", null), `Expiry date of license: ${expiresAt}`, react_default.a.createElement("br", null), react_default.a.createElement("br", null), 'See also ', react_default.a.createElement("a", {
        href: "https://about.mattermost.com/enterprise-edition-terms/"
      }, 'Enterprise Edition Terms of Service'), ' and ', react_default.a.createElement("a", {
        href: "https://about.mattermost.com/privacy/"
      }, 'Privacy Policy.'));
      let removeButtonText = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.license.keyRemove",
        defaultMessage: "Remove Enterprise License and Downgrade Server"
      });

      if (this.state.removing) {
        removeButtonText = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.license.removing",
          defaultMessage: "Removing License..."
        });
      }

      licenseKey = react_default.a.createElement("div", {
        className: "col-sm-8"
      }, react_default.a.createElement("button", {
        className: "btn btn-danger",
        onClick: this.handleRemove,
        id: "remove-button"
      }, removeButtonText), react_default.a.createElement("br", null), react_default.a.createElement("br", null), react_default.a.createElement("p", {
        className: "help-text"
      }, 'If you migrate servers you may need to remove your license key to install it elsewhere. You can remove the key here, which will revert functionality to that of Team Edition.'));
    } else {
      // Note: DO NOT LOCALISE THESE STRINGS. Legally we can not since the license is in English.
      edition = react_default.a.createElement("p", null, 'Mattermost Enterprise Edition. Unlock enterprise features in this software through the purchase of a subscription from ', react_default.a.createElement("a", {
        target: "_blank",
        rel: "noopener noreferrer",
        href: "https://mattermost.com/"
      }, 'https://mattermost.com/'));
      licenseType = 'This software is offered under a commercial license.\n\nSee ENTERPRISE-EDITION-LICENSE.txt in your root install directory for details. See NOTICE.txt for information about open source software used in this system.';
      let fileName;

      if (this.state.fileName) {
        fileName = this.state.fileName;
      } else {
        fileName = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.license.noFile",
          defaultMessage: "No file uploaded"
        });
      }

      let uploadButtonText = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.license.upload",
        defaultMessage: "Upload"
      });

      if (this.state.uploading) {
        uploadButtonText = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.license.uploading",
          defaultMessage: "Uploading License..."
        });
      }

      licenseKey = react_default.a.createElement("div", {
        className: "col-sm-8"
      }, react_default.a.createElement("div", {
        className: "file__upload"
      }, react_default.a.createElement("button", {
        className: "btn btn-primary"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.license.choose",
        defaultMessage: "Choose File"
      })), react_default.a.createElement("input", {
        ref: "fileInput",
        type: "file",
        accept: ".mattermost-license",
        onChange: this.handleChange
      })), react_default.a.createElement("button", {
        className: btnClass,
        disabled: !this.state.fileSelected,
        onClick: this.handleSubmit,
        id: "upload-button"
      }, uploadButtonText), react_default.a.createElement("div", {
        className: "help-text no-margin"
      }, fileName), react_default.a.createElement("br", null), serverError, react_default.a.createElement("p", {
        className: "help-text no-margin"
      }, react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "admin.license.uploadDesc",
        defaultMessage: "Upload a license key for Mattermost Enterprise Edition to upgrade this server. [Visit us online](!http://mattermost.com) to learn more about the benefits of Enterprise Edition or to purchase a key."
      })));
    }

    return react_default.a.createElement("div", {
      className: "wrapper--fixed"
    }, react_default.a.createElement(formatted_admin_header, {
      id: "admin.license.title",
      defaultMessage: "Edition and License"
    }), react_default.a.createElement("div", {
      className: "admin-console__wrapper"
    }, react_default.a.createElement("div", {
      className: "admin-console__content"
    }, react_default.a.createElement("form", {
      className: "form-horizontal",
      role: "form"
    }, react_default.a.createElement("div", {
      className: "form-group"
    }, react_default.a.createElement("label", {
      className: "control-label col-sm-4"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.license.edition",
      defaultMessage: "Edition: "
    })), react_default.a.createElement("div", {
      className: "col-sm-8"
    }, edition)), react_default.a.createElement("div", {
      className: "form-group"
    }, react_default.a.createElement("label", {
      className: "control-label col-sm-4"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.license.type",
      defaultMessage: "License: "
    })), react_default.a.createElement("div", {
      className: "col-sm-8"
    }, licenseType)), react_default.a.createElement("div", {
      className: "form-group"
    }, react_default.a.createElement("label", {
      className: "control-label col-sm-4"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.license.key",
      defaultMessage: "License Key: "
    })), licenseKey)))));
  }

}

license_settings_defineProperty(license_settings_LicenseSettings, "propTypes", {
  license: prop_types_default.a.object.isRequired,
  config: prop_types_default.a.object
});
// EXTERNAL MODULE: ./mattermost-redux/actions/schemes.js
var actions_schemes = __webpack_require__(1958);

// EXTERNAL MODULE: ./mattermost-redux/selectors/entities/schemes.js
var entities_schemes = __webpack_require__(1959);

// CONCATENATED MODULE: ./components/widgets/admin_console/admin_panel.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





const AdminPanel = props => react_default.a.createElement("div", {
  className: 'AdminPanel ' + props.className,
  id: props.id
}, react_default.a.createElement("div", {
  className: "header",
  onClick: props.onHeaderClick
}, react_default.a.createElement("div", null, react_default.a.createElement("h3", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
  id: props.titleId,
  defaultMessage: props.titleDefault
})), react_default.a.createElement("span", null, react_default.a.createElement(formatted_markdown_message["b" /* default */], {
  id: props.subtitleId,
  defaultMessage: props.subtitleDefault,
  values: props.subtitleValues
}))), props.button && react_default.a.createElement("div", {
  className: "button"
}, props.button)), props.children);

AdminPanel.propTypes = {
  children: prop_types_default.a.node,
  className: prop_types_default.a.string.isRequired,
  id: prop_types_default.a.string,
  titleId: prop_types_default.a.string.isRequired,
  titleDefault: prop_types_default.a.string.isRequired,
  subtitleId: prop_types_default.a.string.isRequired,
  subtitleDefault: prop_types_default.a.string.isRequired,
  subtitleValues: prop_types_default.a.object,
  onHeaderClick: prop_types_default.a.func,
  button: prop_types_default.a.node
};
AdminPanel.defaultProps = {
  className: ''
};
/* harmony default export */ var admin_panel = (AdminPanel);
// CONCATENATED MODULE: ./components/widgets/admin_console/admin_panel_with_link.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






const AdminPanelWithLink = props => {
  const button = react_default.a.createElement(react_router_dom["a" /* Link */], {
    className: "btn btn-primary",
    to: props.url,
    disabled: props.disabled
  }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: props.linkTextId,
    defaultMessage: props.linkTextDefault
  }));
  return react_default.a.createElement(admin_panel, {
    className: 'AdminPanelWithLink ' + props.className,
    id: props.id,
    titleId: props.titleId,
    titleDefault: props.titleDefault,
    subtitleId: props.subtitleId,
    subtitleDefault: props.subtitleDefault,
    button: button
  }, props.children);
};

AdminPanelWithLink.propTypes = {
  children: prop_types_default.a.node,
  className: prop_types_default.a.string.isRequired,
  id: prop_types_default.a.string,
  titleId: prop_types_default.a.string.isRequired,
  titleDefault: prop_types_default.a.string.isRequired,
  subtitleId: prop_types_default.a.string.isRequired,
  subtitleDefault: prop_types_default.a.string.isRequired,
  url: prop_types_default.a.string.isRequired,
  disabled: prop_types_default.a.bool,
  linkTextId: prop_types_default.a.string.isRequired,
  linkTextDefault: prop_types_default.a.string.isRequired
};
AdminPanelWithLink.defaultProps = {
  className: ''
};
/* harmony default export */ var admin_panel_with_link = (AdminPanelWithLink);
// CONCATENATED MODULE: ./components/admin_console/permission_schemes_settings/permissions_scheme_summary/permissions_scheme_summary.jsx
function permissions_scheme_summary_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.









const MAX_TEAMS_PER_SCHEME_SUMMARY = 8;
class permissions_scheme_summary_PermissionsSchemeSummary extends react_default.a.Component {
  constructor(props) {
    super(props);

    permissions_scheme_summary_defineProperty(this, "renderConfirmModal", () => {
      const title = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.permissions.permissionsSchemeSummary.deleteSchemeTitle",
        defaultMessage: "Delete {scheme} scheme?",
        values: {
          scheme: this.props.scheme.display_name
        }
      });
      let serverError = null;

      if (this.state.serverError) {
        serverError = react_default.a.createElement("div", {
          className: "permission-scheme-summary-error-message"
        }, react_default.a.createElement("i", {
          className: "fa fa-exclamation-circle"
        }), " ", this.state.serverError);
      }

      const message = react_default.a.createElement("div", null, react_default.a.createElement("p", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.permissions.permissionsSchemeSummary.deleteConfirmQuestion",
        defaultMessage: "The permissions in the teams using this scheme will reset to the defaults in the System Scheme. Are you sure you want to delete the {schemeName} scheme?",
        values: {
          schemeName: this.props.scheme.display_name
        }
      })), serverError);
      const confirmButton = react_default.a.createElement(loading_wrapper["a" /* default */], {
        loading: this.state.deleting,
        text: utils["gb" /* localizeMessage */]('admin.permissions.permissionsSchemeSummary.deleting', 'Deleting...')
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.permissions.permissionsSchemeSummary.deleteConfirmButton",
        defaultMessage: "Yes, Delete"
      }));
      return react_default.a.createElement(confirm_modal["a" /* default */], {
        show: this.state.showConfirmModal,
        title: title,
        message: message,
        confirmButtonText: confirmButton,
        onConfirm: this.handleDeleteConfirmed,
        onCancel: this.handleDeleteCanceled
      });
    });

    permissions_scheme_summary_defineProperty(this, "stopPropagation", e => {
      e.stopPropagation();
    });

    permissions_scheme_summary_defineProperty(this, "handleDeleteCanceled", () => {
      this.setState({
        showConfirmModal: false
      });
    });

    permissions_scheme_summary_defineProperty(this, "handleDeleteConfirmed", async () => {
      this.setState({
        deleting: true,
        serverError: null
      });
      const data = await this.props.actions.deleteScheme(this.props.scheme.id);

      if (data.error) {
        this.setState({
          deleting: false,
          serverError: data.error.message
        });
      } else {
        this.setState({
          deleting: false,
          showConfirmModal: false
        });
      }
    });

    permissions_scheme_summary_defineProperty(this, "delete", e => {
      e.stopPropagation();
      this.setState({
        showConfirmModal: true,
        serverError: null
      });
    });

    permissions_scheme_summary_defineProperty(this, "goToEdit", () => {
      this.props.history.push('/admin_console/user_management/permissions/team_override_scheme/' + this.props.scheme.id);
    });

    permissions_scheme_summary_defineProperty(this, "render", () => {
      const scheme = this.props.scheme;
      let teams = this.props.teams ? this.props.teams.map(team => react_default.a.createElement("span", {
        className: "team",
        key: team.id
      }, team.display_name)) : [];
      let extraTeams = null;

      if (teams.length > MAX_TEAMS_PER_SCHEME_SUMMARY) {
        extraTeams = react_default.a.createElement(OverlayTrigger["a" /* default */], {
          trigger: ['hover', 'focus'],
          delayShow: constants["N" /* default */].OVERLAY_TIME_DELAY,
          placement: "bottom",
          overlay: react_default.a.createElement(Tooltip["a" /* default */], {
            className: "team-scheme-extra-teams-overlay",
            id: scheme.id + '-extra-teams-overlay'
          }, teams.slice(MAX_TEAMS_PER_SCHEME_SUMMARY))
        }, react_default.a.createElement("span", {
          className: "team",
          key: "extra-teams"
        }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.permissions.permissionsSchemeSummary.moreTeams",
          defaultMessage: "+{number} more",
          values: {
            number: teams.length - MAX_TEAMS_PER_SCHEME_SUMMARY
          }
        })));
        teams = teams.slice(0, MAX_TEAMS_PER_SCHEME_SUMMARY);
      }

      const confirmModal = this.renderConfirmModal();
      return react_default.a.createElement("div", {
        className: "permissions-scheme-summary",
        onClick: this.goToEdit
      }, react_default.a.createElement("div", {
        onClick: this.stopPropagation
      }, confirmModal), react_default.a.createElement("div", {
        className: "permissions-scheme-summary--header"
      }, react_default.a.createElement("div", {
        className: "title"
      }, scheme.display_name), react_default.a.createElement("div", {
        className: "actions"
      }, react_default.a.createElement(react_router_dom["a" /* Link */], {
        className: "edit-button",
        to: '/admin_console/user_management/permissions/team_override_scheme/' + scheme.id
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.permissions.permissionsSchemeSummary.edit",
        defaultMessage: "Edit"
      })), '-', react_default.a.createElement("a", {
        className: "delete-button",
        onClick: this.delete
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.permissions.permissionsSchemeSummary.delete",
        defaultMessage: "Delete"
      })))), react_default.a.createElement("div", {
        className: "permissions-scheme-summary--description"
      }, scheme.description), react_default.a.createElement("div", {
        className: "permissions-scheme-summary--teams"
      }, teams, extraTeams));
    });

    this.state = {
      showConfirmModal: false,
      deleting: false,
      serverError: null
    };
  }

}

permissions_scheme_summary_defineProperty(permissions_scheme_summary_PermissionsSchemeSummary, "propTypes", {
  scheme: prop_types_default.a.object.isRequired,
  teams: prop_types_default.a.array,
  actions: prop_types_default.a.shape({
    deleteScheme: prop_types_default.a.func.isRequired
  }).isRequired
});
// CONCATENATED MODULE: ./components/admin_console/permission_schemes_settings/permissions_scheme_summary/index.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






function permissions_scheme_summary_makeMapStateToProps() {
  const getSchemeTeams = Object(entities_schemes["makeGetSchemeTeams"])();
  return function mapStateToProps(state, ownProps) {
    return {
      teams: getSchemeTeams(state, {
        schemeId: ownProps.scheme.id
      })
    };
  };
}

function permissions_scheme_summary_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      deleteScheme: actions_schemes["deleteScheme"]
    }, dispatch)
  };
}

/* harmony default export */ var permissions_scheme_summary = (Object(es["connect"])(permissions_scheme_summary_makeMapStateToProps, permissions_scheme_summary_mapDispatchToProps)(permissions_scheme_summary_PermissionsSchemeSummary));
// CONCATENATED MODULE: ./components/admin_console/permission_schemes_settings/permission_schemes_settings.jsx
function permission_schemes_settings_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.











const PAGE_SIZE = 30;
const PHASE_2_MIGRATION_IMCOMPLETE_STATUS_CODE = 501;
class permission_schemes_settings_PermissionSchemesSettings extends react_default.a.PureComponent {
  constructor(props) {
    super(props);

    permission_schemes_settings_defineProperty(this, "loadMoreSchemes", () => {
      this.setState({
        loadingMore: true
      });
      this.props.actions.loadSchemes('team', this.state.page + 1, PAGE_SIZE).then(schemes => {
        const promises = [];

        for (const scheme of schemes.data) {
          promises.push(this.props.actions.loadSchemeTeams(scheme.id));
        }

        Promise.all(promises).then(() => this.setState({
          loadingMore: false,
          page: this.state.page + 1
        }));
      });
    });

    permission_schemes_settings_defineProperty(this, "teamOverrideSchemesMigrationView", () => {
      if (this.state.phase2MigrationIsComplete) {
        return null;
      }

      const docLink = react_default.a.createElement("a", {
        href: "https://docs.mattermost.com/administration/config-settings.html#jobs",
        rel: "noopener noreferrer",
        target: "_blank"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.permissions.documentationLinkText",
        defaultMessage: "documentation"
      }));

      if (this.props.jobsAreEnabled && !this.props.clusterIsEnabled) {
        return this.teamOverrideUnavalableView(Object(utils_i18n["b" /* t */])('admin.permissions.teamOverrideSchemesInProgress'), 'Migration job in progress: Team Override Schemes are not available until the job server completes the permissions migration. Learn more in the {documentationLink}.', docLink);
      }

      return this.teamOverrideUnavalableView(Object(utils_i18n["b" /* t */])('admin.permissions.teamOverrideSchemesNoJobsEnabled'), 'Migration job on hold: Team Override Schemes are not available until the job server can execute the permissions migration. The job will be automatically started when the job server is enabled. Learn more in the {documentationLink}.', docLink);
    });

    permission_schemes_settings_defineProperty(this, "teamOverrideUnavalableView", (id, defaultMsg, documentationLink) => {
      return react_default.a.createElement("div", {
        className: "team-override-unavailable"
      }, react_default.a.createElement("div", {
        className: "team-override-unavailable__inner"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: id,
        defaultMessage: defaultMsg,
        values: {
          documentationLink
        }
      })));
    });

    permission_schemes_settings_defineProperty(this, "renderTeamOverrideSchemes", () => {
      const schemes = Object.values(this.props.schemes).map(scheme => react_default.a.createElement(permissions_scheme_summary, {
        scheme: scheme,
        history: this.props.history,
        key: scheme.id
      }));
      const hasCustomSchemes = this.props.license.CustomPermissionsSchemes === 'true';
      const teamOverrideView = this.teamOverrideSchemesMigrationView();

      if (hasCustomSchemes) {
        return react_default.a.createElement(admin_panel_with_link, {
          className: "permissions-block",
          titleId: Object(utils_i18n["b" /* t */])('admin.permissions.teamOverrideSchemesTitle'),
          titleDefault: "Team Override Schemes",
          subtitleId: Object(utils_i18n["b" /* t */])('admin.permissions.teamOverrideSchemesBannerText'),
          subtitleDefault: "Use when specific teams need permission exceptions to the [System Scheme](!https://about.mattermost.com/default-system-scheme).",
          url: "/admin_console/user_management/permissions/team_override_scheme",
          disabled: teamOverrideView !== null,
          linkTextId: Object(utils_i18n["b" /* t */])('admin.permissions.teamOverrideSchemesNewButton'),
          linkTextDefault: "New Team Override Scheme"
        }, schemes.length === 0 && teamOverrideView === null && react_default.a.createElement("div", {
          className: "no-team-schemes"
        }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.permissions.teamOverrideSchemesNoSchemes",
          defaultMessage: "No team override schemes created."
        })), teamOverrideView, schemes.length > 0 && schemes, schemes.length === PAGE_SIZE * (this.state.page + 1) && react_default.a.createElement("button", {
          className: "more-schemes theme style--none color--link",
          onClick: this.loadMoreSchemes,
          disabled: this.state.loadingMore
        }, react_default.a.createElement(loading_wrapper["a" /* default */], {
          loading: this.state.loadingMore,
          text: utils["gb" /* localizeMessage */]('admin.permissions.loadingMoreSchemes', 'Loading...')
        }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.permissions.loadMoreSchemes",
          defaultMessage: "Load more schemes"
        }))));
      }

      return false;
    });

    permission_schemes_settings_defineProperty(this, "render", () => {
      if (this.state.loading) {
        return react_default.a.createElement(loading_screen["a" /* default */], null);
      }

      const teamOverrideView = this.teamOverrideSchemesMigrationView();
      return react_default.a.createElement("div", {
        className: "wrapper--fixed"
      }, react_default.a.createElement(formatted_admin_header, {
        id: "admin.permissions.permissionSchemes",
        defaultMessage: "Permission Schemes"
      }), react_default.a.createElement("div", {
        className: "admin-console__wrapper"
      }, react_default.a.createElement("div", {
        className: "admin-console__content"
      }, react_default.a.createElement("div", {
        className: "banner info"
      }, react_default.a.createElement("div", {
        className: "banner__content"
      }, react_default.a.createElement("span", null, react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "admin.permissions.introBanner",
        defaultMessage: "Permission Schemes set the default permissions for Team Admins, Channel Admins and everyone else. Learn more about permission schemes in our [documentation](!https://about.mattermost.com/default-advanced-permissions)."
      })))), react_default.a.createElement(admin_panel_with_link, {
        titleId: Object(utils_i18n["b" /* t */])('admin.permissions.systemSchemeBannerTitle'),
        titleDefault: "System Scheme",
        subtitleId: Object(utils_i18n["b" /* t */])('admin.permissions.systemSchemeBannerText'),
        subtitleDefault: "Set the default permissions inherited by all teams unless a [Team Override Scheme](!https://about.mattermost.com/default-team-override-scheme) is applied.",
        url: "/admin_console/user_management/permissions/system_scheme",
        disabled: teamOverrideView !== null,
        linkTextId: Object(utils_i18n["b" /* t */])('admin.permissions.systemSchemeBannerButton'),
        linkTextDefault: "Edit Scheme"
      }), this.renderTeamOverrideSchemes())));
    });

    this.state = {
      loading: true,
      loadingMore: false,
      page: 0,
      phase2MigrationIsComplete: false
    };
  }

  async UNSAFE_componentWillMount() {
    // eslint-disable-line camelcase
    let schemes;
    let phase2MigrationIsComplete = true; // Assume migration is complete unless HTTP status code says otherwise.

    try {
      schemes = await this.props.actions.loadSchemes('team', 0, PAGE_SIZE);

      if (schemes.error.status_code === PHASE_2_MIGRATION_IMCOMPLETE_STATUS_CODE) {
        phase2MigrationIsComplete = false;
      }

      const promises = [];

      for (const scheme of schemes.data) {
        promises.push(this.props.actions.loadSchemeTeams(scheme.id));
      }

      Promise.all(promises).then(() => this.setState({
        loading: false,
        phase2MigrationIsComplete
      }));
    } catch (err) {
      this.setState({
        loading: false,
        phase2MigrationIsComplete
      });
    }
  }

}

permission_schemes_settings_defineProperty(permission_schemes_settings_PermissionSchemesSettings, "propTypes", {
  schemes: prop_types_default.a.object.isRequired,
  jobsAreEnabled: prop_types_default.a.bool,
  clusterIsEnabled: prop_types_default.a.bool,
  license: prop_types_default.a.shape({
    CustomPermissionsSchemes: prop_types_default.a.string
  }),
  actions: prop_types_default.a.shape({
    loadSchemes: prop_types_default.a.func.isRequired,
    loadSchemeTeams: prop_types_default.a.func.isRequired
  })
});

permission_schemes_settings_defineProperty(permission_schemes_settings_PermissionSchemesSettings, "defaultProps", {
  schemes: {}
});

Object(utils_i18n["b" /* t */])('admin.permissions.group.delete_posts.description');
Object(utils_i18n["b" /* t */])('admin.permissions.group.delete_posts.name');
Object(utils_i18n["b" /* t */])('admin.permissions.group.integrations.description');
Object(utils_i18n["b" /* t */])('admin.permissions.group.integrations.name');
Object(utils_i18n["b" /* t */])('admin.permissions.group.posts.description');
Object(utils_i18n["b" /* t */])('admin.permissions.group.posts.name');
Object(utils_i18n["b" /* t */])('admin.permissions.group.private_channel.description');
Object(utils_i18n["b" /* t */])('admin.permissions.group.private_channel.name');
Object(utils_i18n["b" /* t */])('admin.permissions.group.public_channel.description');
Object(utils_i18n["b" /* t */])('admin.permissions.group.public_channel.name');
Object(utils_i18n["b" /* t */])('admin.permissions.group.reactions.description');
Object(utils_i18n["b" /* t */])('admin.permissions.group.reactions.name');
Object(utils_i18n["b" /* t */])('admin.permissions.group.send_invites.description');
Object(utils_i18n["b" /* t */])('admin.permissions.group.send_invites.name');
Object(utils_i18n["b" /* t */])('admin.permissions.group.teams.description');
Object(utils_i18n["b" /* t */])('admin.permissions.group.teams.name');
Object(utils_i18n["b" /* t */])('admin.permissions.group.edit_posts.description');
Object(utils_i18n["b" /* t */])('admin.permissions.group.edit_posts.name');
Object(utils_i18n["b" /* t */])('admin.permissions.group.teams_team_scope.description');
Object(utils_i18n["b" /* t */])('admin.permissions.group.teams_team_scope.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.assign_system_admin_role.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.assign_system_admin_role.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.create_direct_channel.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.create_direct_channel.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.create_group_channel.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.create_group_channel.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.create_private_channel.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.create_private_channel.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.create_public_channel.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.create_public_channel.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.create_team.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.create_team.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.create_user_access_token.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.create_user_access_token.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.delete_others_posts.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.delete_others_posts.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.delete_post.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.delete_post.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.delete_private_channel.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.delete_private_channel.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.delete_public_channel.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.delete_public_channel.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.edit_other_users.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.edit_other_users.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.edit_post.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.edit_post.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.import_team.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.import_team.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.list_team_channels.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.list_team_channels.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.list_users_without_team.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.list_users_without_team.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_channel_roles.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_channel_roles.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.create_emojis.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.create_emojis.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.delete_emojis.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.delete_emojis.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.delete_others_emojis.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.delete_others_emojis.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_jobs.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_jobs.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_oauth.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_oauth.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_private_channel_members.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_private_channel_members.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_private_channel_properties.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_private_channel_properties.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_public_channel_members.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_public_channel_members.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_public_channel_properties.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_public_channel_properties.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_roles.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_roles.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_slash_commands.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_slash_commands.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_system.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_system.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_team.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_team.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_team_roles.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_team_roles.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_incoming_webhooks.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_incoming_webhooks.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_outgoing_webhooks.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.manage_outgoing_webhooks.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.permanent_delete_user.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.permanent_delete_user.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.read_channel.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.read_channel.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.read_user_access_token.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.read_user_access_token.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.remove_user_from_team.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.remove_user_from_team.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.revoke_user_access_token.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.revoke_user_access_token.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.upload_file.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.upload_file.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.view_team.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.view_team.name');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.edit_others_posts.description');
Object(utils_i18n["b" /* t */])('admin.permissions.permission.edit_others_posts.name');
Object(utils_i18n["b" /* t */])('admin.permissions.roles.all_users.name');
Object(utils_i18n["b" /* t */])('admin.permissions.roles.channel_admin.name');
Object(utils_i18n["b" /* t */])('admin.permissions.roles.channel_user.name');
Object(utils_i18n["b" /* t */])('admin.permissions.roles.system_admin.name');
Object(utils_i18n["b" /* t */])('admin.permissions.roles.system_user.name');
Object(utils_i18n["b" /* t */])('admin.permissions.roles.team_admin.name');
Object(utils_i18n["b" /* t */])('admin.permissions.roles.team_user.name');
// CONCATENATED MODULE: ./components/admin_console/permission_schemes_settings/index.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.







function permission_schemes_settings_mapStateToProps(state) {
  const schemes = Object(entities_schemes["getSchemes"])(state);
  const config = Object(general["getConfig"])(state);
  return {
    schemes,
    jobsAreEnabled: config.RunJobs === 'true',
    clusterIsEnabled: config.EnableCluster === 'true'
  };
}

function permission_schemes_settings_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      loadSchemes: actions_schemes["getSchemes"],
      loadSchemeTeams: actions_schemes["getSchemeTeams"]
    }, dispatch)
  };
}

/* harmony default export */ var permission_schemes_settings = (Object(es["connect"])(permission_schemes_settings_mapStateToProps, permission_schemes_settings_mapDispatchToProps)(permission_schemes_settings_PermissionSchemesSettings));
// EXTERNAL MODULE: ./mattermost-redux/constants/permissions.js
var constants_permissions = __webpack_require__(5);
var permissions_default = /*#__PURE__*/__webpack_require__.n(constants_permissions);

// EXTERNAL MODULE: ./utils/browser_history.jsx
var browser_history = __webpack_require__(114);

// CONCATENATED MODULE: ./components/admin_console/blockable_link/blockable_link.jsx
function blockable_link_extends() { blockable_link_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return blockable_link_extends.apply(this, arguments); }

function blockable_link_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




class blockable_link_BlockableLink extends react_default.a.Component {
  constructor(...args) {
    super(...args);

    blockable_link_defineProperty(this, "handleClick", e => {
      if (this.props.blocked) {
        e.preventDefault();
        this.props.actions.deferNavigation(() => {
          browser_history["a" /* browserHistory */].push(this.props.to);
        });
      }
    });
  }

  render() {
    const props = { ...this.props
    };
    Reflect.deleteProperty(props, 'blocked');
    Reflect.deleteProperty(props, 'actions');
    return react_default.a.createElement(react_router_dom["b" /* NavLink */], blockable_link_extends({}, props, {
      onClick: this.handleClick
    }));
  }

}

blockable_link_defineProperty(blockable_link_BlockableLink, "propTypes", {
  /*
   * Bool whether navigation is blocked
   */
  blocked: prop_types_default.a.bool.isRequired,

  /*
   * String Link destination
   */
  to: prop_types_default.a.string.isRequired,
  actions: prop_types_default.a.shape({
    /*
     * Function for deferring navigation while blocked
     */
    deferNavigation: prop_types_default.a.func.isRequired
  }).isRequired
});
// CONCATENATED MODULE: ./components/admin_console/blockable_link/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






function blockable_link_mapStateToProps(state) {
  return {
    blocked: Object(views_admin["a" /* getNavigationBlocked */])(state)
  };
}

function blockable_link_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      deferNavigation: admin_actions["g" /* deferNavigation */]
    }, dispatch)
  };
}

/* harmony default export */ var blockable_link = (Object(es["connect"])(blockable_link_mapStateToProps, blockable_link_mapDispatchToProps)(blockable_link_BlockableLink));
// CONCATENATED MODULE: ./components/svg/accordion_toggle_icon.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

class accordion_toggle_icon_AccordionToggleIcon extends react_default.a.PureComponent {
  render() {
    return react_default.a.createElement("span", this.props, react_default.a.createElement("svg", {
      width: "30px",
      height: "30px",
      viewBox: "0 0 30 30"
    }, react_default.a.createElement("g", {
      id: "Developer-Export",
      stroke: "none",
      strokeWidth: "1",
      fill: "none",
      fillRule: "evenodd"
    }, react_default.a.createElement("g", {
      transform: "translate(-995.000000, -1372.000000)",
      id: "All-Team-Members"
    }, react_default.a.createElement("g", {
      transform: "translate(245.000000, 698.000000)"
    }, react_default.a.createElement("g", {
      id: "Team-Administrators",
      transform: "translate(0.000000, 651.000000)"
    }, react_default.a.createElement("g", {
      id: "accordion-header"
    }, react_default.a.createElement("g", {
      id: "accordion---expanded",
      transform: "translate(750.000000, 23.000000)"
    }, react_default.a.createElement("path", {
      d: "M23.1484532,13.3124932 C23.3437659,13.1171805 23.3437659,12.7968676 23.1484532,12.6015549 L21.8515766,11.3124908 C21.6562639,11.1171781 21.3437635,11.1171781 21.1484508,11.3124908 L15.0000083,17.4609333 L8.8515659,11.3124908 C8.65625317,11.1171781 8.34375279,11.1171781 8.14844006,11.3124908 L6.85156352,12.6015549 C6.65625078,12.7968676 6.65625078,13.1171805 6.85156352,13.3124932 L14.6484454,21.1015626 C14.8437582,21.2968754 15.1562585,21.2968754 15.3515713,21.1015626 L23.1484532,13.3124932 Z",
      id: "\uF078",
      fill: "#979797"
    }), react_default.a.createElement("circle", {
      id: "Oval-2",
      stroke: "#989898",
      strokeWidth: "2",
      cx: "15",
      cy: "15",
      r: "14"
    })))))))));
  }

}
// CONCATENATED MODULE: ./components/widgets/admin_console/admin_panel_togglable.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





const AdminPanelTogglable = props => {
  return react_default.a.createElement(admin_panel, {
    className: 'AdminPanelTogglable ' + props.className + (props.open ? '' : ' closed'),
    id: props.id,
    titleId: props.titleId,
    titleDefault: props.titleDefault,
    subtitleId: props.subtitleId,
    subtitleDefault: props.subtitleDefault,
    onHeaderClick: props.onToggle,
    button: react_default.a.createElement(accordion_toggle_icon_AccordionToggleIcon, null)
  }, props.children);
};

AdminPanelTogglable.propTypes = {
  children: prop_types_default.a.node,
  className: prop_types_default.a.string.isRequired,
  id: prop_types_default.a.string,
  open: prop_types_default.a.bool.isRequired,
  titleId: prop_types_default.a.string.isRequired,
  titleDefault: prop_types_default.a.string.isRequired,
  subtitleId: prop_types_default.a.string.isRequired,
  subtitleDefault: prop_types_default.a.string.isRequired,
  onToggle: prop_types_default.a.func.isRequired
};
AdminPanelTogglable.defaultProps = {
  className: '',
  open: true
};
/* harmony default export */ var admin_panel_togglable = (AdminPanelTogglable);
// CONCATENATED MODULE: ./components/svg/checkbox_checked_icon.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

class checkbox_checked_icon_CheckboxCheckedIcon extends react_default.a.PureComponent {
  render() {
    return react_default.a.createElement("svg", {
      width: "18px",
      height: "18px",
      viewBox: "0 0 18 18"
    }, react_default.a.createElement("g", {
      id: "Developer-Export",
      stroke: "none",
      strokeWidth: "1",
      fillRule: "evenodd"
    }, react_default.a.createElement("g", {
      transform: "translate(-285.000000, -933.000000)",
      id: "All-Team-Members"
    }, react_default.a.createElement("g", {
      transform: "translate(245.000000, 698.000000)"
    }, react_default.a.createElement("g", {
      id: "Channel-Administrators",
      transform: "translate(0.000000, 106.000000)"
    }, react_default.a.createElement("g", {
      id: "data-table/column-1",
      transform: "translate(11.000000, 86.000000)"
    }, react_default.a.createElement("g", {
      id: "row-checkbox---Public-Channels",
      transform: "translate(12.000000, 35.000000)"
    }, react_default.a.createElement("g", {
      id: "Stacked-Group",
      transform: "translate(0.000000, 5.000000)"
    }, react_default.a.createElement("g", {
      id: "data-table/1st/row-checkbox-label-base"
    }, react_default.a.createElement("g", {
      id: "check-on-copy-11",
      transform: "translate(14.000000, 0.000000)"
    }, react_default.a.createElement("path", {
      d: "M19,3 L5,3 C3.9,3 3,3.9 3,5 L3,19 C3,20.1 3.9,21 5,21 L19,21 C20.1,21 21,20.1 21,19 L21,5 C21,3.9 20.1,3 19,3 L19,3 Z M10,17 L5,12.1923077 L6.4,10.8461538 L10,14.3076923 L17.6,7 L19,8.34615385 L10,17 L10,17 Z",
      id: "checkbox---checked"
    })))))))))));
  }

}
// CONCATENATED MODULE: ./components/svg/checkbox_partial_icon.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

class checkbox_partial_icon_CheckboxPartialIcon extends react_default.a.PureComponent {
  render() {
    return react_default.a.createElement("svg", {
      width: "18px",
      height: "18px",
      viewBox: "0 0 18 18"
    }, react_default.a.createElement("g", {
      id: "Developer-Export",
      stroke: "none",
      strokeWidth: "1",
      fillRule: "evenodd"
    }, react_default.a.createElement("g", {
      transform: "translate(-298.000000, -1273.000000)",
      id: "All-Team-Members"
    }, react_default.a.createElement("g", {
      transform: "translate(245.000000, 698.000000)"
    }, react_default.a.createElement("g", {
      id: "Channel-Administrators",
      transform: "translate(0.000000, 106.000000)"
    }, react_default.a.createElement("g", {
      id: "data-table/column-1",
      transform: "translate(11.000000, 86.000000)"
    }, react_default.a.createElement("g", {
      id: "row-checkbox---@all-@channel-Mentions",
      transform: "translate(0.000000, 375.000000)"
    }, react_default.a.createElement("g", {
      id: "Stacked-Group"
    }, react_default.a.createElement("g", {
      id: "data-table/1st/row-checkbox-label-base",
      transform: "translate(25.000000, 5.000000)"
    }, react_default.a.createElement("g", {
      id: "check-on-copy-11",
      transform: "translate(14.000000, 0.000000)"
    }, react_default.a.createElement("path", {
      d: "M19,3 C20.1,3 21,3.9 21,5 L21,19 C21,20.1 20.1,21 19,21 L5,21 C3.9,21 3,20.1 3,19 L3,5 C3,3.9 3.9,3 5,3 L19,3 Z M7,11 L7,13 L17,13 L17,11 L7,11 Z",
      id: "checkbox---partial"
    })))))))))));
  }

}
// CONCATENATED MODULE: ./components/admin_console/permission_schemes_settings/permission_checkbox.jsx
function permission_checkbox_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




class permission_checkbox_PermissionCheckbox extends react_default.a.PureComponent {
  render() {
    const {
      value
    } = this.props;
    let icon = null;
    let extraClass = '';

    if (value === 'checked') {
      icon = react_default.a.createElement(checkbox_checked_icon_CheckboxCheckedIcon, null);
      extraClass = 'checked';
    } else if (value === 'intermediate') {
      icon = react_default.a.createElement(checkbox_partial_icon_CheckboxPartialIcon, null);
      extraClass = 'intermediate';
    }

    return react_default.a.createElement("div", {
      className: 'permission-check ' + extraClass
    }, icon);
  }

}

permission_checkbox_defineProperty(permission_checkbox_PermissionCheckbox, "propTypes", {
  value: prop_types_default.a.string.isRequired
});

permission_checkbox_defineProperty(permission_checkbox_PermissionCheckbox, "defaultProps", {
  value: ''
});
// CONCATENATED MODULE: ./components/admin_console/permission_schemes_settings/permission_description.jsx
function permission_description_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






class permission_description_PermissionDescription extends react_default.a.Component {
  constructor(props) {
    super(props);

    permission_description_defineProperty(this, "closeTooltip", () => {
      this.setState({
        open: false
      });
    });

    permission_description_defineProperty(this, "openTooltip", e => {
      const elm = e.currentTarget.querySelector('span');
      const isElipsis = elm.offsetWidth < elm.scrollWidth;
      this.setState({
        open: isElipsis
      });
    });

    permission_description_defineProperty(this, "parentPermissionClicked", e => {
      const isInheritLink = e.target.parentElement.parentElement.className === 'inherit-link-wrapper';

      if (e.target.parentElement.className !== 'permission-description' && !isInheritLink) {
        e.stopPropagation();
      } else if (isInheritLink) {
        this.props.selectRow(this.props.id);
        e.stopPropagation();
      }
    });

    this.id = Object(utils["s" /* generateId */])();
    this.state = {
      open: false
    };
  }

  render() {
    const {
      inherited,
      id,
      rowType
    } = this.props;
    let content = '';

    if (inherited) {
      content = react_default.a.createElement("span", {
        className: "inherit-link-wrapper"
      }, react_default.a.createElement(index_es["b" /* FormattedHTMLMessage */], {
        id: "admin.permissions.inherited_from",
        values: {
          name: this.props.intl.formatMessage({
            id: 'admin.permissions.roles.' + inherited.name + '.name',
            defaultMessage: inherited.display_name
          })
        }
      }));
    } else {
      content = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: 'admin.permissions.' + rowType + '.' + id + '.description',
        values: this.props.additionalValues
      });
    }

    let tooltip = react_default.a.createElement(Overlay["a" /* default */], {
      show: this.state.open,
      delayShow: constants["N" /* default */].OVERLAY_TIME_DELAY,
      placement: "top",
      target: this.refs.content
    }, react_default.a.createElement(Tooltip["a" /* default */], {
      id: this.id
    }, content));

    if (content.props.values && Object.keys(content.props.values).length > 0) {
      tooltip = null;
    }

    content = react_default.a.createElement("span", {
      className: "permission-description",
      onClick: this.parentPermissionClicked,
      ref: "content",
      onMouseOver: this.openTooltip,
      onMouseOut: this.closeTooltip
    }, content, tooltip);
    return content;
  }

}

permission_description_defineProperty(permission_description_PermissionDescription, "propTypes", {
  intl: index_es["i" /* intlShape */].isRequired,
  id: prop_types_default.a.string.isRequired,
  rowType: prop_types_default.a.string.isRequired,
  inherited: prop_types_default.a.object,
  selectRow: prop_types_default.a.func.isRequired,
  additionalValues: prop_types_default.a.object
});

/* harmony default export */ var permission_description = (Object(index_es["h" /* injectIntl */])(permission_description_PermissionDescription));
// CONCATENATED MODULE: ./components/admin_console/permission_schemes_settings/permission_row.jsx
function permission_row_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





class permission_row_PermissionRow extends react_default.a.Component {
  constructor(...args) {
    super(...args);

    permission_row_defineProperty(this, "toggleSelect", () => {
      if (this.props.readOnly) {
        return;
      }

      this.props.onChange(this.props.id);
    });

    permission_row_defineProperty(this, "render", () => {
      const {
        id,
        uniqId,
        inherited,
        value,
        readOnly,
        selected,
        additionalValues
      } = this.props;
      let classes = 'permission-row';

      if (readOnly) {
        classes += ' read-only';
      }

      if (selected === id) {
        classes += ' selected';
      }

      return react_default.a.createElement("div", {
        className: classes,
        onClick: this.toggleSelect,
        id: uniqId
      }, react_default.a.createElement(permission_checkbox_PermissionCheckbox, {
        value: value
      }), react_default.a.createElement("span", {
        className: "permission-name"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: 'admin.permissions.permission.' + id + '.name'
      })), react_default.a.createElement(permission_description, {
        inherited: inherited,
        id: id,
        selectRow: this.props.selectRow,
        rowType: "permission",
        additionalValues: additionalValues
      }));
    });
  }

}

permission_row_defineProperty(permission_row_PermissionRow, "propTypes", {
  id: prop_types_default.a.string.isRequired,
  uniqId: prop_types_default.a.string.isRequired,
  inherited: prop_types_default.a.object,
  readOnly: prop_types_default.a.bool,
  selected: prop_types_default.a.string,
  selectRow: prop_types_default.a.func.isRequired,
  value: prop_types_default.a.string.isRequired,
  onChange: prop_types_default.a.func.isRequired,
  additionalValues: prop_types_default.a.object
});
// CONCATENATED MODULE: ./components/admin_console/permission_schemes_settings/permission_group.jsx
function permission_group_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.







class permission_group_PermissionGroup extends react_default.a.Component {
  constructor(props) {
    super(props);

    permission_group_defineProperty(this, "toggleExpanded", e => {
      e.stopPropagation();
      this.setState({
        expanded: !this.state.expanded
      });
    });

    permission_group_defineProperty(this, "toggleSelectRow", id => {
      if (this.props.readOnly) {
        return;
      }

      this.props.onChange([id]);
    });

    permission_group_defineProperty(this, "getRecursivePermissions", permissions => {
      let result = [];

      for (const permission of permissions) {
        if (typeof permission === 'string') {
          result.push(permission);
        } else {
          result = result.concat(this.getRecursivePermissions(permission.permissions));
        }
      }

      return result;
    });

    permission_group_defineProperty(this, "toggleSelectSubGroup", ids => {
      if (this.props.readOnly) {
        return;
      }

      this.props.onChange(ids);
    });

    permission_group_defineProperty(this, "toggleSelectGroup", () => {
      const {
        readOnly,
        permissions,
        role,
        onChange
      } = this.props;

      if (readOnly) {
        return;
      }

      if (this.getStatus(permissions) === 'checked') {
        const permissionsToToggle = [];

        for (const permission of this.getRecursivePermissions(permissions)) {
          if (!this.fromParent(permission)) {
            permissionsToToggle.push(permission);
          }
        }

        this.setState({
          expanded: true
        });
        onChange(permissionsToToggle);
      } else if (this.getStatus(permissions) === '') {
        const permissionsToToggle = [];
        let expanded = true;

        if (this.state.prevPermissions.length === 0) {
          for (const permission of this.getRecursivePermissions(permissions)) {
            if (!this.fromParent(permission)) {
              permissionsToToggle.push(permission);
              expanded = false;
            }
          }
        } else {
          for (const permission of this.getRecursivePermissions(permissions)) {
            if (this.state.prevPermissions.indexOf(permission) !== -1 && !this.fromParent(permission)) {
              permissionsToToggle.push(permission);
            }
          }
        }

        onChange(permissionsToToggle);
        this.setState({
          prevPermissions: [],
          expanded
        });
      } else {
        const permissionsToToggle = [];

        for (const permission of this.getRecursivePermissions(permissions)) {
          if (role.permissions.indexOf(permission) === -1 && !this.fromParent(permission)) {
            permissionsToToggle.push(permission);
          }
        }

        this.setState({
          prevPermissions: role.permissions,
          expanded: false
        });
        onChange(permissionsToToggle);
      }
    });

    permission_group_defineProperty(this, "isInScope", permission => {
      if (this.props.scope === 'channel_scope' && constants["t" /* PermissionsScope */][permission] !== 'channel_scope') {
        return false;
      }

      if (this.props.scope === 'team_scope' && constants["t" /* PermissionsScope */][permission] === 'system_scope') {
        return false;
      }

      return true;
    });

    permission_group_defineProperty(this, "renderPermission", (permission, additionalValues) => {
      if (!this.isInScope(permission)) {
        return null;
      }

      const comesFromParent = this.fromParent(permission);
      const active = comesFromParent || this.props.role.permissions.indexOf(permission) !== -1;
      return react_default.a.createElement(permission_row_PermissionRow, {
        key: permission,
        id: permission,
        uniqId: this.props.uniqId + '-' + permission,
        selected: this.props.selected,
        selectRow: this.props.selectRow,
        readOnly: this.props.readOnly || comesFromParent,
        inherited: comesFromParent ? this.props.parentRole : null,
        value: active ? 'checked' : '',
        onChange: this.toggleSelectRow,
        additionalValues: additionalValues
      });
    });

    permission_group_defineProperty(this, "renderGroup", g => {
      return react_default.a.createElement(permission_group_PermissionGroup, {
        key: g.id,
        id: g.id,
        uniqId: this.props.uniqId + '-' + g.id,
        selected: this.props.selected,
        selectRow: this.props.selectRow,
        readOnly: this.props.readOnly,
        permissions: g.permissions,
        additionalValues: this.props.additionalValues,
        role: this.props.role,
        parentRole: this.props.parentRole,
        scope: this.props.scope,
        onChange: this.toggleSelectSubGroup,
        combined: g.combined,
        root: false
      });
    });

    permission_group_defineProperty(this, "fromParent", id => {
      return this.props.parentRole && this.props.parentRole.permissions.indexOf(id) !== -1;
    });

    permission_group_defineProperty(this, "getStatus", permissions => {
      let anyChecked = false;
      let anyUnchecked = false;

      for (const permission of permissions) {
        if (typeof permission === 'string') {
          if (!this.isInScope(permission)) {
            continue;
          }

          anyChecked = anyChecked || this.fromParent(permission) || this.props.role.permissions.indexOf(permission) !== -1;
          anyUnchecked = anyUnchecked || !this.fromParent(permission) && this.props.role.permissions.indexOf(permission) === -1;
        } else {
          const status = this.getStatus(permission.permissions);

          if (status === 'intermediate') {
            return 'intermediate';
          }

          if (status === 'checked') {
            anyChecked = true;
          }

          if (status === '') {
            anyUnchecked = true;
          }
        }
      }

      if (anyChecked && anyUnchecked) {
        return 'intermediate';
      }

      if (anyChecked && !anyUnchecked) {
        return 'checked';
      }

      return '';
    });

    permission_group_defineProperty(this, "hasPermissionsOnScope", () => {
      return this.getRecursivePermissions(this.props.permissions).some(permission => this.isInScope(permission));
    });

    permission_group_defineProperty(this, "allPermissionsFromParent", permissions => {
      for (const permission of permissions) {
        if (typeof permission !== 'string') {
          if (!this.allPermissionsFromParent(permission.permissions)) {
            return false;
          }

          continue;
        }

        if (this.isInScope(permission) && !this.fromParent(permission)) {
          return false;
        }
      }

      return true;
    });

    permission_group_defineProperty(this, "render", () => {
      const {
        id,
        uniqId,
        permissions,
        readOnly,
        combined,
        root,
        selected,
        additionalValues
      } = this.props;

      if (!this.hasPermissionsOnScope()) {
        return null;
      }

      const permissionsRows = permissions.map(group => {
        if (typeof group === 'string') {
          const addVals = additionalValues && additionalValues[group] ? additionalValues[group] : {};
          return this.renderPermission(group, addVals);
        }

        return this.renderGroup(group);
      });

      if (root) {
        return react_default.a.createElement("div", {
          className: 'permission-group-permissions ' + (this.state.expanded ? 'open' : '')
        }, permissionsRows);
      }

      let inherited = null;

      if (this.allPermissionsFromParent(this.props.permissions) && this.props.combined) {
        inherited = this.props.parentRole;
      }

      let classes = '';

      if (selected === id) {
        classes += ' selected';
      }

      if (readOnly || this.allPermissionsFromParent(this.props.permissions)) {
        classes += ' read-only';
      }

      if (combined) {
        classes += ' combined';
      }

      return react_default.a.createElement("div", {
        className: "permission-group"
      }, !root && react_default.a.createElement("div", {
        className: 'permission-group-row ' + classes,
        onClick: this.toggleSelectGroup,
        id: uniqId
      }, !combined && react_default.a.createElement("div", {
        className: 'fa fa-caret-right permission-arrow ' + (this.state.expanded ? 'open' : ''),
        onClick: this.toggleExpanded
      }), react_default.a.createElement(permission_checkbox_PermissionCheckbox, {
        value: this.getStatus(this.props.permissions)
      }), react_default.a.createElement("span", {
        className: "permission-name"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: 'admin.permissions.group.' + id + '.name'
      })), react_default.a.createElement(permission_description, {
        inherited: inherited,
        id: id,
        selectRow: this.props.selectRow,
        rowType: "group"
      })), !combined && react_default.a.createElement("div", {
        className: 'permission-group-permissions ' + (this.state.expanded ? 'open' : '')
      }, permissionsRows));
    });

    this.state = {
      expanded: true,
      prevPermissions: []
    };
  }

  UNSAFE_componentWillUpdate(nextProps) {
    // eslint-disable-line camelcase
    if (this.props.selected !== nextProps.selected) {
      if (this.getRecursivePermissions(this.props.permissions).indexOf(nextProps.selected) !== -1) {
        this.setState({
          expanded: true
        });
      }
    }
  }

}

permission_group_defineProperty(permission_group_PermissionGroup, "propTypes", {
  id: prop_types_default.a.string.isRequired,
  uniqId: prop_types_default.a.string.isRequired,
  permissions: prop_types_default.a.array.isRequired,
  readOnly: prop_types_default.a.bool,
  role: prop_types_default.a.object,
  parentRole: prop_types_default.a.object,
  scope: prop_types_default.a.string.isRequired,
  combined: prop_types_default.a.bool,
  selected: prop_types_default.a.string,
  selectRow: prop_types_default.a.func.isRequired,
  root: prop_types_default.a.bool,
  onChange: prop_types_default.a.func.isRequired,
  additionalValues: prop_types_default.a.object
});
// CONCATENATED MODULE: ./components/admin_console/permission_schemes_settings/edit_post_time_limit_button/edit_post_time_limit_button.jsx
function edit_post_time_limit_button_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





class edit_post_time_limit_button_EditPostTimeLimitButton extends react_default.a.Component {
  constructor(...args) {
    super(...args);

    edit_post_time_limit_button_defineProperty(this, "render", () => {
      let messageID;

      if (this.props.timeLimit === constants["g" /* Constants */].UNSET_POST_EDIT_TIME_LIMIT) {
        messageID = Object(utils_i18n["b" /* t */])('edit_post.time_limit_button.no_limit');
      } else {
        messageID = Object(utils_i18n["b" /* t */])('edit_post.time_limit_button.for_n_seconds');
      }

      return react_default.a.createElement("button", {
        className: "edit-post-time-limit-button",
        onClick: this.props.onClick
      }, react_default.a.createElement("i", {
        className: "fa fa-gear"
      }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: messageID,
        values: {
          n: this.props.timeLimit
        }
      }));
    });
  }

}

edit_post_time_limit_button_defineProperty(edit_post_time_limit_button_EditPostTimeLimitButton, "propTypes", {
  timeLimit: prop_types_default.a.number.isRequired,
  onClick: prop_types_default.a.func
});
// CONCATENATED MODULE: ./components/admin_console/permission_schemes_settings/edit_post_time_limit_button/index.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




function edit_post_time_limit_button_mapStateToProps(state) {
  const {
    PostEditTimeLimit
  } = Object(general["getConfig"])(state);
  return {
    timeLimit: parseInt(PostEditTimeLimit, 10)
  };
}

/* harmony default export */ var edit_post_time_limit_button = (Object(es["connect"])(edit_post_time_limit_button_mapStateToProps)(edit_post_time_limit_button_EditPostTimeLimitButton));
// EXTERNAL MODULE: ./node_modules/react-bootstrap/es/Modal.js
var Modal = __webpack_require__(1972);

// CONCATENATED MODULE: ./components/admin_console/permission_schemes_settings/edit_post_time_limit_modal/edit_post_time_limit_modal.jsx
function edit_post_time_limit_modal_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.







const INT32_MAX = 2147483647;
class edit_post_time_limit_modal_EditPostTimeLimitModal extends react_default.a.Component {
  constructor(props) {
    super(props);

    edit_post_time_limit_modal_defineProperty(this, "save", async () => {
      this.setState({
        saving: true,
        errorMessage: ''
      });
      const val = parseInt(this.state.postEditTimeLimit, 10);

      if (val !== constants["g" /* Constants */].UNSET_POST_EDIT_TIME_LIMIT) {
        if (val.toString() === 'NaN' || val <= 0 || val > INT32_MAX) {
          this.setState({
            errorMessage: Object(utils["gb" /* localizeMessage */])('edit_post.time_limit_modal.invalid_time_limit', 'Invalid time limit'),
            saving: false
          });
          return false;
        }
      }

      const newConfig = JSON.parse(JSON.stringify(this.props.config));
      newConfig.ServiceSettings.PostEditTimeLimit = val;
      const {
        error: err
      } = await this.props.actions.updateConfig(newConfig);

      if (err) {
        this.setState({
          errorMessage: err,
          saving: false
        });
      } else {
        this.setState({
          saving: false
        });
        this.props.onClose();
      }

      return true;
    });

    edit_post_time_limit_modal_defineProperty(this, "handleOptionChange", e => {
      const {
        value
      } = e.target;

      if (value === constants["g" /* Constants */].ALLOW_EDIT_POST_ALWAYS) {
        this.setState({
          postEditTimeLimit: constants["g" /* Constants */].UNSET_POST_EDIT_TIME_LIMIT
        });
      } else {
        this.setState({
          postEditTimeLimit: ''
        });
      }
    });

    edit_post_time_limit_modal_defineProperty(this, "handleSecondsChange", e => {
      const {
        value
      } = e.target;
      this.setState({
        postEditTimeLimit: value
      });
    });

    edit_post_time_limit_modal_defineProperty(this, "render", () => {
      return react_default.a.createElement(Modal["a" /* default */], {
        dialogClassName: "admin-modal edit-post-time-limit-modal",
        show: this.props.show,
        role: "dialog",
        "aria-labelledby": "editPostTimeModalLabel"
      }, react_default.a.createElement(Modal["a" /* default */].Header, {
        closeButton: true
      }, react_default.a.createElement(Modal["a" /* default */].Title, {
        componentClass: "h1",
        id: "editPostTimeModalLabel"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "edit_post.time_limit_modal.title",
        defaultMessage: "Configure Global Edit Post Time Limit"
      }))), react_default.a.createElement(Modal["a" /* default */].Body, null, react_default.a.createElement(index_es["b" /* FormattedHTMLMessage */], {
        id: "edit_post.time_limit_modal.description",
        defaultMessage: "Setting a time limit <strong>applies to all users</strong> who have the \"Edit Post\" permissions in any permission scheme."
      }), react_default.a.createElement("div", {
        className: "padding-left x2 padding-top padding-bottom"
      }, react_default.a.createElement("div", {
        className: "padding-top x2"
      }, react_default.a.createElement("input", {
        id: "anytime",
        type: "radio",
        name: "limit",
        value: constants["g" /* Constants */].ALLOW_EDIT_POST_ALWAYS,
        checked: this.state.postEditTimeLimit === constants["g" /* Constants */].UNSET_POST_EDIT_TIME_LIMIT,
        onChange: this.handleOptionChange
      }), react_default.a.createElement("label", {
        htmlFor: "anytime"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "edit_post.time_limit_modal.option_label_anytime",
        defaultMessage: "Anytime"
      }))), react_default.a.createElement("div", {
        className: "padding-top"
      }, react_default.a.createElement("input", {
        id: "timelimit",
        type: "radio",
        name: "limit",
        value: constants["g" /* Constants */].ALLOW_EDIT_POST_TIME_LIMIT,
        checked: this.state.postEditTimeLimit !== constants["g" /* Constants */].UNSET_POST_EDIT_TIME_LIMIT,
        onChange: this.handleOptionChange
      }), react_default.a.createElement("label", {
        htmlFor: "timelimit"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "edit_post.time_limit_modal.option_label_time_limit.preinput",
        defaultMessage: "Can edit for"
      })), react_default.a.createElement("input", {
        type: "number",
        className: "form-control inline",
        min: "0",
        step: "1",
        max: INT32_MAX,
        id: "editPostTimeLimit",
        readOnly: this.state.postEditTimeLimit === constants["g" /* Constants */].UNSET_POST_EDIT_TIME_LIMIT,
        onChange: this.handleSecondsChange,
        value: this.state.postEditTimeLimit === constants["g" /* Constants */].UNSET_POST_EDIT_TIME_LIMIT ? '' : this.state.postEditTimeLimit
      }), react_default.a.createElement("label", {
        htmlFor: "timelimit"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "edit_post.time_limit_modal.option_label_time_limit.postinput",
        defaultMessage: "seconds after posting"
      }))), react_default.a.createElement("div", {
        className: "padding-top x2 light"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "edit_post.time_limit_modal.subscript",
        defaultMessage: "Set the length of time users have to edit their messages after posting."
      })))), react_default.a.createElement(Modal["a" /* default */].Footer, null, react_default.a.createElement("div", {
        className: "edit-post-time-limit-modal__error"
      }, this.state.errorMessage), react_default.a.createElement("button", {
        type: "button",
        className: "btn btn-cancel",
        onClick: this.props.onClose
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "confirm_modal.cancel",
        defaultMessage: "Cancel"
      })), react_default.a.createElement("button", {
        id: "linkModalCloseButton",
        type: "button",
        className: "btn btn-default",
        onClick: this.save,
        disabled: this.state.saving
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: this.state.saving ? Object(utils_i18n["b" /* t */])('save_button.saving') : Object(utils_i18n["b" /* t */])('edit_post.time_limit_modal.save_button'),
        defaultMessage: "Save Edit Time"
      }))));
    });

    this.state = {
      postEditTimeLimit: parseInt(props.config.ServiceSettings.PostEditTimeLimit, 10),
      saving: false,
      errorMessage: ''
    };
  }

  UNSAFE_componentWillMount() {
    // eslint-disable-line camelcase
    this.props.actions.getConfig();
  }

}

edit_post_time_limit_modal_defineProperty(edit_post_time_limit_modal_EditPostTimeLimitModal, "propTypes", {
  config: prop_types_default.a.object.isRequired,
  show: prop_types_default.a.bool,
  onClose: prop_types_default.a.func.isRequired,
  actions: prop_types_default.a.shape({
    updateConfig: prop_types_default.a.func.isRequired,
    getConfig: prop_types_default.a.func.isRequired
  }).isRequired
});
// CONCATENATED MODULE: ./components/admin_console/permission_schemes_settings/edit_post_time_limit_modal/index.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






function edit_post_time_limit_modal_mapStateToProps(state) {
  return {
    config: entities_admin["getConfig"](state)
  };
}

function edit_post_time_limit_modal_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      updateConfig: admin["updateConfig"],
      getConfig: admin["getConfig"]
    }, dispatch)
  };
}

/* harmony default export */ var edit_post_time_limit_modal = (Object(es["connect"])(edit_post_time_limit_modal_mapStateToProps, edit_post_time_limit_modal_mapDispatchToProps)(edit_post_time_limit_modal_EditPostTimeLimitModal));
// CONCATENATED MODULE: ./components/admin_console/permission_schemes_settings/permissions_tree/permissions_tree.jsx
function permissions_tree_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






class permissions_tree_PermissionsTree extends react_default.a.Component {
  constructor(props) {
    super(props);

    permissions_tree_defineProperty(this, "updateGroups", () => {
      const {
        config,
        scope
      } = this.props;
      const integrationsGroup = this.groups[this.groups.length - 1];

      if (config.EnableIncomingWebhooks === 'true' && integrationsGroup.permissions.indexOf('manage_incoming_webhooks') === -1) {
        integrationsGroup.permissions.push('manage_incoming_webhooks');
      }

      if (config.EnableOutgoingWebhooks === 'true' && integrationsGroup.permissions.indexOf('manage_outgoing_webhooks') === -1) {
        integrationsGroup.permissions.push('manage_outgoing_webhooks');
      }

      if (config.EnableOAuthServiceProvider === 'true' && integrationsGroup.permissions.indexOf('manage_oauth') === -1) {
        integrationsGroup.permissions.push('manage_oauth');
      }

      if (config.EnableCommands === 'true' && integrationsGroup.permissions.indexOf('manage_slash_commands') === -1) {
        integrationsGroup.permissions.push('manage_slash_commands');
      }

      if (config.EnableCustomEmoji === 'true' && integrationsGroup.permissions.indexOf('create_emojis') === -1) {
        integrationsGroup.permissions.push('create_emojis');
      }

      if (config.EnableCustomEmoji === 'true' && integrationsGroup.permissions.indexOf('delete_emojis') === -1) {
        integrationsGroup.permissions.push('delete_emojis');
      }

      if (config.EnableCustomEmoji === 'true' && integrationsGroup.permissions.indexOf('delete_others_emojis') === -1) {
        integrationsGroup.permissions.push('delete_others_emojis');
      }

      if (scope === 'team_scope' && this.groups[0].id !== 'teams_team_scope') {
        this.groups[0].id = 'teams_team_scope';
      }
    });

    permissions_tree_defineProperty(this, "openPostTimeLimitModal", () => {
      this.setState({
        editTimeLimitModalIsVisible: true
      });
    });

    permissions_tree_defineProperty(this, "closePostTimeLimitModal", () => {
      this.setState({
        editTimeLimitModalIsVisible: false
      });
    });

    permissions_tree_defineProperty(this, "toggleGroup", ids => {
      if (this.props.readOnly) {
        return;
      }

      this.props.onToggle(this.props.role.name, ids);
    });

    permissions_tree_defineProperty(this, "render", () => {
      return react_default.a.createElement("div", {
        className: "permissions-tree"
      }, react_default.a.createElement("div", {
        className: "permissions-tree--header"
      }, react_default.a.createElement("div", {
        className: "permission-name"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.permissions.permissionsTree.permission",
        defaultMessage: "Permission"
      })), react_default.a.createElement("div", {
        className: "permission-description"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.permissions.permissionsTree.description",
        defaultMessage: "Description"
      }))), react_default.a.createElement("div", {
        className: "permissions-tree--body"
      }, react_default.a.createElement(permission_group_PermissionGroup, {
        key: "all",
        id: "all",
        uniqId: this.props.role.name,
        selected: this.props.selected,
        selectRow: this.props.selectRow,
        readOnly: this.props.readOnly,
        permissions: this.groups,
        additionalValues: this.ADDITIONAL_VALUES,
        role: this.props.role,
        parentRole: this.props.parentRole,
        scope: this.props.scope,
        combined: false,
        onChange: this.toggleGroup,
        root: true
      })), react_default.a.createElement(edit_post_time_limit_modal, {
        onClose: this.closePostTimeLimitModal,
        show: this.state.editTimeLimitModalIsVisible
      }));
    });

    this.state = {
      editTimeLimitModalIsVisible: false
    };
    this.ADDITIONAL_VALUES = {
      edit_post: {
        editTimeLimitButton: react_default.a.createElement(edit_post_time_limit_button, {
          onClick: this.openPostTimeLimitModal
        })
      }
    };
    this.groups = [{
      id: 'teams',
      permissions: [{
        id: 'send_invites',
        combined: true,
        permissions: ['invite_user', 'get_public_link', 'add_user_to_team']
      }, 'create_team']
    }, {
      id: 'public_channel',
      permissions: ['create_public_channel', 'manage_public_channel_properties', 'manage_public_channel_members', 'delete_public_channel']
    }, {
      id: 'private_channel',
      permissions: ['create_private_channel', 'manage_private_channel_properties', 'manage_private_channel_members', 'delete_private_channel']
    }, {
      id: 'posts',
      permissions: [{
        id: 'edit_posts',
        permissions: ['edit_post', 'edit_others_posts']
      }, {
        id: 'delete_posts',
        permissions: ['delete_post', 'delete_others_posts']
      }, {
        id: 'reactions',
        combined: true,
        permissions: ['add_reaction', 'remove_reaction']
      }]
    }, {
      id: 'integrations',
      permissions: []
    }];
    this.updateGroups();
  }

  componentDidUpdate(prevProps) {
    if (this.props.config !== prevProps.config) {
      this.updateGroups();
    }
  }

}

permissions_tree_defineProperty(permissions_tree_PermissionsTree, "propTypes", {
  scope: prop_types_default.a.string.isRequired,
  config: prop_types_default.a.object.isRequired,
  role: prop_types_default.a.object.isRequired,
  onToggle: prop_types_default.a.func.isRequired,
  parentRole: prop_types_default.a.object,
  selected: prop_types_default.a.string,
  selectRow: prop_types_default.a.func.isRequired,
  readOnly: prop_types_default.a.bool
});

permissions_tree_defineProperty(permissions_tree_PermissionsTree, "defaultProps", {
  role: {
    permissions: []
  }
});
// CONCATENATED MODULE: ./components/admin_console/permission_schemes_settings/permissions_tree/index.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




function permissions_tree_mapStateToProps(state) {
  const config = Object(general["getConfig"])(state);
  return {
    config
  };
}

/* harmony default export */ var permissions_tree = (Object(es["connect"])(permissions_tree_mapStateToProps)(permissions_tree_PermissionsTree));
// CONCATENATED MODULE: ./components/admin_console/permission_schemes_settings/permission_system_scheme_settings/permission_system_scheme_settings.jsx
function permission_system_scheme_settings_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.















const EXCLUDED_PERMISSIONS = [permissions_default.a.VIEW_MEMBERS, permissions_default.a.JOIN_PUBLIC_TEAMS, permissions_default.a.LIST_PUBLIC_TEAMS, permissions_default.a.JOIN_PRIVATE_TEAMS, permissions_default.a.LIST_PRIVATE_TEAMS];
class permission_system_scheme_settings_PermissionSystemSchemeSettings extends react_default.a.Component {
  constructor(props) {
    super(props);

    permission_system_scheme_settings_defineProperty(this, "goToSelectedRow", () => {
      const selected = document.querySelector('.permission-row.selected,.permission-group-row.selected');

      if (selected) {
        if (this.state.openRoles.all_users) {
          selected.scrollIntoView({
            behavior: 'smooth',
            block: 'center'
          });
        } else {
          this.toggleRole('all_users'); // Give it time to open and show everything

          setTimeout(() => {
            selected.scrollIntoView({
              behavior: 'smooth',
              block: 'center'
            });
          }, 300);
        }

        return true;
      }

      return false;
    });

    permission_system_scheme_settings_defineProperty(this, "selectRow", permission => {
      this.setState({
        selectedPermission: permission
      }); // Wait until next render

      setTimeout(this.goToSelectedRow); // Remove selection after animation

      setTimeout(() => {
        this.setState({
          selectedPermission: null
        });
      }, 3000);
    });

    permission_system_scheme_settings_defineProperty(this, "deriveRolesFromAllUsers", role => {
      return {
        system_user: { ...this.props.roles.system_user,
          permissions: role.permissions.filter(p => constants["t" /* PermissionsScope */][p] === 'system_scope')
        },
        team_user: { ...this.props.roles.team_user,
          permissions: role.permissions.filter(p => constants["t" /* PermissionsScope */][p] === 'team_scope')
        },
        channel_user: { ...this.props.roles.channel_user,
          permissions: role.permissions.filter(p => constants["t" /* PermissionsScope */][p] === 'channel_scope')
        }
      };
    });

    permission_system_scheme_settings_defineProperty(this, "restoreExcludedPermissions", roles => {
      for (const permission of this.props.roles.system_user.permissions) {
        if (EXCLUDED_PERMISSIONS.includes(permission)) {
          roles.system_user.permissions.push(permission);
        }
      }

      for (const permission of this.props.roles.team_user.permissions) {
        if (EXCLUDED_PERMISSIONS.includes(permission)) {
          roles.team_user.permissions.push(permission);
        }
      }

      for (const permission of this.props.roles.channel_user.permissions) {
        if (EXCLUDED_PERMISSIONS.includes(permission)) {
          roles.channel_user.permissions.push(permission);
        }
      }

      return roles;
    });

    permission_system_scheme_settings_defineProperty(this, "handleSubmit", async () => {
      const teamAdminPromise = this.props.actions.editRole(this.state.roles.team_admin);
      const channelAdminPromise = this.props.actions.editRole(this.state.roles.channel_admin);
      const roles = this.restoreExcludedPermissions(this.deriveRolesFromAllUsers(this.state.roles.all_users));
      const systemUserPromise = this.props.actions.editRole(roles.system_user);
      const teamUserPromise = this.props.actions.editRole(roles.team_user);
      const channelUserPromise = this.props.actions.editRole(roles.channel_user);
      this.setState({
        saving: true
      });
      const results = await Promise.all([teamAdminPromise, channelAdminPromise, systemUserPromise, teamUserPromise, channelUserPromise]);
      let serverError = null;
      let saveNeeded = false;

      for (const result of results) {
        if (result.error) {
          serverError = result.error.message;
          saveNeeded = true;
          break;
        }
      }

      this.setState({
        serverError,
        saving: false,
        saveNeeded
      });
      this.props.actions.setNavigationBlocked(saveNeeded);
    });

    permission_system_scheme_settings_defineProperty(this, "toggleRole", roleId => {
      const newOpenRoles = { ...this.state.openRoles
      };
      newOpenRoles[roleId] = !newOpenRoles[roleId];
      this.setState({
        openRoles: newOpenRoles
      });
    });

    permission_system_scheme_settings_defineProperty(this, "togglePermission", (roleId, permissions) => {
      const roles = { ...this.state.roles
      };
      const role = { ...roles[roleId]
      };
      const newPermissions = [...role.permissions];

      for (const permission of permissions) {
        if (newPermissions.indexOf(permission) === -1) {
          newPermissions.push(permission);
        } else {
          newPermissions.splice(newPermissions.indexOf(permission), 1);
        }
      }

      role.permissions = newPermissions;
      roles[roleId] = role;
      this.setState({
        roles,
        saveNeeded: true
      });
      this.props.actions.setNavigationBlocked(true);
    });

    permission_system_scheme_settings_defineProperty(this, "resetDefaults", () => {
      const newRolesState = JSON.parse(JSON.stringify({ ...this.state.roles
      }));
      Object.entries(constants["h" /* DefaultRolePermissions */]).forEach(([roleName, permissions]) => {
        newRolesState[roleName].permissions = permissions;
      });
      this.setState({
        roles: newRolesState,
        saveNeeded: true
      });
      this.props.actions.setNavigationBlocked(true);
    });

    permission_system_scheme_settings_defineProperty(this, "render", () => {
      if (!this.state.loaded) {
        return react_default.a.createElement(loading_screen["a" /* default */], null);
      }

      return react_default.a.createElement("div", {
        className: "wrapper--fixed"
      }, react_default.a.createElement("div", {
        className: "admin-console__header with-back"
      }, react_default.a.createElement("div", null, react_default.a.createElement(blockable_link, {
        to: "/admin_console/user_management/permissions",
        className: "fa fa-angle-left back"
      }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.permissions.systemScheme",
        defaultMessage: "System Scheme"
      }))), react_default.a.createElement("div", {
        className: "admin-console__wrapper"
      }, react_default.a.createElement("div", {
        className: "admin-console__content"
      }, react_default.a.createElement("div", {
        className: 'banner info'
      }, react_default.a.createElement("div", {
        className: "banner__content"
      }, react_default.a.createElement("span", null, react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "admin.permissions.systemScheme.introBanner",
        defaultMessage: "Configure the default permissions for Team Admins, Channel Admins and other members. This scheme is inherited by all teams unless a [Team Override Scheme](!https://about.mattermost.com/default-team-override-scheme) is applied in specific teams."
      })))), react_default.a.createElement(admin_panel_togglable, {
        className: "permissions-block",
        open: this.state.openRoles.all_users,
        id: "all_users",
        onToggle: () => this.toggleRole('all_users'),
        titleId: Object(utils_i18n["b" /* t */])('admin.permissions.systemScheme.allMembersTitle'),
        titleDefault: "All Members",
        subtitleId: Object(utils_i18n["b" /* t */])('admin.permissions.systemScheme.allMembersDescription'),
        subtitleDefault: "Permissions granted to all members, including administrators and newly created users."
      }, react_default.a.createElement(permissions_tree, {
        selected: this.state.selectedPermission,
        role: this.state.roles.all_users,
        scope: 'system_scope',
        onToggle: this.togglePermission,
        selectRow: this.selectRow
      })), react_default.a.createElement(admin_panel_togglable, {
        className: "permissions-block",
        open: this.state.openRoles.channel_admin,
        onToggle: () => this.toggleRole('channel_admin'),
        titleId: Object(utils_i18n["b" /* t */])('admin.permissions.systemScheme.channelAdminsTitle'),
        titleDefault: "Channel Administrators",
        subtitleId: Object(utils_i18n["b" /* t */])('admin.permissions.systemScheme.channelAdminsDescription'),
        subtitleDefault: "Permissions granted to channel creators and any users promoted to Channel Administrator."
      }, react_default.a.createElement(permissions_tree, {
        parentRole: this.state.roles.all_users,
        role: this.state.roles.channel_admin,
        scope: 'channel_scope',
        onToggle: this.togglePermission,
        selectRow: this.selectRow
      })), react_default.a.createElement(admin_panel_togglable, {
        className: "permissions-block",
        open: this.state.openRoles.team_admin,
        onToggle: () => this.toggleRole('team_admin'),
        titleId: Object(utils_i18n["b" /* t */])('admin.permissions.systemScheme.teamAdminsTitle'),
        titleDefault: "Team Administrators",
        subtitleId: Object(utils_i18n["b" /* t */])('admin.permissions.systemScheme.teamAdminsDescription'),
        subtitleDefault: "Permissions granted to team creators and any users promoted to Team Administrator."
      }, react_default.a.createElement(permissions_tree, {
        parentRole: this.state.roles.all_users,
        role: this.state.roles.team_admin,
        scope: 'team_scope',
        onToggle: this.togglePermission,
        selectRow: this.selectRow
      })), react_default.a.createElement(admin_panel_togglable, {
        className: "permissions-block",
        open: this.state.openRoles.system_admin,
        onToggle: () => this.toggleRole('system_admin'),
        titleId: Object(utils_i18n["b" /* t */])('admin.permissions.systemScheme.systemAdminsTitle'),
        titleDefault: "System Administrators",
        subtitleId: Object(utils_i18n["b" /* t */])('admin.permissions.systemScheme.systemAdminsDescription'),
        subtitleDefault: "Full permissions granted to System Administrators."
      }, react_default.a.createElement(permissions_tree, {
        readOnly: true,
        role: this.state.roles.system_admin,
        scope: 'system_scope',
        onToggle: this.togglePermission,
        selectRow: this.selectRow
      })))), react_default.a.createElement("div", {
        className: "admin-console-save"
      }, react_default.a.createElement(save_button["a" /* default */], {
        saving: this.state.saving,
        disabled: !this.state.saveNeeded || this.canSave && !this.canSave(),
        onClick: this.handleSubmit,
        savingMessage: Object(utils["gb" /* localizeMessage */])('admin.saving', 'Saving Config...')
      }), react_default.a.createElement(blockable_link, {
        className: "cancel-button",
        to: "/admin_console/user_management/permissions"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.permissions.permissionSchemes.cancel",
        defaultMessage: "Cancel"
      })), react_default.a.createElement("a", {
        onClick: () => this.setState({
          showResetDefaultModal: true
        }),
        className: "cancel-button reset-defaults-btn"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.permissions.systemScheme.resetDefaultsButton",
        defaultMessage: "Reset to Defaults"
      })), react_default.a.createElement("div", {
        className: "error-message"
      }, react_default.a.createElement(form_error["a" /* default */], {
        error: this.state.serverError
      }))), react_default.a.createElement(confirm_modal["a" /* default */], {
        show: this.state.showResetDefaultModal,
        title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.permissions.systemScheme.resetDefaultsButtonModalTitle",
          defaultMessage: "Reset to Default?"
        }),
        message: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.permissions.systemScheme.resetDefaultsButtonModalBody",
          defaultMessage: "This will reset all selections on this page to their default settings. Are you sure you want to reset?"
        }),
        confirmButtonText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.permissions.systemScheme.resetDefaultsConfirmationButton",
          defaultMessage: "Yes, Reset"
        }),
        onConfirm: () => {
          this.resetDefaults();
          this.setState({
            showResetDefaultModal: false
          });
        },
        onCancel: () => this.setState({
          showResetDefaultModal: false
        })
      }));
    });

    this.state = {
      showResetDefaultModal: false,
      loaded: false,
      saving: false,
      saveNeeded: false,
      serverError: null,
      roles: {},
      openRoles: {
        all_users: true,
        system_admin: true,
        team_admin: true,
        channel_admin: true
      }
    };
    this.rolesNeeded = ['system_admin', 'system_user', 'team_admin', 'team_user', 'channel_admin', 'channel_user'];
  }

  componentDidMount() {
    this.props.actions.loadRolesIfNeeded(this.rolesNeeded);

    if (this.rolesNeeded.every(roleName => this.props.roles[roleName])) {
      this.loadRolesIntoState(this.props);
    }
  }

  componentWillReceiveProps(nextProps) {
    if (!this.state.loaded && this.rolesNeeded.every(roleName => nextProps.roles[roleName])) {
      this.loadRolesIntoState(nextProps);
    }
  }

  loadRolesIntoState(props) {
    const {
      system_admin,
      team_admin,
      channel_admin,
      system_user,
      team_user,
      channel_user
    } = props.roles; // eslint-disable-line camelcase

    this.setState({
      selectedPermission: null,
      loaded: true,
      roles: {
        system_admin,
        team_admin,
        channel_admin,
        all_users: {
          name: 'all_users',
          displayName: 'All members',
          permissions: system_user.permissions.concat(team_user.permissions).concat(channel_user.permissions)
        }
      }
    });
  }

}

permission_system_scheme_settings_defineProperty(permission_system_scheme_settings_PermissionSystemSchemeSettings, "propTypes", {
  roles: prop_types_default.a.object.isRequired,
  license: prop_types_default.a.object.isRequired,
  actions: prop_types_default.a.shape({
    loadRolesIfNeeded: prop_types_default.a.func.isRequired,
    editRole: prop_types_default.a.func.isRequired,
    setNavigationBlocked: prop_types_default.a.func.isRequired
  }).isRequired
});
// CONCATENATED MODULE: ./components/admin_console/permission_schemes_settings/permission_system_scheme_settings/index.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.







function permission_system_scheme_settings_mapStateToProps(state) {
  return {
    roles: Object(entities_roles["getRoles"])(state),
    rolesRequest: state.requests.roles.getRolesByNames
  };
}

function permission_system_scheme_settings_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      loadRolesIfNeeded: actions_roles["loadRolesIfNeeded"],
      editRole: actions_roles["editRole"],
      setNavigationBlocked: admin_actions["C" /* setNavigationBlocked */]
    }, dispatch)
  };
}

/* harmony default export */ var permission_system_scheme_settings = (Object(es["connect"])(permission_system_scheme_settings_mapStateToProps, permission_system_scheme_settings_mapDispatchToProps)(permission_system_scheme_settings_PermissionSystemSchemeSettings));
// EXTERNAL MODULE: ./actions/views/search.js
var views_search = __webpack_require__(1626);

// EXTERNAL MODULE: ./components/multiselect/multiselect.jsx + 1 modules
var multiselect = __webpack_require__(1685);

// CONCATENATED MODULE: ./components/team_info.jsx
function team_info_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.



class team_info_TeamInList extends react_default.a.Component {
  render() {
    const {
      team
    } = this.props;
    const teamIconUrl = Object(utils["J" /* imageURLForTeam */])(team);
    let icon = null;

    if (teamIconUrl) {
      icon = react_default.a.createElement("div", {
        className: "team-btn__image",
        style: {
          backgroundImage: `url('${teamIconUrl}')`
        }
      });
    } else {
      icon = react_default.a.createElement("div", {
        className: "team-btn__initials"
      }, team.display_name ? team.display_name.replace(/\s/g, '').substring(0, 2) : '??');
    }

    return react_default.a.createElement("div", {
      className: "team-info-block"
    }, react_default.a.createElement("span", {
      className: "icon"
    }, icon), react_default.a.createElement("div", {
      className: "team-data"
    }, react_default.a.createElement("div", {
      className: "title"
    }, team.display_name)));
  }

}

team_info_defineProperty(team_info_TeamInList, "propTypes", {
  team: prop_types_default.a.object.isRequired
});
// CONCATENATED MODULE: ./components/team_selector_modal/team_selector_modal.jsx
function team_selector_modal_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.










const TEAMS_PER_PAGE = 50;
class team_selector_modal_TeamSelectorModal extends react_default.a.Component {
  constructor(props) {
    super(props);

    team_selector_modal_defineProperty(this, "handleHide", () => {
      this.props.actions.setModalSearchTerm('');
      this.setState({
        show: false
      });
    });

    team_selector_modal_defineProperty(this, "handleExit", () => {
      if (this.props.onModalDismissed) {
        this.props.onModalDismissed();
      }
    });

    team_selector_modal_defineProperty(this, "handleSubmit", e => {
      if (e) {
        e.preventDefault();
      }

      if (this.state.values.length === 0) {
        return;
      }

      this.props.onTeamsSelected(this.state.values);
      this.handleHide();
    });

    team_selector_modal_defineProperty(this, "addValue", (value, confirmed = false) => {
      if (this.props.modalID === constants["p" /* ModalIdentifiers */].ADD_TEAMS_TO_SCHEME && value.scheme_id !== null && value.scheme_id !== '' && !confirmed) {
        this.setState({
          confirmAddModal: true,
          confirmAddTeam: value
        });
        return;
      }

      const values = Object.assign([], this.state.values);
      const teamIds = values.map(v => v.id);

      if (value && value.id && teamIds.indexOf(value.id) === -1) {
        values.push(value);
      }

      this.setState({
        values,
        confirmAddModal: false,
        confirmAddTeam: null
      });
    });

    team_selector_modal_defineProperty(this, "setTeamsLoadingState", loadingState => {
      this.setState({
        loadingTeams: loadingState
      });
    });

    team_selector_modal_defineProperty(this, "handlePageChange", (page, prevPage) => {
      if (page > prevPage) {
        this.setTeamsLoadingState(true);
        this.props.actions.loadTeams(page, TEAMS_PER_PAGE + 1).then(() => {
          this.setTeamsLoadingState(false);
        });
      }
    });

    team_selector_modal_defineProperty(this, "handleDelete", values => {
      this.setState({
        values
      });
    });

    team_selector_modal_defineProperty(this, "search", (term, multiselectComponent) => {
      if (multiselectComponent.state.page !== 0) {
        multiselectComponent.setState({
          page: 0
        });
      }

      this.props.actions.setModalSearchTerm(term);
    });

    this.searchTimeoutId = 0;
    this.state = {
      values: [],
      show: true,
      search: false,
      loadingTeams: true,
      confirmAddModal: false,
      confirmAddTeam: null
    };
  }

  componentDidMount() {
    this.props.actions.loadTeams(0, TEAMS_PER_PAGE + 1).then(() => {
      this.setTeamsLoadingState(false);
    });
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
    // eslint-disable-line camelcase
    if (this.props.searchTerm !== nextProps.searchTerm) {
      clearTimeout(this.searchTimeoutId);
      const searchTerm = nextProps.searchTerm;

      if (searchTerm === '') {
        return;
      }

      this.searchTimeoutId = setTimeout(async () => {
        this.setTeamsLoadingState(true);
        await this.props.actions.searchTeams(searchTerm);
        this.setTeamsLoadingState(false);
      }, constants["N" /* default */].SEARCH_TIMEOUT_MILLISECONDS);
    }
  }

  renderOption(option, isSelected, onAdd) {
    var rowSelected = '';

    if (isSelected) {
      rowSelected = 'more-modal__row--selected';
    }

    return react_default.a.createElement("div", {
      key: option.id,
      ref: isSelected ? 'selected' : option.id,
      className: 'more-modal__row clickable ' + rowSelected,
      onClick: () => onAdd(option)
    }, react_default.a.createElement("div", {
      className: "more-modal__details"
    }, react_default.a.createElement(team_info_TeamInList, {
      team: option
    })), react_default.a.createElement("div", {
      className: "more-modal__actions"
    }, react_default.a.createElement("div", {
      className: "more-modal__actions--round"
    }, react_default.a.createElement("i", {
      className: "fa fa-plus"
    }))));
  }

  renderValue(props) {
    return props.data.display_name;
  }

  renderConfirmModal(show, team) {
    const title = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "add_teams_to_scheme.confirmation.title",
      defaultMessage: "Team Override Scheme Change?"
    });
    const message = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "add_teams_to_scheme.confirmation.message",
      defaultMessage: "This team is already selected in another team scheme, are you sure you want to move it to this team scheme?"
    });
    const confirmButtonText = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "add_teams_to_scheme.confirmation.accept",
      defaultMessage: "Yes, Move Team"
    });
    return react_default.a.createElement(confirm_modal["a" /* default */], {
      show: show,
      title: title,
      message: message,
      confirmButtonText: confirmButtonText,
      onCancel: () => this.setState({
        confirmAddModal: false,
        confirmAddTeam: null
      }),
      onConfirm: () => this.addValue(team, true)
    });
  }

  render() {
    const confirmModal = this.renderConfirmModal(this.state.confirmAddModal, this.state.confirmAddTeam);
    const numRemainingText = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "multiselect.selectTeams",
      defaultMessage: "Use \u2191\u2193 to browse, \u21B5 to select."
    });
    const buttonSubmitText = Object(utils["gb" /* localizeMessage */])('multiselect.add', 'Add');
    let teams = [];

    if (this.props.teams) {
      teams = this.props.teams.filter(team => team.delete_at === 0);
      teams = teams.filter(team => team.scheme_id !== this.currentSchemeId);
      teams = teams.filter(team => this.props.alreadySelected.indexOf(team.id) === -1);
      teams.sort((a, b) => {
        const aName = a.display_name.toUpperCase();
        const bName = b.display_name.toUpperCase();

        if (aName === bName) {
          return 0;
        }

        if (aName > bName) {
          return 1;
        }

        return -1;
      });
    }

    return react_default.a.createElement(Modal["a" /* default */], {
      dialogClassName: 'more-modal more-direct-channels team-selector-modal',
      show: this.state.show,
      onHide: this.handleHide,
      onExited: this.handleExit,
      role: "dialog",
      "aria-labelledby": "teamSelectorModalLabel"
    }, react_default.a.createElement(Modal["a" /* default */].Header, {
      closeButton: true
    }, react_default.a.createElement(Modal["a" /* default */].Title, {
      componentClass: "h1",
      id: "teamSelectorModalLabel"
    }, react_default.a.createElement(formatted_markdown_message["b" /* default */], {
      id: "add_teams_to_scheme.title",
      defaultMessage: "Add Teams To **Team Selection** List"
    }))), react_default.a.createElement(Modal["a" /* default */].Body, null, confirmModal, react_default.a.createElement(multiselect["a" /* default */], {
      key: "addTeamsToSchemeKey",
      options: teams,
      optionRenderer: this.renderOption,
      values: this.state.values,
      valueRenderer: this.renderValue,
      perPage: TEAMS_PER_PAGE,
      handlePageChange: this.handlePageChange,
      handleInput: this.search,
      handleDelete: this.handleDelete,
      handleAdd: this.addValue,
      handleSubmit: this.handleSubmit,
      numRemainingText: numRemainingText,
      buttonSubmitText: buttonSubmitText,
      saving: false,
      loading: this.state.loadingTeams,
      placeholderText: Object(utils["gb" /* localizeMessage */])('multiselect.addTeamsPlaceholder', 'Search and add teams')
    })));
  }

}

team_selector_modal_defineProperty(team_selector_modal_TeamSelectorModal, "propTypes", {
  currentSchemeId: prop_types_default.a.string,
  alreadySelected: prop_types_default.a.array,
  searchTerm: prop_types_default.a.string.isRequired,
  teams: prop_types_default.a.array.isRequired,
  onModalDismissed: prop_types_default.a.func,
  onTeamsSelected: prop_types_default.a.func,
  modalID: prop_types_default.a.string,
  actions: prop_types_default.a.shape({
    loadTeams: prop_types_default.a.func.isRequired,
    setModalSearchTerm: prop_types_default.a.func.isRequired,
    searchTeams: prop_types_default.a.func.isRequired
  }).isRequired
});
// CONCATENATED MODULE: ./components/team_selector_modal/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.







function team_selector_modal_mapStateToProps(state) {
  const searchTerm = state.views.search.modalSearch;
  const teams = Object.values(Object(entities_teams["getTeams"])(state) || {}).filter(team => {
    return team.display_name.toLowerCase().startsWith(searchTerm.toLowerCase()) || team.description.toLowerCase().startsWith(searchTerm.toLowerCase());
  });
  return {
    searchTerm,
    teams
  };
}

function team_selector_modal_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      loadTeams: actions_teams["getTeams"],
      setModalSearchTerm: views_search["a" /* setModalSearchTerm */],
      searchTeams: actions_teams["searchTeams"]
    }, dispatch)
  };
}

/* harmony default export */ var team_selector_modal = (Object(es["connect"])(team_selector_modal_mapStateToProps, team_selector_modal_mapDispatchToProps)(team_selector_modal_TeamSelectorModal));
// CONCATENATED MODULE: ./components/widgets/admin_console/admin_panel_with_button.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





const AdminPanelWithButton = props => {
  const button = react_default.a.createElement("a", {
    className: "btn btn-primary",
    onClick: props.onButtonClick,
    disabled: props.disabled
  }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: props.buttonTextId,
    defaultMessage: props.buttonTextDefault
  }));
  return react_default.a.createElement(admin_panel, {
    className: 'AdminPanelWithButton ' + props.className,
    id: props.id,
    titleId: props.titleId,
    titleDefault: props.titleDefault,
    subtitleId: props.subtitleId,
    subtitleDefault: props.subtitleDefault,
    button: button
  }, props.children);
};

AdminPanelWithButton.propTypes = {
  children: prop_types_default.a.node,
  className: prop_types_default.a.string.isRequired,
  id: prop_types_default.a.string,
  titleId: prop_types_default.a.string.isRequired,
  titleDefault: prop_types_default.a.string.isRequired,
  subtitleId: prop_types_default.a.string.isRequired,
  subtitleDefault: prop_types_default.a.string.isRequired,
  onButtonClick: prop_types_default.a.func,
  disabled: prop_types_default.a.bool,
  buttonTextId: prop_types_default.a.string,
  buttonTextDefault: prop_types_default.a.string
};
AdminPanelWithButton.defaultProps = {
  className: ''
};
/* harmony default export */ var admin_panel_with_button = (AdminPanelWithButton);
// CONCATENATED MODULE: ./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/team_in_list/team_in_list.jsx
function team_in_list_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




class team_in_list_TeamInList extends react_default.a.Component {
  render() {
    const team = this.props.team;
    return react_default.a.createElement("div", {
      className: "team",
      key: team.id
    }, react_default.a.createElement(team_info_TeamInList, {
      team: team
    }), react_default.a.createElement("a", {
      className: "remove",
      onClick: () => this.props.onRemoveTeam(team.id)
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.permissions.teamScheme.removeTeam",
      defaultMessage: "Remove"
    })));
  }

}

team_in_list_defineProperty(team_in_list_TeamInList, "propTypes", {
  team: prop_types_default.a.object.isRequired,
  onRemoveTeam: prop_types_default.a.func
});
// CONCATENATED MODULE: ./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/team_in_list/index.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






function team_in_list_mapStateToProps(state) {
  return {
    stats: Object(entities_teams["getTeamStats"])(state)
  };
}

function team_in_list_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      loadTeamStats: actions_teams["getTeamStats"]
    }, dispatch)
  };
}

/* harmony default export */ var team_in_list = (Object(es["connect"])(team_in_list_mapStateToProps, team_in_list_mapDispatchToProps)(team_in_list_TeamInList));
// CONCATENATED MODULE: ./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/permission_team_scheme_settings.jsx
function permission_team_scheme_settings_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.



















const permission_team_scheme_settings_EXCLUDED_PERMISSIONS = [permissions_default.a.VIEW_MEMBERS, permissions_default.a.JOIN_PUBLIC_TEAMS, permissions_default.a.LIST_PUBLIC_TEAMS, permissions_default.a.JOIN_PRIVATE_TEAMS, permissions_default.a.LIST_PRIVATE_TEAMS];
class permission_team_scheme_settings_PermissionTeamSchemeSettings extends react_default.a.Component {
  constructor(_props) {
    super(_props);

    permission_team_scheme_settings_defineProperty(this, "isLoaded", props => {
      if (props.schemeId) {
        if (props.scheme !== null && props.teams !== null && props.roles[props.scheme.default_team_user_role] && props.roles[props.scheme.default_team_admin_role] && props.roles[props.scheme.default_channel_user_role] && props.roles[props.scheme.default_channel_admin_role]) {
          return true;
        }

        return false;
      } else if (props.roles.team_user && props.roles.team_admin && props.roles.channel_user && props.roles.channel_admin) {
        return true;
      }

      return false;
    });

    permission_team_scheme_settings_defineProperty(this, "goToSelectedRow", () => {
      const selected = document.querySelector('.permission-row.selected,.permission-group-row.selected');

      if (selected) {
        if (this.state.openRoles.all_users) {
          selected.scrollIntoView({
            behavior: 'smooth',
            block: 'center'
          });
        } else {
          this.toggleRole('all_users'); // Give it time to open and show everything

          setTimeout(() => {
            selected.scrollIntoView({
              behavior: 'smooth',
              block: 'center'
            });
          }, 300);
        }

        return true;
      }

      return false;
    });

    permission_team_scheme_settings_defineProperty(this, "selectRow", permission => {
      this.setState({
        selectedPermission: permission
      }); // Wait until next render

      setTimeout(this.goToSelectedRow); // Remove selection after animation

      setTimeout(() => {
        this.setState({
          selectedPermission: null
        });
      }, 3000);
    });

    permission_team_scheme_settings_defineProperty(this, "getStateRoles", () => {
      if (this.state.roles !== null) {
        return this.state.roles;
      }

      let teamUser = null;
      let teamAdmin = null;
      let channelUser = null;
      let channelAdmin = null;

      if (this.props.schemeId) {
        if (this.isLoaded(this.props)) {
          teamUser = this.props.roles[this.props.scheme.default_team_user_role];
          teamAdmin = this.props.roles[this.props.scheme.default_team_admin_role];
          channelUser = this.props.roles[this.props.scheme.default_channel_user_role];
          channelAdmin = this.props.roles[this.props.scheme.default_channel_admin_role];
        }
      } else if (this.isLoaded(this.props)) {
        teamUser = this.props.roles.team_user;
        teamAdmin = this.props.roles.team_admin;
        channelUser = this.props.roles.channel_user;
        channelAdmin = this.props.roles.channel_admin;
      } else {
        return null;
      }

      return {
        team_admin: teamAdmin,
        channel_admin: channelAdmin,
        all_users: {
          name: 'all_users',
          displayName: 'All members',
          permissions: teamUser.permissions.concat(channelUser.permissions)
        }
      };
    });

    permission_team_scheme_settings_defineProperty(this, "deriveRolesFromAllUsers", (baseTeam, baseChannel, role) => {
      return {
        team_user: { ...baseTeam,
          permissions: role.permissions.filter(p => constants["t" /* PermissionsScope */][p] === 'team_scope')
        },
        channel_user: { ...baseChannel,
          permissions: role.permissions.filter(p => constants["t" /* PermissionsScope */][p] === 'channel_scope')
        }
      };
    });

    permission_team_scheme_settings_defineProperty(this, "restoreExcludedPermissions", (baseTeam, baseChannel, roles) => {
      for (const permission of baseTeam.permissions) {
        if (permission_team_scheme_settings_EXCLUDED_PERMISSIONS.includes(permission)) {
          roles.team_user.permissions.push(permission);
        }
      }

      for (const permission of baseChannel.permissions) {
        if (permission_team_scheme_settings_EXCLUDED_PERMISSIONS.includes(permission)) {
          roles.channel_user.permissions.push(permission);
        }
      }

      return roles;
    });

    permission_team_scheme_settings_defineProperty(this, "handleNameChange", e => {
      this.setState({
        schemeName: e.target.value,
        saveNeeded: true
      });
      this.props.actions.setNavigationBlocked(true);
    });

    permission_team_scheme_settings_defineProperty(this, "handleDescriptionChange", e => {
      this.setState({
        schemeDescription: e.target.value,
        saveNeeded: true
      });
      this.props.actions.setNavigationBlocked(true);
    });

    permission_team_scheme_settings_defineProperty(this, "handleSubmit", async () => {
      const roles = this.getStateRoles();
      let teamAdmin = roles.team_admin;
      let channelAdmin = roles.channel_admin;
      const allUsers = roles.all_users;
      const schemeName = this.state.schemeName || this.props.scheme && this.props.scheme.display_name || '';
      const schemeDescription = this.state.schemeDescription || this.props.scheme && this.props.scheme.description || '';
      let teamUser = null;
      let channelUser = null;
      let schemeId = null;
      this.setState({
        saving: true
      });

      if (this.props.schemeId) {
        let derived = this.deriveRolesFromAllUsers(this.props.roles[this.props.scheme.default_team_user_role], this.props.roles[this.props.scheme.default_channel_user_role], allUsers);
        derived = this.restoreExcludedPermissions(this.props.roles[this.props.scheme.default_team_user_role], this.props.roles[this.props.scheme.default_channel_user_role], derived);
        teamUser = derived.team_user;
        channelUser = derived.channel_user;
        await this.props.actions.patchScheme(this.props.schemeId, {
          display_name: schemeName,
          description: schemeDescription
        });
        schemeId = this.props.schemeId;
      } else {
        let derived = this.deriveRolesFromAllUsers(this.props.roles.team_user, this.props.roles.channel_user, allUsers);
        derived = this.restoreExcludedPermissions(this.props.roles.team_user, this.props.roles.channel_user, derived);
        teamUser = derived.team_user;
        channelUser = derived.channel_user;
        const result = await this.props.actions.createScheme({
          display_name: schemeName,
          description: schemeDescription,
          scope: 'team'
        });

        if (result.error) {
          this.setState({
            serverError: result.error.message,
            saving: false,
            saveNeeded: true
          });
          this.props.actions.setNavigationBlocked(true);
          return;
        }

        const newScheme = result.data;
        schemeId = newScheme.id;
        await this.props.actions.loadRolesIfNeeded([newScheme.default_team_user_role, newScheme.default_team_admin_role, newScheme.default_channel_user_role, newScheme.default_channel_admin_role]);
        teamUser = { ...teamUser,
          id: this.props.roles[newScheme.default_team_user_role].id
        };
        teamAdmin = { ...teamAdmin,
          id: this.props.roles[newScheme.default_team_admin_role].id
        };
        channelUser = { ...channelUser,
          id: this.props.roles[newScheme.default_channel_user_role].id
        };
        channelAdmin = { ...channelAdmin,
          id: this.props.roles[newScheme.default_channel_admin_role].id
        };
      }

      const teamAdminPromise = this.props.actions.editRole(teamAdmin);
      const channelAdminPromise = this.props.actions.editRole(channelAdmin);
      const teamUserPromise = this.props.actions.editRole(teamUser);
      const channelUserPromise = this.props.actions.editRole(channelUser);
      const teamEditPromises = [];
      const currentTeams = new Set((this.state.teams || this.props.teams || []).map(team => team.id));
      const serverTeams = new Set((this.props.teams || []).map(team => team.id)); // Difference of sets (currentTeams - serverTeams)

      const addedTeams = new Set([...currentTeams].filter(team => !serverTeams.has(team))); // Difference of sets (serverTeams - currentTeams)

      const removedTeams = new Set([...serverTeams].filter(team => !currentTeams.has(team)));

      for (const teamId of addedTeams) {
        teamEditPromises.push(this.props.actions.updateTeamScheme(teamId, schemeId));
      }

      for (const teamId of removedTeams) {
        teamEditPromises.push(this.props.actions.updateTeamScheme(teamId, ''));
      }

      const results = await Promise.all([teamAdminPromise, channelAdminPromise, teamUserPromise, channelUserPromise, ...teamEditPromises]);
      let serverError = null;
      let saveNeeded = false;

      for (const result of results) {
        if (result.error) {
          serverError = result.error.message;
          saveNeeded = true;
          break;
        }
      }

      this.setState({
        serverError,
        saving: false,
        saveNeeded
      });
      this.props.actions.setNavigationBlocked(saveNeeded);
      this.props.history.push('/admin_console/user_management/permissions');
    });

    permission_team_scheme_settings_defineProperty(this, "toggleRole", roleId => {
      const newOpenRoles = { ...this.state.openRoles
      };
      newOpenRoles[roleId] = !newOpenRoles[roleId];
      this.setState({
        openRoles: newOpenRoles
      });
    });

    permission_team_scheme_settings_defineProperty(this, "togglePermission", (roleId, permissions) => {
      const roles = { ...this.getStateRoles()
      };
      let role = null;

      if (roles.team_admin.name === roleId) {
        role = { ...roles.team_admin
        };
      } else if (roles.channel_admin.name === roleId) {
        role = { ...roles.channel_admin
        };
      } else if (roles.all_users.name === roleId) {
        role = { ...roles.all_users
        };
      }

      const newPermissions = [...role.permissions];

      for (const permission of permissions) {
        if (newPermissions.indexOf(permission) === -1) {
          newPermissions.push(permission);
        } else {
          newPermissions.splice(newPermissions.indexOf(permission), 1);
        }
      }

      role.permissions = newPermissions;

      if (roles.team_admin.name === roleId) {
        roles.team_admin = role;
      } else if (roles.channel_admin.name === roleId) {
        roles.channel_admin = role;
      } else if (roles.all_users.name === roleId) {
        roles.all_users = role;
      }

      this.setState({
        roles,
        saveNeeded: true
      });
      this.props.actions.setNavigationBlocked(true);
    });

    permission_team_scheme_settings_defineProperty(this, "openAddTeam", () => {
      this.setState({
        addTeamOpen: true
      });
    });

    permission_team_scheme_settings_defineProperty(this, "removeTeam", teamId => {
      const teams = (this.state.teams || this.props.teams).filter(team => team.id !== teamId);
      this.setState({
        teams,
        saveNeeded: true
      });
      this.props.actions.setNavigationBlocked(true);
    });

    permission_team_scheme_settings_defineProperty(this, "addTeams", teams => {
      const currentTeams = this.state.teams || this.props.teams || [];
      this.setState({
        teams: [...currentTeams, ...teams],
        saveNeeded: true
      });
      this.props.actions.setNavigationBlocked(true);
    });

    permission_team_scheme_settings_defineProperty(this, "closeAddTeam", () => {
      this.setState({
        addTeamOpen: false
      });
    });

    permission_team_scheme_settings_defineProperty(this, "render", () => {
      if (!this.isLoaded(this.props)) {
        return react_default.a.createElement(loading_screen["a" /* default */], null);
      }

      const roles = this.getStateRoles();
      const teams = this.state.teams || this.props.teams || [];
      const schemeName = this.state.schemeName || this.props.scheme && this.props.scheme.display_name || '';
      const schemeDescription = this.state.schemeDescription || this.props.scheme && this.props.scheme.description || '';
      return react_default.a.createElement("div", {
        className: "wrapper--fixed"
      }, this.state.addTeamOpen && react_default.a.createElement(team_selector_modal, {
        modalID: constants["p" /* ModalIdentifiers */].ADD_TEAMS_TO_SCHEME,
        onModalDismissed: this.closeAddTeam,
        onTeamsSelected: this.addTeams,
        currentSchemeId: this.props.schemeId,
        alreadySelected: teams.map(team => team.id)
      }), react_default.a.createElement("div", {
        className: "admin-console__header with-back"
      }, react_default.a.createElement("div", null, react_default.a.createElement(blockable_link, {
        to: "/admin_console/user_management/permissions",
        className: "fa fa-angle-left back"
      }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.permissions.teamScheme",
        defaultMessage: "Team Scheme"
      }))), react_default.a.createElement("div", {
        className: "admin-console__wrapper"
      }, react_default.a.createElement("div", {
        className: "admin-console__content"
      }, react_default.a.createElement("div", {
        className: 'banner info'
      }, react_default.a.createElement("div", {
        className: "banner__content"
      }, react_default.a.createElement("span", null, react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "admin.permissions.teamScheme.introBanner",
        defaultMessage: "[Team Override Schemes](!https://about.mattermost.com/default-team-override-scheme) set the permissions for Team Admins, Channel Admins and other members in specific teams. Use a Team Override Scheme when specific teams need permission exceptions to the [System Scheme](!https://about.mattermost.com/default-system-scheme)."
      })))), react_default.a.createElement(admin_panel, {
        titleId: Object(utils_i18n["b" /* t */])('admin.permissions.teamScheme.schemeDetailsTitle'),
        titleDefault: "Scheme Details",
        subtitleId: Object(utils_i18n["b" /* t */])('admin.permissions.teamScheme.schemeDetailsDescription'),
        subtitleDefault: "Set the name and description for this scheme."
      }, react_default.a.createElement("div", {
        className: "team-scheme-details"
      }, react_default.a.createElement("div", {
        className: "form-group"
      }, react_default.a.createElement("label", {
        className: "control-label",
        htmlFor: "scheme-name"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.permissions.teamScheme.schemeNameLabel",
        defaultMessage: "Scheme Name:"
      })), react_default.a.createElement(localized_input["a" /* default */], {
        id: "scheme-name",
        className: "form-control",
        type: "text",
        value: schemeName,
        placeholder: {
          id: Object(utils_i18n["b" /* t */])('admin.permissions.teamScheme.schemeNamePlaceholder'),
          defaultMessage: 'Scheme Name'
        },
        onChange: this.handleNameChange
      })), react_default.a.createElement("div", {
        className: "form-group"
      }, react_default.a.createElement("label", {
        className: "control-label",
        htmlFor: "scheme-description"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.permissions.teamScheme.schemeDescriptionLabel",
        defaultMessage: "Scheme Description:"
      })), react_default.a.createElement("textarea", {
        id: "scheme-description",
        className: "form-control",
        rows: "5",
        value: schemeDescription,
        placeholder: Object(utils["gb" /* localizeMessage */])('admin.permissions.teamScheme.schemeDescriptionPlaceholder', 'Scheme Description'),
        onChange: this.handleDescriptionChange
      })))), react_default.a.createElement(admin_panel_with_button, {
        className: "permissions-block",
        titleId: Object(utils_i18n["b" /* t */])('admin.permissions.teamScheme.selectTeamsTitle'),
        titleDefault: "Select teams to override permissions",
        subtitleId: Object(utils_i18n["b" /* t */])('admin.permissions.teamScheme.selectTeamsDescription'),
        subtitleDefault: "Select teams where permission exceptions are required.",
        onButtonClick: this.openAddTeam,
        buttonTextId: Object(utils_i18n["b" /* t */])('admin.permissions.teamScheme.addTeams'),
        buttonTextDefault: "Add Teams"
      }, react_default.a.createElement("div", {
        className: "teams-list"
      }, teams.length === 0 && react_default.a.createElement("div", {
        className: "no-team-schemes"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.permissions.teamScheme.noTeams",
        defaultMessage: "No team selected. Please add teams to this list."
      })), teams.map(team => react_default.a.createElement(team_in_list, {
        key: team.id,
        team: team,
        onRemoveTeam: this.removeTeam
      })))), react_default.a.createElement(admin_panel_togglable, {
        className: "permissions-block all_users",
        open: this.state.openRoles.all_users,
        id: "all_users",
        onToggle: () => this.toggleRole('all_users'),
        titleId: Object(utils_i18n["b" /* t */])('admin.permissions.systemScheme.allMembersTitle'),
        titleDefault: "All Members",
        subtitleId: Object(utils_i18n["b" /* t */])('admin.permissions.systemScheme.allMembersDescription'),
        subtitleDefault: "Permissions granted to all members, including administrators and newly created users."
      }, react_default.a.createElement(permissions_tree, {
        selected: this.state.selectedPermission,
        role: roles.all_users,
        scope: 'team_scope',
        onToggle: this.togglePermission,
        selectRow: this.selectRow
      })), react_default.a.createElement(admin_panel_togglable, {
        className: "permissions-block channel_admin",
        open: this.state.openRoles.channel_admin,
        onToggle: () => this.toggleRole('channel_admin'),
        titleId: Object(utils_i18n["b" /* t */])('admin.permissions.systemScheme.channelAdminsTitle'),
        titleDefault: "Channel Administrators",
        subtitleId: Object(utils_i18n["b" /* t */])('admin.permissions.systemScheme.channelAdminsDescription'),
        subtitleDefault: "Permissions granted to channel creators and any users promoted to Channel Administrator."
      }, react_default.a.createElement(permissions_tree, {
        parentRole: roles.all_users,
        role: roles.channel_admin,
        scope: 'channel_scope',
        onToggle: this.togglePermission,
        selectRow: this.selectRow
      })), react_default.a.createElement(admin_panel_togglable, {
        className: "permissions-block team_admin",
        open: this.state.openRoles.team_admin,
        onToggle: () => this.toggleRole('team_admin'),
        titleId: Object(utils_i18n["b" /* t */])('admin.permissions.systemScheme.teamAdminsTitle'),
        titleDefault: "Team Administrators",
        subtitleId: Object(utils_i18n["b" /* t */])('admin.permissions.systemScheme.teamAdminsDescription'),
        subtitleDefault: "Permissions granted to team creators and any users promoted to Team Administrator."
      }, react_default.a.createElement(permissions_tree, {
        parentRole: roles.all_users,
        role: roles.team_admin,
        scope: 'team_scope',
        onToggle: this.togglePermission,
        selectRow: this.selectRow
      })))), react_default.a.createElement("div", {
        className: "admin-console-save"
      }, react_default.a.createElement(save_button["a" /* default */], {
        saving: this.state.saving,
        disabled: !this.state.saveNeeded || this.canSave && !this.canSave(),
        onClick: this.handleSubmit,
        savingMessage: Object(utils["gb" /* localizeMessage */])('admin.saving', 'Saving Config...')
      }), react_default.a.createElement(blockable_link, {
        className: "cancel-button",
        to: "/admin_console/user_management/permissions"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.permissions.permissionSchemes.cancel",
        defaultMessage: "Cancel"
      })), react_default.a.createElement("div", {
        className: "error-message"
      }, react_default.a.createElement(form_error["a" /* default */], {
        error: this.state.serverError
      }))));
    });

    this.state = {
      saving: false,
      saveNeeded: false,
      serverError: null,
      roles: null,
      teams: null,
      addTeamOpen: false,
      selectedPermission: null,
      openRoles: {
        all_users: true,
        team_admin: true,
        channel_admin: true
      }
    };
  }

  componentDidMount() {
    this.props.actions.loadRolesIfNeeded(['team_admin', 'team_user', 'channel_admin', 'channel_user']);

    if (this.props.schemeId) {
      this.props.actions.loadScheme(this.props.schemeId).then(result => {
        this.props.actions.loadRolesIfNeeded([result.data.default_team_user_role, result.data.default_team_admin_role, result.data.default_channel_user_role, result.data.default_channel_admin_role]);
      });
      this.props.actions.loadSchemeTeams(this.props.schemeId);
    }
  }

}

permission_team_scheme_settings_defineProperty(permission_team_scheme_settings_PermissionTeamSchemeSettings, "propTypes", {
  schemeId: prop_types_default.a.string,
  scheme: prop_types_default.a.object,
  roles: prop_types_default.a.object,
  teams: prop_types_default.a.array,
  actions: prop_types_default.a.shape({
    loadRolesIfNeeded: prop_types_default.a.func.isRequired,
    loadScheme: prop_types_default.a.func.isRequired,
    loadSchemeTeams: prop_types_default.a.func.isRequired,
    editRole: prop_types_default.a.func.isRequired,
    patchScheme: prop_types_default.a.func.isRequired,
    createScheme: prop_types_default.a.func.isRequired,
    updateTeamScheme: prop_types_default.a.func.isRequired,
    setNavigationBlocked: prop_types_default.a.func.isRequired
  }).isRequired
});

permission_team_scheme_settings_defineProperty(permission_team_scheme_settings_PermissionTeamSchemeSettings, "defaultProps", {
  scheme: null
});
// CONCATENATED MODULE: ./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/index.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.










function permission_team_scheme_settings_makeMapStateToProps() {
  const getSchemeTeams = Object(entities_schemes["makeGetSchemeTeams"])();
  return (state, ownProps) => {
    const schemeId = ownProps.match.params.scheme_id;
    return {
      schemeId,
      scheme: schemeId ? Object(entities_schemes["getScheme"])(state, schemeId) : null,
      teams: schemeId ? getSchemeTeams(state, {
        schemeId
      }) : null,
      roles: Object(entities_roles["getRoles"])(state),
      rolesRequest: state.requests.roles.getRolesByNames
    };
  };
}

function permission_team_scheme_settings_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      loadRolesIfNeeded: actions_roles["loadRolesIfNeeded"],
      loadScheme: actions_schemes["getScheme"],
      loadSchemeTeams: actions_schemes["getSchemeTeams"],
      editRole: actions_roles["editRole"],
      patchScheme: actions_schemes["patchScheme"],
      updateTeamScheme: actions_teams["updateTeamScheme"],
      createScheme: actions_schemes["createScheme"],
      setNavigationBlocked: admin_actions["C" /* setNavigationBlocked */]
    }, dispatch)
  };
}

/* harmony default export */ var permission_team_scheme_settings = (Object(es["connect"])(permission_team_scheme_settings_makeMapStateToProps, permission_team_scheme_settings_mapDispatchToProps)(permission_team_scheme_settings_PermissionTeamSchemeSettings));
// EXTERNAL MODULE: ./actions/user_actions.jsx
var user_actions = __webpack_require__(304);

// EXTERNAL MODULE: ./mattermost-redux/actions/helpers.js
var helpers = __webpack_require__(117);

// EXTERNAL MODULE: ./mattermost-redux/utils/user_utils.js
var user_utils = __webpack_require__(104);

// EXTERNAL MODULE: ./components/widgets/badges/bot_badge.jsx
var bot_badge = __webpack_require__(1588);

// CONCATENATED MODULE: ./components/admin_console/manage_roles_modal/manage_roles_modal.jsx
function manage_roles_modal_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.











function getStateFromProps(props) {
  const roles = props.user && props.user.roles ? props.user.roles : '';
  return {
    error: null,
    hasPostAllRole: user_utils["hasPostAllRole"](roles),
    hasPostAllPublicRole: user_utils["hasPostAllPublicRole"](roles),
    hasUserAccessTokenRole: user_utils["hasUserAccessTokenRole"](roles),
    isSystemAdmin: user_utils["isSystemAdmin"](roles)
  };
}

class manage_roles_modal_ManageRolesModal extends react_default.a.PureComponent {
  constructor(props) {
    super(props);

    manage_roles_modal_defineProperty(this, "handleError", error => {
      this.setState({
        error
      });
    });

    manage_roles_modal_defineProperty(this, "handleSystemAdminChange", e => {
      if (e.target.name === 'systemadmin') {
        this.setState({
          isSystemAdmin: true
        });
      } else if (e.target.name === 'systemmember') {
        this.setState({
          isSystemAdmin: false
        });
      }
    });

    manage_roles_modal_defineProperty(this, "handleUserAccessTokenChange", e => {
      this.setState({
        hasUserAccessTokenRole: e.target.checked
      });
    });

    manage_roles_modal_defineProperty(this, "handlePostAllChange", e => {
      this.setState({
        hasPostAllRole: e.target.checked
      });
    });

    manage_roles_modal_defineProperty(this, "handlePostAllPublicChange", e => {
      this.setState({
        hasPostAllPublicRole: e.target.checked
      });
    });

    manage_roles_modal_defineProperty(this, "trackRoleChanges", (roles, oldRoles) => {
      if (user_utils["hasUserAccessTokenRole"](roles) && !user_utils["hasUserAccessTokenRole"](oldRoles)) {
        Object(diagnostics_actions["d" /* trackEvent */])('actions', 'add_roles', {
          role: mattermost_redux_constants["General"].SYSTEM_USER_ACCESS_TOKEN_ROLE
        });
      } else if (!user_utils["hasUserAccessTokenRole"](roles) && user_utils["hasUserAccessTokenRole"](oldRoles)) {
        Object(diagnostics_actions["d" /* trackEvent */])('actions', 'remove_roles', {
          role: mattermost_redux_constants["General"].SYSTEM_USER_ACCESS_TOKEN_ROLE
        });
      }

      if (user_utils["hasPostAllRole"](roles) && !user_utils["hasPostAllRole"](oldRoles)) {
        Object(diagnostics_actions["d" /* trackEvent */])('actions', 'add_roles', {
          role: mattermost_redux_constants["General"].SYSTEM_POST_ALL_ROLE
        });
      } else if (!user_utils["hasPostAllRole"](roles) && user_utils["hasPostAllRole"](oldRoles)) {
        Object(diagnostics_actions["d" /* trackEvent */])('actions', 'remove_roles', {
          role: mattermost_redux_constants["General"].SYSTEM_POST_ALL_ROLE
        });
      }

      if (user_utils["hasPostAllPublicRole"](roles) && !user_utils["hasPostAllPublicRole"](oldRoles)) {
        Object(diagnostics_actions["d" /* trackEvent */])('actions', 'add_roles', {
          role: mattermost_redux_constants["General"].SYSTEM_POST_ALL_PUBLIC_ROLE
        });
      } else if (!user_utils["hasPostAllPublicRole"](roles) && user_utils["hasPostAllPublicRole"](oldRoles)) {
        Object(diagnostics_actions["d" /* trackEvent */])('actions', 'remove_roles', {
          role: mattermost_redux_constants["General"].SYSTEM_POST_ALL_PUBLIC_ROLE
        });
      }
    });

    manage_roles_modal_defineProperty(this, "handleSave", async () => {
      this.setState({
        error: null
      });
      let roles = mattermost_redux_constants["General"].SYSTEM_USER_ROLE;

      if (this.state.isSystemAdmin) {
        roles += ' ' + mattermost_redux_constants["General"].SYSTEM_ADMIN_ROLE;
      } else if (this.state.hasUserAccessTokenRole) {
        roles += ' ' + mattermost_redux_constants["General"].SYSTEM_USER_ACCESS_TOKEN_ROLE;

        if (this.state.hasPostAllRole) {
          roles += ' ' + mattermost_redux_constants["General"].SYSTEM_POST_ALL_ROLE;
        } else if (this.state.hasPostAllPublicRole) {
          roles += ' ' + mattermost_redux_constants["General"].SYSTEM_POST_ALL_PUBLIC_ROLE;
        }
      }

      const {
        data
      } = await this.props.actions.updateUserRoles(this.props.user.id, roles);
      this.trackRoleChanges(roles, this.props.user.roles);

      if (data) {
        this.props.onModalDismissed();
      } else {
        this.handleError(react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.manage_roles.saveError",
          defaultMessage: "Unable to save roles."
        }));
      }
    });

    manage_roles_modal_defineProperty(this, "renderContents", () => {
      const {
        user
      } = this.props;

      if (user == null) {
        return react_default.a.createElement("div", null);
      }

      let name = user_utils["getFullName"](user);

      if (name) {
        name += ` (@${user.username})`;
      } else {
        name = `@${user.username}`;
      }

      let additionalRoles;

      if (this.state.hasUserAccessTokenRole || this.state.isSystemAdmin || user.is_bot) {
        additionalRoles = react_default.a.createElement("div", null, react_default.a.createElement("p", null, react_default.a.createElement(formatted_markdown_message["b" /* default */], {
          id: "admin.manage_roles.additionalRoles",
          defaultMessage: "Select additional permissions for the account. [Read more about roles and permissions](!https://about.mattermost.com/default-permissions)."
        })), react_default.a.createElement("div", {
          className: "checkbox"
        }, react_default.a.createElement("label", null, react_default.a.createElement("input", {
          type: "checkbox",
          ref: "postall",
          checked: this.state.hasPostAllRole || this.state.isSystemAdmin,
          disabled: this.state.isSystemAdmin,
          onChange: this.handlePostAllChange
        }), react_default.a.createElement("strong", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.manage_roles.postAllRoleTitle",
          defaultMessage: "post:all"
        })), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.manage_roles.postAllRole",
          defaultMessage: "Access to post to all Mattermost channels including direct messages."
        }))), react_default.a.createElement("div", {
          className: "checkbox"
        }, react_default.a.createElement("label", null, react_default.a.createElement("input", {
          type: "checkbox",
          ref: "postallpublic",
          checked: this.state.hasPostAllPublicRole || this.state.hasPostAllRole || this.state.isSystemAdmin,
          disabled: this.state.hasPostAllRole || this.state.isSystemAdmin,
          onChange: this.handlePostAllPublicChange
        }), react_default.a.createElement("strong", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.manage_roles.postAllPublicRoleTitle",
          defaultMessage: "post:channels"
        })), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.manage_roles.postAllPublicRole",
          defaultMessage: "Access to post to all Mattermost public channels."
        }))));
      }

      let userAccessTokenContent;

      if (this.props.userAccessTokensEnabled) {
        if (user.is_bot) {
          userAccessTokenContent = react_default.a.createElement("div", null, react_default.a.createElement("div", {
            className: "member-row--padded member-row-lone-padding"
          }, additionalRoles));
        } else {
          userAccessTokenContent = react_default.a.createElement("div", null, react_default.a.createElement("div", {
            className: "checkbox"
          }, react_default.a.createElement("label", null, react_default.a.createElement("input", {
            type: "checkbox",
            ref: "postall",
            checked: this.state.hasUserAccessTokenRole || this.state.isSystemAdmin,
            disabled: this.state.isSystemAdmin,
            onChange: this.handleUserAccessTokenChange
          }), react_default.a.createElement(formatted_markdown_message["b" /* default */], {
            id: "admin.manage_roles.allowUserAccessTokens",
            defaultMessage: "Allow this account to generate [personal access tokens](!https://about.mattermost.com/default-user-access-tokens)."
          }), react_default.a.createElement("span", {
            className: "d-block padding-top padding-bottom light"
          }, react_default.a.createElement(index_es["b" /* FormattedHTMLMessage */], {
            id: "admin.manage_roles.allowUserAccessTokensDesc",
            defaultMessage: "Removing this permission doesn't delete existing tokens. To delete them, go to the user's Manage Tokens menu."
          })))), react_default.a.createElement("div", {
            className: "member-row--padded"
          }, additionalRoles));
        }
      }

      let email = user.email;

      if (user.is_bot) {
        email = '';
      }

      return react_default.a.createElement("div", null, react_default.a.createElement("div", {
        className: "manage-teams__user"
      }, react_default.a.createElement("img", {
        alt: '',
        className: "manage-teams__profile-picture",
        src: client["Client4"].getProfilePictureUrl(user.id, user.last_picture_update)
      }), react_default.a.createElement("div", {
        className: "manage-teams__info"
      }, react_default.a.createElement("div", {
        className: "manage-teams__name"
      }, name, react_default.a.createElement(bot_badge["a" /* default */], {
        show: Boolean(user.is_bot),
        className: "badge-admin"
      })), react_default.a.createElement("div", {
        className: "manage-teams__email"
      }, email))), react_default.a.createElement("div", null, react_default.a.createElement("div", {
        className: "manage-row--inner"
      }, react_default.a.createElement("div", {
        className: "radio-inline"
      }, react_default.a.createElement("label", null, react_default.a.createElement("input", {
        name: "systemadmin",
        type: "radio",
        checked: this.state.isSystemAdmin,
        onChange: this.handleSystemAdminChange
      }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.manage_roles.systemAdmin",
        defaultMessage: "System Admin"
      }))), react_default.a.createElement("div", {
        className: "radio-inline"
      }, react_default.a.createElement("label", null, react_default.a.createElement("input", {
        name: "systemmember",
        type: "radio",
        checked: !this.state.isSystemAdmin,
        onChange: this.handleSystemAdminChange
      }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.manage_roles.systemMember",
        defaultMessage: "Member"
      })))), userAccessTokenContent));
    });

    this.state = getStateFromProps(props);
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
    // eslint-disable-line camelcase
    const user = this.props.user || {};
    const nextUser = nextProps.user || {};

    if (user.id !== nextUser.id) {
      this.setState(getStateFromProps(nextProps));
    }
  }

  render() {
    return react_default.a.createElement(Modal["a" /* default */], {
      show: this.props.show,
      onHide: this.props.onModalDismissed,
      dialogClassName: "manage-teams",
      role: "dialog",
      "aria-labelledby": "manageRolesModalLabel"
    }, react_default.a.createElement(Modal["a" /* default */].Header, {
      closeButton: true
    }, react_default.a.createElement(Modal["a" /* default */].Title, {
      componentClass: "h1",
      id: "manageRolesModalLabel"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.manage_roles.manageRolesTitle",
      defaultMessage: "Manage Roles"
    }))), react_default.a.createElement(Modal["a" /* default */].Body, null, this.renderContents(), this.state.error), react_default.a.createElement(Modal["a" /* default */].Footer, null, react_default.a.createElement("button", {
      type: "button",
      className: "btn btn-link",
      onClick: this.props.onModalDismissed
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.manage_roles.cancel",
      defaultMessage: "Cancel"
    })), react_default.a.createElement("button", {
      type: "button",
      className: "btn btn-primary",
      onClick: this.handleSave
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.manage_roles.save",
      defaultMessage: "Save"
    }))));
  }

}

manage_roles_modal_defineProperty(manage_roles_modal_ManageRolesModal, "propTypes", {
  /**
   * Set to render the modal
   */
  show: prop_types_default.a.bool.isRequired,

  /**
   * The user the roles are being managed for
   */
  user: prop_types_default.a.object,

  /**
   * Set if user access tokens are enabled
   */
  userAccessTokensEnabled: prop_types_default.a.bool.isRequired,

  /**
   * Function called when modal is dismissed
   */
  onModalDismissed: prop_types_default.a.func.isRequired,
  actions: prop_types_default.a.shape({
    /**
     * Function to update a user's roles
     */
    updateUserRoles: prop_types_default.a.func.isRequired
  }).isRequired
});
// CONCATENATED MODULE: ./components/admin_console/manage_roles_modal/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





function manage_roles_modal_mapStateToProps(state) {
  return {
    userAccessTokensEnabled: state.entities.admin.config.ServiceSettings.EnableUserAccessTokens
  };
}

function manage_roles_modal_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      updateUserRoles: actions_users["updateUserRoles"]
    }, dispatch)
  };
}

/* harmony default export */ var manage_roles_modal = (Object(es["connect"])(manage_roles_modal_mapStateToProps, manage_roles_modal_mapDispatchToProps)(manage_roles_modal_ManageRolesModal));
// EXTERNAL MODULE: ./utils/team_utils.jsx
var team_utils = __webpack_require__(1726);

// EXTERNAL MODULE: ./components/widgets/menu/menu_wrapper.jsx + 1 modules
var menu_wrapper = __webpack_require__(1606);

// EXTERNAL MODULE: ./components/widgets/menu/menu.jsx
var menu = __webpack_require__(1619);

// EXTERNAL MODULE: ./components/widgets/menu/menu_items/menu_item_action.jsx
var menu_item_action = __webpack_require__(1600);

// CONCATENATED MODULE: ./components/admin_console/manage_teams_modal/manage_teams_dropdown.jsx
function manage_teams_dropdown_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






class manage_teams_dropdown_ManageTeamsDropdown extends react_default.a.Component {
  constructor(...args) {
    super(...args);

    manage_teams_dropdown_defineProperty(this, "makeTeamAdmin", async () => {
      const {
        error
      } = await this.props.updateTeamMemberSchemeRoles(this.props.teamMember.team_id, this.props.user.id, true, true);

      if (error) {
        this.props.onError(error.message);
      } else {
        this.props.onMemberChange(this.props.teamMember.team_id);
      }
    });

    manage_teams_dropdown_defineProperty(this, "makeMember", async () => {
      const {
        error
      } = await this.props.updateTeamMemberSchemeRoles(this.props.teamMember.team_id, this.props.user.id, true, false);

      if (error) {
        this.props.onError(error.message);
      } else {
        this.props.onMemberChange(this.props.teamMember.team_id);
      }
    });

    manage_teams_dropdown_defineProperty(this, "removeFromTeam", () => {
      this.props.handleRemoveUserFromTeam(this.props.teamMember.team_id);
    });
  }

  render() {
    const isTeamAdmin = utils["M" /* isAdmin */](this.props.teamMember.roles) || this.props.teamMember.scheme_admin;
    const {
      team
    } = this.props;
    let title;

    if (isTeamAdmin) {
      title = utils["gb" /* localizeMessage */]('admin.user_item.teamAdmin', 'Team Admin');
    } else {
      title = utils["gb" /* localizeMessage */]('admin.user_item.teamMember', 'Team Member');
    }

    return react_default.a.createElement(menu_wrapper["a" /* default */], null, react_default.a.createElement("a", null, react_default.a.createElement("span", null, title, " "), react_default.a.createElement("span", {
      className: "caret"
    })), react_default.a.createElement(menu["a" /* default */], {
      openLeft: true,
      ariaLabel: utils["gb" /* localizeMessage */]('team_members_dropdown.menuAriaLabel', 'Team member role change')
    }, react_default.a.createElement(menu_item_action["a" /* default */], {
      show: !isTeamAdmin,
      onClick: this.makeTeamAdmin,
      text: utils["gb" /* localizeMessage */]('admin.user_item.makeTeamAdmin', 'Make Team Admin')
    }), react_default.a.createElement(menu_item_action["a" /* default */], {
      show: isTeamAdmin,
      onClick: this.makeMember,
      text: utils["gb" /* localizeMessage */]('admin.user_item.makeMember', 'Make Member')
    }), react_default.a.createElement(menu_item_action["a" /* default */], {
      show: !team.group_constrained,
      onClick: this.removeFromTeam,
      text: utils["gb" /* localizeMessage */]('team_members_dropdown.leave_team', 'Remove from Team')
    })));
  }

}

manage_teams_dropdown_defineProperty(manage_teams_dropdown_ManageTeamsDropdown, "propTypes", {
  team: prop_types_default.a.object.isRequired,
  user: prop_types_default.a.object.isRequired,
  teamMember: prop_types_default.a.object.isRequired,
  onError: prop_types_default.a.func.isRequired,
  onMemberChange: prop_types_default.a.func.isRequired,
  updateTeamMemberSchemeRoles: prop_types_default.a.func.isRequired,
  handleRemoveUserFromTeam: prop_types_default.a.func.isRequired
});
// CONCATENATED MODULE: ./components/admin_console/manage_teams_modal/remove_from_team_button.jsx
function remove_from_team_button_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.



class remove_from_team_button_RemoveFromTeamButton extends react_default.a.PureComponent {
  constructor(...args) {
    super(...args);

    remove_from_team_button_defineProperty(this, "handleClick", e => {
      e.preventDefault();
      this.props.handleRemoveUserFromTeam(this.props.teamId);
    });
  }

  render() {
    return react_default.a.createElement("button", {
      className: "btn btn-danger",
      onClick: this.handleClick
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "team_members_dropdown.leave_team",
      defaultMessage: "Remove from Team"
    }));
  }

}

remove_from_team_button_defineProperty(remove_from_team_button_RemoveFromTeamButton, "propTypes", {
  teamId: prop_types_default.a.string.isRequired,
  handleRemoveUserFromTeam: prop_types_default.a.func.isRequired
});
// CONCATENATED MODULE: ./components/admin_console/manage_teams_modal/manage_teams_modal.jsx
function manage_teams_modal_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.










class manage_teams_modal_ManageTeamsModal extends react_default.a.Component {
  constructor(props) {
    super(props);

    manage_teams_modal_defineProperty(this, "loadTeamsAndTeamMembers", async (user = this.props.user) => {
      this.getTeamMembers(user.id);
      const {
        data
      } = await this.props.actions.getTeamsForUser(user.id);
      this.setState({
        teams: Object(team_utils["a" /* filterAndSortTeamsByDisplayName */])(data, this.props.locale)
      });
    });

    manage_teams_modal_defineProperty(this, "handleError", error => {
      this.setState({
        error
      });
    });

    manage_teams_modal_defineProperty(this, "getTeamMembers", async (userId = this.props.user.id) => {
      const {
        data
      } = await this.props.actions.getTeamMembersForUser(userId);

      if (data) {
        this.setState({
          teamMembers: data
        });
      }
    });

    manage_teams_modal_defineProperty(this, "handleMemberRemove", teamId => {
      this.setState({
        teams: this.state.teams.filter(team => team.id !== teamId),
        teamMembers: this.state.teamMembers.filter(teamMember => teamMember.team_id !== teamId)
      });
    });

    manage_teams_modal_defineProperty(this, "handleRemoveUserFromTeam", async teamId => {
      const {
        actions,
        user
      } = this.props;
      const {
        data,
        error
      } = await actions.removeUserFromTeam(teamId, user.id);

      if (data) {
        this.handleMemberRemove(teamId);
      } else if (error) {
        this.handleError(error.message);
      }
    });

    manage_teams_modal_defineProperty(this, "handleMemberChange", () => {
      this.getTeamMembers(this.props.user.id);
    });

    manage_teams_modal_defineProperty(this, "renderContents", () => {
      const {
        user
      } = this.props;
      const {
        teams,
        teamMembers
      } = this.state;

      if (!user) {
        return react_default.a.createElement(loading_screen["a" /* default */], null);
      }

      const isSystemAdmin = utils["M" /* isAdmin */](user.roles);
      let name = utils["A" /* getFullName */](user);

      if (name) {
        name += ` (@${user.username})`;
      } else {
        name = `@${user.username}`;
      }

      let teamList;

      if (teams && teamMembers) {
        teamList = teams.map(team => {
          const teamMember = teamMembers.find(member => member.team_id === team.id);

          if (!teamMember) {
            return null;
          }

          let action;

          if (isSystemAdmin) {
            action = react_default.a.createElement(remove_from_team_button_RemoveFromTeamButton, {
              teamId: team.id,
              handleRemoveUserFromTeam: this.handleRemoveUserFromTeam
            });
          } else {
            action = react_default.a.createElement(manage_teams_dropdown_ManageTeamsDropdown, {
              user: user,
              team: team,
              teamMember: teamMember,
              onError: this.handleError,
              onMemberChange: this.handleMemberChange,
              updateTeamMemberSchemeRoles: this.props.actions.updateTeamMemberSchemeRoles,
              handleRemoveUserFromTeam: this.handleRemoveUserFromTeam
            });
          }

          return react_default.a.createElement("div", {
            key: team.id,
            className: "manage-teams__team"
          }, react_default.a.createElement("div", {
            className: "manage-teams__team-name"
          }, team.display_name), react_default.a.createElement("div", {
            className: "manage-teams__team-actions"
          }, action));
        });
      } else {
        teamList = react_default.a.createElement(loading_screen["a" /* default */], null);
      }

      let systemAdminIndicator = null;

      if (isSystemAdmin) {
        systemAdminIndicator = react_default.a.createElement("div", {
          className: "manage-teams__system-admin"
        }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.user_item.sysAdmin",
          defaultMessage: "System Admin"
        }));
      }

      return react_default.a.createElement("div", null, react_default.a.createElement("div", {
        className: "manage-teams__user"
      }, react_default.a.createElement("img", {
        alt: '',
        className: "manage-teams__profile-picture",
        src: client["Client4"].getProfilePictureUrl(user.id, user.last_picture_update)
      }), react_default.a.createElement("div", {
        className: "manage-teams__info"
      }, react_default.a.createElement("div", {
        className: "manage-teams__name"
      }, name), react_default.a.createElement("div", {
        className: "manage-teams__email"
      }, user.email)), systemAdminIndicator), react_default.a.createElement("div", {
        className: "manage-teams__teams"
      }, teamList));
    });

    this.state = {
      error: null,
      teams: null,
      teamMembers: null
    };
  }

  componentDidMount() {
    if (this.props.user) {
      this.loadTeamsAndTeamMembers();
    }
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
    // eslint-disable-line camelcase
    const userId = this.props.user ? this.props.user.id : '';
    const nextUserId = nextProps.user ? nextProps.user.id : '';

    if (userId !== nextUserId) {
      this.setState({
        teams: null,
        teamMembers: null
      });

      if (nextProps.user) {
        this.loadTeamsAndTeamMembers(nextProps.user);
      }
    }
  }

  render() {
    return react_default.a.createElement(Modal["a" /* default */], {
      show: this.props.show,
      onHide: this.props.onModalDismissed,
      dialogClassName: "manage-teams modal--overflow-visible",
      role: "dialog",
      "aria-labelledby": "manageTeamsModalLabel"
    }, react_default.a.createElement(Modal["a" /* default */].Header, {
      closeButton: true
    }, react_default.a.createElement(Modal["a" /* default */].Title, {
      componentClass: "h1",
      id: "manageTeamsModalLabel"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.user_item.manageTeams",
      defaultMessage: "Manage Teams"
    }))), react_default.a.createElement(Modal["a" /* default */].Body, null, this.renderContents()));
  }

}

manage_teams_modal_defineProperty(manage_teams_modal_ManageTeamsModal, "propTypes", {
  locale: prop_types_default.a.string.isRequired,
  onModalDismissed: prop_types_default.a.func.isRequired,
  show: prop_types_default.a.bool.isRequired,
  user: prop_types_default.a.object,
  actions: prop_types_default.a.shape({
    getTeamMembersForUser: prop_types_default.a.func.isRequired,
    getTeamsForUser: prop_types_default.a.func.isRequired,
    updateTeamMemberSchemeRoles: prop_types_default.a.func.isRequired,
    removeUserFromTeam: prop_types_default.a.func.isRequired
  }).isRequired
});
// CONCATENATED MODULE: ./components/admin_console/manage_teams_modal/index.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






function manage_teams_modal_mapStateToProps(state) {
  return {
    locale: Object(selectors_i18n["a" /* getCurrentLocale */])(state)
  };
}

function manage_teams_modal_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      getTeamMembersForUser: actions_teams["getTeamMembersForUser"],
      getTeamsForUser: actions_teams["getTeamsForUser"],
      updateTeamMemberSchemeRoles: actions_teams["updateTeamMemberSchemeRoles"],
      removeUserFromTeam: actions_teams["removeUserFromTeam"]
    }, dispatch)
  };
}

/* harmony default export */ var manage_teams_modal = (Object(es["connect"])(manage_teams_modal_mapStateToProps, manage_teams_modal_mapDispatchToProps)(manage_teams_modal_ManageTeamsModal));
// CONCATENATED MODULE: ./components/admin_console/revoke_token_button/revoke_token_button.jsx
function revoke_token_button_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




class revoke_token_button_RevokeTokenButton extends react_default.a.PureComponent {
  constructor(...args) {
    super(...args);

    revoke_token_button_defineProperty(this, "handleClick", async e => {
      e.preventDefault();
      const {
        error
      } = await this.props.actions.revokeUserAccessToken(this.props.tokenId);
      Object(diagnostics_actions["d" /* trackEvent */])('system_console', 'revoke_user_access_token');

      if (error) {
        this.props.onError(error.message);
      }
    });
  }

  render() {
    return react_default.a.createElement("button", {
      className: "btn btn-danger",
      onClick: this.handleClick
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.revoke_token_button.delete",
      defaultMessage: "Delete"
    }));
  }

}

revoke_token_button_defineProperty(revoke_token_button_RevokeTokenButton, "propTypes", {
  /*
   * Token id to revoke
   */
  tokenId: prop_types_default.a.string.isRequired,

  /*
   * Function to call on error
   */
  onError: prop_types_default.a.func.isRequired,
  actions: prop_types_default.a.shape({
    /**
     * Function to revoke a user access token
     */
    revokeUserAccessToken: prop_types_default.a.func.isRequired
  }).isRequired
});
// CONCATENATED MODULE: ./components/admin_console/revoke_token_button/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





function revoke_token_button_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      revokeUserAccessToken: actions_users["revokeUserAccessToken"]
    }, dispatch)
  };
}

/* harmony default export */ var revoke_token_button = (Object(es["connect"])(null, revoke_token_button_mapDispatchToProps)(revoke_token_button_RevokeTokenButton));
// CONCATENATED MODULE: ./components/admin_console/manage_tokens_modal/manage_tokens_modal.jsx
function manage_tokens_modal_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.









class manage_tokens_modal_ManageTokensModal extends react_default.a.PureComponent {
  constructor(props) {
    super(props);

    manage_tokens_modal_defineProperty(this, "handleError", error => {
      this.setState({
        error
      });
    });

    manage_tokens_modal_defineProperty(this, "renderContents", () => {
      const {
        user,
        userAccessTokens
      } = this.props;

      if (!user) {
        return react_default.a.createElement(loading_screen["a" /* default */], null);
      }

      let name = user_utils["getFullName"](user);

      if (name) {
        name += ` (@${user.username})`;
      } else {
        name = `@${user.username}`;
      }

      let tokenList;

      if (userAccessTokens) {
        const userAccessTokensList = Object.values(userAccessTokens);

        if (userAccessTokensList.length === 0) {
          tokenList = react_default.a.createElement("div", {
            className: "manage-row__empty"
          }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
            id: "admin.manage_tokens.userAccessTokensNone",
            defaultMessage: "No personal access tokens."
          }));
        } else {
          tokenList = userAccessTokensList.map(token => {
            return react_default.a.createElement("div", {
              key: token.id,
              className: "manage-teams__team"
            }, react_default.a.createElement("div", {
              className: "manage-teams__team-name"
            }, react_default.a.createElement("div", {
              className: "whitespace--nowrap overflow--ellipsis"
            }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
              id: "admin.manage_tokens.userAccessTokensNameLabel",
              defaultMessage: "Token Description: "
            }), token.description), react_default.a.createElement("div", {
              className: "whitespace--nowrap overflow--ellipsis"
            }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
              id: "admin.manage_tokens.userAccessTokensIdLabel",
              defaultMessage: "Token ID: "
            }), token.id)), react_default.a.createElement("div", {
              className: "manage-teams__team-actions"
            }, react_default.a.createElement(revoke_token_button, {
              tokenId: token.id,
              onError: this.handleError
            })));
          });
        }
      } else {
        tokenList = react_default.a.createElement(loading_screen["a" /* default */], null);
      }

      return react_default.a.createElement("div", null, react_default.a.createElement("div", {
        className: "manage-teams__user"
      }, react_default.a.createElement("img", {
        alt: '',
        className: "manage-teams__profile-picture",
        src: client["Client4"].getProfilePictureUrl(user.id, user.last_picture_update)
      }), react_default.a.createElement("div", {
        className: "manage-teams__info"
      }, react_default.a.createElement("div", {
        className: "manage-teams__name"
      }, name), react_default.a.createElement("div", {
        className: "manage-teams__email"
      }, user.email))), react_default.a.createElement("div", {
        className: "padding-top x2"
      }, react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "admin.manage_tokens.userAccessTokensDescription",
        defaultMessage: "Personal access tokens function similarly to session tokens and can be used by integrations to [interact with this Mattermost server](!https://about.mattermost.com/default-api-authentication). Tokens are disabled if the user is deactivated. Learn more about [personal access tokens](!https://about.mattermost.com/default-user-access-tokens)."
      })), react_default.a.createElement("div", {
        className: "manage-teams__teams"
      }, tokenList));
    });

    this.state = {
      error: null
    };
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
    // eslint-disable-line camelcase
    const userId = this.props.user ? this.props.user.id : null;
    const nextUserId = nextProps.user ? nextProps.user.id : null;

    if (nextUserId && nextUserId !== userId) {
      this.props.actions.getUserAccessTokensForUser(nextUserId, 0, 200);
    }
  }

  render() {
    return react_default.a.createElement(Modal["a" /* default */], {
      show: this.props.show,
      onHide: this.props.onModalDismissed,
      dialogClassName: "manage-teams",
      role: "dialog",
      "aria-labelledby": "manageTokensModalLabel"
    }, react_default.a.createElement(Modal["a" /* default */].Header, {
      closeButton: true
    }, react_default.a.createElement(Modal["a" /* default */].Title, {
      componentClass: "h1",
      id: "manageTokensModalLabel"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.manage_tokens.manageTokensTitle",
      defaultMessage: "Manage Personal Access Tokens"
    }))), react_default.a.createElement(Modal["a" /* default */].Body, null, this.renderContents(), this.state.error));
  }

}

manage_tokens_modal_defineProperty(manage_tokens_modal_ManageTokensModal, "propTypes", {
  /**
   * Set to render the modal
   */
  show: prop_types_default.a.bool.isRequired,

  /**
   * The user the roles are being managed for
   */
  user: prop_types_default.a.object,

  /**
   * The personal access tokens for a user, object with token ids as keys
   */
  userAccessTokens: prop_types_default.a.object,

  /**
   * Function called when modal is dismissed
   */
  onModalDismissed: prop_types_default.a.func.isRequired,
  actions: prop_types_default.a.shape({
    /**
     * Function to get a user's access tokens
     */
    getUserAccessTokensForUser: prop_types_default.a.func.isRequired
  }).isRequired
});
// CONCATENATED MODULE: ./components/admin_console/manage_tokens_modal/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





function manage_tokens_modal_mapStateToProps(state, ownProps) {
  const userId = ownProps.user ? ownProps.user.id : '';
  return {
    userAccessTokens: state.entities.admin.userAccessTokensByUser[userId]
  };
}

function manage_tokens_modal_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      getUserAccessTokensForUser: actions_users["getUserAccessTokensForUser"]
    }, dispatch)
  };
}

/* harmony default export */ var manage_tokens_modal = (Object(es["connect"])(manage_tokens_modal_mapStateToProps, manage_tokens_modal_mapDispatchToProps)(manage_tokens_modal_ManageTokensModal));
// CONCATENATED MODULE: ./components/admin_console/reset_password_modal/reset_password_modal.jsx
function reset_password_modal_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






class reset_password_modal_ResetPasswordModal extends react_default.a.Component {
  constructor(props) {
    super(props);
    this.doSubmit = this.doSubmit.bind(this);
    this.doCancel = this.doCancel.bind(this);
    this.state = {
      serverErrorNewPass: null,
      serverErrorCurrentPass: null
    };
  }

  componentWillUnmount() {
    this.setState({
      serverErrorNewPass: null,
      serverErrorCurrentPass: null
    });
  }

  doSubmit(e) {
    e.preventDefault();
    let currentPassword = '';

    if (this.refs.currentPassword) {
      currentPassword = this.refs.currentPassword.value;

      if (currentPassword === '') {
        let errorMsg = '';
        errorMsg = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.reset_password.missing_current",
          defaultMessage: "Please enter your current password."
        });
        this.setState({
          serverErrorCurrentPass: errorMsg
        });
        return;
      }
    }

    const password = this.refs.password.value;
    const {
      valid,
      error
    } = utils["db" /* isValidPassword */](password, this.props.passwordConfig);

    if (!valid && error) {
      this.setState({
        serverErrorNewPass: error
      });
      return;
    }

    this.setState({
      serverErrorNewPass: null
    });
    Object(admin_actions["c" /* adminResetPassword */])(this.props.user.id, currentPassword, password, () => {
      this.props.onModalSubmit(this.props.user);
    }, err => {
      this.setState({
        serverErrorCurrentPass: err.message
      });
    });
  }

  doCancel() {
    this.setState({
      serverErrorNewPass: null,
      serverErrorCurrentPass: null
    });
    this.props.onModalDismissed();
  }

  render() {
    const user = this.props.user;

    if (user == null) {
      return react_default.a.createElement("div", null);
    }

    let urlClass = 'input-group input-group--limit';
    let serverErrorNewPass = null;

    if (this.state.serverErrorNewPass) {
      urlClass += ' has-error';
      serverErrorNewPass = react_default.a.createElement("div", {
        className: "has-error"
      }, react_default.a.createElement("p", {
        className: "input__help error"
      }, this.state.serverErrorNewPass));
    }

    let title;

    if (user.auth_service) {
      title = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.reset_password.titleSwitch",
        defaultMessage: "Switch Account to Email/Password"
      });
    } else {
      title = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.reset_password.titleReset",
        defaultMessage: "Reset Password"
      });
    }

    let currentPassword = null;
    let serverErrorCurrentPass = null;
    let newPasswordFocus = true;

    if (this.props.currentUserId === user.id) {
      newPasswordFocus = false;
      let urlClassCurrentPass = 'input-group input-group--limit';

      if (this.state.serverErrorCurrentPass) {
        urlClassCurrentPass += ' has-error';
        serverErrorCurrentPass = react_default.a.createElement("div", {
          className: "has-error"
        }, react_default.a.createElement("p", {
          className: "input__help error"
        }, this.state.serverErrorCurrentPass));
      }

      currentPassword = react_default.a.createElement("div", {
        className: "col-sm-10 password__group-addon-space"
      }, react_default.a.createElement("div", {
        className: urlClassCurrentPass
      }, react_default.a.createElement("span", {
        "data-toggle": "tooltip",
        title: "Current Password",
        className: "input-group-addon password__group-addon"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.reset_password.curentPassword",
        defaultMessage: "Current Password"
      })), react_default.a.createElement("input", {
        type: "password",
        ref: "currentPassword",
        className: "form-control",
        autoFocus: true,
        tabIndex: "1"
      })));
    }

    return react_default.a.createElement(Modal["a" /* default */], {
      show: this.props.show,
      onHide: this.doCancel,
      role: "dialog",
      "aria-labelledby": "resetPasswordModalLabel"
    }, react_default.a.createElement(Modal["a" /* default */].Header, {
      closeButton: true
    }, react_default.a.createElement(Modal["a" /* default */].Title, {
      componentClass: "h1",
      id: "resetPasswordModalLabel"
    }, title)), react_default.a.createElement("form", {
      role: "form",
      className: "form-horizontal"
    }, react_default.a.createElement(Modal["a" /* default */].Body, null, react_default.a.createElement("div", {
      className: "form-group"
    }, currentPassword, react_default.a.createElement("div", {
      className: "col-sm-10"
    }, react_default.a.createElement("div", {
      className: urlClass
    }, react_default.a.createElement("span", {
      "data-toggle": "tooltip",
      title: "New Password",
      className: "input-group-addon password__group-addon"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.reset_password.newPassword",
      defaultMessage: "New Password"
    })), react_default.a.createElement("input", {
      type: "password",
      ref: "password",
      className: "form-control",
      autoFocus: newPasswordFocus,
      tabIndex: "1"
    })), serverErrorNewPass, serverErrorCurrentPass))), react_default.a.createElement(Modal["a" /* default */].Footer, null, react_default.a.createElement("button", {
      type: "button",
      className: "btn btn-link",
      onClick: this.doCancel
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.reset_password.cancel",
      defaultMessage: "Cancel"
    })), react_default.a.createElement("button", {
      onClick: this.doSubmit,
      type: "submit",
      className: "btn btn-primary",
      tabIndex: "2"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.reset_password.reset",
      defaultMessage: "Reset"
    })))));
  }

}

reset_password_modal_defineProperty(reset_password_modal_ResetPasswordModal, "propTypes", {
  user: prop_types_default.a.object,
  currentUserId: prop_types_default.a.string.isRequired,
  show: prop_types_default.a.bool.isRequired,
  onModalSubmit: prop_types_default.a.func,
  onModalDismissed: prop_types_default.a.func,
  passwordConfig: prop_types_default.a.object
});

reset_password_modal_defineProperty(reset_password_modal_ResetPasswordModal, "defaultProps", {
  show: false
});
// CONCATENATED MODULE: ./components/admin_console/reset_password_modal/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






function reset_password_modal_mapStateToProps(state) {
  const config = Object(general["getConfig"])(state);
  return {
    currentUserId: Object(entities_users["getCurrentUserId"])(state),
    passwordConfig: Object(utils["C" /* getPasswordConfig */])(config)
  };
}

/* harmony default export */ var reset_password_modal = (Object(es["connect"])(reset_password_modal_mapStateToProps)(reset_password_modal_ResetPasswordModal));
// EXTERNAL MODULE: ./mattermost-redux/utils/helpers.js
var utils_helpers = __webpack_require__(72);

// CONCATENATED MODULE: ./components/admin_console/reset_email_modal/reset_email_modal.jsx
function reset_email_modal_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






class reset_email_modal_ResetEmailModal extends react_default.a.Component {
  constructor(props) {
    super(props);

    reset_email_modal_defineProperty(this, "doSubmit", e => {
      e.preventDefault();

      if (this.refs.email) {
        const email = this.refs.email.value;

        if (!Object(utils_helpers["isEmail"])(email)) {
          const errMsg = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
            id: "user.settings.general.validEmail",
            defaultMessage: "Please enter a valid email address."
          });
          this.setState({
            error: errMsg
          });
          return;
        }
      }

      const user = Object.assign({}, this.props.user);
      const email = this.refs.email.value.trim().toLowerCase();
      user.email = email;
      this.setState({
        error: null
      });
      Object(admin_actions["a" /* adminResetEmail */])(user, () => {
        this.props.onModalSubmit(this.props.user);
      }, err => {
        const serverError = err.message ? err.message : err;
        this.setState({
          error: serverError
        });
      });
    });

    reset_email_modal_defineProperty(this, "doCancel", () => {
      this.setState({
        error: null
      });
      this.props.onModalDismissed();
    });

    this.state = {
      error: null
    };
  }

  render() {
    if (!this.props.user) {
      return react_default.a.createElement("div", null);
    }

    let urlClass = 'input-group input-group--limit';
    let errorMsg = null;

    if (this.state.error) {
      urlClass += ' has-error';
      errorMsg = react_default.a.createElement("div", {
        className: "has-error"
      }, react_default.a.createElement("p", {
        className: "input__help error"
      }, this.state.error));
    }

    const title = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.reset_email.titleReset",
      defaultMessage: "Update Email"
    });
    return react_default.a.createElement(Modal["a" /* default */], {
      show: this.props.show,
      onHide: this.doCancel,
      role: "dialog",
      "aria-labelledby": "resetEmailModalLabel"
    }, react_default.a.createElement(Modal["a" /* default */].Header, {
      closeButton: true
    }, react_default.a.createElement(Modal["a" /* default */].Title, {
      componentClass: "h1",
      id: "resetEmailModalLabel"
    }, title)), react_default.a.createElement("form", {
      role: "form",
      className: "form-horizontal"
    }, react_default.a.createElement(Modal["a" /* default */].Body, null, react_default.a.createElement("div", {
      className: "form-group"
    }, react_default.a.createElement("div", {
      className: "col-sm-10"
    }, react_default.a.createElement("div", {
      className: urlClass
    }, react_default.a.createElement("span", {
      "data-toggle": "tooltip",
      title: "New Email",
      className: "input-group-addon email__group-addon"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.reset_email.newEmail",
      defaultMessage: "New Email"
    })), react_default.a.createElement("input", {
      type: "email",
      ref: "email",
      className: "form-control",
      maxLength: "128",
      autoFocus: true,
      tabIndex: "1"
    })), errorMsg))), react_default.a.createElement(Modal["a" /* default */].Footer, null, react_default.a.createElement("button", {
      type: "button",
      className: "btn btn-link",
      onClick: this.doCancel
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.reset_email.cancel",
      defaultMessage: "Cancel"
    })), react_default.a.createElement("button", {
      onClick: this.doSubmit,
      type: "submit",
      className: "btn btn-primary",
      tabIndex: "2"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.reset_email.reset",
      defaultMessage: "Reset"
    })))));
  }

}

reset_email_modal_defineProperty(reset_email_modal_ResetEmailModal, "propTypes", {
  user: prop_types_default.a.object,
  show: prop_types_default.a.bool.isRequired,
  onModalSubmit: prop_types_default.a.func,
  onModalDismissed: prop_types_default.a.func,
  passwordConfig: prop_types_default.a.object
});

reset_email_modal_defineProperty(reset_email_modal_ResetEmailModal, "defaultProps", {
  show: false
});
// EXTERNAL MODULE: ./components/searchable_user_list/searchable_user_list.jsx + 3 modules
var searchable_user_list = __webpack_require__(2256);

// EXTERNAL MODULE: ./components/profile_picture.jsx
var profile_picture = __webpack_require__(1656);

// CONCATENATED MODULE: ./components/user_list_row_with_error/user_list_row_with_error.jsx
function user_list_row_with_error_extends() { user_list_row_with_error_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return user_list_row_with_error_extends.apply(this, arguments); }

function user_list_row_with_error_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.







class user_list_row_with_error_UserListRowWithError extends react_default.a.Component {
  constructor(props) {
    super(props);
    this.state = {};
    this.onError = this.onError.bind(this);
  }

  onError(errorObj) {
    this.setState({
      error: errorObj
    });
  }

  render() {
    let buttons = null;

    if (this.props.actions) {
      buttons = this.props.actions.map((Action, index) => {
        return react_default.a.createElement(Action, user_list_row_with_error_extends({
          key: index.toString(),
          user: this.props.user,
          index: this.props.index,
          totalUsers: this.props.totalUsers
        }, this.props.actionProps, this.props.actionUserProps, {
          onError: this.onError
        }));
      });
    } // QUICK HACK, NEEDS A PROP FOR TOGGLING STATUS


    let email = this.props.user.email;
    let emailStyle = 'more-modal__description';
    let status;

    if (this.props.user.is_bot) {
      email = null;
    } else if (this.props.extraInfo && this.props.extraInfo.length > 0) {
      email = react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "admin.user_item.emailTitle",
        defaultMessage: "**Email:** {email}",
        values: {
          email: this.props.user.email
        }
      });
      emailStyle = '';
    } else if (this.props.user.status) {
      status = this.props.user.status;
    } else {
      status = this.props.status;
    }

    if (this.props.user.is_bot) {
      status = null;
    }

    let userCountID = null;
    let userCountEmail = null;

    if (this.props.userCount >= 0) {
      userCountID = utils["h" /* createSafeId */]('userListRowName' + this.props.userCount);
      userCountEmail = utils["h" /* createSafeId */]('userListRowEmail' + this.props.userCount);
    }

    let error = null;

    if (this.state.error) {
      error = react_default.a.createElement("div", {
        className: "has-error"
      }, react_default.a.createElement("label", {
        className: "has-error control-label"
      }, this.state.error.message));
    }

    return react_default.a.createElement("div", {
      key: this.props.user.id,
      className: "more-modal__row"
    }, react_default.a.createElement(profile_picture["a" /* default */], {
      src: client["Client4"].getProfilePictureUrl(this.props.user.id, this.props.user.last_picture_update),
      status: status,
      width: "32",
      height: "32"
    }), react_default.a.createElement("div", {
      className: "more-modal__right"
    }, react_default.a.createElement("div", {
      className: "more-modal__top"
    }, react_default.a.createElement("div", {
      className: "more-modal__details"
    }, react_default.a.createElement("div", {
      id: userCountID,
      className: "more-modal__name"
    }, utils["m" /* displayEntireNameForUser */](this.props.user), react_default.a.createElement(bot_badge["a" /* default */], {
      className: "badge-admin",
      show: Boolean(this.props.user.is_bot)
    })), react_default.a.createElement("div", {
      id: userCountEmail,
      className: emailStyle
    }, email), this.props.extraInfo), react_default.a.createElement("div", {
      className: "more-modal__actions"
    }, buttons)), react_default.a.createElement("div", {
      className: "more-modal__bottom"
    }, error)));
  }

}

user_list_row_with_error_defineProperty(user_list_row_with_error_UserListRowWithError, "propTypes", {
  user: prop_types_default.a.object.isRequired,
  status: prop_types_default.a.string,
  extraInfo: prop_types_default.a.arrayOf(prop_types_default.a.object),
  actions: prop_types_default.a.arrayOf(prop_types_default.a.func),
  actionProps: prop_types_default.a.object,
  actionUserProps: prop_types_default.a.object,
  index: prop_types_default.a.number,
  totalUsers: prop_types_default.a.number,
  userCount: prop_types_default.a.number
});

user_list_row_with_error_defineProperty(user_list_row_with_error_UserListRowWithError, "defaultProps", {
  extraInfo: [],
  actions: [],
  actionProps: {},
  actionUserProps: {}
});
// CONCATENATED MODULE: ./components/user_list_row_with_error/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




function user_list_row_with_error_mapStateToProps(state, ownProps) {
  const user = ownProps.user || {};
  return {
    status: Object(entities_users["getStatusForUserId"])(state, user.id)
  };
}

/* harmony default export */ var user_list_row_with_error = (Object(es["connect"])(user_list_row_with_error_mapStateToProps)(user_list_row_with_error_UserListRowWithError));
// EXTERNAL MODULE: ./mattermost-redux/selectors/entities/bots.js
var entities_bots = __webpack_require__(1746);

// EXTERNAL MODULE: ./mattermost-redux/actions/bots.js
var actions_bots = __webpack_require__(1816);

// EXTERNAL MODULE: ./actions/global_actions.jsx
var global_actions = __webpack_require__(1567);

// EXTERNAL MODULE: ./components/permissions_gates/system_permission_gate/index.js + 1 modules
var system_permission_gate = __webpack_require__(1686);

// CONCATENATED MODULE: ./components/admin_console/system_users/system_users_dropdown/system_users_dropdown.jsx
function system_users_dropdown_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
















const ROWS_FROM_BOTTOM_TO_OPEN_UP = 5;
class system_users_dropdown_SystemUsersDropdown extends react_default.a.PureComponent {
  constructor(props) {
    super(props);

    system_users_dropdown_defineProperty(this, "handleMakeActive", e => {
      e.preventDefault();
      this.props.actions.updateUserActive(this.props.user.id, true).then(this.onUpdateActiveResult);
    });

    system_users_dropdown_defineProperty(this, "handleManageTeams", e => {
      e.preventDefault();
      this.props.doManageTeams(this.props.user);
    });

    system_users_dropdown_defineProperty(this, "handleManageRoles", e => {
      e.preventDefault();
      this.props.doManageRoles(this.props.user);
    });

    system_users_dropdown_defineProperty(this, "handleManageTokens", e => {
      e.preventDefault();
      this.props.doManageTokens(this.props.user);
    });

    system_users_dropdown_defineProperty(this, "handleResetPassword", e => {
      e.preventDefault();
      this.props.doPasswordReset(this.props.user);
    });

    system_users_dropdown_defineProperty(this, "handleResetEmail", e => {
      e.preventDefault();
      this.props.doEmailReset(this.props.user);
    });

    system_users_dropdown_defineProperty(this, "handleResetMfa", e => {
      e.preventDefault();
      Object(admin_actions["b" /* adminResetMfa */])(this.props.user.id, null, this.props.onError);
    });

    system_users_dropdown_defineProperty(this, "handleShowDeactivateMemberModal", async e => {
      e.preventDefault();

      if (this.shouldDisableBotsWhenOwnerIsDeactivated()) {
        const {
          data
        } = await this.props.actions.loadBots(constants["g" /* Constants */].Integrations.START_PAGE_NUM, constants["g" /* Constants */].Integrations.PAGE_SIZE);

        if (data) {
          this.setState({
            loading: false,
            showDeactivateMemberModal: true
          });
        }
      }
    });

    system_users_dropdown_defineProperty(this, "handleDeactivateMember", () => {
      this.props.actions.updateUserActive(this.props.user.id, false).then(this.onUpdateActiveResult);
      this.setState({
        showDeactivateMemberModal: false
      });
    });

    system_users_dropdown_defineProperty(this, "onUpdateActiveResult", ({
      error
    }) => {
      if (error) {
        this.props.onError({
          id: error.server_error_id,
          ...error
        });
      }
    });

    system_users_dropdown_defineProperty(this, "handleDeactivateCancel", () => {
      this.setState({
        showDeactivateMemberModal: false
      });
    });

    system_users_dropdown_defineProperty(this, "renderDeactivateMemberModal", () => {
      const user = this.props.user;
      const title = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "deactivate_member_modal.title",
        defaultMessage: "Deactivate {username}",
        values: {
          username: this.props.user.username
        }
      });
      const defaultMessage = react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "deactivate_member_modal.desc",
        defaultMessage: "This action deactivates {username}. They will be logged out and not have access to any teams or channels on this system.\\n",
        values: {
          username: user.username
        }
      });
      let warning;

      if (user.auth_service !== '' && user.auth_service !== constants["g" /* Constants */].EMAIL_SERVICE) {
        warning = react_default.a.createElement("strong", null, react_default.a.createElement("br", null), react_default.a.createElement("br", null), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "deactivate_member_modal.sso_warning",
          defaultMessage: "You must also deactivate this user in the SSO provider or they will be reactivated on next login or sync."
        }));
      }

      const confirmationMessage = react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "deactivate_member_modal.desc.confirm",
        defaultMessage: "Are you sure you want to deactivate {username}?",
        values: {
          username: user.username
        }
      });
      let messageForUsersWithBotAccounts;

      if (this.shouldDisableBotsWhenOwnerIsDeactivated()) {
        for (const bot of Object.values(this.props.bots)) {
          if (bot.owner_id === user.id) {
            messageForUsersWithBotAccounts = react_default.a.createElement(formatted_markdown_message["b" /* default */], {
              id: "deactivate_member_modal.desc.for_users_with_bot_accounts",
              defaultMessage: "This action deactivates {username}.\\n \\n * They will be logged out and not have access to any teams or channels on this system.\\n * Bot accounts they manage will be disabled along with their integrations. To enable them again, go to Integrations > Bot Accounts. [Learn more about bot accounts](!https://mattermost.com/pl/default-bot-accounts).\\n \\n \\n",
              values: {
                username: user.username
              }
            });
            break;
          }
        }
      }

      const message = react_default.a.createElement("div", null, messageForUsersWithBotAccounts || defaultMessage, confirmationMessage, warning);
      const confirmButtonClass = 'btn btn-danger';
      const deactivateMemberButton = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "deactivate_member_modal.deactivate",
        defaultMessage: "Deactivate"
      });
      return react_default.a.createElement(confirm_modal["a" /* default */], {
        show: this.state.showDeactivateMemberModal,
        title: title,
        message: message,
        confirmButtonClass: confirmButtonClass,
        confirmButtonText: deactivateMemberButton,
        onConfirm: this.handleDeactivateMember,
        onCancel: this.handleDeactivateCancel
      });
    });

    system_users_dropdown_defineProperty(this, "handleShowRevokeSessionsModal", e => {
      e.preventDefault();
      this.setState({
        showRevokeSessionsModal: true
      });
    });

    system_users_dropdown_defineProperty(this, "handleRevokeSessions", async () => {
      const me = this.props.currentUser;
      const {
        data,
        error
      } = await this.props.actions.revokeAllSessionsForUser(this.props.user.id);

      if (data && this.props.user.id === me.id) {
        Object(global_actions["e" /* emitUserLoggedOutEvent */])();
      } else if (error) {
        this.props.onError(error);
      }

      this.setState({
        showRevokeSessionsModal: false
      });
    });

    system_users_dropdown_defineProperty(this, "handleRevokeSessionsCancel", () => {
      this.setState({
        showRevokeSessionsModal: false
      });
    });

    system_users_dropdown_defineProperty(this, "renderRevokeSessionsModal", () => {
      const title = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "revoke_user_sessions_modal.title",
        defaultMessage: "Revoke Sessions for {username}",
        values: {
          username: this.props.user.username
        }
      });
      const message = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "revoke_user_sessions_modal.desc",
        defaultMessage: "This action revokes all sessions for {username}. They will be logged out from all devices. Are you sure you want to revoke all sessions for {username}?",
        values: {
          username: this.props.user.username
        }
      });
      const revokeUserButtonButton = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "revoke_user_sessions_modal.revoke",
        defaultMessage: "Revoke"
      });
      return react_default.a.createElement(confirm_modal["a" /* default */], {
        show: this.state.showRevokeSessionsModal,
        title: title,
        message: message,
        confirmButtonClass: "btn btn-danger",
        confirmButtonText: revokeUserButtonButton,
        onConfirm: this.handleRevokeSessions,
        onCancel: this.handleRevokeSessionsCancel
      });
    });

    system_users_dropdown_defineProperty(this, "renderAccessToken", () => {
      const userAccessTokensEnabled = this.props.enableUserAccessTokens;

      if (!userAccessTokensEnabled) {
        return null;
      }

      const user = this.props.user;
      const hasPostAllRole = user_utils["hasPostAllRole"](user.roles);
      const hasPostAllPublicRole = user_utils["hasPostAllPublicRole"](user.roles);
      const hasUserAccessTokenRole = user_utils["hasUserAccessTokenRole"](user.roles);
      const isSystemAdmin = user_utils["isSystemAdmin"](user.roles);
      let messageId = '';

      if (hasUserAccessTokenRole || isSystemAdmin) {
        if (hasPostAllRole) {
          messageId = Object(utils_i18n["b" /* t */])('admin.user_item.userAccessTokenPostAll');
        } else if (hasPostAllPublicRole) {
          messageId = Object(utils_i18n["b" /* t */])('admin.user_item.userAccessTokenPostAllPublic');
        } else {
          messageId = Object(utils_i18n["b" /* t */])('admin.user_item.userAccessTokenYes');
        }
      }

      if (!messageId) {
        return null;
      }

      return react_default.a.createElement("div", {
        className: "light margin-top half"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        key: "admin.user_item.userAccessToken",
        id: messageId
      }));
    });

    this.state = {
      showDeactivateMemberModal: false,
      showRevokeSessionsModal: false,
      user: null,
      role: null
    };
  }

  shouldDisableBotsWhenOwnerIsDeactivated() {
    return this.props.config && this.props.config.ServiceSettings && this.props.config.ServiceSettings.DisableBotsWhenOwnerIsDeactivated;
  }

  render() {
    const user = this.props.user;

    if (!user) {
      return react_default.a.createElement("div", null);
    }

    let currentRoles = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.user_item.member",
      defaultMessage: "Member"
    });

    if (user.roles.length > 0 && utils["ab" /* isSystemAdmin */](user.roles)) {
      currentRoles = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "team_members_dropdown.systemAdmin",
        defaultMessage: "System Admin"
      });
    }

    let showMakeActive = false;
    let showMakeNotActive = !utils["ab" /* isSystemAdmin */](user.roles);
    let showManageTeams = true;
    let showRevokeSessions = true;
    const showMfaReset = this.props.mfaEnabled && Boolean(user.mfa_active);

    if (user.delete_at > 0) {
      currentRoles = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.user_item.inactive",
        defaultMessage: "Inactive"
      });
      showMakeActive = true;
      showMakeNotActive = false;
      showManageTeams = false;
      showRevokeSessions = false;
    }

    let disableActivationToggle = false;

    if (user.auth_service === constants["g" /* Constants */].LDAP_SERVICE) {
      disableActivationToggle = true;
    }

    const deactivateMemberModal = this.renderDeactivateMemberModal();
    const revokeSessionsModal = this.renderRevokeSessionsModal();
    const {
      index,
      totalUsers
    } = this.props;
    let openUp = false;

    if (totalUsers > ROWS_FROM_BOTTOM_TO_OPEN_UP && totalUsers - index <= ROWS_FROM_BOTTOM_TO_OPEN_UP) {
      openUp = true;
    }

    return react_default.a.createElement(react_default.a.Fragment, null, deactivateMemberModal, revokeSessionsModal, react_default.a.createElement(menu_wrapper["a" /* default */], null, react_default.a.createElement("div", {
      className: "text-right"
    }, react_default.a.createElement("a", null, react_default.a.createElement("span", null, currentRoles, " "), react_default.a.createElement("span", {
      className: "caret"
    })), this.renderAccessToken()), react_default.a.createElement("div", null, react_default.a.createElement(menu["a" /* default */], {
      openLeft: true,
      openUp: openUp,
      ariaLabel: utils["gb" /* localizeMessage */]('admin.user_item.menuAriaLabel', 'User Actions Menu')
    }, react_default.a.createElement(menu_item_action["a" /* default */], {
      show: showMakeActive,
      onClick: this.handleMakeActive,
      text: utils["gb" /* localizeMessage */]('admin.user_item.makeActive', 'Activate'),
      disabled: disableActivationToggle
    }), react_default.a.createElement(menu_item_action["a" /* default */], {
      show: showMakeNotActive,
      onClick: this.handleShowDeactivateMemberModal,
      text: utils["gb" /* localizeMessage */]('admin.user_item.makeInactive', 'Deactivate'),
      disabled: disableActivationToggle
    }), react_default.a.createElement(menu_item_action["a" /* default */], {
      onClick: this.handleManageRoles,
      text: utils["gb" /* localizeMessage */]('admin.user_item.manageRoles', 'Manage Roles')
    }), react_default.a.createElement(menu_item_action["a" /* default */], {
      show: showManageTeams,
      onClick: this.handleManageTeams,
      text: utils["gb" /* localizeMessage */]('admin.user_item.manageTeams', 'Manage Teams')
    }), react_default.a.createElement(menu_item_action["a" /* default */], {
      show: this.props.enableUserAccessTokens,
      onClick: this.handleManageTokens,
      text: utils["gb" /* localizeMessage */]('admin.user_item.manageTokens', 'Manage Tokens')
    }), react_default.a.createElement(menu_item_action["a" /* default */], {
      show: showMfaReset,
      onClick: this.handleResetMfa,
      text: utils["gb" /* localizeMessage */]('admin.user_item.resetMfa', 'Remove MFA')
    }), react_default.a.createElement(menu_item_action["a" /* default */], {
      show: Boolean(user.auth_service) && this.props.experimentalEnableAuthenticationTransfer,
      onClick: this.handleResetPassword,
      text: utils["gb" /* localizeMessage */]('admin.user_item.switchToEmail', 'Switch to Email/Password')
    }), react_default.a.createElement(menu_item_action["a" /* default */], {
      show: !user.auth_service,
      onClick: this.handleResetPassword,
      text: utils["gb" /* localizeMessage */]('admin.user_item.resetPwd', 'Reset Password')
    }), react_default.a.createElement(menu_item_action["a" /* default */], {
      show: !user.auth_service && user.id !== this.state.userId,
      onClick: this.handleResetEmail,
      text: utils["gb" /* localizeMessage */]('admin.user_item.resetEmail', 'Update Email')
    }), react_default.a.createElement(system_permission_gate["a" /* default */], {
      permissions: [mattermost_redux_constants["Permissions"].REVOKE_USER_ACCESS_TOKEN]
    }, react_default.a.createElement(menu_item_action["a" /* default */], {
      show: showRevokeSessions,
      onClick: this.handleShowRevokeSessionsModal,
      text: utils["gb" /* localizeMessage */]('admin.user_item.revokeSessions', 'Revoke Sessions')
    }))))));
  }

}

system_users_dropdown_defineProperty(system_users_dropdown_SystemUsersDropdown, "propTypes", {
  /*
   * User to manage with dropdown
   */
  user: prop_types_default.a.object.isRequired,

  /**
   * Whether MFA is licensed and enabled.
   */
  mfaEnabled: prop_types_default.a.bool.isRequired,

  /**
   * Whether or not user access tokens are enabled.
   */
  enableUserAccessTokens: prop_types_default.a.bool.isRequired,

  /**
   * Whether or not the experimental authentication transfer is enabled.
   */
  experimentalEnableAuthenticationTransfer: prop_types_default.a.bool.isRequired,

  /*
   * Function to open password reset, takes user as an argument
   */
  doPasswordReset: prop_types_default.a.func.isRequired,

  /*
   * Function to open email reset, takes user as an argument
   */
  doEmailReset: prop_types_default.a.func.isRequired,

  /*
   * Function to open manage teams, takes user as an argument
   */
  doManageTeams: prop_types_default.a.func.isRequired,

  /*
   * Function to open manage roles, takes user as an argument
   */
  doManageRoles: prop_types_default.a.func.isRequired,

  /*
   * Function to open manage tokens, takes user as an argument
   */
  doManageTokens: prop_types_default.a.func.isRequired,

  /*
   * The function to call when an error occurs
   */
  onError: prop_types_default.a.func.isRequired,
  currentUser: prop_types_default.a.object.isRequired,
  index: prop_types_default.a.number.isRequired,
  totalUsers: prop_types_default.a.number.isRequired,
  actions: prop_types_default.a.shape({
    updateUserActive: prop_types_default.a.func.isRequired,
    revokeAllSessionsForUser: prop_types_default.a.func.isRequired,
    loadBots: prop_types_default.a.func.isRequired
  }).isRequired,
  config: prop_types_default.a.object.isRequired,
  bots: prop_types_default.a.object.isRequired
});
// CONCATENATED MODULE: ./components/admin_console/system_users/system_users_dropdown/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.









function system_users_dropdown_mapStateToProps(state) {
  const bots = Object(entities_bots["getBotAccounts"])(state);
  return {
    config: entities_admin["getConfig"](state),
    currentUser: Object(entities_users["getCurrentUser"])(state),
    bots
  };
}

function system_users_dropdown_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      updateUserActive: actions_users["updateUserActive"],
      revokeAllSessionsForUser: actions_users["revokeAllSessionsForUser"],
      loadBots: actions_bots["loadBots"]
    }, dispatch)
  };
}

/* harmony default export */ var system_users_dropdown = (Object(es["connect"])(system_users_dropdown_mapStateToProps, system_users_dropdown_mapDispatchToProps)(system_users_dropdown_SystemUsersDropdown));
// CONCATENATED MODULE: ./components/admin_console/system_users/list/system_users_list.jsx
function system_users_list_extends() { system_users_list_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return system_users_list_extends.apply(this, arguments); }

function system_users_list_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.














class system_users_list_SystemUsersList extends react_default.a.Component {
  constructor(props) {
    super(props);

    system_users_list_defineProperty(this, "nextPage", () => {
      this.setState({
        page: this.state.page + 1
      });
      this.props.nextPage(this.state.page + 1);
    });

    system_users_list_defineProperty(this, "previousPage", () => {
      this.setState({
        page: this.state.page - 1
      });
    });

    system_users_list_defineProperty(this, "search", term => {
      this.props.search(term);

      if (term !== '') {
        this.setState({
          page: 0
        });
      }
    });

    system_users_list_defineProperty(this, "doManageTeams", user => {
      this.setState({
        showManageTeamsModal: true,
        user
      });
    });

    system_users_list_defineProperty(this, "doManageRoles", user => {
      this.setState({
        showManageRolesModal: true,
        user
      });
    });

    system_users_list_defineProperty(this, "doManageTokens", user => {
      this.setState({
        showManageTokensModal: true,
        user
      });
    });

    system_users_list_defineProperty(this, "doManageTeamsDismiss", () => {
      this.setState({
        showManageTeamsModal: false,
        user: null
      });
    });

    system_users_list_defineProperty(this, "doManageRolesDismiss", () => {
      this.setState({
        showManageRolesModal: false,
        user: null
      });
    });

    system_users_list_defineProperty(this, "doManageTokensDismiss", () => {
      this.setState({
        showManageTokensModal: false,
        user: null
      });
    });

    system_users_list_defineProperty(this, "doPasswordReset", user => {
      this.setState({
        showPasswordModal: true,
        user
      });
    });

    system_users_list_defineProperty(this, "doPasswordResetDismiss", () => {
      this.setState({
        showPasswordModal: false,
        user: null
      });
    });

    system_users_list_defineProperty(this, "doPasswordResetSubmit", user => {
      this.props.actions.getUser(user.id);
      this.setState({
        showPasswordModal: false,
        user: null
      });
    });

    system_users_list_defineProperty(this, "doEmailReset", user => {
      this.setState({
        showEmailModal: true,
        user
      });
    });

    system_users_list_defineProperty(this, "doEmailResetDismiss", () => {
      this.setState({
        showEmailModal: false,
        user: null
      });
    });

    system_users_list_defineProperty(this, "doEmailResetSubmit", user => {
      this.props.actions.getUser(user.id);
      this.setState({
        showEmailModal: false,
        user: null
      });
    });

    this.state = {
      page: 0,
      showManageTeamsModal: false,
      showManageRolesModal: false,
      showManageTokensModal: false,
      showPasswordModal: false,
      showEmailModal: false,
      user: null
    };
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
    // eslint-disable-line camelcase
    if (nextProps.teamId !== this.props.teamId) {
      this.setState({
        page: 0
      });
    }
  }

  getInfoForUser(user) {
    const info = [];

    if (user.auth_service) {
      let service;

      if (user.auth_service === constants["g" /* Constants */].LDAP_SERVICE || user.auth_service === constants["g" /* Constants */].SAML_SERVICE) {
        service = user.auth_service.toUpperCase();
      } else {
        service = utils["qb" /* toTitleCase */](user.auth_service);
      }

      info.push(react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        key: "admin.user_item.authServiceNotEmail",
        id: "admin.user_item.authServiceNotEmail",
        defaultMessage: "**Sign-in Method:** {service}",
        values: {
          service
        }
      }));
    } else {
      info.push(react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        key: "admin.user_item.authServiceEmail",
        id: "admin.user_item.authServiceEmail",
        defaultMessage: "**Sign-in Method:** Email"
      }));
    }

    if (this.props.mfaEnabled) {
      info.push(', ');

      if (user.mfa_active) {
        info.push(react_default.a.createElement(formatted_markdown_message["b" /* default */], {
          key: "admin.user_item.mfaYes",
          id: "admin.user_item.mfaYes",
          defaultMessage: "**MFA**: Yes"
        }));
      } else {
        info.push(react_default.a.createElement(formatted_markdown_message["b" /* default */], {
          key: "admin.user_item.mfaNo",
          id: "admin.user_item.mfaNo",
          defaultMessage: "**MFA**: No"
        }));
      }
    }

    return info;
  }

  renderCount(count, total, startCount, endCount, isSearch) {
    if (total) {
      if (isSearch) {
        return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "system_users_list.countSearch",
          defaultMessage: "{count, number} {count, plural, one {user} other {users}} of {total, number} total",
          values: {
            count,
            total
          }
        });
      } else if (startCount !== 0 || endCount !== total) {
        return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "system_users_list.countPage",
          defaultMessage: "{startCount, number} - {endCount, number} {count, plural, one {user} other {users}} of {total, number} total",
          values: {
            count,
            startCount: startCount + 1,
            endCount,
            total
          }
        });
      }

      return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "system_users_list.count",
        defaultMessage: "{count, number} {count, plural, one {user} other {users}}",
        values: {
          count
        }
      });
    }

    return null;
  }

  render() {
    const extraInfo = {};

    if (this.props.users) {
      for (const user of this.props.users) {
        extraInfo[user.id] = this.getInfoForUser(user);
      }
    }

    return react_default.a.createElement("div", null, react_default.a.createElement(searchable_user_list["a" /* default */], system_users_list_extends({}, this.props, {
      renderCount: this.renderCount,
      extraInfo: extraInfo,
      actions: [system_users_dropdown],
      actionProps: {
        mfaEnabled: this.props.mfaEnabled,
        enableUserAccessTokens: this.props.enableUserAccessTokens,
        experimentalEnableAuthenticationTransfer: this.props.experimentalEnableAuthenticationTransfer,
        doPasswordReset: this.doPasswordReset,
        doEmailReset: this.doEmailReset,
        doManageTeams: this.doManageTeams,
        doManageRoles: this.doManageRoles,
        doManageTokens: this.doManageTokens
      },
      nextPage: this.nextPage,
      previousPage: this.previousPage,
      search: this.search,
      page: this.state.page,
      term: this.props.term,
      onTermChange: this.props.onTermChange,
      rowComponentType: user_list_row_with_error
    })), react_default.a.createElement(manage_teams_modal, {
      user: this.state.user,
      show: this.state.showManageTeamsModal,
      onModalDismissed: this.doManageTeamsDismiss
    }), react_default.a.createElement(manage_roles_modal, {
      user: this.state.user,
      show: this.state.showManageRolesModal,
      onModalDismissed: this.doManageRolesDismiss
    }), react_default.a.createElement(manage_tokens_modal, {
      user: this.state.user,
      show: this.state.showManageTokensModal,
      onModalDismissed: this.doManageTokensDismiss
    }), react_default.a.createElement(reset_password_modal, {
      user: this.state.user,
      show: this.state.showPasswordModal,
      onModalSubmit: this.doPasswordResetSubmit,
      onModalDismissed: this.doPasswordResetDismiss
    }), react_default.a.createElement(reset_email_modal_ResetEmailModal, {
      user: this.state.user,
      show: this.state.showEmailModal,
      onModalSubmit: this.doEmailResetSubmit,
      onModalDismissed: this.doEmailResetDismiss
    }));
  }

}

system_users_list_defineProperty(system_users_list_SystemUsersList, "propTypes", {
  users: prop_types_default.a.arrayOf(prop_types_default.a.object),
  usersPerPage: prop_types_default.a.number,
  total: prop_types_default.a.number,
  nextPage: prop_types_default.a.func,
  search: prop_types_default.a.func.isRequired,
  focusOnMount: prop_types_default.a.bool,
  renderFilterRow: prop_types_default.a.func,
  teamId: prop_types_default.a.string.isRequired,
  filter: prop_types_default.a.string.isRequired,
  term: prop_types_default.a.string.isRequired,
  onTermChange: prop_types_default.a.func.isRequired,

  /**
   * Whether MFA is licensed and enabled.
   */
  mfaEnabled: prop_types_default.a.bool.isRequired,

  /**
   * Whether or not user access tokens are enabled.
   */
  enableUserAccessTokens: prop_types_default.a.bool.isRequired,

  /**
   * Whether or not the experimental authentication transfer is enabled.
   */
  experimentalEnableAuthenticationTransfer: prop_types_default.a.bool.isRequired,
  actions: prop_types_default.a.shape({
    getUser: prop_types_default.a.func.isRequired
  }).isRequired
});
// CONCATENATED MODULE: ./utils/get_users.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

function getFilterOptions(filter) {
  const options = {};

  if (filter === constants["z" /* SearchUserOptionsFilter */].SYSTEM_ADMIN) {
    options[constants["K" /* UserSearchOptions */].ROLE] = constants["z" /* SearchUserOptionsFilter */].SYSTEM_ADMIN;
  } else if (filter === constants["z" /* SearchUserOptionsFilter */].ALLOW_INACTIVE) {
    options[constants["z" /* SearchUserOptionsFilter */].ALLOW_INACTIVE] = true;
  }

  return options;
}
// CONCATENATED MODULE: ./components/admin_console/system_users/list/selectors.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.


const ALL_USERS = '';
const NO_TEAM = 'no_team';
const USER_ID_LENGTH = 26;
function getUsers(state, loading, teamId, term, filter) {
  if (loading) {
    // Show no users while loading.
    return [];
  }

  const filters = getFilterOptions(filter);

  if (term) {
    let users = [];

    if (teamId) {
      users = Object(entities_users["searchProfilesInTeam"])(state, teamId, term, false, filters);
    } else {
      users = Object(entities_users["searchProfiles"])(state, term, false, filters);
    }

    if (users.length === 0 && term.length === USER_ID_LENGTH) {
      const user = Object(entities_users["getUser"])(state, term);

      if (user) {
        users = [user];
      }
    }

    return users;
  }

  if (teamId === ALL_USERS) {
    return Object(entities_users["getProfiles"])(state, filters);
  } else if (teamId === NO_TEAM) {
    return Object(entities_users["getProfilesWithoutTeam"])(state, filters);
  }

  return Object(entities_users["getProfilesInTeam"])(state, teamId, filters);
}
function getNonBotUsers(state, loading, teamId, term, filter) {
  return getUsers(state, loading, teamId, term, filter).filter(user => {
    return !user.is_bot;
  });
}
// CONCATENATED MODULE: ./components/admin_console/system_users/list/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






function list_mapStateToProps(state, ownProps) {
  const users = getNonBotUsers(state, ownProps.loading, ownProps.teamId, ownProps.term, ownProps.filter);
  return {
    users
  };
}

function list_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      getUser: actions_users["getUser"]
    }, dispatch)
  };
}

/* harmony default export */ var system_users_list = (Object(es["connect"])(list_mapStateToProps, list_mapDispatchToProps)(system_users_list_SystemUsersList));
// CONCATENATED MODULE: ./components/admin_console/system_users/system_users.jsx
function system_users_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.











const system_users_USER_ID_LENGTH = 26;
const USERS_PER_PAGE = 50;
class system_users_SystemUsers extends react_default.a.Component {
  constructor(props) {
    super(props);

    system_users_defineProperty(this, "loadDataForTeam", async (teamId, filter) => {
      const {
        getProfiles,
        loadProfilesWithoutTeam,
        loadProfilesAndTeamMembers,
        getTeamStats
      } = this.props.actions;

      if (this.props.searchTerm) {
        this.search(this.props.searchTerm, teamId, filter);
        return;
      }

      const options = this.getFilterOptions(filter);

      if (teamId === constants["A" /* SearchUserTeamFilter */].ALL_USERS) {
        await Promise.all([getProfiles(0, constants["g" /* Constants */].PROFILE_CHUNK_SIZE, options), Object(admin_actions["p" /* getStandardAnalytics */])()]);
      } else if (teamId === constants["A" /* SearchUserTeamFilter */].NO_TEAM) {
        await loadProfilesWithoutTeam(0, constants["g" /* Constants */].PROFILE_CHUNK_SIZE);
      } else {
        await Promise.all([loadProfilesAndTeamMembers(0, constants["g" /* Constants */].PROFILE_CHUNK_SIZE, teamId), getTeamStats(teamId)]);
      }

      this.setState({
        loading: false
      });
    });

    system_users_defineProperty(this, "handleTeamChange", e => {
      const teamId = e.target.value;
      this.loadDataForTeam(teamId, this.props.filter);
      this.props.actions.setSystemUsersSearch(this.props.searchTerm, teamId, this.props.filter);
    });

    system_users_defineProperty(this, "handleFilterChange", e => {
      const filter = e.target.value;
      this.loadDataForTeam(this.props.teamId, filter);
      this.props.actions.setSystemUsersSearch(this.props.searchTerm, this.props.teamId, filter);
    });

    system_users_defineProperty(this, "handleTermChange", term => {
      this.props.actions.setSystemUsersSearch(term, this.props.teamId, this.props.filter);
    });

    system_users_defineProperty(this, "nextPage", async page => {
      // Paging isn't supported while searching
      const {
        getProfiles,
        loadProfilesWithoutTeam,
        loadProfilesAndTeamMembers
      } = this.props.actions;

      if (this.props.teamId === constants["A" /* SearchUserTeamFilter */].ALL_USERS) {
        await getProfiles(page + 1, USERS_PER_PAGE, {});
      } else if (this.props.teamId === constants["A" /* SearchUserTeamFilter */].NO_TEAM) {
        await loadProfilesWithoutTeam(page + 1, USERS_PER_PAGE);
      } else {
        await loadProfilesAndTeamMembers(page + 1, USERS_PER_PAGE, this.props.teamId);
      }

      this.setState({
        loading: false
      });
    });

    system_users_defineProperty(this, "doSearch", Object(helpers["debounce"])(async (term, teamId, filter = '') => {
      this.setState({
        loading: true
      });
      const options = { ...this.getFilterOptions(filter),
        ...(teamId && {
          team_id: teamId
        }),
        ...(teamId === constants["A" /* SearchUserTeamFilter */].NO_TEAM && {
          [constants["K" /* UserSearchOptions */].WITHOUT_TEAM]: true
        })
      };
      const {
        data: profiles
      } = await this.props.actions.searchProfiles(term, options);

      if (profiles.length === 0 && term.length === system_users_USER_ID_LENGTH) {
        await this.getUserByTokenOrId(term);
      }

      this.setState({
        loading: false
      });
    }, constants["g" /* Constants */].SEARCH_TIMEOUT_MILLISECONDS, true));

    system_users_defineProperty(this, "getFilterOptions", filter => {
      const options = {};

      if (filter === constants["z" /* SearchUserOptionsFilter */].SYSTEM_ADMIN) {
        options[constants["K" /* UserSearchOptions */].ROLE] = constants["z" /* SearchUserOptionsFilter */].SYSTEM_ADMIN;
      } else if (filter === constants["z" /* SearchUserOptionsFilter */].ALLOW_INACTIVE) {
        options[constants["z" /* SearchUserOptionsFilter */].ALLOW_INACTIVE] = true;
      }

      return options;
    });

    system_users_defineProperty(this, "getUserById", async id => {
      if (this.props.users[id]) {
        this.setState({
          loading: false
        });
        return;
      }

      await this.props.actions.getUser(id);
      this.setState({
        loading: false
      });
    });

    system_users_defineProperty(this, "getUserByTokenOrId", async id => {
      if (this.props.enableUserAccessTokens) {
        const {
          data
        } = await this.props.actions.getUserAccessToken(id);

        if (data) {
          this.setState({
            term: data.user_id
          });
          this.getUserById(data.user_id);
          return;
        }
      }

      this.getUserById(id);
    });

    system_users_defineProperty(this, "renderFilterRow", doSearch => {
      const teams = this.props.teams.map(team => react_default.a.createElement("option", {
        key: team.id,
        value: team.id
      }, team.display_name));
      return react_default.a.createElement("div", {
        className: "system-users__filter-row"
      }, react_default.a.createElement("div", {
        className: "system-users__filter"
      }, react_default.a.createElement(localized_input["a" /* default */], {
        id: "searchUsers",
        ref: "filter",
        className: "form-control filter-textbox",
        placeholder: {
          id: Object(utils_i18n["b" /* t */])('filtered_user_list.search'),
          defaultMessage: 'Search users'
        },
        onInput: doSearch
      })), react_default.a.createElement("label", null, react_default.a.createElement("span", {
        className: "system-users__team-filter-label"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "filtered_user_list.team",
        defaultMessage: "Team:"
      })), react_default.a.createElement("select", {
        className: "form-control system-users__team-filter",
        onChange: this.handleTeamChange,
        value: this.props.teamId
      }, react_default.a.createElement("option", {
        value: constants["A" /* SearchUserTeamFilter */].ALL_USERS
      }, utils["gb" /* localizeMessage */]('admin.system_users.allUsers', 'All Users')), react_default.a.createElement("option", {
        value: constants["A" /* SearchUserTeamFilter */].NO_TEAM
      }, utils["gb" /* localizeMessage */]('admin.system_users.noTeams', 'No Teams')), teams)), react_default.a.createElement("label", null, react_default.a.createElement("span", {
        className: "system-users__filter-label"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "filtered_user_list.userStatus",
        defaultMessage: "User Status:"
      })), react_default.a.createElement("select", {
        className: "form-control system-users__filter",
        value: this.props.filter,
        onChange: this.handleFilterChange
      }, react_default.a.createElement("option", {
        value: ""
      }, utils["gb" /* localizeMessage */]('admin.system_users.allUsers', 'All Users')), react_default.a.createElement("option", {
        value: constants["z" /* SearchUserOptionsFilter */].SYSTEM_ADMIN
      }, utils["gb" /* localizeMessage */]('admin.system_users.system_admin', 'System Admin')), react_default.a.createElement("option", {
        value: constants["z" /* SearchUserOptionsFilter */].ALLOW_INACTIVE
      }, utils["gb" /* localizeMessage */]('admin.system_users.inactive', 'Inactive')))));
    });

    this.state = {
      loading: true,
      searching: false
    };
  }

  componentDidMount() {
    this.loadDataForTeam(this.props.teamId, this.props.filter);
    this.props.actions.getTeams(0, 1000);
  }

  componentWillUnmount() {
    this.props.actions.setSystemUsersSearch('', '', '');
  }

  render() {
    return react_default.a.createElement("div", {
      className: "wrapper--fixed"
    }, react_default.a.createElement(formatted_admin_header, {
      id: "admin.system_users.title",
      defaultMessage: "{siteName} Users",
      values: {
        siteName: this.props.siteName
      }
    }), react_default.a.createElement("div", {
      className: "admin-console__wrapper"
    }, react_default.a.createElement("div", {
      className: "admin-console__content"
    }, react_default.a.createElement("div", {
      className: "more-modal__list member-list-holder"
    }, react_default.a.createElement(system_users_list, {
      loading: this.state.loading,
      renderFilterRow: this.renderFilterRow,
      search: this.doSearch,
      nextPage: this.nextPage,
      usersPerPage: USERS_PER_PAGE,
      total: this.props.totalUsers,
      teams: this.props.teams,
      teamId: this.props.teamId,
      filter: this.props.filter,
      term: this.props.searchTerm,
      onTermChange: this.handleTermChange,
      mfaEnabled: this.props.mfaEnabled,
      enableUserAccessTokens: this.props.enableUserAccessTokens,
      experimentalEnableAuthenticationTransfer: this.props.experimentalEnableAuthenticationTransfer
    })))));
  }

}

system_users_defineProperty(system_users_SystemUsers, "propTypes", {
  /*
   * Array of team objects
   */
  teams: prop_types_default.a.arrayOf(prop_types_default.a.object).isRequired,

  /**
   * Title of the app or site.
   */
  siteName: prop_types_default.a.string,

  /**
   * Whether or not MFA is licensed and enabled.
   */
  mfaEnabled: prop_types_default.a.bool.isRequired,

  /**
   * Whether or not user access tokens are enabled.
   */
  enableUserAccessTokens: prop_types_default.a.bool.isRequired,

  /**
   * Whether or not the experimental authentication transfer is enabled.
   */
  experimentalEnableAuthenticationTransfer: prop_types_default.a.bool.isRequired,
  totalUsers: prop_types_default.a.number.isRequired,
  searchTerm: prop_types_default.a.string.isRequired,
  teamId: prop_types_default.a.string.isRequired,
  filter: prop_types_default.a.string.isRequired,
  users: prop_types_default.a.object.isRequired,
  actions: prop_types_default.a.shape({
    /*
     * Function to get teams
     */
    getTeams: prop_types_default.a.func.isRequired,

    /*
     * Function to get statistics for a team
     */
    getTeamStats: prop_types_default.a.func.isRequired,

    /*
     * Function to get a user
     */
    getUser: prop_types_default.a.func.isRequired,

    /*
     * Function to get a user access token
     */
    getUserAccessToken: prop_types_default.a.func.isRequired,
    loadProfilesAndTeamMembers: prop_types_default.a.func.isRequired,
    loadProfilesWithoutTeam: prop_types_default.a.func.isRequired,
    getProfiles: prop_types_default.a.func.isRequired,
    setSystemUsersSearch: prop_types_default.a.func.isRequired,
    searchProfiles: prop_types_default.a.func.isRequired
  }).isRequired
});
// CONCATENATED MODULE: ./components/admin_console/system_users/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.













function system_users_mapStateToProps(state) {
  const config = Object(general["getConfig"])(state);
  const siteName = config.SiteName;
  const mfaEnabled = config.EnableMultifactorAuthentication === 'true';
  const enableUserAccessTokens = config.EnableUserAccessTokens === 'true';
  const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';
  const search = state.views.search.systemUsersSearch;
  let totalUsers = 0;
  let searchTerm = '';
  let teamId = '';
  let filter = '';

  if (search) {
    searchTerm = search.term || '';
    teamId = search.team || '';
    filter = search.filter || '';

    if (!teamId || teamId === constants["A" /* SearchUserTeamFilter */].ALL_USERS) {
      const stats = state.entities.admin.analytics || {
        [mattermost_redux_constants["Stats"].TOTAL_USERS]: 0,
        [mattermost_redux_constants["Stats"].TOTAL_INACTIVE_USERS]: 0
      };
      totalUsers = stats[mattermost_redux_constants["Stats"].TOTAL_USERS] + stats[mattermost_redux_constants["Stats"].TOTAL_INACTIVE_USERS];
    } else if (teamId === constants["A" /* SearchUserTeamFilter */].NO_TEAM) {
      totalUsers = 0;
    } else {
      const stats = state.entities.teams.stats[teamId] || {
        total_member_count: 0
      };
      totalUsers = stats.total_member_count;
    }
  }

  return {
    teams: Object(entities_teams["getTeamsList"])(state),
    siteName,
    mfaEnabled,
    totalUsers,
    searchTerm,
    teamId,
    filter,
    enableUserAccessTokens,
    users: Object(entities_users["getUsers"])(state),
    experimentalEnableAuthenticationTransfer
  };
}

function system_users_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      getTeams: actions_teams["getTeams"],
      getTeamStats: actions_teams["getTeamStats"],
      getUser: actions_users["getUser"],
      getUserAccessToken: actions_users["getUserAccessToken"],
      loadProfilesAndTeamMembers: user_actions["f" /* loadProfilesAndTeamMembers */],
      setSystemUsersSearch: views_search["c" /* setSystemUsersSearch */],
      loadProfilesWithoutTeam: user_actions["j" /* loadProfilesWithoutTeam */],
      getProfiles: actions_users["getProfiles"],
      searchProfiles: actions_users["searchProfiles"]
    }, dispatch)
  };
}

/* harmony default export */ var system_users = (Object(es["connect"])(system_users_mapStateToProps, system_users_mapDispatchToProps)(system_users_SystemUsers));
// EXTERNAL MODULE: ./components/icon/next_icon.jsx
var next_icon = __webpack_require__(1644);

// CONCATENATED MODULE: ./components/admin_console/server_logs/log_list.jsx
function log_list_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




const NEXT_BUTTON_TIMEOUT = 500;
class log_list_Logs extends react_default.a.PureComponent {
  constructor(props) {
    super(props);

    log_list_defineProperty(this, "nextPage", e => {
      e.preventDefault();
      this.setState({
        nextDisabled: true
      });
      this.nextTimeoutId = setTimeout(() => this.setState({
        nextDisabled: false
      }), NEXT_BUTTON_TIMEOUT);
      this.props.nextPage();
    });

    log_list_defineProperty(this, "previousPage", e => {
      e.preventDefault();
      this.props.previousPage();
    });

    this.logPanel = react_default.a.createRef();
    this.state = {
      nextDisabled: false
    };
  }

  componentDidMount() {
    // Scroll Down to get the latest logs
    const node = this.logPanel.current;
    node.scrollTop = node.scrollHeight;
    node.focus();
  }

  componentDidUpdate() {
    // Scroll Down to get the latest logs
    const node = this.logPanel.current;
    node.scrollTop = node.scrollHeight;
  }

  render() {
    let content = null;
    let nextButton;
    let previousButton;

    if (this.props.logs.length >= this.props.perPage) {
      nextButton = react_default.a.createElement("button", {
        className: "btn btn-default filter-control filter-control__next pull-right",
        onClick: this.nextPage,
        disabled: this.state.nextDisabled
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.logs.next",
        defaultMessage: "Next"
      }), react_default.a.createElement(next_icon["a" /* default */], {
        additionalClassName: "margin-left"
      }));
    }

    if (this.props.page > 0) {
      previousButton = react_default.a.createElement("button", {
        className: "btn btn-default filter-control filter-control__prev",
        onClick: this.previousPage
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "generic_icons.previous",
        defaultMessage: "Previous Icon"
      }, title => react_default.a.createElement("i", {
        className: "fa fa-angle-left",
        title: title
      })), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.logs.prev",
        defaultMessage: "Previous"
      }));
    }

    content = [];

    for (let i = 0; i < this.props.logs.length; i++) {
      const style = {
        whiteSpace: 'nowrap',
        fontFamily: 'monospace'
      };

      if (this.props.logs[i].indexOf('[EROR]') > 0) {
        style.color = 'red';
      }

      content.push(react_default.a.createElement("br", {
        key: 'br_' + i
      }));
      content.push(react_default.a.createElement("span", {
        key: 'log_' + i,
        style: style
      }, this.props.logs[i]));
    }

    return react_default.a.createElement("div", null, react_default.a.createElement("div", {
      tabIndex: "-1",
      ref: this.logPanel,
      className: "log__panel"
    }, content), react_default.a.createElement("div", {
      className: "padding-top padding-bottom x2 filter-controls"
    }, previousButton, nextButton));
  }

}

log_list_defineProperty(log_list_Logs, "propTypes", {
  /*
   * Array of logs to render
   */
  logs: prop_types_default.a.arrayOf(prop_types_default.a.string).isRequired,
  page: prop_types_default.a.number.isRequired,
  perPage: prop_types_default.a.number.isRequired,
  nextPage: prop_types_default.a.func.isRequired,
  previousPage: prop_types_default.a.func.isRequired
});
// CONCATENATED MODULE: ./components/admin_console/server_logs/logs.jsx
function logs_extends() { logs_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return logs_extends.apply(this, arguments); }

function logs_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






class logs_Logs extends react_default.a.Component {
  constructor(props) {
    super(props);

    logs_defineProperty(this, "nextPage", () => {
      this.setState({
        page: this.state.page + 1
      });
    });

    logs_defineProperty(this, "previousPage", () => {
      this.setState({
        page: this.state.page - 1
      });
    });

    logs_defineProperty(this, "reload", () => {
      this.setState({
        loadingLogs: true
      });
      this.props.actions.getLogs(this.state.page, this.state.perPage).then(() => this.setState({
        loadingLogs: false
      }));
    });

    this.state = {
      loadingLogs: true,
      page: 0,
      perPage: 1000
    };
  }

  componentDidMount() {
    this.props.actions.getLogs(this.state.page, this.state.perPage).then(() => this.setState({
      loadingLogs: false
    }));
  }

  UNSAFE_componentWillUpdate(nextProps, nextState) {
    // eslint-disable-line camelcase
    if (this.state.page !== nextState.page) {
      this.props.actions.getLogs(nextState.page, nextState.perPage).then(() => this.setState({
        loadingLogs: false
      }));
    }
  }

  render() {
    let content = null;

    if (this.state.loadingLogs) {
      content = react_default.a.createElement(loading_screen["a" /* default */], null);
    } else {
      content = react_default.a.createElement(log_list_Logs, logs_extends({}, this.props, {
        nextPage: this.nextPage,
        previousPage: this.previousPage,
        page: this.state.page,
        perPage: this.state.perPage
      }));
    }

    return react_default.a.createElement("div", {
      className: "wrapper--admin"
    }, react_default.a.createElement(formatted_admin_header, {
      id: "admin.logs.title",
      defaultMessage: "Server Logs"
    }), react_default.a.createElement("div", {
      className: "admin-console__wrapper"
    }, react_default.a.createElement("div", {
      className: "admin-console__content"
    }, react_default.a.createElement("div", {
      className: "banner"
    }, react_default.a.createElement("div", {
      className: "banner__content"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.logs.bannerDesc",
      defaultMessage: "To look up users by User ID or Token ID, go to Reporting > Users and paste the ID into the search filter."
    }))), react_default.a.createElement("button", {
      type: "submit",
      className: "btn btn-primary",
      onClick: this.reload
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.logs.reload",
      defaultMessage: "Reload"
    })), content)));
  }

}

logs_defineProperty(logs_Logs, "propTypes", {
  /*
   * Array of logs to render
   */
  logs: prop_types_default.a.arrayOf(prop_types_default.a.string).isRequired,
  nextPage: prop_types_default.a.func,
  actions: prop_types_default.a.shape({
    /*
     * Function to fetch logs
     */
    getLogs: prop_types_default.a.func.isRequired
  }).isRequired
});
// CONCATENATED MODULE: ./components/admin_console/server_logs/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






function server_logs_mapStateToProps(state) {
  return {
    logs: entities_admin["getLogs"](state)
  };
}

function server_logs_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      getLogs: admin["getLogs"]
    }, dispatch)
  };
}

/* harmony default export */ var server_logs = (Object(es["connect"])(server_logs_mapStateToProps, server_logs_mapDispatchToProps)(logs_Logs));
// CONCATENATED MODULE: ./components/admin_console/brand_image_setting/upload_button.jsx
function upload_button_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






class upload_button_UploadButton extends react_default.a.PureComponent {
  render() {
    const {
      status,
      primaryClass,
      disabled,
      onClick
    } = this.props;
    let buttonContent;

    if (status === constants["J" /* UploadStatuses */].COMPLETE) {
      buttonContent = [react_default.a.createElement(success_icon["a" /* default */], {
        key: "icon"
      }), ' ', utils["gb" /* localizeMessage */]('admin.team.uploaded', 'Uploaded!')];
    } else {
      buttonContent = utils["gb" /* localizeMessage */]('admin.team.upload', 'Upload');
    }

    return react_default.a.createElement("button", {
      className: primaryClass,
      disabled: disabled,
      onClick: onClick,
      id: "upload-button"
    }, react_default.a.createElement(loading_wrapper["a" /* default */], {
      loading: status === constants["J" /* UploadStatuses */].LOADING,
      text: utils["gb" /* localizeMessage */]('admin.team.uploading', 'Uploading...')
    }, buttonContent));
  }

}

upload_button_defineProperty(upload_button_UploadButton, "propTypes", {
  /*
   * Upload status - loading, complete, default ('')
   */
  status: prop_types_default.a.string,

  /*
   * Primary class of the button
   */
  primaryClass: prop_types_default.a.string,

  /*
   * Disable the button
   */
  disabled: prop_types_default.a.bool,

  /*
   * Funtion to call on button click
   */
  onClick: prop_types_default.a.func
});
// CONCATENATED MODULE: ./components/admin_console/brand_image_setting/brand_image_setting.jsx
function brand_image_setting_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.









const HTTP_STATUS_OK = 200;
class brand_image_setting_BrandImageSetting extends react_default.a.PureComponent {
  constructor(props) {
    super(props);
    this.handleImageChange = this.handleImageChange.bind(this);
    this.handleImageSubmit = this.handleImageSubmit.bind(this);
    this.state = {
      brandImage: null,
      brandImageExists: false,
      brandImageTimestamp: Date.now(),
      error: '',
      status: constants["J" /* UploadStatuses */].DEFAULT
    };
  }

  UNSAFE_componentWillMount() {
    // eslint-disable-line camelcase
    fetch(client["Client4"].getBrandImageUrl(this.state.brandImageTimestamp)).then(resp => {
      if (resp.status === HTTP_STATUS_OK) {
        this.setState({
          brandImageExists: true
        });
      } else {
        this.setState({
          brandImageExists: false
        });
      }
    });
  }

  componentDidUpdate() {
    if (this.refs.image) {
      const reader = new FileReader();
      const img = this.refs.image;

      reader.onload = e => {
        jquery_default()(img).attr('src', e.target.result);
      };

      reader.readAsDataURL(this.state.brandImage);
    }
  }

  handleImageChange() {
    const element = jquery_default()(this.refs.fileInput);

    if (element.prop('files').length > 0) {
      this.setState({
        brandImage: element.prop('files')[0],
        status: constants["J" /* UploadStatuses */].DEFAULT
      });
    }
  }

  handleImageSubmit(e) {
    e.preventDefault();

    if (!this.state.brandImage) {
      return;
    }

    if (this.state.status === constants["J" /* UploadStatuses */].LOADING) {
      return;
    }

    this.setState({
      error: '',
      status: constants["J" /* UploadStatuses */].LOADING
    });
    Object(admin_actions["F" /* uploadBrandImage */])(this.state.brandImage, () => {
      this.setState({
        brandImageExists: true,
        brandImage: null,
        brandImageTimestamp: Date.now(),
        status: constants["J" /* UploadStatuses */].COMPLETE
      });
    }, err => {
      this.setState({
        error: err.message,
        status: constants["J" /* UploadStatuses */].DEFAULT
      });
    });
  }

  render() {
    let btnPrimaryClass = 'btn';

    if (this.state.brandImage) {
      btnPrimaryClass += ' btn-primary';
    }

    let letbtnDefaultClass = 'btn';

    if (!this.props.disabled) {
      letbtnDefaultClass += ' btn-default';
    }

    let img = null;

    if (this.state.brandImage) {
      img = react_default.a.createElement("img", {
        ref: "image",
        className: "brand-img",
        alt: "brand image",
        src: ""
      });
    } else if (this.state.brandImageExists) {
      img = react_default.a.createElement("img", {
        className: "brand-img",
        alt: "brand image",
        src: client["Client4"].getBrandImageUrl(this.state.brandImageTimestamp)
      });
    } else {
      img = react_default.a.createElement("p", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.team.noBrandImage",
        defaultMessage: "No brand image uploaded"
      }));
    }

    return react_default.a.createElement("div", {
      className: "form-group"
    }, react_default.a.createElement("label", {
      className: "control-label col-sm-4"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.team.brandImageTitle",
      defaultMessage: "Custom Brand Image:"
    })), react_default.a.createElement("div", {
      className: "col-sm-8"
    }, img), react_default.a.createElement("div", {
      className: "col-sm-4"
    }), react_default.a.createElement("div", {
      className: "col-sm-8"
    }, react_default.a.createElement("div", {
      className: "file__upload"
    }, react_default.a.createElement("button", {
      className: letbtnDefaultClass,
      disabled: this.props.disabled
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.team.chooseImage",
      defaultMessage: "Choose New Image"
    })), react_default.a.createElement("input", {
      ref: "fileInput",
      type: "file",
      accept: ".jpg,.png,.bmp",
      disabled: this.props.disabled,
      onChange: this.handleImageChange
    })), react_default.a.createElement(upload_button_UploadButton, {
      primaryClass: btnPrimaryClass,
      status: this.state.status,
      disabled: this.props.disabled || !this.state.brandImage,
      onClick: this.handleImageSubmit
    }), react_default.a.createElement("br", null), react_default.a.createElement(form_error["a" /* default */], {
      error: this.state.error
    }), react_default.a.createElement("p", {
      className: "help-text no-margin"
    }, react_default.a.createElement(index_es["b" /* FormattedHTMLMessage */], {
      id: "admin.team.uploadDesc",
      defaultMessage: "Customize your user experience by adding a custom image to your login screen. See examples at <a href=\"http://docs.mattermost.com/administration/config-settings.html#custom-branding\" target=\"_blank\">docs.mattermost.com/administration/config-settings.html#custom-branding</a>."
    }))));
  }

}

brand_image_setting_defineProperty(brand_image_setting_BrandImageSetting, "propTypes", {
  /*
   * Set to disable the setting
   */
  disabled: prop_types_default.a.bool.isRequired
});
// EXTERNAL MODULE: ./components/widgets/loading/loading_spinner.jsx
var loading_spinner = __webpack_require__(1651);

// CONCATENATED MODULE: ./components/admin_console/group_settings/group_row.jsx
function group_row_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.







class group_row_GroupRow extends react_default.a.Component {
  constructor(props) {
    super(props);

    group_row_defineProperty(this, "onRowClick", () => {
      this.props.onCheckToggle(this.props.primary_key);
    });

    group_row_defineProperty(this, "linkHandler", async e => {
      e.stopPropagation();
      e.preventDefault();
      this.setState({
        loading: true
      });
      await this.props.actions.link(this.props.primary_key);
      this.setState({
        loading: false
      });
    });

    group_row_defineProperty(this, "unlinkHandler", async e => {
      e.stopPropagation();
      e.preventDefault();
      this.setState({
        loading: true
      });
      await this.props.actions.unlink(this.props.primary_key);
      this.setState({
        loading: false
      });
    });

    group_row_defineProperty(this, "renderActions", () => {
      if (!this.props.mattermost_group_id) {
        return null;
      }

      if (this.props.has_syncables) {
        return react_default.a.createElement(react_router_dom["a" /* Link */], {
          to: '/admin_console/user_management/groups/' + this.props.mattermost_group_id
        }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.group_settings.group_row.edit",
          defaultMessage: "Edit"
        }));
      }

      return react_default.a.createElement(react_router_dom["a" /* Link */], {
        to: '/admin_console/user_management/groups/' + this.props.mattermost_group_id
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.group_settings.group_row.configure",
        defaultMessage: "Configure"
      }));
    });

    group_row_defineProperty(this, "renderLinked", () => {
      if (this.state.loading) {
        return react_default.a.createElement("a", {
          href: "#"
        }, this.props.mattermost_group_id && react_default.a.createElement(loading_spinner["a" /* default */], {
          text: Object(utils["gb" /* localizeMessage */])('admin.group_settings.group_row.unlinking', 'Unlinking')
        }), !this.props.mattermost_group_id && react_default.a.createElement(loading_spinner["a" /* default */], {
          text: Object(utils["gb" /* localizeMessage */])('admin.group_settings.group_row.linking', 'Linking')
        }));
      }

      if (this.props.mattermost_group_id) {
        if (this.props.failed) {
          return react_default.a.createElement("a", {
            href: "#",
            onClick: this.unlinkHandler,
            className: "warning"
          }, react_default.a.createElement("i", {
            className: "icon fa fa-exclamation-triangle"
          }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
            id: "admin.group_settings.group_row.unlink_failed",
            defaultMessage: "Unlink failed"
          }));
        }

        return react_default.a.createElement("a", {
          href: "#",
          onClick: this.unlinkHandler
        }, react_default.a.createElement("i", {
          className: "icon fa fa-link"
        }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.group_settings.group_row.linked",
          defaultMessage: "Linked"
        }));
      }

      if (this.props.failed) {
        return react_default.a.createElement("a", {
          href: "#",
          onClick: this.linkHandler,
          className: "warning"
        }, react_default.a.createElement("i", {
          className: "icon fa fa-exclamation-triangle"
        }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.group_settings.group_row.link_failed",
          defaultMessage: "Link failed"
        }));
      }

      return react_default.a.createElement("a", {
        href: "#",
        onClick: this.linkHandler
      }, react_default.a.createElement("i", {
        className: "icon fa fa-unlink"
      }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.group_settings.group_row.not_linked",
        defaultMessage: "Not Linked"
      }));
    });

    group_row_defineProperty(this, "render", () => {
      return react_default.a.createElement("div", {
        className: 'group ' + (this.props.checked ? 'checked' : ''),
        onClick: this.onRowClick
      }, react_default.a.createElement("div", {
        className: "group-row"
      }, react_default.a.createElement("div", {
        className: 'group-check ' + (this.props.checked ? 'checked' : '')
      }, this.props.checked && react_default.a.createElement(checkbox_checked_icon_CheckboxCheckedIcon, null)), react_default.a.createElement("span", {
        className: "group-name"
      }, this.props.name), react_default.a.createElement("span", {
        className: "group-description"
      }, this.renderLinked()), react_default.a.createElement("span", {
        className: "group-actions"
      }, this.renderActions())));
    });

    this.state = {
      loading: false
    };
  }

}

group_row_defineProperty(group_row_GroupRow, "propTypes", {
  primary_key: prop_types_default.a.string.isRequired,
  name: prop_types_default.a.string.isRequired,
  mattermost_group_id: prop_types_default.a.string,
  has_syncables: prop_types_default.a.bool,
  checked: prop_types_default.a.bool,
  failed: prop_types_default.a.bool,
  onCheckToggle: prop_types_default.a.func,
  actions: prop_types_default.a.shape({
    link: prop_types_default.a.func.isRequired,
    unlink: prop_types_default.a.func.isRequired
  }).isRequired
});
// EXTERNAL MODULE: ./components/icon/previous_icon.jsx
var previous_icon = __webpack_require__(1714);

// EXTERNAL MODULE: ./components/svg/search_icon.jsx
var search_icon = __webpack_require__(1672);

// CONCATENATED MODULE: ./components/admin_console/group_settings/groups_list/groups_list.jsx
function groups_list_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.










const LDAP_GROUPS_PAGE_SIZE = 200;
const FILTER_STATE_SEARCH_KEY_MAPPING = {
  filterIsConfigured: {
    filter: 'is:configured',
    option: {
      is_configured: true
    }
  },
  filterIsUnconfigured: {
    filter: 'is:notconfigured',
    option: {
      is_configured: false
    }
  },
  filterIsLinked: {
    filter: 'is:linked',
    option: {
      is_linked: true
    }
  },
  filterIsUnlinked: {
    filter: 'is:notlinked',
    option: {
      is_linked: false
    }
  }
};
class groups_list_GroupsList extends react_default.a.PureComponent {
  constructor(props) {
    super(props);

    groups_list_defineProperty(this, "closeFilters", () => {
      this.setState({
        showFilters: false
      });
    });

    groups_list_defineProperty(this, "previousPage", async e => {
      e.preventDefault();
      const page = this.state.page < 1 ? 0 : this.state.page - 1;
      this.setState({
        checked: {},
        page,
        loading: true
      });
      this.searchGroups(page);
    });

    groups_list_defineProperty(this, "nextPage", async e => {
      e.preventDefault();
      const page = this.state.page + 1;
      this.setState({
        checked: {},
        page,
        loading: true
      });
      this.searchGroups(page);
    });

    groups_list_defineProperty(this, "onCheckToggle", key => {
      const newChecked = { ...this.state.checked
      };
      newChecked[key] = !newChecked[key];
      this.setState({
        checked: newChecked
      });
    });

    groups_list_defineProperty(this, "linkSelectedGroups", () => {
      for (const group of this.props.groups) {
        if (this.state.checked[group.primary_key] && !group.mattermost_group_id) {
          this.props.actions.link(group.primary_key);
        }
      }
    });

    groups_list_defineProperty(this, "unlinkSelectedGroups", () => {
      for (const group of this.props.groups) {
        if (this.state.checked[group.primary_key] && group.mattermost_group_id) {
          this.props.actions.unlink(group.primary_key);
        }
      }
    });

    groups_list_defineProperty(this, "selectionActionButtonType", () => {
      let hasSelectedLinked = false;

      for (const group of this.props.groups) {
        if (this.state.checked[group.primary_key]) {
          if (!group.mattermost_group_id) {
            return 'link';
          }

          hasSelectedLinked = true;
        }
      }

      if (hasSelectedLinked) {
        return 'unlink';
      }

      return 'disabled';
    });

    groups_list_defineProperty(this, "renderSelectionActionButton", () => {
      switch (this.selectionActionButtonType()) {
        case 'link':
          return react_default.a.createElement("button", {
            className: "btn btn-primary",
            onClick: this.linkSelectedGroups
          }, react_default.a.createElement("i", {
            className: "icon fa fa-link"
          }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
            id: "admin.group_settings.groups_list.link_selected",
            defaultMessage: "Link Selected Groups"
          }));

        case 'unlink':
          return react_default.a.createElement("button", {
            className: "btn btn-primary",
            onClick: this.unlinkSelectedGroups
          }, react_default.a.createElement("i", {
            className: "icon fa fa-unlink"
          }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
            id: "admin.group_settings.groups_list.unlink_selected",
            defaultMessage: "Unlink Selected Groups"
          }));

        default:
          return react_default.a.createElement("button", {
            className: "btn btn-inactive disabled"
          }, react_default.a.createElement("i", {
            className: "icon fa fa-link"
          }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
            id: "admin.group_settings.groups_list.link_selected",
            defaultMessage: "Link Selected Groups"
          }));
      }
    });

    groups_list_defineProperty(this, "renderRows", () => {
      if (this.state.loading) {
        return react_default.a.createElement("div", {
          className: "groups-list-loading"
        }, react_default.a.createElement("i", {
          className: "fa fa-spinner fa-pulse fa-2x"
        }));
      }

      if (this.props.groups.length === 0) {
        return react_default.a.createElement("div", {
          className: "groups-list-empty"
        }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.group_settings.groups_list.no_groups_found",
          defaultMessage: "No groups found"
        }));
      }

      return this.props.groups.map(item => {
        return react_default.a.createElement(group_row_GroupRow, {
          key: item.primary_key,
          primary_key: item.primary_key,
          name: item.name,
          mattermost_group_id: item.mattermost_group_id,
          has_syncables: item.has_syncables,
          failed: item.failed,
          checked: Boolean(this.state.checked[item.primary_key]),
          onCheckToggle: this.onCheckToggle,
          actions: {
            link: this.props.actions.link,
            unlink: this.props.actions.unlink
          }
        });
      });
    });

    groups_list_defineProperty(this, "regex", str => {
      return new RegExp(`(${str})`, 'i');
    });

    groups_list_defineProperty(this, "searchGroups", page => {
      let {
        searchString
      } = this.state;
      const newState = { ...this.state
      };
      delete newState.page;
      delete newState.checked;
      let q = searchString;
      let opts = {
        q: ''
      };
      Object.entries(FILTER_STATE_SEARCH_KEY_MAPPING).forEach(([key, value]) => {
        const re = this.regex(value.filter);

        if (re.test(searchString)) {
          newState[key] = true;
          q = q.replace(re, '');
          opts = Object.assign(opts, value.option);
        } else if (this.state[key]) {
          searchString += ' ' + value.filter;
        }
      });
      opts.q = q.trim();
      newState.searchString = searchString;
      newState.showFilters = false;
      newState.loading = true;
      newState.showFilters = false;
      this.setState(newState);
      this.props.actions.getLdapGroups(page, LDAP_GROUPS_PAGE_SIZE, opts).then(() => {
        this.setState({
          loading: false
        });
      });
    });

    groups_list_defineProperty(this, "handleGroupSearchKeyUp", e => {
      const {
        key
      } = e;
      const {
        searchString
      } = this.state;

      if (key === constants["g" /* Constants */].KeyCodes.ENTER[0]) {
        this.setState({
          page: 0
        });
        this.searchGroups();
      }

      const newState = {};
      Object.entries(FILTER_STATE_SEARCH_KEY_MAPPING).forEach(([k, value]) => {
        if (!this.regex(value.filter).test(searchString)) {
          newState[k] = false;
        }
      });
      this.setState(newState);
    });

    groups_list_defineProperty(this, "newSearchString", (searchString, stateKey, checked) => {
      let newSearchString = searchString;
      const {
        filter
      } = FILTER_STATE_SEARCH_KEY_MAPPING[stateKey];
      const re = this.regex(filter);
      const stringFilterPresent = re.test(searchString);

      if (stringFilterPresent && !checked) {
        newSearchString = searchString.replace(re, '').trim();
      }

      if (!stringFilterPresent && checked) {
        newSearchString += ' ' + filter;
      }

      return newSearchString.replace(/\s{2,}/g, ' ');
    });

    groups_list_defineProperty(this, "handleFilterCheck", updates => {
      let {
        searchString
      } = this.state;
      updates.forEach(item => {
        searchString = this.newSearchString(searchString, item[0], item[1]);
        this.setState({
          [item[0]]: item[1]
        });
      });
      this.setState({
        searchString
      });
    });

    groups_list_defineProperty(this, "renderSearchFilters", () => {
      return react_default.a.createElement("div", {
        id: "group-filters",
        className: "group-search-filters",
        onClick: e => {
          e.nativeEvent.stopImmediatePropagation();
        }
      }, react_default.a.createElement("div", {
        className: "filter-row"
      }, react_default.a.createElement("span", {
        className: 'filter-check ' + (this.state.filterIsLinked ? 'checked' : ''),
        onClick: () => this.handleFilterCheck([['filterIsLinked', !this.state.filterIsLinked], ['filterIsUnlinked', false]])
      }, this.state.filterIsLinked && react_default.a.createElement(checkbox_checked_icon_CheckboxCheckedIcon, null)), react_default.a.createElement("span", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.group_settings.filters.isLinked",
        defaultMessage: "Is Linked"
      }))), react_default.a.createElement("div", {
        className: "filter-row"
      }, react_default.a.createElement("span", {
        className: 'filter-check ' + (this.state.filterIsUnlinked ? 'checked' : ''),
        onClick: () => this.handleFilterCheck([['filterIsUnlinked', !this.state.filterIsUnlinked], ['filterIsLinked', false]])
      }, this.state.filterIsUnlinked && react_default.a.createElement(checkbox_checked_icon_CheckboxCheckedIcon, null)), react_default.a.createElement("span", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.group_settings.filters.isUnlinked",
        defaultMessage: "Is Not Linked"
      }))), react_default.a.createElement("div", {
        className: "filter-row"
      }, react_default.a.createElement("span", {
        className: 'filter-check ' + (this.state.filterIsConfigured ? 'checked' : ''),
        onClick: () => this.handleFilterCheck([['filterIsConfigured', !this.state.filterIsConfigured], ['filterIsUnconfigured', false]])
      }, this.state.filterIsConfigured && react_default.a.createElement(checkbox_checked_icon_CheckboxCheckedIcon, null)), react_default.a.createElement("span", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.group_settings.filters.isConfigured",
        defaultMessage: "Is Configured"
      }))), react_default.a.createElement("div", {
        className: "filter-row"
      }, react_default.a.createElement("span", {
        className: 'filter-check ' + (this.state.filterIsUnconfigured ? 'checked' : ''),
        onClick: () => this.handleFilterCheck([['filterIsUnconfigured', !this.state.filterIsUnconfigured], ['filterIsConfigured', false]])
      }, this.state.filterIsUnconfigured && react_default.a.createElement(checkbox_checked_icon_CheckboxCheckedIcon, null)), react_default.a.createElement("span", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.group_settings.filters.isUnconfigured",
        defaultMessage: "Is Not Configured"
      }))), react_default.a.createElement("a", {
        onClick: () => {
          this.setState({
            page: 0
          });
          this.searchGroups(0);
        },
        className: "btn btn-primary search-groups-btn"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "search_bar.search",
        defaultMessage: "Search"
      })));
    });

    groups_list_defineProperty(this, "resetFiltersAndSearch", () => {
      const newState = {
        showFilters: false,
        searchString: '',
        loading: true,
        page: 0
      };
      Object.entries(FILTER_STATE_SEARCH_KEY_MAPPING).forEach(([key]) => {
        newState[key] = false;
      });
      this.setState(newState);
      this.props.actions.getLdapGroups(this.state.page, LDAP_GROUPS_PAGE_SIZE, {
        q: ''
      }).then(() => {
        this.setState({
          loading: false
        });
      });
    });

    groups_list_defineProperty(this, "render", () => {
      const startCount = this.state.page * LDAP_GROUPS_PAGE_SIZE + 1;
      let endCount = this.state.page * LDAP_GROUPS_PAGE_SIZE + LDAP_GROUPS_PAGE_SIZE;
      const total = this.props.total;

      if (endCount > total) {
        endCount = total;
      }

      const lastPage = endCount === total;
      const firstPage = this.state.page === 0;
      return react_default.a.createElement("div", {
        className: "groups-list"
      }, react_default.a.createElement("div", {
        className: "groups-list--global-actions"
      }, react_default.a.createElement("div", {
        className: "group-list-search"
      }, react_default.a.createElement("input", {
        type: "text",
        placeholder: utils["gb" /* localizeMessage */]('search_bar.search', 'Search'),
        onKeyUp: this.handleGroupSearchKeyUp,
        onChange: e => this.setState({
          searchString: e.target.value
        }),
        value: this.state.searchString
      }), react_default.a.createElement(search_icon["a" /* default */], {
        id: "searchIcon",
        className: "search__icon",
        "aria-hidden": "true"
      }), react_default.a.createElement("i", {
        className: 'fa fa-times-circle group-filter-action ' + (this.state.searchString.length ? '' : 'hidden'),
        onClick: this.resetFiltersAndSearch
      }), react_default.a.createElement("i", {
        className: 'fa fa-caret-down group-filter-action ' + (this.state.showFilters ? 'hidden' : ''),
        onClick: () => {
          document.addEventListener('click', this.closeFilters, {
            once: true
          });
          this.setState({
            showFilters: true
          });
        }
      })), this.state.showFilters && this.renderSearchFilters(), react_default.a.createElement("div", {
        className: "group-list-link-unlink"
      }, this.renderSelectionActionButton())), react_default.a.createElement("div", {
        className: "groups-list--header"
      }, react_default.a.createElement("div", {
        className: "group-name"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.group_settings.groups_list.nameHeader",
        defaultMessage: "Name"
      })), react_default.a.createElement("div", {
        className: "group-description"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.group_settings.groups_list.mappingHeader",
        defaultMessage: "Mattermost Linking"
      })), react_default.a.createElement("div", {
        className: "group-actions"
      })), react_default.a.createElement("div", {
        className: "groups-list--body"
      }, this.renderRows()), react_default.a.createElement("div", {
        className: "groups-list--footer"
      }, react_default.a.createElement("div", {
        className: "counter"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.group_settings.groups_list.paginatorCount",
        defaultMessage: "{startCount, number} - {endCount, number} of {total, number}",
        values: {
          startCount,
          endCount,
          total
        }
      })), react_default.a.createElement("button", {
        className: 'btn btn-link prev ' + (firstPage ? 'disabled' : ''),
        onClick: firstPage ? null : this.previousPage,
        disabled: firstPage
      }, react_default.a.createElement(previous_icon["a" /* default */], null)), react_default.a.createElement("button", {
        className: 'btn btn-link next ' + (lastPage ? 'disabled' : ''),
        onClick: lastPage ? null : this.nextPage,
        disabled: lastPage
      }, react_default.a.createElement(next_icon["a" /* default */], null))));
    });

    this.state = {
      checked: {},
      loading: true,
      page: 0,
      showFilters: false,
      searchString: ''
    };
    Object.entries(FILTER_STATE_SEARCH_KEY_MAPPING).forEach(([key]) => {
      this.state[key] = false;
    });
  }

  componentDidMount() {
    this.props.actions.getLdapGroups(this.state.page, LDAP_GROUPS_PAGE_SIZE).then(() => {
      this.setState({
        loading: false
      });
    });
  }

}

groups_list_defineProperty(groups_list_GroupsList, "propTypes", {
  groups: prop_types_default.a.arrayOf(prop_types_default.a.object),
  total: prop_types_default.a.number,
  actions: prop_types_default.a.shape({
    getLdapGroups: prop_types_default.a.func.isRequired,
    link: prop_types_default.a.func.isRequired,
    unlink: prop_types_default.a.func.isRequired
  }).isRequired
});

groups_list_defineProperty(groups_list_GroupsList, "defaultProps", {
  groups: []
});
// CONCATENATED MODULE: ./components/admin_console/group_settings/groups_list/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






const getSortedListOfLdapGroups = Object(reselect_es["a" /* createSelector */])(entities_admin["getLdapGroups"], ldapGroups => {
  const groups = Object.values(ldapGroups);
  groups.sort((a, b) => a.name.localeCompare(b.name));
  return groups;
});

function groups_list_mapStateToProps(state) {
  return {
    groups: getSortedListOfLdapGroups(state),
    total: Object(entities_admin["getLdapGroupsCount"])(state)
  };
}

function groups_list_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      getLdapGroups: admin["getLdapGroups"],
      link: admin["linkLdapGroup"],
      unlink: admin["unlinkLdapGroup"]
    }, dispatch)
  };
}

/* harmony default export */ var groups_list = (Object(es["connect"])(groups_list_mapStateToProps, groups_list_mapDispatchToProps)(groups_list_GroupsList));
// CONCATENATED MODULE: ./components/admin_console/group_settings/group_settings.jsx
function group_settings_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.







class group_settings_GroupSettings extends react_default.a.PureComponent {
  constructor(...args) {
    super(...args);

    group_settings_defineProperty(this, "render", () => {
      const siteURL = Object(url["e" /* getSiteURL */])();
      return react_default.a.createElement("div", {
        className: "wrapper--fixed"
      }, react_default.a.createElement("div", {
        className: "admin-console__header"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.group_settings.groupsPageTitle",
        defaultMessage: "Groups"
      })), react_default.a.createElement("div", {
        className: "admin-console__wrapper"
      }, react_default.a.createElement("div", {
        className: "admin-console__content"
      }, react_default.a.createElement("div", {
        className: 'banner info'
      }, react_default.a.createElement("div", {
        className: "banner__content"
      }, react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "admin.group_settings.introBanner",
        defaultMessage: 'Groups are a way to organize users and apply actions to all users within that group.\nFor more information on Groups, please see [documentation](!https://www.mattermost.com/default-ad-ldap-groups).'
      }))), react_default.a.createElement(admin_panel, {
        id: "ldap_groups",
        titleId: Object(utils_i18n["b" /* t */])('admin.group_settings.ldapGroupsTitle'),
        titleDefault: "AD/LDAP Groups",
        subtitleId: Object(utils_i18n["b" /* t */])('admin.group_settings.ldapGroupsDescription'),
        subtitleDefault: `Link and configure groups from your AD/LDAP to Mattermost. Please ensure you have configured a [group filter](${siteURL}/admin_console/authentication/ldap).`,
        subtitleValues: {
          siteURL
        }
      }, react_default.a.createElement(groups_list, null)))));
    });
  }

}
// EXTERNAL MODULE: ./mattermost-redux/actions/groups.js
var actions_groups = __webpack_require__(1681);

// EXTERNAL MODULE: ./mattermost-redux/selectors/entities/groups.js
var entities_groups = __webpack_require__(1745);

// CONCATENATED MODULE: ./components/admin_console/group_settings/group_details/group_profile.jsx
function group_profile_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.



class group_profile_GroupProfile extends react_default.a.PureComponent {
  constructor(...args) {
    super(...args);

    group_profile_defineProperty(this, "render", () => {
      const {
        name
      } = this.props;
      return react_default.a.createElement("div", {
        className: "group-profile"
      }, react_default.a.createElement("div", {
        className: "group-profile-field"
      }, react_default.a.createElement("label", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.group_settings.group_details.group_profile.name",
        defaultMessage: "Name:"
      })), react_default.a.createElement("input", {
        type: "text",
        className: "form-control",
        value: name,
        disabled: true
      })));
    });
  }

}

group_profile_defineProperty(group_profile_GroupProfile, "propTypes", {
  name: prop_types_default.a.string.isRequired
});
// EXTERNAL MODULE: ./components/svg/globe_icon.jsx
var globe_icon = __webpack_require__(1653);

// EXTERNAL MODULE: ./components/svg/lock_icon.jsx
var lock_icon = __webpack_require__(1654);

// CONCATENATED MODULE: ./components/admin_console/group_settings/group_details/group_teams_and_channels_row.jsx
function group_teams_and_channels_row_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






class group_teams_and_channels_row_GroupTeamsAndChannelsRow extends react_default.a.PureComponent {
  constructor(props) {
    super(props);

    group_teams_and_channels_row_defineProperty(this, "removeItem", () => {
      this.props.onRemoveItem(this.props.id, this.props.type);
      this.setState({
        showConfirmationModal: false
      });
    });

    group_teams_and_channels_row_defineProperty(this, "toggleCollapse", () => {
      this.props.onToggleCollapse(this.props.id);
    });

    group_teams_and_channels_row_defineProperty(this, "render", () => {
      let extraClasses = '';
      let arrowIcon = null;

      if (this.props.hasChildren) {
        arrowIcon = react_default.a.createElement("i", {
          className: 'fa fa-caret-right' + (this.props.collapsed ? '' : ' open'),
          onClick: this.toggleCollapse
        });
        extraClasses += ' has-clidren';
      }

      if (this.props.collapsed) {
        extraClasses += ' collapsed';
      }

      let teamIcon = null;
      let channelIcon = null;

      switch (this.props.type) {
        case 'public-team':
          teamIcon = react_default.a.createElement("div", {
            className: "team-icon team-icon-public"
          }, react_default.a.createElement("i", {
            className: 'fa fa-circle-o-notch'
          }));
          break;

        case 'private-team':
          teamIcon = react_default.a.createElement("div", {
            className: "team-icon team-icon-private"
          }, react_default.a.createElement("span", {
            className: "fa-stack fa-2x"
          }, react_default.a.createElement("i", {
            className: 'fa fa-circle-thin fa-stack-2x'
          }), react_default.a.createElement("i", {
            className: 'fa fa-lock fa-stack-1x'
          })));
          break;

        default:
          teamIcon = react_default.a.createElement("div", {
            className: "team-icon"
          });
      }

      switch (this.props.type) {
        case 'public-channel':
          channelIcon = react_default.a.createElement("div", {
            className: "channel-icon"
          }, react_default.a.createElement(globe_icon["a" /* default */], {
            className: "icon icon__globe"
          }));
          break;

        case 'private-channel':
          channelIcon = react_default.a.createElement("div", {
            className: "channel-icon"
          }, react_default.a.createElement(lock_icon["a" /* default */], {
            className: "icon icon__lock"
          }));
          break;
      }

      const displayType = this.props.type.split('-')[1];
      return react_default.a.createElement("div", {
        className: 'group-teams-and-channels-row' + extraClasses
      }, react_default.a.createElement(confirm_modal["a" /* default */], {
        show: this.state.showConfirmationModal,
        title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.group_settings.group_details.group_teams_and_channels_row.remove.confirm_header",
          defaultMessage: `Remove Membership from the '${this.props.name}' ${displayType}?`,
          values: {
            name: this.props.name,
            displayType
          }
        }),
        message: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.group_settings.group_details.group_teams_and_channels_row.remove.confirm_body",
          defaultMessage: `Removing this membership will prevent future users in this group from being added to the '${this.props.name}' ${displayType}.`,
          values: {
            name: this.props.name,
            displayType
          }
        }),
        confirmButtonText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.group_settings.group_details.group_teams_and_channels_row.remove.confirm_button",
          defaultMessage: "Yes, Remove"
        }),
        onConfirm: this.removeItem,
        onCancel: () => this.setState({
          showConfirmationModal: false
        })
      }), react_default.a.createElement("div", {
        className: "arrow-icon"
      }, arrowIcon), teamIcon, channelIcon, react_default.a.createElement("div", {
        className: "name"
      }, this.props.name), react_default.a.createElement("div", {
        className: "remove"
      }, !this.props.implicit && react_default.a.createElement("button", {
        className: "btn btn-link",
        onClick: () => this.setState({
          showConfirmationModal: true
        })
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.group_settings.group_details.group_teams_and_channels_row.remove",
        defaultMessage: "Remove"
      }))));
    });

    this.state = {
      showConfirmationModal: false
    };
  }

}

group_teams_and_channels_row_defineProperty(group_teams_and_channels_row_GroupTeamsAndChannelsRow, "propTypes", {
  id: prop_types_default.a.string.isRequired,
  type: prop_types_default.a.string.isRequired,
  name: prop_types_default.a.string.isRequired,
  implicit: prop_types_default.a.bool,
  hasChildren: prop_types_default.a.bool,
  collapsed: prop_types_default.a.bool,
  onRemoveItem: prop_types_default.a.func.isRequired,
  onToggleCollapse: prop_types_default.a.func.isRequired
});
// CONCATENATED MODULE: ./components/admin_console/group_settings/group_details/group_teams_and_channels.jsx
function group_teams_and_channels_extends() { group_teams_and_channels_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return group_teams_and_channels_extends.apply(this, arguments); }

function group_teams_and_channels_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





class group_teams_and_channels_GroupTeamsAndChannels extends react_default.a.PureComponent {
  constructor(props) {
    super(props);

    group_teams_and_channels_defineProperty(this, "onToggleCollapse", id => {
      const collapsed = { ...this.state.collapsed
      };
      collapsed[id] = !collapsed[id];
      this.setState({
        collapsed
      });
    });

    group_teams_and_channels_defineProperty(this, "onRemoveItem", async (id, type) => {
      if (type === 'public-team' || type === 'private-team') {
        await this.props.unlink(this.props.id, id, mattermost_redux_constants["Groups"].SYNCABLE_TYPE_TEAM);
        await this.props.getGroupSyncables(this.props.id, mattermost_redux_constants["Groups"].SYNCABLE_TYPE_TEAM);
      } else {
        await this.props.unlink(this.props.id, id, mattermost_redux_constants["Groups"].SYNCABLE_TYPE_CHANNEL);
        await this.props.getGroupSyncables(this.props.id, mattermost_redux_constants["Groups"].SYNCABLE_TYPE_CHANNEL);
      }
    });

    group_teams_and_channels_defineProperty(this, "teamsAndChannelsToEntries", (teams, channels) => {
      const entries = [];
      const existingTeams = new Set();
      const teamEntries = [];
      teams.forEach(team => {
        existingTeams.add(team.team_id);
        teamEntries.push({
          type: team.team_type === 'O' ? 'public-team' : 'private-team',
          hasChildren: channels.some(channel => channel.team_id === team.team_id),
          name: team.team_display_name,
          collapsed: this.state.collapsed[team.team_id],
          id: team.team_id,
          implicit: false
        });
      });
      const channelEntriesByTeam = {};
      channels.forEach(channel => {
        channelEntriesByTeam[channel.team_id] = channelEntriesByTeam[channel.team_id] || [];
        channelEntriesByTeam[channel.team_id].push({
          type: channel.channel_type === 'O' ? 'public-channel' : 'private-channel',
          name: channel.channel_display_name,
          id: channel.channel_id
        });

        if (!existingTeams.has(channel.team_id)) {
          existingTeams.add(channel.team_id);
          teamEntries.push({
            type: channel.team_type === 'O' ? 'public-team' : 'private-team',
            hasChildren: true,
            name: channel.team_display_name,
            collapsed: this.state.collapsed[channel.team_id],
            id: channel.team_id,
            implicit: true
          });
        }
      });
      teamEntries.sort((a, b) => a.name.localeCompare(b.name));
      teamEntries.forEach(team => {
        entries.push(team);

        if (team.hasChildren && !team.collapsed) {
          const teamChannels = channelEntriesByTeam[team.id];
          teamChannels.sort((a, b) => a.name.localeCompare(b.name));
          entries.push(...teamChannels);
        }
      });
      return entries;
    });

    group_teams_and_channels_defineProperty(this, "render", () => {
      const entries = this.teamsAndChannelsToEntries(this.props.teams, this.props.channels);

      if (this.props.loading) {
        return react_default.a.createElement("div", {
          className: "group-teams-and-channels"
        }, react_default.a.createElement("div", {
          className: "group-teams-and-channels-loading"
        }, react_default.a.createElement("i", {
          className: "fa fa-spinner fa-pulse fa-2x"
        })));
      }

      if (entries.length === 0) {
        return react_default.a.createElement("div", {
          className: "group-teams-and-channels"
        }, react_default.a.createElement("div", {
          className: "group-teams-and-channels-empty"
        }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.group_settings.group_details.group_teams_and_channels.no-teams-or-channels-speicified",
          defaultMessage: "No teams or channels specified yet"
        })));
      }

      return react_default.a.createElement("div", {
        className: "group-teams-and-channels"
      }, react_default.a.createElement("div", {
        className: "group-teams-and-channels--header"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.group_settings.group_profile.group_teams_and_channels.name",
        defaultMessage: "Name"
      })), react_default.a.createElement("div", {
        className: "group-teams-and-channels--body"
      }, entries.map(entry => react_default.a.createElement(group_teams_and_channels_row_GroupTeamsAndChannelsRow, group_teams_and_channels_extends({
        key: entry.id,
        onRemoveItem: this.onRemoveItem,
        onToggleCollapse: this.onToggleCollapse
      }, entry)))));
    });

    this.state = {
      collapsed: {}
    };
  }

}

group_teams_and_channels_defineProperty(group_teams_and_channels_GroupTeamsAndChannels, "propTypes", {
  id: prop_types_default.a.string.isRequired,
  teams: prop_types_default.a.arrayOf(prop_types_default.a.object),
  channels: prop_types_default.a.arrayOf(prop_types_default.a.object),
  loading: prop_types_default.a.bool.isRequired,
  getGroupSyncables: prop_types_default.a.func.isRequired,
  unlink: prop_types_default.a.func.isRequired
});
// CONCATENATED MODULE: ./components/admin_console/group_settings/group_details/group_users_row.jsx
function group_users_row_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




class group_users_row_GroupUsersRow extends react_default.a.PureComponent {
  constructor(...args) {
    super(...args);

    group_users_row_defineProperty(this, "render", () => {
      return react_default.a.createElement("div", {
        className: "group-users-row"
      }, react_default.a.createElement("img", {
        className: "profile-picture",
        alt: '',
        src: client["Client4"].getProfilePictureUrl(this.props.userId, this.props.lastPictureUpdate)
      }), react_default.a.createElement("div", {
        className: "user-data"
      }, react_default.a.createElement("div", {
        className: "name-row"
      }, react_default.a.createElement("span", {
        className: "username"
      }, '@' + this.props.username), '-', react_default.a.createElement("span", {
        className: "display-name"
      }, this.props.displayName)), react_default.a.createElement("div", null, react_default.a.createElement("span", {
        className: "email-label"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.group_settings.group_details.group_users.email",
        defaultMessage: "Email:"
      })), react_default.a.createElement("span", {
        className: "email"
      }, this.props.email))));
    });
  }

}

group_users_row_defineProperty(group_users_row_GroupUsersRow, "propTypes", {
  username: prop_types_default.a.string.isRequired,
  displayName: prop_types_default.a.string.isRequired,
  email: prop_types_default.a.string.isRequired,
  userId: prop_types_default.a.string.isRequired,
  lastPictureUpdate: prop_types_default.a.number.isRequired
});
// CONCATENATED MODULE: ./components/admin_console/group_settings/group_details/group_users.jsx
function group_users_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.







const GROUP_MEMBERS_PAGE_SIZE = 20;
class group_users_GroupUsers extends react_default.a.PureComponent {
  constructor(props) {
    super(props);

    group_users_defineProperty(this, "previousPage", async () => {
      const page = this.state.page < 1 ? 0 : this.state.page - 1;
      this.setState({
        page,
        loading: true
      });
      await this.props.getMembers(this.props.groupID, page, GROUP_MEMBERS_PAGE_SIZE);
      this.setState({
        loading: false
      });
    });

    group_users_defineProperty(this, "nextPage", async () => {
      const page = (this.state.page + 1) * GROUP_MEMBERS_PAGE_SIZE >= this.props.total ? this.state.page : this.state.page + 1;
      this.setState({
        page,
        loading: true
      });
      await this.props.getMembers(this.props.groupID, page, GROUP_MEMBERS_PAGE_SIZE);
      this.setState({
        loading: false
      });
    });

    group_users_defineProperty(this, "renderRows", () => {
      if (this.props.members.length === 0) {
        return react_default.a.createElement("div", {
          className: "group-users-empty"
        }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.group_settings.group_details.group_users.no-users-found",
          defaultMessage: "No users found"
        }));
      }

      return this.props.members.map(member => {
        return react_default.a.createElement(group_users_row_GroupUsersRow, {
          key: member.id,
          username: member.username,
          displayName: member.first_name + ' ' + member.last_name,
          email: member.email,
          userId: member.id,
          lastPictureUpdate: member.last_picture_update
        });
      });
    });

    group_users_defineProperty(this, "renderPagination", () => {
      if (this.props.members.length === 0) {
        return react_default.a.createElement("div", {
          className: "group-users--footer empty"
        });
      }

      const startCount = this.state.page * GROUP_MEMBERS_PAGE_SIZE + 1;
      let endCount = this.state.page * GROUP_MEMBERS_PAGE_SIZE + GROUP_MEMBERS_PAGE_SIZE;
      const total = this.props.total;

      if (endCount > total) {
        endCount = total;
      }

      const lastPage = endCount === total;
      const firstPage = this.state.page === 0;
      return react_default.a.createElement("div", {
        className: "group-users--footer"
      }, react_default.a.createElement("div", {
        className: "counter"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.group_settings.groups_list.paginatorCount",
        defaultMessage: "{startCount, number} - {endCount, number} of {total, number}",
        values: {
          startCount,
          endCount,
          total
        }
      })), react_default.a.createElement("button", {
        className: 'btn btn-link prev ' + (firstPage ? 'disabled' : ''),
        onClick: this.previousPage,
        disabled: firstPage
      }, react_default.a.createElement(previous_icon["a" /* default */], null)), react_default.a.createElement("button", {
        className: 'btn btn-link next ' + (lastPage ? 'disabled' : ''),
        onClick: this.nextPage,
        disabled: lastPage
      }, react_default.a.createElement(next_icon["a" /* default */], null)));
    });

    group_users_defineProperty(this, "render", () => {
      return react_default.a.createElement("div", {
        className: "group-users"
      }, react_default.a.createElement("div", {
        className: "group-users--header"
      }, react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "admin.group_settings.group_profile.group_users.ldapConnector",
        defaultMessage: 'AD/LDAP Connector is configured to sync and manage this group and its users. [Click here to view](/admin_console/authentication/ldap)'
      })), react_default.a.createElement("div", {
        className: "group-users--body"
      }, react_default.a.createElement("div", {
        className: 'group-users-loading ' + (this.state.loading ? 'active' : '')
      }, react_default.a.createElement("i", {
        className: "fa fa-spinner fa-pulse fa-2x"
      })), this.renderRows()), this.renderPagination());
    });

    this.state = {
      loading: true,
      page: 0
    };
  }

  componentDidMount() {
    this.props.getMembers(this.props.groupID, 0, GROUP_MEMBERS_PAGE_SIZE).then(() => {
      this.setState({
        loading: false
      });
    });
  }

}

group_users_defineProperty(group_users_GroupUsers, "propTypes", {
  groupID: prop_types_default.a.string.isRequired,
  members: prop_types_default.a.arrayOf(prop_types_default.a.object),
  total: prop_types_default.a.number.isRequired,
  getMembers: prop_types_default.a.func.isRequired
});
// EXTERNAL MODULE: ./mattermost-redux/actions/channels.js
var actions_channels = __webpack_require__(70);

// CONCATENATED MODULE: ./components/channel_selector_modal/channel_selector_modal.jsx
function channel_selector_modal_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.










const CHANNELS_PER_PAGE = 50;
class channel_selector_modal_ChannelSelectorModal extends react_default.a.Component {
  constructor(props) {
    super(props);

    channel_selector_modal_defineProperty(this, "handleHide", () => {
      this.props.actions.setModalSearchTerm('');
      this.setState({
        show: false
      });
    });

    channel_selector_modal_defineProperty(this, "handleExit", () => {
      if (this.props.onModalDismissed) {
        this.props.onModalDismissed();
      }
    });

    channel_selector_modal_defineProperty(this, "handleSubmit", e => {
      if (e) {
        e.preventDefault();
      }

      if (this.state.values.length === 0) {
        return;
      }

      this.props.onChannelsSelected(this.state.values);
      this.handleHide();
    });

    channel_selector_modal_defineProperty(this, "addValue", value => {
      const values = Object.assign([], this.state.values);

      if (value && value.id && values.findIndex(v => v.id === value.id) === -1) {
        values.push(value);
      }

      this.setState({
        values
      });
    });

    channel_selector_modal_defineProperty(this, "setChannelsLoadingState", loadingState => {
      this.setState({
        loadingChannels: loadingState
      });
    });

    channel_selector_modal_defineProperty(this, "handlePageChange", (page, prevPage) => {
      if (page > prevPage) {
        this.setChannelsLoadingState(true);
        this.props.actions.loadChannels(page, CHANNELS_PER_PAGE + 1, this.props.groupID, true).then(response => {
          const newState = [...this.state.channels];
          const stateChannelIDs = this.state.channels.map(stateChannel => stateChannel.id);
          response.data.forEach(serverChannel => {
            if (!stateChannelIDs.includes(serverChannel.id)) {
              newState.push(serverChannel);
            }
          });
          this.setState({
            channels: newState.sort(utils["f" /* compareChannels */])
          });
          this.setChannelsLoadingState(false);
        });
      }
    });

    channel_selector_modal_defineProperty(this, "handleDelete", values => {
      this.setState({
        values
      });
    });

    channel_selector_modal_defineProperty(this, "search", (term, multiselectComponent) => {
      if (multiselectComponent.state.page !== 0) {
        multiselectComponent.setState({
          page: 0
        });
      }

      this.props.actions.setModalSearchTerm(term);
    });

    this.searchTimeoutId = 0;
    this.state = {
      values: [],
      show: true,
      search: false,
      loadingChannels: true,
      channels: []
    };
  }

  componentDidMount() {
    this.props.actions.loadChannels(0, CHANNELS_PER_PAGE + 1, this.props.groupID, true).then(response => {
      this.setState({
        channels: response.data.sort(utils["f" /* compareChannels */])
      });
      this.setChannelsLoadingState(false);
    });
  }

  componentDidUpdate(prevProps) {
    // eslint-disable-line camelcase
    if (prevProps.searchTerm !== this.props.searchTerm) {
      clearTimeout(this.searchTimeoutId);
      const searchTerm = this.props.searchTerm;

      if (searchTerm === '') {
        this.props.actions.loadChannels(0, CHANNELS_PER_PAGE + 1, this.props.groupID, true).then(response => {
          this.setState({
            channels: response.data.sort(utils["f" /* compareChannels */])
          });
          this.setChannelsLoadingState(false);
        });
      } else {
        this.searchTimeoutId = setTimeout(async () => {
          this.setChannelsLoadingState(true);
          const response = await this.props.actions.searchChannels(searchTerm, this.props.groupID, true);
          this.setState({
            channels: response.data
          });
          this.setChannelsLoadingState(false);
        }, constants["N" /* default */].SEARCH_TIMEOUT_MILLISECONDS);
      }
    }
  }

  renderOption(option, isSelected, onAdd) {
    let rowSelected = '';

    if (isSelected) {
      rowSelected = 'more-modal__row--selected';
    }

    return react_default.a.createElement("div", {
      key: option.id,
      ref: isSelected ? 'selected' : option.id,
      className: 'more-modal__row clickable ' + rowSelected,
      onClick: () => onAdd(option)
    }, react_default.a.createElement("div", {
      className: "more-modal__details"
    }, option.type === 'P' && react_default.a.createElement(lock_icon["a" /* default */], {
      className: "icon icon__lock"
    }), option.type === 'O' && react_default.a.createElement(globe_icon["a" /* default */], {
      className: "icon icon__globe"
    }), react_default.a.createElement("span", {
      className: "channel-name"
    }, option.display_name), react_default.a.createElement("span", {
      className: "team-name"
    }, '(' + option.team_display_name + ')')), react_default.a.createElement("div", {
      className: "more-modal__actions"
    }, react_default.a.createElement("div", {
      className: "more-modal__actions--round"
    }, react_default.a.createElement("i", {
      className: "fa fa-plus"
    }))));
  }

  renderValue(props) {
    return props.data.display_name + ' (' + props.data.team_display_name + ')';
  }

  render() {
    const numRemainingText = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "multiselect.selectChannels",
      defaultMessage: "Use \u2191\u2193 to browse, \u21B5 to select."
    });
    const buttonSubmitText = Object(utils["gb" /* localizeMessage */])('multiselect.add', 'Add');
    return react_default.a.createElement(Modal["a" /* default */], {
      dialogClassName: 'more-modal more-direct-channels channel-selector-modal',
      show: this.state.show,
      onHide: this.handleHide,
      onExited: this.handleExit,
      role: "dialog",
      "aria-labelledby": "channelSelectorModalLabel"
    }, react_default.a.createElement(Modal["a" /* default */].Header, {
      closeButton: true
    }, react_default.a.createElement(Modal["a" /* default */].Title, {
      componentClass: "h1",
      id: "channelSelectorModalLabel"
    }, react_default.a.createElement(formatted_markdown_message["b" /* default */], {
      id: "add_channels_to_scheme.title",
      defaultMessage: "Add Channels To **Channel Selection** List"
    }))), react_default.a.createElement(Modal["a" /* default */].Body, null, react_default.a.createElement(multiselect["a" /* default */], {
      key: "addChannelsToSchemeKey",
      options: this.state.channels,
      optionRenderer: this.renderOption,
      values: this.state.values,
      valueRenderer: this.renderValue,
      perPage: CHANNELS_PER_PAGE,
      handlePageChange: this.handlePageChange,
      handleInput: this.search,
      handleDelete: this.handleDelete,
      handleAdd: this.addValue,
      handleSubmit: this.handleSubmit,
      numRemainingText: numRemainingText,
      buttonSubmitText: buttonSubmitText,
      saving: false,
      loading: this.state.loadingChannels,
      placeholderText: Object(utils["gb" /* localizeMessage */])('multiselect.addChannelsPlaceholder', 'Search and add channels')
    })));
  }

}

channel_selector_modal_defineProperty(channel_selector_modal_ChannelSelectorModal, "propTypes", {
  searchTerm: prop_types_default.a.string.isRequired,
  onModalDismissed: prop_types_default.a.func,
  onChannelsSelected: prop_types_default.a.func,
  groupID: prop_types_default.a.string.isRequired,
  actions: prop_types_default.a.shape({
    loadChannels: prop_types_default.a.func.isRequired,
    setModalSearchTerm: prop_types_default.a.func.isRequired,
    searchChannels: prop_types_default.a.func.isRequired
  }).isRequired
});
// CONCATENATED MODULE: ./components/channel_selector_modal/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






function channel_selector_modal_mapStateToProps(state) {
  return {
    searchTerm: state.views.search.modalSearch
  };
}

function channel_selector_modal_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      loadChannels: actions_channels["getAllChannels"],
      setModalSearchTerm: views_search["a" /* setModalSearchTerm */],
      searchChannels: actions_channels["searchAllChannels"]
    }, dispatch)
  };
}

/* harmony default export */ var channel_selector_modal = (Object(es["connect"])(channel_selector_modal_mapStateToProps, channel_selector_modal_mapDispatchToProps)(channel_selector_modal_ChannelSelectorModal));
// CONCATENATED MODULE: ./components/admin_console/group_settings/group_details/group_details.jsx
function group_details_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
















class group_details_GroupDetails extends react_default.a.PureComponent {
  constructor(props) {
    super(props);

    group_details_defineProperty(this, "openAddChannel", () => {
      this.setState({
        addChannelOpen: true
      });
    });

    group_details_defineProperty(this, "closeAddChannel", () => {
      this.setState({
        addChannelOpen: false
      });
    });

    group_details_defineProperty(this, "openAddTeam", () => {
      this.setState({
        addTeamOpen: true
      });
    });

    group_details_defineProperty(this, "closeAddTeam", () => {
      this.setState({
        addTeamOpen: false
      });
    });

    group_details_defineProperty(this, "addTeams", teams => {
      const promises = [];

      for (const team of teams) {
        promises.push(this.props.actions.link(this.props.groupID, team.id, mattermost_redux_constants["Groups"].SYNCABLE_TYPE_TEAM, {
          auto_add: true
        }));
      }

      return Promise.all(promises).finally(() => this.props.actions.getGroupSyncables(this.props.groupID, mattermost_redux_constants["Groups"].SYNCABLE_TYPE_TEAM));
    });

    group_details_defineProperty(this, "addChannels", async channels => {
      const promises = [];

      for (const channel of channels) {
        promises.push(this.props.actions.link(this.props.groupID, channel.id, mattermost_redux_constants["Groups"].SYNCABLE_TYPE_CHANNEL, {
          auto_add: true
        }));
      }

      return Promise.all(promises).finally(() => this.props.actions.getGroupSyncables(this.props.groupID, mattermost_redux_constants["Groups"].SYNCABLE_TYPE_CHANNEL));
    });

    group_details_defineProperty(this, "render", () => {
      const {
        group,
        members,
        groupTeams,
        groupChannels,
        memberCount
      } = this.props;
      return react_default.a.createElement("div", {
        className: "wrapper--fixed"
      }, react_default.a.createElement("div", {
        className: "admin-console__header with-back"
      }, react_default.a.createElement("div", null, react_default.a.createElement(blockable_link, {
        to: "/admin_console/user_management/groups",
        className: "fa fa-angle-left back"
      }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.group_settings.group_detail.group_configuration",
        defaultMessage: "Group Configuration"
      }))), react_default.a.createElement("div", {
        className: "admin-console__wrapper"
      }, react_default.a.createElement("div", {
        className: "admin-console__content"
      }, react_default.a.createElement("div", {
        className: "banner info"
      }, react_default.a.createElement("div", {
        className: "banner__content"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.group_settings.group_detail.introBanner",
        defaultMessage: "Configure default teams and channels and view users belonging to this group."
      }))), react_default.a.createElement(admin_panel, {
        id: "group_profile",
        titleId: Object(utils_i18n["b" /* t */])('admin.group_settings.group_detail.groupProfileTitle'),
        titleDefault: "Group Profile",
        subtitleId: Object(utils_i18n["b" /* t */])('admin.group_settings.group_detail.groupProfileDescription'),
        subtitleDefault: "The name for this group."
      }, react_default.a.createElement(group_profile_GroupProfile, {
        name: group.display_name
      })), react_default.a.createElement(admin_panel, {
        id: "group_teams_and_channels",
        titleId: Object(utils_i18n["b" /* t */])('admin.group_settings.group_detail.groupTeamsAndChannelsTitle'),
        titleDefault: "Team and Channel Membership",
        subtitleId: Object(utils_i18n["b" /* t */])('admin.group_settings.group_detail.groupTeamsAndChannelsDescription'),
        subtitleDefault: "Set default teams and channels for group members. Teams added will include default channels, town-square, and off-topic. Adding a channel without setting the team will add the implied team to the listing below.",
        button: react_default.a.createElement("div", {
          className: "group-profile-add-menu"
        }, react_default.a.createElement(menu_wrapper["a" /* default */], null, react_default.a.createElement("button", {
          className: "btn btn-primary"
        }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.group_settings.group_details.add_team_or_channel",
          defaultMessage: "Add Team or Channel"
        }), react_default.a.createElement("i", {
          className: 'fa fa-caret-down'
        })), react_default.a.createElement(menu["a" /* default */], {
          ariaLabel: Object(utils["gb" /* localizeMessage */])('admin.group_settings.group_details.menuAriaLabel', 'Add Team or Channel Menu')
        }, react_default.a.createElement(menu_item_action["a" /* default */], {
          onClick: this.openAddTeam,
          text: Object(utils["gb" /* localizeMessage */])('admin.group_settings.group_details.add_team', 'Add Team')
        }), react_default.a.createElement(menu_item_action["a" /* default */], {
          onClick: this.openAddChannel,
          text: Object(utils["gb" /* localizeMessage */])('admin.group_settings.group_details.add_channel', 'Add Channel')
        }))))
      }, react_default.a.createElement(group_teams_and_channels_GroupTeamsAndChannels, {
        id: this.props.groupID,
        teams: groupTeams,
        channels: groupChannels,
        loading: this.state.loadingTeamsAndChannels,
        getGroupSyncables: this.props.actions.getGroupSyncables,
        unlink: this.props.actions.unlink
      })), this.state.addTeamOpen && react_default.a.createElement(team_selector_modal, {
        onModalDismissed: this.closeAddTeam,
        onTeamsSelected: this.addTeams,
        alreadySelected: this.props.groupTeams.map(team => team.team_id)
      }), this.state.addChannelOpen && react_default.a.createElement(channel_selector_modal, {
        onModalDismissed: this.closeAddChannel,
        onChannelsSelected: this.addChannels,
        alreadySelected: this.props.groupChannels.map(channel => channel.channel_id),
        groupID: this.props.groupID
      }), react_default.a.createElement(admin_panel, {
        id: "group_users",
        titleId: Object(utils_i18n["b" /* t */])('admin.group_settings.group_detail.groupUsersTitle'),
        titleDefault: "Users",
        subtitleId: Object(utils_i18n["b" /* t */])('admin.group_settings.group_detail.groupUsersDescription'),
        subtitleDefault: "Listing of users in Mattermost associated with this group."
      }, react_default.a.createElement(group_users_GroupUsers, {
        members: members,
        total: memberCount,
        groupID: this.props.groupID,
        getMembers: this.props.actions.getMembers
      })))));
    });

    this.state = {
      loadingTeamsAndChannels: true,
      addTeamOpen: false,
      addChannelOpen: false
    };
  }

  componentDidMount() {
    const {
      groupID,
      actions
    } = this.props;
    actions.getGroup(groupID);
    Promise.all([actions.getGroupSyncables(groupID, mattermost_redux_constants["Groups"].SYNCABLE_TYPE_TEAM), actions.getGroupSyncables(groupID, mattermost_redux_constants["Groups"].SYNCABLE_TYPE_CHANNEL)]).then(() => {
      this.setState({
        loadingTeamsAndChannels: false
      });
    });
  }

}

group_details_defineProperty(group_details_GroupDetails, "propTypes", {
  groupID: prop_types_default.a.string.isRequired,
  group: prop_types_default.a.object,
  groupTeams: prop_types_default.a.arrayOf(prop_types_default.a.object),
  groupChannels: prop_types_default.a.arrayOf(prop_types_default.a.object),
  members: prop_types_default.a.arrayOf(prop_types_default.a.object),
  memberCount: prop_types_default.a.number.isRequired,
  actions: prop_types_default.a.shape({
    getGroup: prop_types_default.a.func.isRequired,
    getMembers: prop_types_default.a.func.isRequired,
    getGroupSyncables: prop_types_default.a.func.isRequired,
    link: prop_types_default.a.func.isRequired,
    unlink: prop_types_default.a.func.isRequired
  }).isRequired
});

group_details_defineProperty(group_details_GroupDetails, "defaultProps", {
  members: [],
  groupTeams: [],
  groupChannels: [],
  group: {
    display_name: ''
  },
  memberCount: 0
});
// CONCATENATED MODULE: ./components/admin_console/group_settings/group_details/index.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






function group_details_mapStateToProps(state, props) {
  const groupID = props.match.params.group_id;
  const group = Object(entities_groups["getGroup"])(state, groupID);
  const groupTeams = Object(entities_groups["getGroupTeams"])(state, groupID);
  const groupChannels = Object(entities_groups["getGroupChannels"])(state, groupID);
  const members = Object(entities_groups["getGroupMembers"])(state, groupID);
  const memberCount = Object(entities_groups["getGroupMemberCount"])(state, groupID);
  return {
    groupID,
    group,
    groupTeams,
    groupChannels,
    members,
    memberCount
  };
}

function group_details_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      getGroup: actions_groups["getGroup"],
      getMembers: actions_groups["getGroupMembers"],
      getGroupSyncables: actions_groups["getGroupSyncables"],
      link: actions_groups["linkGroupSyncable"],
      unlink: actions_groups["unlinkGroupSyncable"]
    }, dispatch)
  };
}

/* harmony default export */ var group_details = (Object(es["connect"])(group_details_mapStateToProps, group_details_mapDispatchToProps)(group_details_GroupDetails));
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/team/details/team_image.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.


class team_image_TeamButton extends react_default.a.PureComponent {
  render() {
    const {
      small,
      teamIconUrl
    } = this.props;
    const classModifier = small ? 'small' : 'large';
    let content;

    if (teamIconUrl) {
      content = react_default.a.createElement("div", {
        className: "team-btn__content"
      }, react_default.a.createElement("div", {
        className: `team-btn__image team-btn-${classModifier}__image`,
        style: {
          backgroundImage: `url('${teamIconUrl}')`
        }
      }));
    } else {
      let initials = this.props.displayName;
      initials = initials ? initials.replace(/\s/g, '').substring(0, 2) : '??';
      content = react_default.a.createElement("div", {
        className: "team-btn__content"
      }, react_default.a.createElement("div", {
        className: `team-btn__initials team-btn-${classModifier}__initials`
      }, initials));
    }

    return react_default.a.createElement("div", {
      className: "team-container"
    }, react_default.a.createElement("div", {
      className: `team-btn team-btn-${classModifier}`
    }, content));
  }

}
team_image_TeamButton.propTypes = {
  small: prop_types_default.a.bool,
  teamIconUrl: prop_types_default.a.string,
  displayName: prop_types_default.a.string
};
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/team/list/team_row.jsx
function team_row_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






class team_row_TeamRow extends react_default.a.Component {
  constructor(...args) {
    super(...args);

    team_row_defineProperty(this, "handleRowClick", () => {
      const {
        team,
        onRowClick
      } = this.props;
      onRowClick(team.id);
    });

    team_row_defineProperty(this, "render", () => {
      const {
        team
      } = this.props;
      const teamIconUrl = utils["J" /* imageURLForTeam */](team);
      return react_default.a.createElement("div", {
        className: 'group ',
        onClick: this.handleRowClick
      }, react_default.a.createElement("div", {
        className: "group-row group-row-large"
      }, react_default.a.createElement("div", {
        className: "group-name"
      }, react_default.a.createElement("div", {
        className: "col-sm-auto"
      }, react_default.a.createElement(team_image_TeamButton, {
        small: true,
        teamIconUrl: teamIconUrl,
        displayName: team.display_name
      })), react_default.a.createElement("div", {
        className: "col-sm-auto"
      }, react_default.a.createElement("b", null, team.display_name), team.description && react_default.a.createElement("div", {
        className: "overflow--ellipsis text-nowrap",
        style: {
          maxWidth: 500
        }
      }, team.description))), react_default.a.createElement("span", {
        className: "group-description"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: `admin.team_settings.team_row.managementMethod.${team.group_constrained ? 'group' : 'manual'}`,
        defaultMessage: team.group_constrained ? 'Group Sync' : 'Manual Invites'
      })), react_default.a.createElement("span", {
        className: "group-actions"
      }, react_default.a.createElement(react_router_dom["a" /* Link */], {
        to: `/admin_console/user_management/teams/${team.id}`
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.team_settings.team_row.configure",
        defaultMessage: "Edit"
      })))));
    });
  }

}

team_row_defineProperty(team_row_TeamRow, "propTypes", {
  team: prop_types_default.a.object.isRequired,
  onRowClick: prop_types_default.a.func.isRequired
});
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/abstract_list.jsx
function abstract_list_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





const abstract_list_PAGE_SIZE = 10;
class abstract_list_AbstractList extends react_default.a.PureComponent {
  constructor(props) {
    super(props);

    abstract_list_defineProperty(this, "previousPage", async e => {
      e.preventDefault();
      const page = this.state.page < 1 ? 0 : this.state.page - 1;
      this.setState({
        page,
        loading: true
      });
      this.performSearch(page);
    });

    abstract_list_defineProperty(this, "nextPage", async e => {
      e.preventDefault();
      const page = this.state.page + 1;
      this.setState({
        page,
        loading: true
      });
      this.performSearch(page);
    });

    abstract_list_defineProperty(this, "renderRows", () => {
      if (this.state.loading) {
        return react_default.a.createElement("div", {
          className: "groups-list-loading"
        }, react_default.a.createElement("i", {
          className: "fa fa-spinner fa-pulse fa-2x"
        }));
      }

      if (this.props.data.length === 0) {
        return react_default.a.createElement("div", {
          className: "groups-list-empty"
        }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: this.props.emptyListTextId,
          defaultMessage: this.props.emptyListTextDefaultMessage
        }));
      }

      return this.props.data.slice(0, abstract_list_PAGE_SIZE).map(this.props.renderRow);
    });

    abstract_list_defineProperty(this, "performSearch", page => {
      const newState = { ...this.state
      };
      delete newState.page;
      newState.loading = true;
      this.setState(newState);
      this.props.actions.getData(page, abstract_list_PAGE_SIZE).then(() => {
        if (this.props.onPageChangedCallback) {
          this.props.onPageChangedCallback(this.getPaging());
        }

        this.setState({
          loading: false
        });
      });
    });

    abstract_list_defineProperty(this, "render", () => {
      const {
        startCount,
        endCount,
        total
      } = this.getPaging();
      const lastPage = endCount === total;
      const firstPage = this.state.page === 0;
      return react_default.a.createElement("div", {
        className: "groups-list"
      }, this.props.header, react_default.a.createElement("div", {
        className: "groups-list--body"
      }, this.renderRows()), react_default.a.createElement("div", {
        className: "groups-list--footer"
      }, react_default.a.createElement("div", {
        className: "counter"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.team_channel_settings.list.paginatorCount",
        defaultMessage: "{startCount, number} - {endCount, number} of {total, number}",
        values: {
          startCount,
          endCount,
          total
        }
      })), react_default.a.createElement("button", {
        className: 'btn btn-link prev ' + (firstPage ? 'disabled' : ''),
        onClick: firstPage ? null : this.previousPage,
        disabled: firstPage
      }, react_default.a.createElement(previous_icon["a" /* default */], null)), react_default.a.createElement("button", {
        className: 'btn btn-link next ' + (lastPage ? 'disabled' : ''),
        onClick: lastPage ? null : this.nextPage,
        disabled: lastPage
      }, react_default.a.createElement(next_icon["a" /* default */], null))));
    });

    this.state = {
      loading: true,
      page: 0
    };
  }

  componentDidMount() {
    this.performSearch(this.state.page);
  }

  getPaging() {
    const startCount = this.state.page * abstract_list_PAGE_SIZE + 1;
    let endCount = this.state.page * abstract_list_PAGE_SIZE + abstract_list_PAGE_SIZE;
    const total = this.props.total;

    if (endCount > total) {
      endCount = total;
    }

    return {
      startCount,
      endCount,
      total
    };
  }

}

abstract_list_defineProperty(abstract_list_AbstractList, "propTypes", {
  data: prop_types_default.a.arrayOf(prop_types_default.a.object),
  onPageChangedCallback: prop_types_default.a.func,
  total: prop_types_default.a.number.isRequired,
  header: prop_types_default.a.node.isRequired,
  renderRow: prop_types_default.a.func.isRequired,
  emptyListTextId: prop_types_default.a.string.isRequired,
  emptyListTextDefaultMessage: prop_types_default.a.string.isRequired,
  actions: prop_types_default.a.shape({
    getData: prop_types_default.a.func.isRequired,
    removeGroup: prop_types_default.a.func
  }).isRequired
});

abstract_list_defineProperty(abstract_list_AbstractList, "defaultProps", {
  data: []
});
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/team/list/team_list.jsx
function team_list_extends() { team_list_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return team_list_extends.apply(this, arguments); }

function team_list_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






const Header = () => react_default.a.createElement("div", {
  className: "groups-list--header"
}, react_default.a.createElement("div", {
  className: "group-name"
}, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
  id: "admin.team_settings.team_list.nameHeader",
  defaultMessage: "Name"
})), react_default.a.createElement("div", {
  className: "group-description"
}, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
  id: "admin.team_settings.team_list.mappingHeader",
  defaultMessage: "Management"
})), react_default.a.createElement("div", {
  className: "group-actions"
}));

class team_list_TeamList extends react_default.a.PureComponent {
  constructor(...args) {
    super(...args);

    team_list_defineProperty(this, "renderRow", item => {
      return react_default.a.createElement(team_row_TeamRow, {
        key: item.id,
        team: item,
        onRowClick: this.onTeamClick
      });
    });

    team_list_defineProperty(this, "onTeamClick", id => {
      browser_history["a" /* browserHistory */].push(`/admin_console/user_management/teams/${id}`);
    });
  }

  render() {
    return react_default.a.createElement(abstract_list_AbstractList, team_list_extends({
      header: react_default.a.createElement(Header, null),
      renderRow: this.renderRow
    }, this.props));
  }

}
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/team/list/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.







const getSortedListOfTeams = Object(reselect_es["a" /* createSelector */])(entities_teams["getTeams"], teams => Object.values(teams).sort((a, b) => a.name.localeCompare(b.name)));

function team_list_mapStateToProps(state) {
  return {
    data: getSortedListOfTeams(state),
    total: state.entities.teams.totalCount || 0,
    emptyListTextId: Object(utils_i18n["b" /* t */])('admin.team_settings.team_list.no_teams_found'),
    emptyListTextDefaultMessage: 'No teams found'
  };
}

function team_list_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      getData: (page, pageSize) => Object(actions_teams["getTeams"])(page, pageSize, true)
    }, dispatch)
  };
}

/* harmony default export */ var team_list = (Object(es["connect"])(team_list_mapStateToProps, team_list_mapDispatchToProps)(team_list_TeamList));
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/team/team_settings.jsx
function team_settings_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






class team_settings_TeamsSettings extends react_default.a.Component {
  constructor(props) {
    super(props);

    team_settings_defineProperty(this, "onPageChangedCallback", ({
      startCount,
      endCount,
      total
    }) => {
      this.setState({
        startCount,
        endCount,
        total
      });
    });

    team_settings_defineProperty(this, "render", () => {
      return react_default.a.createElement("div", {
        className: "wrapper--fixed"
      }, react_default.a.createElement("div", {
        className: "admin-console__header"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.team_settings.groupsPageTitle",
        defaultMessage: "{siteName} Teams",
        values: {
          siteName: this.props.siteName
        }
      })), react_default.a.createElement("div", {
        className: "admin-console__wrapper"
      }, react_default.a.createElement("div", {
        className: "admin-console__content"
      }, react_default.a.createElement(admin_panel, {
        id: "teams",
        titleId: Object(utils_i18n["b" /* t */])('admin.team_settings.title'),
        titleDefault: "Teams",
        subtitleId: Object(utils_i18n["b" /* t */])('admin.team_settings.description'),
        subtitleDefault: 'Showing {startCount, number} - {endCount, number} of {total, number} teams. Search for and [manage team settings](www.mattermost.com/pl/default-team-management.html).',
        subtitleValues: { ...this.state
        }
      }, react_default.a.createElement(team_list, {
        onPageChangedCallback: this.onPageChangedCallback
      })))));
    });

    this.state = {
      startCount: 0,
      endCount: 1,
      total: 0
    };
  }

}

team_settings_defineProperty(team_settings_TeamsSettings, "propTypes", {
  siteName: prop_types_default.a.string.isRequired
});
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/team/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




function team_mapStateToProps(state) {
  const config = Object(general["getConfig"])(state);
  const siteName = config.SiteName;
  return {
    siteName
  };
}

/* harmony default export */ var team_channel_settings_team = (Object(es["connect"])(team_mapStateToProps)(team_settings_TeamsSettings));
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/remove_confirm_modal.jsx
function remove_confirm_modal_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




class remove_confirm_modal_RemoveConfirmModal extends react_default.a.PureComponent {
  render() {
    const {
      amount,
      inChannel
    } = this.props;
    const title = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.team_channel_settings.removeConfirmModal.title",
      defaultMessage: "Save and remove {amount} users?",
      values: {
        amount
      }
    });
    const message = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.team_channel_settings.removeConfirmModal.message",
      defaultMessage: "{amount} users will be removed on the next AD/LDAP synchronization. They are not in groups linked to this {type}. Are you sure you wish to remove these users?",
      values: {
        amount,
        type: inChannel ? 'channel' : 'group'
      }
    });
    const buttonClass = 'btn btn-primary';
    const button = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.team_channel_settings.removeConfirmModal.remove",
      defaultMessage: "Save and Remove Users"
    });
    const modalClass = 'discard-changes-modal';
    const {
      show,
      onConfirm,
      onCancel
    } = this.props;
    return react_default.a.createElement(confirm_modal["a" /* default */], {
      show: show,
      title: title,
      message: message,
      modalClass: modalClass,
      confirmButtonClass: buttonClass,
      confirmButtonText: button,
      onConfirm: onConfirm,
      onCancel: onCancel
    });
  }

}

remove_confirm_modal_defineProperty(remove_confirm_modal_RemoveConfirmModal, "propTypes", {
  /*
   * Bool whether the modal is shown
   */
  show: prop_types_default.a.bool.isRequired,

  /*
   * Action to call on confirm
   */
  onConfirm: prop_types_default.a.func.isRequired,

  /*
   * Action to call on cancel
   */
  onCancel: prop_types_default.a.func.isRequired,

  /*
   * Indicates if the message is for removal from channel or team
   */
  inChannel: prop_types_default.a.bool.isRequired,

  /*
   * Number of users to be removed
   */
  amount: prop_types_default.a.number.isRequired
});
// EXTERNAL MODULE: ./components/toggle_modal_button.jsx
var toggle_modal_button = __webpack_require__(1712);

// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/group/group_users_row.jsx
function group_group_users_row_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.







class group_users_row_AdminGroupUsersRow extends react_default.a.PureComponent {
  constructor(...args) {
    super(...args);

    group_group_users_row_defineProperty(this, "renderRolesColumn", member => {
      return member.roles.split(' ').map(role => utils["gb" /* localizeMessage */]('admin.permissions.roles.' + role + '.name', role)).join(', ');
    });

    group_group_users_row_defineProperty(this, "renderGroupsColumn", member => {
      if (member.groups.length === 1) {
        return member.groups[0].display_name;
      }

      return react_default.a.createElement(OverlayTrigger["a" /* default */], {
        placement: "top",
        overlay: react_default.a.createElement(Tooltip["a" /* default */], {
          id: "groupsTooltip"
        }, member.groups.map(g => g.display_name).join(', '))
      }, react_default.a.createElement("a", {
        href: "#"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: Object(utils_i18n["b" /* t */])('team_channel_settings.group.group_user_row.numberOfGroups'),
        defaultMessage: '{amount} Groups',
        values: {
          amount: member.groups.length
        }
      })));
    });

    group_group_users_row_defineProperty(this, "render", () => {
      const {
        user,
        lastPictureUpdate,
        displayName
      } = this.props;
      return react_default.a.createElement("div", {
        className: 'group '
      }, react_default.a.createElement("div", {
        className: "group-row",
        style: {
          padding: '30px 0px'
        }
      }, react_default.a.createElement("div", {
        className: "group-name"
      }, react_default.a.createElement("div", {
        className: "row"
      }, react_default.a.createElement("div", {
        className: "col-sm-2"
      }, react_default.a.createElement("img", {
        className: "group-user-profile-picture",
        alt: '',
        src: client["Client4"].getProfilePictureUrl(user.id, lastPictureUpdate)
      })), react_default.a.createElement("div", {
        className: "col-sm-10"
      }, react_default.a.createElement("div", {
        className: "row"
      }, react_default.a.createElement("b", null, '@' + user.username, "\xA0"), '-', "\xA0", displayName), react_default.a.createElement("div", {
        className: "row"
      }, user.email)))), react_default.a.createElement("span", {
        className: "group-user-removal-column group-description"
      }, this.renderRolesColumn(user)), react_default.a.createElement("span", {
        className: "group-user-removal-column group-description"
      }, this.renderGroupsColumn(user))));
    });
  }

}

group_group_users_row_defineProperty(group_users_row_AdminGroupUsersRow, "propTypes", {
  displayName: prop_types_default.a.string.isRequired,
  user: prop_types_default.a.object.isRequired,
  lastPictureUpdate: prop_types_default.a.number.isRequired
});
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/group/group_users.jsx
function group_group_users_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






const group_users_GROUP_MEMBERS_PAGE_SIZE = 10;
class group_users_AdminGroupUsers extends react_default.a.PureComponent {
  constructor(props) {
    super(props);

    group_group_users_defineProperty(this, "previousPage", async () => {
      const page = this.state.page < 1 ? 0 : this.state.page - 1;
      this.setState({
        page
      });
    });

    group_group_users_defineProperty(this, "nextPage", async () => {
      const page = (this.state.page + 1) * group_users_GROUP_MEMBERS_PAGE_SIZE >= this.props.total ? this.state.page : this.state.page + 1;
      this.setState({
        page
      });
    });

    group_group_users_defineProperty(this, "renderRows", () => this.props.members.map(member => react_default.a.createElement(group_users_row_AdminGroupUsersRow, {
      key: member.id,
      user: member,
      displayName: member.first_name + ' ' + member.last_name,
      lastPictureUpdate: member.last_picture_update || 0
    })));

    group_group_users_defineProperty(this, "renderPagination", () => {
      const {
        page
      } = this.state;
      const startCount = page * group_users_GROUP_MEMBERS_PAGE_SIZE + 1;
      let endCount = page * group_users_GROUP_MEMBERS_PAGE_SIZE + group_users_GROUP_MEMBERS_PAGE_SIZE;
      const total = this.props.total;

      if (endCount > total) {
        endCount = total;
      }

      const lastPage = endCount === total;
      const firstPage = page === 0;
      return react_default.a.createElement("div", {
        className: "groups-list--footer"
      }, react_default.a.createElement("div", {
        className: "counter"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.team_channel_settings.list.paginatorCount",
        defaultMessage: "{startCount, number} - {endCount, number} of {total, number}",
        values: {
          startCount,
          endCount,
          total
        }
      })), react_default.a.createElement("button", {
        className: 'btn btn-link prev ' + (firstPage ? 'disabled' : ''),
        onClick: this.previousPage,
        disabled: firstPage
      }, react_default.a.createElement(previous_icon["a" /* default */], null)), react_default.a.createElement("button", {
        className: 'btn btn-link next ' + (lastPage ? 'disabled' : ''),
        onClick: this.nextPage,
        disabled: lastPage
      }, react_default.a.createElement(next_icon["a" /* default */], null)));
    });

    group_group_users_defineProperty(this, "render", () => {
      return react_default.a.createElement("div", {
        className: "groups-list"
      }, react_default.a.createElement("div", {
        className: "groups-list--header"
      }, react_default.a.createElement("div", {
        className: "group-name"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.team_channel_settings.user_list.nameHeader",
        defaultMessage: "Name"
      })), react_default.a.createElement("div", {
        className: "group-description"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.team_channel_settings.user_list.roleHeader",
        defaultMessage: "Role"
      })), react_default.a.createElement("div", {
        className: "group-description"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.team_channel_settings.user_list.groupsHeader",
        defaultMessage: "Groups"
      }))), react_default.a.createElement("div", {
        className: "groups-list--body"
      }, this.renderRows()), this.renderPagination());
    });

    this.state = {
      page: 0
    };
  }

}

group_group_users_defineProperty(group_users_AdminGroupUsers, "propTypes", {
  members: prop_types_default.a.arrayOf(prop_types_default.a.object),
  total: prop_types_default.a.number.isRequired
});
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/users_to_be_removed_modal.jsx
function users_to_be_removed_modal_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






class users_to_be_removed_modal_UsersToBeRemovedModal extends react_default.a.PureComponent {
  constructor(props) {
    super(props);

    users_to_be_removed_modal_defineProperty(this, "handleHide", () => {
      this.setState({
        show: false
      });
    });

    this.state = {
      values: [],
      show: true
    };
  }

  render() {
    const {
      users,
      total
    } = this.props;
    const title = react_default.a.createElement(formatted_markdown_message["b" /* default */], {
      id: "admin.team_channel_settings.usersToBeRemovedModal.title",
      defaultMessage: "**{total} Users** To Be Removed",
      values: {
        total
      }
    });
    const message = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.team_channel_settings.usersToBeRemovedModal.message",
      defaultMessage: "The members listed below are not in any of the groups currently linked to this team. Because this team is set to be managed by group sync they will all be removed once saved."
    });
    const button = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.team_channel_settings.usersToBeRemovedModal.close",
      defaultMessage: "Close"
    });
    return react_default.a.createElement(Modal["a" /* default */], {
      dialogClassName: 'settings-modal',
      show: this.state.show,
      onHide: this.handleHide,
      id: "confirmModal",
      role: "dialog",
      "aria-labelledby": "confirmModalLabel"
    }, react_default.a.createElement(Modal["a" /* default */].Header, null, react_default.a.createElement(Modal["a" /* default */].Title, {
      componentClass: "h1",
      id: "confirmModalLabel"
    }, title)), react_default.a.createElement(Modal["a" /* default */].Body, null, react_default.a.createElement("div", {
      className: "group-users-to-remove-modal-description"
    }, message), react_default.a.createElement(group_users_AdminGroupUsers, {
      members: users,
      total: total
    })), react_default.a.createElement(Modal["a" /* default */].Footer, null, react_default.a.createElement("button", {
      autoFocus: true,
      type: "button",
      className: "btn btn-primary",
      onClick: this.handleHide,
      id: "closeModalButton"
    }, button)));
  }

}

users_to_be_removed_modal_defineProperty(users_to_be_removed_modal_UsersToBeRemovedModal, "propTypes", {
  /*
   * Number of users to be removed
   */
  total: prop_types_default.a.number.isRequired,

  /*
   * users to be removed
   */
  users: prop_types_default.a.arrayOf(prop_types_default.a.object).isRequired
});
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/errors.jsx
function errors_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






const NeedGroupsError = () => react_default.a.createElement(form_error["a" /* default */], {
  error: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: "admin.team_channel_settings.need_groups",
    defaultMessage: "You must add at least one group to manage this team by sync group members."
  })
});
class errors_UsersWillBeRemovedError extends react_default.a.PureComponent {
  render() {
    const {
      total,
      users
    } = this.props;
    return react_default.a.createElement(form_error["a" /* default */], {
      iconClassName: "fa-exclamation-triangle",
      textClassName: "has-warning",
      error: react_default.a.createElement("span", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.team_channel_settings.users_will_be_removed",
        defaultMessage: "{amount} Users will be removed from this team. They are not in groups linked to this team.",
        values: {
          amount: total
        }
      }), react_default.a.createElement(toggle_modal_button["a" /* default */], {
        className: "btn btn-link",
        dialogType: users_to_be_removed_modal_UsersToBeRemovedModal,
        dialogProps: {
          total,
          users
        }
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.team_channel_settings.view_removed_users",
        defaultMessage: "View These Users"
      })))
    });
  }

}

errors_defineProperty(errors_UsersWillBeRemovedError, "propTypes", {
  users: prop_types["arrayOf"](prop_types["object"]).isRequired,
  total: prop_types["number"].isRequired
});
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/save_changes_panel.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






function SaveChangesPanel({
  saveNeeded,
  onClick,
  saving,
  serverError,
  cancelLink
}) {
  return react_default.a.createElement("div", {
    className: "admin-console-save"
  }, react_default.a.createElement(save_button["a" /* default */], {
    saving: saving,
    disabled: !saveNeeded,
    onClick: onClick,
    savingMessage: Object(utils["gb" /* localizeMessage */])('admin.team_channel_settings.saving', 'Saving Config...')
  }), react_default.a.createElement(blockable_link, {
    className: "cancel-button",
    to: cancelLink
  }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: "admin.team_channel_settings.cancel",
    defaultMessage: "Cancel"
  })), react_default.a.createElement("div", {
    className: "error-message"
  }, serverError));
}
SaveChangesPanel.propTypes = {
  saving: prop_types_default.a.bool.isRequired,
  saveNeeded: prop_types_default.a.bool.isRequired,
  onClick: prop_types_default.a.func.isRequired,
  cancelLink: prop_types_default.a.string.isRequired,
  serverError: prop_types_default.a.node
};
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/team/details/team_profile.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.







function TeamProfile({
  team
}) {
  const teamIconUrl = utils["J" /* imageURLForTeam */](team);
  return react_default.a.createElement(admin_panel, {
    id: "team_profile",
    titleId: Object(utils_i18n["b" /* t */])('admin.team_settings.team_detail.profileTitle'),
    titleDefault: "Team Profile",
    subtitleId: Object(utils_i18n["b" /* t */])('admin.team_settings.team_detail.profileDescription'),
    subtitleDefault: "Summary of the team, including team name and description."
  }, react_default.a.createElement("div", {
    className: "group-teams-and-channels"
  }, react_default.a.createElement("div", {
    className: "group-teams-and-channels--body"
  }, react_default.a.createElement("div", {
    className: "row"
  }, react_default.a.createElement("div", {
    className: "col-sm-2"
  }, react_default.a.createElement(team_image_TeamButton, {
    displayName: team.display_name,
    teamIconUrl: teamIconUrl
  })), react_default.a.createElement("div", {
    className: "col-sm-10"
  }, react_default.a.createElement("div", {
    className: "row"
  }, react_default.a.createElement(formatted_markdown_message["b" /* default */], {
    id: "admin.team_settings.team_detail.teamName",
    defaultMessage: "**Team Name**:"
  }), react_default.a.createElement("br", null), team.display_name), react_default.a.createElement("div", {
    className: "row"
  }, react_default.a.createElement(formatted_markdown_message["b" /* default */], {
    id: "admin.team_settings.team_detail.teamDescription",
    defaultMessage: "**Team Description**:"
  }), react_default.a.createElement("br", null), team.description || utils["gb" /* localizeMessage */]('admin.team_settings.team_detail.profileNoDescription', 'No team description added.')))))));
}
TeamProfile.propTypes = {
  team: prop_types_default.a.object.isRequired
};
// CONCATENATED MODULE: ./components/toggle.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.


function Toggle({
  onToggle,
  toggled
}) {
  return react_default.a.createElement("button", {
    type: "button",
    onClick: onToggle,
    className: `btn btn-lg btn-toggle ${toggled && 'active'}`,
    "aria-pressed": toggled ? 'true' : 'false',
    autoComplete: "off"
  }, react_default.a.createElement("div", {
    className: "handle"
  }));
}
Toggle.propTypes = {
  onToggle: prop_types_default.a.func.isRequired,
  toggled: prop_types_default.a.bool
};
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/line_switch.jsx
function line_switch_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.



class line_switch_LineSwitch extends react_default.a.PureComponent {
  render() {
    const {
      title,
      subTitle,
      toggled,
      onToggle,
      children
    } = this.props;
    return react_default.a.createElement("div", {
      className: "padding-bottom x2"
    }, react_default.a.createElement("div", {
      className: "row align-items-start"
    }, react_default.a.createElement("div", {
      className: "col-sm-10"
    }, react_default.a.createElement("label", {
      className: "control-label"
    }, title)), react_default.a.createElement("div", {
      className: "col-sm-2"
    }, react_default.a.createElement(Toggle, {
      onToggle: onToggle,
      toggled: toggled
    }))), react_default.a.createElement("div", {
      className: "row"
    }, react_default.a.createElement("div", {
      className: "col-sm-10"
    }, react_default.a.createElement("div", {
      className: "help-text"
    }, subTitle))), children);
  }

}

line_switch_defineProperty(line_switch_LineSwitch, "propTypes", {
  title: prop_types_default.a.node.isRequired,
  toggled: prop_types_default.a.bool.isRequired,
  subTitle: prop_types_default.a.node.isRequired,
  onToggle: prop_types_default.a.func.isRequired,
  children: prop_types_default.a.node
});
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/team/details/team_modes.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.








const SyncGroupsToggle = ({
  syncChecked,
  allAllowedChecked,
  allowedDomainsChecked,
  allowedDomains,
  onToggle
}) => react_default.a.createElement(line_switch_LineSwitch, {
  toggled: syncChecked,
  onToggle: () => onToggle(!syncChecked, allAllowedChecked, allowedDomainsChecked, allowedDomains),
  title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: "admin.team_settings.team_details.syncGroupMembers",
    defaultMessage: "Sync Group Members"
  }),
  subTitle: react_default.a.createElement(formatted_markdown_message["b" /* default */], {
    id: "admin.team_settings.team_details.syncGroupMembersDescr",
    defaultMessage: "When enabled, adding and removing users from groups will add or remove them from this team. The only way of inviting members to this team is by adding the groups they belong to. [Learn More](www.mattermost.com/pl/default-ldap-group-constrained-team-channel.html)"
  })
});

SyncGroupsToggle.propTypes = {
  syncChecked: prop_types_default.a.bool.isRequired,
  allAllowedChecked: prop_types_default.a.bool.isRequired,
  allowedDomainsChecked: prop_types_default.a.bool.isRequired,
  allowedDomains: prop_types_default.a.string.isRequired,
  onToggle: prop_types_default.a.func.isRequired
};

const AllowAllToggle = ({
  syncChecked,
  allAllowedChecked,
  allowedDomainsChecked,
  allowedDomains,
  onToggle
}) => !syncChecked && react_default.a.createElement(line_switch_LineSwitch, {
  toggled: allAllowedChecked,
  onToggle: () => onToggle(syncChecked, !allAllowedChecked, allowedDomainsChecked, allowedDomains),
  title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: "admin.team_settings.team_details.anyoneCanJoin",
    defaultMessage: "Anyone can join this team"
  }),
  subTitle: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: "admin.team_settings.team_details.anyoneCanJoinDescr",
    defaultMessage: "This team can be discovered allowing anyone with an account to join this team."
  })
});

AllowAllToggle.propTypes = {
  syncChecked: prop_types_default.a.bool.isRequired,
  allAllowedChecked: prop_types_default.a.bool.isRequired,
  allowedDomainsChecked: prop_types_default.a.bool.isRequired,
  allowedDomains: prop_types_default.a.string.isRequired,
  onToggle: prop_types_default.a.func.isRequired
};

const AllowedDomainsToggle = ({
  syncChecked,
  allAllowedChecked,
  allowedDomainsChecked,
  allowedDomains,
  onToggle
}) => !syncChecked && react_default.a.createElement(line_switch_LineSwitch, {
  toggled: allowedDomainsChecked,
  onToggle: () => onToggle(syncChecked, allAllowedChecked, !allowedDomainsChecked, allowedDomains),
  title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: "admin.team_settings.team_details.specificDomains",
    defaultMessage: "Only specific email domains can join this team"
  }),
  subTitle: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: "admin.team_settings.team_details.specificDomainsDescr",
    defaultMessage: "Users can only join the team if their email matches one of the specified domains"
  })
}, react_default.a.createElement("div", {
  className: "help-text"
}, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
  id: "admin.team_settings.team_details.csvDomains",
  defaultMessage: "Comma Separated Email Domain List"
})), react_default.a.createElement("input", {
  type: "text",
  value: allowedDomains,
  placeholder: "mattermost.org",
  className: "form-control",
  onChange: e => undefined.setToggles(syncChecked, allAllowedChecked, allowedDomainsChecked, e.currentTarget.value)
}));

AllowedDomainsToggle.propTypes = {
  syncChecked: prop_types_default.a.bool.isRequired,
  allAllowedChecked: prop_types_default.a.bool.isRequired,
  allowedDomainsChecked: prop_types_default.a.bool.isRequired,
  allowedDomains: prop_types_default.a.string.isRequired,
  onToggle: prop_types_default.a.func.isRequired
};
const TeamModes = ({
  allAllowedChecked,
  syncChecked,
  allowedDomains,
  allowedDomainsChecked,
  onToggle
}) => react_default.a.createElement(admin_panel, {
  id: "team_manage",
  titleId: Object(utils_i18n["b" /* t */])('admin.team_settings.team_detail.manageTitle'),
  titleDefault: "Team Management",
  subtitleId: Object(utils_i18n["b" /* t */])('admin.team_settings.team_detail.manageDescription'),
  subtitleDefault: "Choose between inviting members manually or syncing members automatically from groups."
}, react_default.a.createElement("div", {
  className: "group-teams-and-channels"
}, react_default.a.createElement("div", {
  className: "group-teams-and-channels--body"
}, react_default.a.createElement(SyncGroupsToggle, {
  allAllowedChecked: allAllowedChecked,
  allowedDomainsChecked: allowedDomainsChecked,
  allowedDomains: allowedDomains,
  syncChecked: syncChecked,
  onToggle: onToggle
}), react_default.a.createElement(AllowAllToggle, {
  allAllowedChecked: allAllowedChecked,
  allowedDomainsChecked: allowedDomainsChecked,
  allowedDomains: allowedDomains,
  syncChecked: syncChecked,
  onToggle: onToggle
}), react_default.a.createElement(AllowedDomainsToggle, {
  allAllowedChecked: allAllowedChecked,
  allowedDomainsChecked: allowedDomainsChecked,
  allowedDomains: allowedDomains,
  syncChecked: syncChecked,
  onToggle: onToggle
}))));
TeamModes.propTypes = {
  syncChecked: prop_types_default.a.bool.isRequired,
  allAllowedChecked: prop_types_default.a.bool.isRequired,
  allowedDomainsChecked: prop_types_default.a.bool.isRequired,
  onToggle: prop_types_default.a.func.isRequired,
  allowedDomains: prop_types_default.a.string.isRequired
};
// EXTERNAL MODULE: ./components/add_groups_to_team_modal/index.js + 1 modules
var add_groups_to_team_modal = __webpack_require__(1825);

// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/group/group_row.jsx
function group_group_row_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.



class group_group_row_GroupRow extends react_default.a.Component {
  constructor(...args) {
    super(...args);

    group_group_row_defineProperty(this, "removeGroup", () => {
      this.props.removeGroup(this.props.group.id);
    });

    group_group_row_defineProperty(this, "render", () => {
      const {
        group
      } = this.props;
      return react_default.a.createElement("div", {
        className: 'group '
      }, react_default.a.createElement("div", {
        className: "group-row"
      }, react_default.a.createElement("span", {
        className: "group-name"
      }, group.display_name || group.name), react_default.a.createElement("span", {
        className: "group-description"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.team_channel_settings.group_row.members",
        defaultMessage: "{memberCount} members",
        values: {
          memberCount: group.member_count
        }
      })), react_default.a.createElement("span", {
        className: "group-actions"
      }, react_default.a.createElement("a", {
        href: "#",
        onClick: this.removeGroup
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.team_channel_settings.group_row.remove",
        defaultMessage: "Remove"
      })))));
    });
  }

}

group_group_row_defineProperty(group_group_row_GroupRow, "propTypes", {
  group: prop_types_default.a.object.isRequired,
  removeGroup: prop_types_default.a.func.isRequired
});
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/group/group_list.jsx
function group_list_extends() { group_list_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return group_list_extends.apply(this, arguments); }

function group_list_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






const group_list_Header = () => {
  return react_default.a.createElement("div", {
    className: "groups-list--header"
  }, react_default.a.createElement("div", {
    className: "group-name"
  }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: "admin.team_channel_settings.group_list.nameHeader",
    defaultMessage: "Name"
  })), react_default.a.createElement("div", {
    className: "group-description"
  }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: "admin.team_channel_settings.group_list.membersHeader",
    defaultMessage: "Members"
  })), react_default.a.createElement("div", {
    className: "group-actions"
  }));
};

class group_list_GroupList extends react_default.a.PureComponent {
  constructor(...args) {
    super(...args);

    group_list_defineProperty(this, "renderRow", item => {
      return react_default.a.createElement(group_group_row_GroupRow, {
        key: item.id,
        group: item,
        removeGroup: this.props.removeGroup
      });
    });
  }

  render() {
    return react_default.a.createElement(abstract_list_AbstractList, group_list_extends({
      header: react_default.a.createElement(group_list_Header, null),
      renderRow: this.renderRow
    }, this.props));
  }

}

group_list_defineProperty(group_list_GroupList, "propTypes", {
  removeGroup: prop_types_default.a.func
});
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/group/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




function group_mapStateToProps(state, {
  groups,
  totalGroups,
  isModeSync,
  onGroupRemoved
}) {
  return {
    data: groups,
    removeGroup: onGroupRemoved,
    emptyListTextId: isModeSync ? Object(utils_i18n["b" /* t */])('admin.team_channel_settings.group_list.no-synced-groups') : Object(utils_i18n["b" /* t */])('admin.team_channel_settings.group_list.no-groups'),
    emptyListTextDefaultMessage: isModeSync ? 'At least one group must be specified' : 'No groups specified yet',
    total: totalGroups
  };
}

function group_mapDispatchToProps() {
  return {
    actions: {
      getData: () => Promise.resolve()
    }
  };
}

/* harmony default export */ var team_channel_settings_group = (Object(es["connect"])(group_mapStateToProps, group_mapDispatchToProps)(group_list_GroupList));
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/team/details/team_groups.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.








const TeamGroups = ({
  onGroupRemoved,
  syncChecked,
  team,
  onAddCallback,
  totalGroups,
  groups,
  removedGroups
}) => react_default.a.createElement(admin_panel, {
  id: "team_groups",
  titleId: syncChecked ? Object(utils_i18n["b" /* t */])('admin.team_settings.team_detail.syncedGroupsTitle') : Object(utils_i18n["b" /* t */])('admin.team_settings.team_detail.groupsTitle'),
  titleDefault: syncChecked ? 'Synced Groups' : 'Groups',
  subtitleId: syncChecked ? Object(utils_i18n["b" /* t */])('admin.team_settings.team_detail.syncedGroupsDescription') : Object(utils_i18n["b" /* t */])('admin.team_settings.team_detail.groupsDescription'),
  subtitleDefault: syncChecked ? 'Add and remove team members based on their group membership.' : 'Group members will be added to the team.',
  button: react_default.a.createElement(toggle_modal_button["a" /* default */], {
    className: "btn btn-primary",
    dialogType: add_groups_to_team_modal["a" /* default */],
    dialogProps: {
      team,
      onAddCallback,
      skipCommit: true,
      excludeGroups: groups,
      includeGroups: removedGroups
    }
  }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: "admin.team_settings.team_details.add_group",
    defaultMessage: "Add Group"
  }))
}, react_default.a.createElement(team_channel_settings_group, {
  team: team,
  isModeSync: syncChecked,
  groups: groups,
  totalGroups: totalGroups,
  onGroupRemoved: onGroupRemoved
}));
TeamGroups.propTypes = {
  syncChecked: prop_types_default.a.bool.isRequired,
  team: prop_types_default.a.object.isRequired,
  totalGroups: prop_types_default.a.number.isRequired,
  groups: prop_types_default.a.arrayOf(prop_types_default.a.object).isRequired,
  removedGroups: prop_types_default.a.arrayOf(prop_types_default.a.object).isRequired,
  onAddCallback: prop_types_default.a.func.isRequired,
  onGroupRemoved: prop_types_default.a.func.isRequired
};
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/team/details/team_details.jsx
function team_details_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.












class team_details_TeamDetails extends react_default.a.Component {
  constructor(props) {
    super(props);

    team_details_defineProperty(this, "handleSubmit", async () => {
      this.setState({
        showRemoveConfirmation: false,
        saving: true
      });
      const {
        groups,
        allAllowedChecked,
        allowedDomainsChecked,
        allowedDomains,
        syncChecked
      } = this.state;
      let serverError = null;
      let saveNeeded = false;
      const {
        team,
        groups: origGroups,
        teamID,
        actions
      } = this.props;

      if (this.state.groups.length === 0 && syncChecked) {
        serverError = react_default.a.createElement(NeedGroupsError, null);
        saveNeeded = true;
      } else {
        const {
          error
        } = await actions.patchTeam({ ...team,
          group_constrained: syncChecked,
          allowed_domains: allowedDomainsChecked ? allowedDomains : '',
          allow_open_invite: allAllowedChecked
        });

        if (error) {
          serverError = react_default.a.createElement(form_error["a" /* default */], {
            error: error.message
          });
        } else {
          const unlink = origGroups.filter(g => !groups.includes(g)).map(g => actions.unlinkGroupSyncable(g.id, teamID, mattermost_redux_constants["Groups"].SYNCABLE_TYPE_TEAM));
          const link = groups.filter(g => !origGroups.includes(g)).map(g => actions.linkGroupSyncable(g.id, teamID, mattermost_redux_constants["Groups"].SYNCABLE_TYPE_TEAM));
          const result = await Promise.all([...unlink, ...link]);
          const resultWithError = result.find(r => r.error);

          if (resultWithError) {
            serverError = react_default.a.createElement(form_error["a" /* default */], {
              error: resultWithError.error.message
            });
          }
        }
      }

      this.setState({
        serverError,
        saving: false,
        saveNeeded
      });
      actions.setNavigationBlocked(saveNeeded);
    });

    team_details_defineProperty(this, "setToggles", (syncChecked, allAllowedChecked, allowedDomainsChecked, allowedDomains) => {
      this.setState({
        saveNeeded: true,
        syncChecked,
        allAllowedChecked: !syncChecked && allAllowedChecked,
        allowedDomainsChecked: !syncChecked && allowedDomainsChecked,
        allowedDomains
      }, () => {
        if (syncChecked) {
          this.processGroupsChange(this.state.groups);
        }
      });
      this.props.actions.setNavigationBlocked(true);
    });

    team_details_defineProperty(this, "handleGroupRemoved", gid => {
      const groups = this.state.groups.filter(g => g.id !== gid);
      this.setState({
        totalGroups: this.state.totalGroups - 1
      });
      this.processGroupsChange(groups);
    });

    team_details_defineProperty(this, "handleGroupChange", groupIDs => {
      const groups = [...this.state.groups, ...groupIDs.map(gid => this.props.allGroups[gid])];
      this.setState({
        totalGroups: this.state.totalGroups + groupIDs.length
      });
      this.processGroupsChange(groups);
    });

    team_details_defineProperty(this, "hideRemoveUsersModal", () => {
      this.setState({
        showRemoveConfirmation: false
      });
    });

    team_details_defineProperty(this, "showRemoveUsersModal", () => {
      if (this.state.usersToRemove > 0) {
        this.setState({
          showRemoveConfirmation: true
        });
      } else {
        this.handleSubmit();
      }
    });

    team_details_defineProperty(this, "render", () => {
      const {
        team
      } = this.props;
      const {
        totalGroups,
        saving,
        saveNeeded,
        serverError,
        groups,
        allAllowedChecked,
        allowedDomainsChecked,
        allowedDomains,
        syncChecked,
        showRemoveConfirmation,
        usersToRemove
      } = this.state;
      const removedGroups = this.props.groups.filter(g => !groups.includes(g));
      return react_default.a.createElement("div", {
        className: "wrapper--fixed"
      }, react_default.a.createElement("div", {
        className: "admin-console__header with-back"
      }, react_default.a.createElement("div", null, react_default.a.createElement(blockable_link, {
        to: "/admin_console/user_management/teams",
        className: "fa fa-angle-left back"
      }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.team_settings.team_detail.group_configuration",
        defaultMessage: "Team Configuration"
      }))), react_default.a.createElement("div", {
        className: "admin-console__wrapper"
      }, react_default.a.createElement("div", {
        className: "admin-console__content"
      }, react_default.a.createElement(remove_confirm_modal_RemoveConfirmModal, {
        amount: usersToRemove,
        inChannel: false,
        show: showRemoveConfirmation,
        onCancel: this.hideRemoveUsersModal,
        onConfirm: this.handleSubmit
      }), react_default.a.createElement(TeamProfile, {
        team: team
      }), react_default.a.createElement(TeamModes, {
        allAllowedChecked: allAllowedChecked,
        allowedDomainsChecked: allowedDomainsChecked,
        allowedDomains: allowedDomains,
        syncChecked: syncChecked,
        onToggle: this.setToggles
      }), react_default.a.createElement(TeamGroups, {
        syncChecked: syncChecked,
        team: team,
        groups: groups,
        removedGroups: removedGroups,
        totalGroups: totalGroups,
        onAddCallback: this.handleGroupChange,
        onGroupRemoved: this.handleGroupRemoved
      }))), react_default.a.createElement(SaveChangesPanel, {
        saving: saving,
        cancelLink: "/admin_console/user_management/teams",
        saveNeeded: saveNeeded,
        onClick: this.showRemoveUsersModal,
        serverError: serverError
      }));
    });

    const _team = props.team;
    this.state = {
      groups: props.groups,
      syncChecked: Boolean(_team.group_constrained),
      allAllowedChecked: _team.allow_open_invite,
      allowedDomainsChecked: _team.allowed_domains !== '',
      allowedDomains: _team.allowed_domains,
      saving: false,
      showRemoveConfirmation: false,
      usersToRemove: 0,
      totalGroups: props.totalGroups,
      saveNeeded: false,
      serverError: null
    };
  }

  componentDidUpdate(prevProps) {
    // TODO: find out how to do this without the lifecycle
    if (prevProps.totalGroups !== this.props.totalGroups) {
      // eslint-disable-next-line react/no-did-update-set-state
      this.setState({
        totalGroups: this.props.totalGroups
      });
    }
  }

  componentDidMount() {
    const {
      teamID,
      actions
    } = this.props;
    actions.getTeam(teamID).then(() => actions.getGroups(teamID)).then(() => this.setState({
      groups: this.props.groups
    }));
  }

  async processGroupsChange(groups) {
    const {
      teamID,
      actions
    } = this.props;
    actions.setNavigationBlocked(true);
    let serverError = null;
    let usersToRemove = 0;

    if (this.state.syncChecked) {
      try {
        if (groups.length === 0) {
          serverError = react_default.a.createElement(NeedGroupsError, null);
        } else {
          const result = await actions.membersMinusGroupMembers(teamID, groups.map(g => g.id));
          usersToRemove = result.data.total_count;

          if (usersToRemove > 0) {
            serverError = react_default.a.createElement(errors_UsersWillBeRemovedError, {
              total: usersToRemove,
              users: result.data.users
            });
          }
        }
      } catch (ex) {
        serverError = ex;
      }
    }

    this.setState({
      groups,
      usersToRemove,
      saveNeeded: true,
      serverError
    });
  }

}

team_details_defineProperty(team_details_TeamDetails, "propTypes", {
  teamID: prop_types_default.a.string.isRequired,
  team: prop_types_default.a.object.isRequired,
  totalGroups: prop_types_default.a.number.isRequired,
  groups: prop_types_default.a.arrayOf(prop_types_default.a.object),
  allGroups: prop_types_default.a.object.isRequired,
  actions: prop_types_default.a.shape({
    setNavigationBlocked: prop_types_default.a.func.isRequired,
    getTeam: prop_types_default.a.func.isRequired,
    linkGroupSyncable: prop_types_default.a.func.isRequired,
    unlinkGroupSyncable: prop_types_default.a.func.isRequired,
    membersMinusGroupMembers: prop_types_default.a.func.isRequired,
    getGroups: prop_types_default.a.func.isRequired,
    patchTeam: prop_types_default.a.func.isRequired
  }).isRequired
});

team_details_defineProperty(team_details_TeamDetails, "defaultProps", {
  team: {
    display_name: '',
    id: ''
  }
});
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/team/details/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.









function details_mapStateToProps(state, props) {
  const teamID = props.match.params.team_id;
  const team = Object(entities_teams["getTeam"])(state, teamID);
  const groups = Object(entities_groups["getGroupsAssociatedToTeam"])(state, teamID);
  const totalGroups = state.entities.teams.groupsAssociatedToTeam && state.entities.teams.groupsAssociatedToTeam[teamID] ? state.entities.teams.groupsAssociatedToTeam[teamID].totalCount : 0;
  const allGroups = Object(entities_groups["getAllGroups"])(state, teamID);
  return {
    team,
    groups,
    totalGroups,
    allGroups,
    teamID
  };
}

function details_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      getTeam: actions_teams["getTeam"],
      getGroups: actions_groups["getGroupsAssociatedToTeam"],
      patchTeam: actions_teams["patchTeam"],
      linkGroupSyncable: actions_groups["linkGroupSyncable"],
      unlinkGroupSyncable: actions_groups["unlinkGroupSyncable"],
      membersMinusGroupMembers: actions_teams["membersMinusGroupMembers"],
      setNavigationBlocked: admin_actions["C" /* setNavigationBlocked */]
    }, dispatch)
  };
}

/* harmony default export */ var details = (Object(es["connect"])(details_mapStateToProps, details_mapDispatchToProps)(team_details_TeamDetails));
// EXTERNAL MODULE: ./mattermost-redux/selectors/entities/channels.js
var entities_channels = __webpack_require__(15);

// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/channel/list/channel_row.jsx
function channel_row_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.







class channel_row_ChannelRow extends react_default.a.Component {
  constructor(...args) {
    super(...args);

    channel_row_defineProperty(this, "handleRowClick", () => {
      const {
        channel,
        onRowClick
      } = this.props;
      onRowClick(channel.id);
    });

    channel_row_defineProperty(this, "render", () => {
      const {
        channel
      } = this.props;
      return react_default.a.createElement("div", {
        className: 'group ',
        onClick: this.handleRowClick
      }, react_default.a.createElement("div", {
        className: "group-row"
      }, react_default.a.createElement("span", {
        className: "group-name"
      }, channel.type === constants["g" /* Constants */].PRIVATE_CHANNEL ? react_default.a.createElement(lock_icon["a" /* default */], {
        className: "channel-icon channel-icon__lock"
      }) : react_default.a.createElement(globe_icon["a" /* default */], {
        className: "channel-icon channel-icon__globe"
      }), channel.name), react_default.a.createElement("span", {
        className: "group-description"
      }, channel.team_name), react_default.a.createElement("span", {
        className: "group-description"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: `admin.channel_settings.channel_row.managementMethod.${channel.group_constrained ? 'group' : 'manual'}`,
        defaultMessage: channel.group_constrained ? 'Group Sync' : 'Manual Invites'
      })), react_default.a.createElement("span", {
        className: "group-actions"
      }, react_default.a.createElement(react_router_dom["a" /* Link */], {
        to: `/admin_console/user_management/channels/${channel.id}`
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.channel_settings.channel_row.configure",
        defaultMessage: "Edit"
      })))));
    });
  }

}

channel_row_defineProperty(channel_row_ChannelRow, "propTypes", {
  channel: prop_types_default.a.object.isRequired,
  onRowClick: prop_types_default.a.func.isRequired
});
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/channel/list/channel_list.jsx
function channel_list_extends() { channel_list_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return channel_list_extends.apply(this, arguments); }

function channel_list_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






const channel_list_Header = () => {
  return react_default.a.createElement("div", {
    className: "groups-list--header"
  }, react_default.a.createElement("div", {
    className: "group-name"
  }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: "admin.channel_settings.channel_list.nameHeader",
    defaultMessage: "Name"
  })), react_default.a.createElement("div", {
    className: "group-description"
  }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: "admin.channel_settings.channel_list.teamHeader",
    defaultMessage: "Team"
  })), react_default.a.createElement("div", {
    className: "group-description"
  }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: "admin.channel_settings.channel_list.managementHeader",
    defaultMessage: "Management"
  })), react_default.a.createElement("div", {
    className: "group-actions"
  }));
};

class channel_list_ChannelList extends react_default.a.PureComponent {
  constructor(...args) {
    super(...args);

    channel_list_defineProperty(this, "renderRow", item => {
      return react_default.a.createElement(channel_row_ChannelRow, {
        key: item.id,
        channel: item,
        onRowClick: this.onChannelClick
      });
    });

    channel_list_defineProperty(this, "onChannelClick", id => {
      browser_history["a" /* browserHistory */].push(`/admin_console/user_management/channels/${id}`);
    });
  }

  render() {
    return react_default.a.createElement(abstract_list_AbstractList, channel_list_extends({
      header: react_default.a.createElement(channel_list_Header, null),
      renderRow: this.renderRow
    }, this.props));
  }

}
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/channel/list/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.









const compareByTypeAndName = (a, b) => {
  if (a.type === b.type) {
    return a.name.localeCompare(b.name);
  }

  return a.type === constants["g" /* Constants */].OPEN_CHANNEL ? 1 : -1;
};

const getSortedListOfChannels = Object(reselect_es["a" /* createSelector */])(entities_channels["getAllChannels"], teams => Object.values(teams).filter(c => c.type === constants["g" /* Constants */].OPEN_CHANNEL || c.type === constants["g" /* Constants */].PRIVATE_CHANNEL).sort(compareByTypeAndName));

function channel_list_mapStateToProps(state) {
  return {
    data: getSortedListOfChannels(state),
    total: state.entities.channels.totalCount,
    emptyListTextId: Object(utils_i18n["b" /* t */])('admin.channel_settings.channel_list.no_channels_found'),
    emptyListTextDefaultMessage: 'No channels found'
  };
}

function channel_list_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      getData: actions_channels["getAllChannelsWithCount"]
    }, dispatch)
  };
}

/* harmony default export */ var channel_list = (Object(es["connect"])(channel_list_mapStateToProps, channel_list_mapDispatchToProps)(channel_list_ChannelList));
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/channel/channel_settings.jsx
function channel_settings_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.






class channel_settings_ChannelsSettings extends react_default.a.Component {
  constructor(props) {
    super(props);

    channel_settings_defineProperty(this, "onPageChangedCallback", ({
      startCount,
      endCount,
      total
    }) => {
      this.setState({
        startCount,
        endCount,
        total
      });
    });

    channel_settings_defineProperty(this, "render", () => {
      return react_default.a.createElement("div", {
        className: "wrapper--fixed"
      }, react_default.a.createElement("div", {
        className: "admin-console__header"
      }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.channel_settings.groupsPageTitle",
        defaultMessage: "{siteName} Channels",
        values: {
          siteName: this.props.siteName
        }
      })), react_default.a.createElement("div", {
        className: "admin-console__wrapper"
      }, react_default.a.createElement("div", {
        className: "admin-console__content"
      }, react_default.a.createElement(admin_panel, {
        id: "channels",
        titleId: Object(utils_i18n["b" /* t */])('admin.channel_settings.title'),
        titleDefault: "Channels",
        subtitleId: Object(utils_i18n["b" /* t */])('admin.channel_settings.description'),
        subtitleDefault: 'Showing {startCount, number} - {endCount, number} of {total, number} channels. Search for and manage channel settings.',
        subtitleValues: { ...this.state
        }
      }, react_default.a.createElement(channel_list, {
        onPageChangedCallback: this.onPageChangedCallback
      })))));
    });

    this.state = {
      startCount: 0,
      endCount: 1,
      total: 0
    };
  }

}

channel_settings_defineProperty(channel_settings_ChannelsSettings, "propTypes", {
  siteName: prop_types_default.a.string.isRequired
});
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/channel/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




function channel_mapStateToProps(state) {
  const config = Object(general["getConfig"])(state);
  const siteName = config.SiteName;
  return {
    siteName
  };
}

/* harmony default export */ var team_channel_settings_channel = (Object(es["connect"])(channel_mapStateToProps)(channel_settings_ChannelsSettings));
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/channel/details/channel_modes.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.








const channel_modes_SyncGroupsToggle = ({
  isSynced,
  isPublic,
  onToggle
}) => react_default.a.createElement(line_switch_LineSwitch, {
  toggled: isSynced,
  onToggle: () => onToggle(!isSynced, isPublic),
  title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: "admin.channel_settings.channel_details.syncGroupMembers",
    defaultMessage: "Sync Group Members"
  }),
  subTitle: react_default.a.createElement(formatted_markdown_message["b" /* default */], {
    id: "admin.channel_settings.channel_details.syncGroupMembersDescr",
    defaultMessage: "When enabled, adding and removing users from groups will add or remove them from this channel. The only way of inviting members to this channel is by adding the groups they belong to. [Learn More](www.mattermost.com/pl/default-ldap-group-constrained-team-channel.html)"
  })
});

channel_modes_SyncGroupsToggle.propTypes = {
  isPublic: prop_types_default.a.bool.isRequired,
  isSynced: prop_types_default.a.bool.isRequired,
  onToggle: prop_types_default.a.func.isRequired
};

const channel_modes_AllowAllToggle = ({
  isSynced,
  isPublic,
  onToggle
}) => !isSynced && react_default.a.createElement(line_switch_LineSwitch, {
  toggled: isPublic,
  onToggle: () => onToggle(isSynced, !isPublic),
  title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: "admin.channel_settings.channel_details.isPublic",
    defaultMessage: "Public channel or private channel"
  }),
  subTitle: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: "admin.channel_settings.channel_details.isPublicDescr",
    defaultMessage: "If `public` the channel is discoverable and any user can join, or if `private` invitations are required."
  })
});

channel_modes_AllowAllToggle.propTypes = {
  isPublic: prop_types_default.a.bool.isRequired,
  isSynced: prop_types_default.a.bool.isRequired,
  onToggle: prop_types_default.a.func.isRequired
};
const ChannelModes = ({
  isPublic,
  isSynced,
  onToggle
}) => react_default.a.createElement(admin_panel, {
  id: "channel_manage",
  titleId: Object(utils_i18n["b" /* t */])('admin.channel_settings.channel_detail.manageTitle'),
  titleDefault: "Channel Management",
  subtitleId: Object(utils_i18n["b" /* t */])('admin.channel_settings.channel_detail.manageDescription'),
  subtitleDefault: "Choose between inviting members manually or syncing members automatically from groups."
}, react_default.a.createElement("div", {
  className: "group-teams-and-channels"
}, react_default.a.createElement("div", {
  className: "group-teams-and-channels--body"
}, react_default.a.createElement(channel_modes_SyncGroupsToggle, {
  isPublic: isPublic,
  isSynced: isSynced,
  onToggle: onToggle
}), react_default.a.createElement(channel_modes_AllowAllToggle, {
  isPublic: isPublic,
  isSynced: isSynced,
  onToggle: onToggle
}))));
ChannelModes.propTypes = {
  isPublic: prop_types_default.a.bool.isRequired,
  isSynced: prop_types_default.a.bool.isRequired,
  onToggle: prop_types_default.a.func.isRequired
};
// EXTERNAL MODULE: ./components/add_groups_to_channel_modal/index.js + 1 modules
var add_groups_to_channel_modal = __webpack_require__(1826);

// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/channel/details/channel_groups.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.








const ChannelGroups = ({
  onGroupRemoved,
  onAddCallback,
  totalGroups,
  groups,
  removedGroups,
  channel,
  synced
}) => react_default.a.createElement(admin_panel, {
  id: "channel_groups",
  titleId: synced ? Object(utils_i18n["b" /* t */])('admin.channel_settings.channel_detail.syncedGroupsTitle') : Object(utils_i18n["b" /* t */])('admin.channel_settings.channel_detail.groupsTitle'),
  titleDefault: synced ? 'Synced Groups' : 'Groups',
  subtitleId: synced ? Object(utils_i18n["b" /* t */])('admin.channel_settings.channel_detail.syncedGroupsDescription') : Object(utils_i18n["b" /* t */])('admin.channel_settings.channel_detail.groupsDescription'),
  subtitleDefault: synced ? 'Add and remove channel members based on their group membership.' : 'Group members will be added to the channel.',
  button: react_default.a.createElement(toggle_modal_button["a" /* default */], {
    className: "btn btn-primary",
    dialogType: add_groups_to_channel_modal["a" /* default */],
    dialogProps: {
      channel,
      onAddCallback,
      skipCommit: true,
      includeGroups: removedGroups,
      excludeGroups: groups
    }
  }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
    id: "admin.channel_settings.channel_details.add_group",
    defaultMessage: "Add Group"
  }))
}, channel.id && react_default.a.createElement(team_channel_settings_group, {
  channel: channel,
  groups: groups,
  totalGroups: totalGroups,
  onGroupRemoved: onGroupRemoved,
  isModeSync: synced
}));
ChannelGroups.propTypes = {
  synced: prop_types_default.a.bool.isRequired,
  channel: prop_types_default.a.object.isRequired,
  onAddCallback: prop_types_default.a.func.isRequired,
  totalGroups: prop_types_default.a.number.isRequired,
  groups: prop_types_default.a.arrayOf(prop_types_default.a.object).isRequired,
  removedGroups: prop_types_default.a.arrayOf(prop_types_default.a.object).isRequired,
  onGroupRemoved: prop_types_default.a.func.isRequired
};
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/channel/details/channel_profile.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





const ChannelProfile = props => react_default.a.createElement(admin_panel, {
  id: "channel_profile",
  titleId: Object(utils_i18n["b" /* t */])('admin.channel_settings.channel_detail.profileTitle'),
  titleDefault: "Channel Profile",
  subtitleId: Object(utils_i18n["b" /* t */])('admin.channel_settings.channel_detail.profileDescription'),
  subtitleDefault: "Summary of the channel, including the channel name."
}, react_default.a.createElement("div", {
  className: "group-teams-and-channels"
}, react_default.a.createElement("div", {
  className: "group-teams-and-channels--body"
}, react_default.a.createElement(formatted_markdown_message["b" /* default */], {
  id: "admin.channel_settings.channel_detail.channelName",
  defaultMessage: "**Name**"
}), react_default.a.createElement("br", null), props.channel.name)));
ChannelProfile.propTypes = {
  channel: prop_types_default.a.object.isRequired
};
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/channel/details/channel_details.jsx
function channel_details_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.













class channel_details_ChannelDetails extends react_default.a.Component {
  constructor(props) {
    super(props);

    channel_details_defineProperty(this, "setToggles", (isSynced, isPublic) => {
      this.setState({
        saveNeeded: true,
        isSynced,
        isPublic: !isSynced && isPublic
      });
      this.props.actions.setNavigationBlocked(true);
    });

    channel_details_defineProperty(this, "handleGroupRemoved", gid => {
      const groups = this.state.groups.filter(g => g.id !== gid);
      this.setState({
        totalGroups: this.state.totalGroups - 1
      });
      this.processGroupsChange(groups);
    });

    channel_details_defineProperty(this, "handleGroupChange", groupIDs => {
      const groups = [...this.state.groups, ...groupIDs.map(gid => this.props.allGroups[gid])];
      this.setState({
        totalGroups: this.state.totalGroups + groupIDs.length
      });
      this.processGroupsChange(groups);
    });

    channel_details_defineProperty(this, "hideRemoveUsersModal", () => {
      this.setState({
        showRemoveConfirmation: false
      });
    });

    channel_details_defineProperty(this, "showRemoveUsersModal", () => {
      if (this.state.usersToRemove > 0) {
        this.setState({
          showRemoveConfirmation: true
        });
      } else {
        this.handleSubmit();
      }
    });

    channel_details_defineProperty(this, "handleSubmit", async () => {
      this.setState({
        showRemoveConfirmation: false,
        saving: true
      });
      const {
        groups,
        isSynced,
        isPublic
      } = this.state;
      let serverError = null;
      let saveNeeded = false;
      const {
        groups: origGroups,
        channelID,
        actions,
        channel
      } = this.props;

      if (this.state.groups.length === 0 && isSynced) {
        serverError = react_default.a.createElement(NeedGroupsError, null);
        saveNeeded = true;
      } else {
        const {
          error
        } = await actions.patchChannel(channel.id, { ...channel,
          group_constrained: isSynced,
          type: isPublic ? constants["N" /* default */].OPEN_CHANNEL : constants["N" /* default */].PRIVATE_CHANNEL
        });

        if (error) {
          serverError = react_default.a.createElement(form_error["a" /* default */], {
            error: error.message
          });
        } else {
          const unlink = origGroups.filter(g => !groups.includes(g)).map(g => actions.unlinkGroupSyncable(g.id, channelID, mattermost_redux_constants["Groups"].SYNCABLE_TYPE_CHANNEL));
          const link = groups.filter(g => !origGroups.includes(g)).map(g => actions.linkGroupSyncable(g.id, channelID, mattermost_redux_constants["Groups"].SYNCABLE_TYPE_CHANNEL));
          const result = await Promise.all([...unlink, ...link]);
          const resultWithError = result.find(r => r.error);

          if (resultWithError) {
            serverError = react_default.a.createElement(form_error["a" /* default */], {
              error: resultWithError.error.message
            });
          }
        }
      }

      this.setState({
        serverError,
        saving: false,
        saveNeeded
      });
      actions.setNavigationBlocked(saveNeeded);
    });

    channel_details_defineProperty(this, "render", () => {
      const {
        totalGroups,
        saving,
        saveNeeded,
        serverError,
        isSynced,
        isPublic,
        groups,
        showRemoveConfirmation,
        usersToRemove
      } = this.state;
      const {
        channel
      } = this.props;
      const removedGroups = this.props.groups.filter(g => !groups.includes(g));
      return react_default.a.createElement("div", {
        className: "wrapper--fixed"
      }, react_default.a.createElement("div", {
        className: "admin-console__header with-back"
      }, react_default.a.createElement("div", null, react_default.a.createElement(blockable_link, {
        to: "/admin_console/user_management/channels",
        className: "fa fa-angle-left back"
      }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.channel_settings.channel_detail.channel_configuration",
        defaultMessage: "Channel Configuration"
      }))), react_default.a.createElement("div", {
        className: "admin-console__wrapper"
      }, react_default.a.createElement("div", {
        className: "admin-console__content"
      }, react_default.a.createElement(remove_confirm_modal_RemoveConfirmModal, {
        amount: usersToRemove,
        inChannel: false,
        show: showRemoveConfirmation,
        onCancel: this.hideRemoveUsersModal,
        onConfirm: this.handleSubmit
      }), react_default.a.createElement(ChannelProfile, {
        channel: channel
      }), react_default.a.createElement(ChannelModes, {
        isPublic: isPublic,
        isSynced: isSynced,
        onToggle: this.setToggles
      }), react_default.a.createElement(ChannelGroups, {
        synced: isSynced,
        channel: channel,
        totalGroups: totalGroups,
        groups: groups,
        removedGroups: removedGroups,
        onAddCallback: this.handleGroupChange,
        onGroupRemoved: this.handleGroupRemoved
      }))), react_default.a.createElement(SaveChangesPanel, {
        saving: saving,
        saveNeeded: saveNeeded,
        onClick: this.showRemoveUsersModal,
        serverError: serverError,
        cancelLink: "/admin_console/user_management/channels"
      }));
    });

    this.state = {
      isSynced: Boolean(props.channel.group_constrained),
      isPublic: props.channel.type === constants["N" /* default */].OPEN_CHANNEL,
      saving: false,
      totalGroups: props.totalGroups,
      showRemoveConfirmation: false,
      usersToRemove: 0,
      groups: props.groups,
      saveNeeded: false,
      serverError: null
    };
  }

  componentDidUpdate(prevProps) {
    // TODO: find out how to do this without the lifecycle
    if (prevProps.totalGroups !== this.props.totalGroups) {
      // eslint-disable-next-line react/no-did-update-set-state
      this.setState({
        totalGroups: this.props.totalGroups
      });
    }
  }

  componentDidMount() {
    const {
      channelID,
      actions
    } = this.props;
    actions.getChannel(channelID).then(() => actions.getGroups(channelID)).then(() => this.setState({
      groups: this.props.groups
    }));
  }

  processGroupsChange(groups) {
    const {
      actions,
      channelID
    } = this.props;
    actions.setNavigationBlocked(true);
    let serverError = null;
    let usersToRemove = 0;

    if (this.state.isSynced) {
      try {
        if (groups.length === 0) {
          serverError = react_default.a.createElement(NeedGroupsError, null);
        } else {
          actions.membersMinusGroupMembers(channelID, groups.map(g => g.id)).then(result => {
            usersToRemove = result.data.total_count;

            if (usersToRemove > 0) {
              serverError = react_default.a.createElement(errors_UsersWillBeRemovedError, {
                total: usersToRemove,
                users: result.data.users
              });
            }
          });
        }
      } catch (ex) {
        serverError = ex;
      }
    }

    this.setState({
      groups,
      usersToRemove,
      saveNeeded: true,
      serverError
    });
  }

}

channel_details_defineProperty(channel_details_ChannelDetails, "propTypes", {
  channelID: prop_types_default.a.string.isRequired,
  channel: prop_types_default.a.object.isRequired,
  groups: prop_types_default.a.arrayOf(prop_types_default.a.object).isRequired,
  totalGroups: prop_types_default.a.number.isRequired,
  allGroups: prop_types_default.a.object.isRequired,
  actions: prop_types_default.a.shape({
    getGroups: prop_types_default.a.func.isRequired,
    linkGroupSyncable: prop_types_default.a.func.isRequired,
    unlinkGroupSyncable: prop_types_default.a.func.isRequired,
    membersMinusGroupMembers: prop_types_default.a.func.isRequired,
    setNavigationBlocked: prop_types_default.a.func.isRequired,
    getChannel: prop_types_default.a.func.isRequired,
    patchChannel: prop_types_default.a.func.isRequired
  }).isRequired
});

channel_details_defineProperty(channel_details_ChannelDetails, "defaultProps", {
  channel: {
    display_name: '',
    id: ''
  }
});
// CONCATENATED MODULE: ./components/admin_console/team_channel_settings/channel/details/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.









function channel_details_mapStateToProps(state, props) {
  const channelID = props.match.params.channel_id;
  const channel = Object(entities_channels["getChannel"])(state, channelID) || {};
  const groups = Object(entities_groups["getGroupsAssociatedToChannel"])(state, channelID);
  const allGroups = Object(entities_groups["getAllGroups"])(state, channel.team_id);
  const totalGroups = state.entities.channels.groupsAssociatedToChannel && state.entities.channels.groupsAssociatedToChannel[channelID] ? state.entities.channels.groupsAssociatedToChannel[channelID].totalCount : 0;
  return {
    channel,
    allGroups,
    totalGroups,
    groups,
    channelID
  };
}

function channel_details_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      getChannel: actions_channels["getChannel"],
      getGroups: actions_groups["getGroupsAssociatedToChannel"],
      linkGroupSyncable: actions_groups["linkGroupSyncable"],
      unlinkGroupSyncable: actions_groups["unlinkGroupSyncable"],
      membersMinusGroupMembers: actions_channels["membersMinusGroupMembers"],
      patchChannel: actions_channels["patchChannel"],
      setNavigationBlocked: admin_actions["C" /* setNavigationBlocked */]
    }, dispatch)
  };
}

/* harmony default export */ var channel_details = (Object(es["connect"])(channel_details_mapStateToProps, channel_details_mapDispatchToProps)(channel_details_ChannelDetails));
// CONCATENATED MODULE: ./components/admin_console/password_settings.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.









class password_settings_PasswordSettings extends admin_settings_AdminSettings {
  constructor(props) {
    super(props);
    this.getConfigFromState = this.getConfigFromState.bind(this);
    this.renderSettings = this.renderSettings.bind(this);
    this.getSampleErrorMsg = this.getSampleErrorMsg.bind(this);
    this.handlePasswordLengthChange = this.handlePasswordLengthChange.bind(this);
    this.handleCheckboxChange = this.handleCheckboxChange.bind(this);
    this.state = Object.assign(this.state, {
      passwordMinimumLength: props.config.PasswordSettings.MinimumLength,
      passwordLowercase: props.config.PasswordSettings.Lowercase,
      passwordNumber: props.config.PasswordSettings.Number,
      passwordUppercase: props.config.PasswordSettings.Uppercase,
      passwordSymbol: props.config.PasswordSettings.Symbol,
      maximumLoginAttempts: props.config.ServiceSettings.MaximumLoginAttempts
    }); // Update sample message from config settings

    Object(utils_i18n["b" /* t */])('user.settings.security.passwordErrorLowercase');
    Object(utils_i18n["b" /* t */])('user.settings.security.passwordErrorLowercaseUppercase');
    Object(utils_i18n["b" /* t */])('user.settings.security.passwordErrorLowercaseUppercaseNumber');
    Object(utils_i18n["b" /* t */])('user.settings.security.passwordErrorLowercaseUppercaseNumberSymbol');
    Object(utils_i18n["b" /* t */])('user.settings.security.passwordErrorLowercaseUppercaseSymbol');
    Object(utils_i18n["b" /* t */])('user.settings.security.passwordErrorLowercaseNumber');
    Object(utils_i18n["b" /* t */])('user.settings.security.passwordErrorLowercaseNumberSymbol');
    Object(utils_i18n["b" /* t */])('user.settings.security.passwordErrorLowercaseSymbol');
    Object(utils_i18n["b" /* t */])('user.settings.security.passwordErrorUppercase');
    Object(utils_i18n["b" /* t */])('user.settings.security.passwordErrorUppercaseNumber');
    Object(utils_i18n["b" /* t */])('user.settings.security.passwordErrorUppercaseNumberSymbol');
    Object(utils_i18n["b" /* t */])('user.settings.security.passwordErrorUppercaseSymbol');
    Object(utils_i18n["b" /* t */])('user.settings.security.passwordErrorNumber');
    Object(utils_i18n["b" /* t */])('user.settings.security.passwordErrorNumberSymbol');
    Object(utils_i18n["b" /* t */])('user.settings.security.passwordErrorSymbol');
    let sampleErrorMsgId = 'user.settings.security.passwordError';

    if (props.config.PasswordSettings.Lowercase) {
      sampleErrorMsgId += 'Lowercase';
    }

    if (props.config.PasswordSettings.Uppercase) {
      sampleErrorMsgId += 'Uppercase';
    }

    if (props.config.PasswordSettings.Number) {
      sampleErrorMsgId += 'Number';
    }

    if (props.config.PasswordSettings.Symbol) {
      sampleErrorMsgId += 'Symbol';
    }

    this.sampleErrorMsg = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: sampleErrorMsgId,
      default: "Your password must contain between {min} and {max} characters.",
      values: {
        min: this.state.passwordMinimumLength || constants["N" /* default */].MIN_PASSWORD_LENGTH,
        max: constants["N" /* default */].MAX_PASSWORD_LENGTH
      }
    });
  }

  getConfigFromState(config) {
    config.PasswordSettings.MinimumLength = this.parseIntNonZero(this.state.passwordMinimumLength, constants["N" /* default */].MIN_PASSWORD_LENGTH);
    config.PasswordSettings.Lowercase = this.refs.lowercase.checked;
    config.PasswordSettings.Uppercase = this.refs.uppercase.checked;
    config.PasswordSettings.Number = this.refs.number.checked;
    config.PasswordSettings.Symbol = this.refs.symbol.checked;
    config.ServiceSettings.MaximumLoginAttempts = this.parseIntNonZero(this.state.maximumLoginAttempts);
    return config;
  }

  getStateFromConfig(config) {
    return {
      passwordMinimumLength: config.PasswordSettings.MinimumLength,
      passwordLowercase: config.PasswordSettings.Lowercase,
      passwordNumber: config.PasswordSettings.Number,
      passwordUppercase: config.PasswordSettings.Uppercase,
      passwordSymbol: config.PasswordSettings.Symbol,
      maximumLoginAttempts: config.ServiceSettings.MaximumLoginAttempts
    };
  }

  getSampleErrorMsg(minLength) {
    if (this.props.config.PasswordSettings.MinimumLength > constants["N" /* default */].MAX_PASSWORD_LENGTH || this.props.config.PasswordSettings.MinimumLength < constants["N" /* default */].MIN_PASSWORD_LENGTH) {
      return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "user.settings.security.passwordMinLength",
        default: "Invalid minimum length, cannot show preview."
      });
    }

    let sampleErrorMsgId = 'user.settings.security.passwordError';

    if (this.refs.lowercase.checked) {
      sampleErrorMsgId += 'Lowercase';
    }

    if (this.refs.uppercase.checked) {
      sampleErrorMsgId += 'Uppercase';
    }

    if (this.refs.number.checked) {
      sampleErrorMsgId += 'Number';
    }

    if (this.refs.symbol.checked) {
      sampleErrorMsgId += 'Symbol';
    }

    return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: sampleErrorMsgId,
      default: "Your password must contain between {min} and {max} characters.",
      values: {
        min: minLength || constants["N" /* default */].MIN_PASSWORD_LENGTH,
        max: constants["N" /* default */].MAX_PASSWORD_LENGTH
      }
    });
  }

  handlePasswordLengthChange(id, value) {
    this.sampleErrorMsg = this.getSampleErrorMsg(value);
    this.handleChange(id, value);
  }

  handleCheckboxChange(id, value) {
    this.sampleErrorMsg = this.getSampleErrorMsg(this.state.passwordMinimumLength);
    this.handleChange(id, value);
  }

  renderTitle() {
    return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.security.password",
      defaultMessage: "Password"
    });
  }

  renderSettings() {
    return react_default.a.createElement(settings_group_SettingsGroup, null, react_default.a.createElement("div", null, react_default.a.createElement(admin_console_text_setting, {
      id: "passwordMinimumLength",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.password.minimumLength",
        defaultMessage: "Minimum Password Length:"
      }),
      placeholder: utils["gb" /* localizeMessage */]('admin.password.minimumLengthExample', 'E.g.: "5"'),
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.password.minimumLengthDescription",
        defaultMessage: "Minimum number of characters required for a valid password. Must be a whole number greater than or equal to {min} and less than or equal to {max}.",
        values: {
          min: constants["N" /* default */].MIN_PASSWORD_LENGTH,
          max: constants["N" /* default */].MAX_PASSWORD_LENGTH
        }
      }),
      value: this.state.passwordMinimumLength,
      onChange: this.handlePasswordLengthChange,
      setByEnv: this.isSetByEnv('PasswordSettings.MinimumLength')
    }), react_default.a.createElement(setting_Settings, {
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "passwordRequirements",
        defaultMessage: "Password Requirements:"
      })
    }, react_default.a.createElement("div", null, react_default.a.createElement("label", {
      className: "checkbox-inline"
    }, react_default.a.createElement("input", {
      type: "checkbox",
      ref: "lowercase",
      defaultChecked: this.state.passwordLowercase,
      name: "admin.password.lowercase",
      onChange: this.handleCheckboxChange
    }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.password.lowercase",
      defaultMessage: "At least one lowercase letter"
    }))), react_default.a.createElement("div", null, react_default.a.createElement("label", {
      className: "checkbox-inline"
    }, react_default.a.createElement("input", {
      type: "checkbox",
      ref: "uppercase",
      defaultChecked: this.state.passwordUppercase,
      name: "admin.password.uppercase",
      onChange: this.handleCheckboxChange
    }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.password.uppercase",
      defaultMessage: "At least one uppercase letter"
    }))), react_default.a.createElement("div", null, react_default.a.createElement("label", {
      className: "checkbox-inline"
    }, react_default.a.createElement("input", {
      type: "checkbox",
      ref: "number",
      defaultChecked: this.state.passwordNumber,
      name: "admin.password.number",
      onChange: this.handleCheckboxChange
    }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.password.number",
      defaultMessage: "At least one number"
    }))), react_default.a.createElement("div", null, react_default.a.createElement("label", {
      className: "checkbox-inline"
    }, react_default.a.createElement("input", {
      type: "checkbox",
      ref: "symbol",
      defaultChecked: this.state.passwordSymbol,
      name: "admin.password.symbol",
      onChange: this.handleCheckboxChange
    }), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.password.symbol",
      defaultMessage: "At least one symbol (e.g. \"~!@#$%^&*()\")"
    }))), react_default.a.createElement("div", null, react_default.a.createElement("br", null), react_default.a.createElement("label", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.password.preview",
      defaultMessage: "Error message preview:"
    })), react_default.a.createElement("br", null), this.sampleErrorMsg))), react_default.a.createElement(admin_console_text_setting, {
      id: "maximumLoginAttempts",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.service.attemptTitle",
        defaultMessage: "Maximum Login Attempts:"
      }),
      placeholder: utils["gb" /* localizeMessage */]('admin.service.attemptExample', 'E.g.: "10"'),
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.service.attemptDescription",
        defaultMessage: "Login attempts allowed before user is locked out and required to reset password via email."
      }),
      value: this.state.maximumLoginAttempts,
      onChange: this.handleChange,
      setByEnv: this.isSetByEnv('ServiceSettings.MaximumLoginAttempts')
    }));
  }

}
// CONCATENATED MODULE: ./components/admin_console/push_settings.jsx
function push_settings_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.









const PUSH_NOTIFICATIONS_OFF = 'off';
const PUSH_NOTIFICATIONS_MHPNS = 'mhpns';
const PUSH_NOTIFICATIONS_MTPNS = 'mtpns';
const PUSH_NOTIFICATIONS_CUSTOM = 'custom';
class push_settings_PushSettings extends admin_settings_AdminSettings {
  constructor(props) {
    super(props);

    push_settings_defineProperty(this, "isPushNotificationServerSetByEnv", () => {
      // Assume that if one of these has been set using an environment variable,
      // all of them have been set that way
      return this.isSetByEnv('EmailSettings.SendPushNotifications') || this.isSetByEnv('EmailSettings.PushNotificationServer');
    });

    this.canSave = this.canSave.bind(this);
    this.handleAgreeChange = this.handleAgreeChange.bind(this);
    this.getConfigFromState = this.getConfigFromState.bind(this);
    this.renderSettings = this.renderSettings.bind(this);
    this.handleDropdownChange = this.handleDropdownChange.bind(this);
  }

  canSave() {
    return this.state.pushNotificationServerType !== PUSH_NOTIFICATIONS_MHPNS || this.state.agree;
  }

  handleAgreeChange(e) {
    this.setState({
      agree: e.target.checked
    });
  }

  handleDropdownChange(id, value) {
    if (id === 'pushNotificationServerType') {
      this.setState({
        agree: false
      });

      if (value === PUSH_NOTIFICATIONS_MHPNS) {
        this.setState({
          pushNotificationServer: constants["N" /* default */].MHPNS
        });
      } else if (value === PUSH_NOTIFICATIONS_MTPNS) {
        this.setState({
          pushNotificationServer: constants["N" /* default */].MTPNS
        });
      } else if (value === PUSH_NOTIFICATIONS_CUSTOM && (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MTPNS || this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS)) {
        this.setState({
          pushNotificationServer: ''
        });
      }
    }

    this.handleChange(id, value);
  }

  getConfigFromState(config) {
    config.EmailSettings.SendPushNotifications = this.state.pushNotificationServerType !== PUSH_NOTIFICATIONS_OFF;
    config.EmailSettings.PushNotificationServer = this.state.pushNotificationServer.trim();
    config.TeamSettings.MaxNotificationsPerChannel = this.state.maxNotificationsPerChannel;
    return config;
  }

  getStateFromConfig(config) {
    let pushNotificationServerType = PUSH_NOTIFICATIONS_CUSTOM;
    let agree = false;

    if (!config.EmailSettings.SendPushNotifications) {
      pushNotificationServerType = PUSH_NOTIFICATIONS_OFF;
    } else if (config.EmailSettings.PushNotificationServer === constants["N" /* default */].MHPNS && this.props.license.IsLicensed === 'true' && this.props.license.MHPNS === 'true') {
      pushNotificationServerType = PUSH_NOTIFICATIONS_MHPNS;
      agree = true;
    } else if (config.EmailSettings.PushNotificationServer === constants["N" /* default */].MTPNS) {
      pushNotificationServerType = PUSH_NOTIFICATIONS_MTPNS;
    }

    let pushNotificationServer = config.EmailSettings.PushNotificationServer;

    if (pushNotificationServerType === PUSH_NOTIFICATIONS_MTPNS) {
      pushNotificationServer = constants["N" /* default */].MTPNS;
    } else if (pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS) {
      pushNotificationServer = constants["N" /* default */].MHPNS;
    }

    const maxNotificationsPerChannel = config.TeamSettings.MaxNotificationsPerChannel;
    return {
      pushNotificationServerType,
      pushNotificationServer,
      maxNotificationsPerChannel,
      agree
    };
  }

  renderTitle() {
    return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.environment.pushNotificationServer",
      defaultMessage: "Push Notification Server"
    });
  }

  renderSettings() {
    const pushNotificationServerTypes = [];
    pushNotificationServerTypes.push({
      value: PUSH_NOTIFICATIONS_OFF,
      text: utils["gb" /* localizeMessage */]('admin.email.pushOff', 'Do not send push notifications')
    });

    if (this.props.license.IsLicensed === 'true' && this.props.license.MHPNS === 'true') {
      pushNotificationServerTypes.push({
        value: PUSH_NOTIFICATIONS_MHPNS,
        text: utils["gb" /* localizeMessage */]('admin.email.mhpns', 'Use HPNS connection with uptime SLA to send notifications to iOS and Android apps')
      });
    }

    pushNotificationServerTypes.push({
      value: PUSH_NOTIFICATIONS_MTPNS,
      text: utils["gb" /* localizeMessage */]('admin.email.mtpns', 'Use TPNS connection to send notifications to iOS and Android apps')
    });
    pushNotificationServerTypes.push({
      value: PUSH_NOTIFICATIONS_CUSTOM,
      text: utils["gb" /* localizeMessage */]('admin.email.selfPush', 'Manually enter Push Notification Service location')
    });
    let sendHelpText = null;
    let pushServerHelpText = null;

    if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_OFF) {
      sendHelpText = react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "admin.email.pushOffHelp",
        defaultMessage: "Please see [documentation on push notifications](!https://about.mattermost.com/default-mobile-push-notifications/) to learn more about setup options."
      });
    } else if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS) {
      pushServerHelpText = react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "admin.email.mhpnsHelp",
        defaultMessage: "Download [Mattermost iOS app](!https://about.mattermost.com/mattermost-ios-app/) from iTunes. Download [Mattermost Android app](!https://about.mattermost.com/mattermost-android-app/) from Google Play. Learn more about the [Mattermost Hosted Push Notification Service](!https://about.mattermost.com/default-hpns/)."
      });
    } else if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MTPNS) {
      pushServerHelpText = react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "admin.email.mtpnsHelp",
        defaultMessage: "Download [Mattermost iOS app](!https://about.mattermost.com/mattermost-ios-app/) from iTunes. Download [Mattermost Android app](!https://about.mattermost.com/mattermost-android-app/) from Google Play. Learn more about the [Mattermost Test Push Notification Service](!https://about.mattermost.com/default-tpns/)."
      });
    } else {
      pushServerHelpText = react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "admin.email.easHelp",
        defaultMessage: "Learn more about compiling and deploying your own mobile apps from an [Enterprise App Store](!https://about.mattermost.com/default-enterprise-app-store)."
      });
    }

    let tosCheckbox;

    if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS) {
      tosCheckbox = react_default.a.createElement("div", {
        className: "form-group"
      }, react_default.a.createElement("div", {
        className: "col-sm-4"
      }), react_default.a.createElement("div", {
        className: "col-sm-8"
      }, react_default.a.createElement("input", {
        type: "checkbox",
        ref: "agree",
        checked: this.state.agree,
        onChange: this.handleAgreeChange
      }), react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "admin.email.agreeHPNS",
        defaultMessage: " I understand and accept the Mattermost Hosted Push Notification Service [Terms of Service](!https://about.mattermost.com/hpns-terms/) and [Privacy Policy](!https://about.mattermost.com/hpns-privacy/)."
      })));
    }

    return react_default.a.createElement(settings_group_SettingsGroup, null, react_default.a.createElement(dropdown_setting_DropdownSetting, {
      id: "pushNotificationServerType",
      values: pushNotificationServerTypes,
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.email.pushTitle",
        defaultMessage: "Enable Push Notifications: "
      }),
      value: this.state.pushNotificationServerType,
      onChange: this.handleDropdownChange,
      helpText: sendHelpText,
      setByEnv: this.isPushNotificationServerSetByEnv()
    }), tosCheckbox, react_default.a.createElement(admin_console_text_setting, {
      id: "pushNotificationServer",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.email.pushServerTitle",
        defaultMessage: "Push Notification Server:"
      }),
      placeholder: utils["gb" /* localizeMessage */]('admin.email.pushServerEx', 'E.g.: "https://push-test.mattermost.com"'),
      helpText: pushServerHelpText,
      value: this.state.pushNotificationServer,
      onChange: this.handleChange,
      disabled: this.state.pushNotificationServerType !== PUSH_NOTIFICATIONS_CUSTOM,
      setByEnv: this.isSetByEnv('EmailSettings.PushNotificationServer')
    }), react_default.a.createElement(admin_console_text_setting, {
      id: "maxNotificationsPerChannel",
      type: "number",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.team.maxNotificationsPerChannelTitle",
        defaultMessage: "Max Notifications Per Channel:"
      }),
      placeholder: utils["gb" /* localizeMessage */]('admin.team.maxNotificationsPerChannelExample', 'E.g.: "1000"'),
      helpText: react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "admin.team.maxNotificationsPerChannelDescription",
        defaultMessage: "Maximum total number of users in a channel before users typing messages, @all, @here, and @channel no longer send notifications because of performance."
      }),
      value: this.state.maxNotificationsPerChannel,
      onChange: this.handleChange,
      setByEnv: this.isSetByEnv('TeamSettings.MaxNotificationsPerChannel')
    }));
  }

}
// CONCATENATED MODULE: ./components/admin_console/data_retention_settings.jsx
function data_retention_settings_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.










class data_retention_settings_DataRetentionSettings extends admin_settings_AdminSettings {
  constructor(props) {
    super(props);

    data_retention_settings_defineProperty(this, "handleSubmit", e => {
      e.preventDefault();
      this.setState({
        showConfirmModal: true
      });
    });

    data_retention_settings_defineProperty(this, "handleSaveConfirmed", () => {
      this.setState({
        showConfirmModal: false
      });
      this.doSubmit();
    });

    data_retention_settings_defineProperty(this, "handleSaveCanceled", () => {
      this.setState({
        showConfirmModal: false
      });
    });

    this.getConfigFromState = this.getConfigFromState.bind(this);
    this.renderSettings = this.renderSettings.bind(this);
    this.renderConfirmModal = this.renderConfirmModal.bind(this);
  }

  getConfigFromState(config) {
    config.DataRetentionSettings.EnableMessageDeletion = this.state.enableMessageDeletion === 'true';
    config.DataRetentionSettings.EnableFileDeletion = this.state.enableFileDeletion === 'true';
    config.DataRetentionSettings.MessageRetentionDays = parseInt(this.state.messageRetentionDays, 10);
    config.DataRetentionSettings.FileRetentionDays = parseInt(this.state.fileRetentionDays, 10);
    config.DataRetentionSettings.DeletionJobStartTime = this.state.deletionJobStartTime;
    return config;
  }

  getStateFromConfig(config) {
    return {
      enableMessageDeletion: String(config.DataRetentionSettings.EnableMessageDeletion),
      enableFileDeletion: String(config.DataRetentionSettings.EnableFileDeletion),
      messageRetentionDays: config.DataRetentionSettings.MessageRetentionDays,
      fileRetentionDays: config.DataRetentionSettings.FileRetentionDays,
      deletionJobStartTime: config.DataRetentionSettings.DeletionJobStartTime,
      showConfirmModal: false
    };
  }

  renderConfirmModal() {
    const title = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.data_retention.confirmChangesModal.title",
      defaultMessage: "Confirm data retention policy"
    });
    const messageList = [];

    if (this.state.enableMessageDeletion === 'true') {
      messageList.push(react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.data_retention.confirmChangesModal.description.itemMessageDeletion",
        defaultMessage: "All messages will be permanently deleted after {days} days.",
        values: {
          days: react_default.a.createElement("strong", null, this.state.messageRetentionDays)
        }
      }));
    } else {
      messageList.push(react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.data_retention.confirmChangesModal.description.itemMessageIndefinite",
        defaultMessage: "All messages will be retained indefinitely."
      }));
    }

    if (this.state.enableFileDeletion === 'true') {
      messageList.push(react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.data_retention.confirmChangesModal.description.itemFileDeletion",
        defaultMessage: "All files will be permanently deleted after {days} days.",
        values: {
          days: react_default.a.createElement("strong", null, this.state.fileRetentionDays)
        }
      }));
    } else {
      messageList.push(react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.data_retention.confirmChangesModal.description.itemFileIndefinite",
        defaultMessage: "All files will be retained indefinitely."
      }));
    }

    const message = react_default.a.createElement("div", null, react_default.a.createElement("p", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.data_retention.confirmChangesModal.description",
      defaultMessage: "Are you sure you want to apply the following data retention policy:"
    })), react_default.a.createElement("ul", null, messageList.map((item, index) => {
      return react_default.a.createElement("li", {
        key: index
      }, item);
    })), react_default.a.createElement("p", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.data_retention.confirmChangesModal.clarification",
      defaultMessage: "Once deleted, messages and files cannot be retrieved."
    })));
    const confirmButton = react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.data_retention.confirmChangesModal.confirm",
      defaultMessage: "Confirm Settings"
    });
    return react_default.a.createElement(confirm_modal["a" /* default */], {
      show: this.state.showConfirmModal,
      title: title,
      message: message,
      confirmButtonText: confirmButton,
      onConfirm: this.handleSaveConfirmed,
      onCancel: this.handleSaveCanceled
    });
  }

  renderTitle() {
    return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.data_retention.title",
      defaultMessage: "Data Retention Policy"
    });
  }

  renderSettings() {
    const enableMessageDeletionOptions = [{
      value: 'false',
      text: utils["gb" /* localizeMessage */]('admin.data_retention.keepMessagesIndefinitely', 'Keep all messages indefinitely')
    }, {
      value: 'true',
      text: utils["gb" /* localizeMessage */]('admin.data_retention.keepMessageForTime', 'Keep messages for a set amount of time')
    }];
    const enableFileDeletionOptions = [{
      value: 'false',
      text: utils["gb" /* localizeMessage */]('admin.data_retention.keepFilesIndefinitely', 'Keep all files indefinitely')
    }, {
      value: 'true',
      text: utils["gb" /* localizeMessage */]('admin.data_retention.keepFilesForTime', 'Keep files for a set amount of time')
    }];
    let messageRetentionDaysSetting = '';

    if (this.state.enableMessageDeletion === 'true') {
      messageRetentionDaysSetting = react_default.a.createElement(admin_console_text_setting, {
        id: "messageRetentionDays",
        label: react_default.a.createElement("span", null),
        placeholder: utils["gb" /* localizeMessage */]('admin.data_retention.messageRetentionDays.example', 'E.g.: "60"'),
        helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.data_retention.messageRetentionDays.description",
          defaultMessage: "Set how many days messages are kept in Mattermost. Messages, including file attachments older than the duration you set will be deleted nightly. The minimum time is one day."
        }),
        value: this.state.messageRetentionDays,
        onChange: this.handleChange,
        setByEnv: this.isSetByEnv('DataRetentionSettings.MessageRetentionDays')
      });
    }

    let fileRetentionDaysSetting = '';

    if (this.state.enableFileDeletion === 'true') {
      fileRetentionDaysSetting = react_default.a.createElement(admin_console_text_setting, {
        id: "fileRetentionDays",
        label: react_default.a.createElement("span", null),
        placeholder: utils["gb" /* localizeMessage */]('admin.data_retention.fileRetentionDays.example', 'E.g.: "60"'),
        helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.data_retention.fileRetentionDays.description",
          defaultMessage: "Set how many days file uploads are kept in Mattermost. Files older than the duration you set will be deleted nightly. The minimum time is one day."
        }),
        value: this.state.fileRetentionDays,
        onChange: this.handleChange,
        setByEnv: this.isSetByEnv('DataRetentionSettings.FileRetentionDays')
      });
    }

    const confirmModal = this.renderConfirmModal();
    return react_default.a.createElement(settings_group_SettingsGroup, null, confirmModal, react_default.a.createElement("div", {
      className: "banner"
    }, react_default.a.createElement("div", {
      className: "banner__content"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.data_retention.note.description",
      defaultMessage: "Caution: Once a message or a file is deleted, the action is irreversible. Please be careful when setting up a custom data retention policy. See {documentationLink} to learn more.",
      values: {
        documentationLink: react_default.a.createElement("a", {
          href: "https://about.mattermost.com/default-dataretention-documentation/",
          rel: "noopener noreferrer",
          target: "_blank"
        }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.data_retention.note.description.documentationLinkText",
          defaultMessage: "documentation"
        }))
      }
    }))), react_default.a.createElement(dropdown_setting_DropdownSetting, {
      id: "enableMessageDeletion",
      values: enableMessageDeletionOptions,
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.data_retention.enableMessageDeletion.title",
        defaultMessage: "Message Retention:"
      }),
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.data_retention.enableMessageDeletion.description",
        defaultMessage: "Set how long Mattermost keeps messages in channels and direct messages."
      }),
      value: this.state.enableMessageDeletion,
      onChange: this.handleChange,
      setByEnv: this.isSetByEnv('DataRetentionSettings.EnableMessageDeletion')
    }), messageRetentionDaysSetting, react_default.a.createElement(dropdown_setting_DropdownSetting, {
      id: "enableFileDeletion",
      values: enableFileDeletionOptions,
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.data_retention.enableFileDeletion.title",
        defaultMessage: "File Retention:"
      }),
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.data_retention.enableFileDeletion.description",
        defaultMessage: "Set how long Mattermost keeps file uploads in channels and direct messages."
      }),
      value: this.state.enableFileDeletion,
      onChange: this.handleChange,
      setByEnv: this.isSetByEnv('DataRetentionSettings.EnableFileDeletion')
    }), fileRetentionDaysSetting, react_default.a.createElement(admin_console_text_setting, {
      id: "deletionJobStartTime",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.data_retention.deletionJobStartTime.title",
        defaultMessage: "Data Deletion Time:"
      }),
      placeholder: utils["gb" /* localizeMessage */]('admin.data_retention.deletionJobStartTime.example', 'E.g.: "02:00"'),
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.data_retention.deletionJobStartTime.description",
        defaultMessage: "Set the start time of the daily scheduled data retention job. Choose a time when fewer people are using your system. Must be a 24-hour time stamp in the form HH:MM."
      }),
      value: this.state.deletionJobStartTime,
      onChange: this.handleChange,
      setByEnv: this.isSetByEnv('DataRetentionSettings.DeletionJobStartTime')
    }), react_default.a.createElement(admin_console_jobs, {
      jobType: constants["n" /* JobTypes */].DATA_RETENTION,
      disabled: this.state.enableMessageDeletion !== 'true' && this.state.enableFileDeletion !== 'true',
      createJobButtonText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.data_retention.createJob.title",
        defaultMessage: "Run Deletion Job Now"
      }),
      createJobHelpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.data_retention.createJob.help",
        defaultMessage: "Initiates a Data Retention deletion job immediately."
      })
    }));
  }

}
// CONCATENATED MODULE: ./components/admin_console/message_export_settings.jsx
function message_export_settings_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.













const exportFormats = {
  EXPORT_FORMAT_CSV: 'csv',
  EXPORT_FORMAT_ACTIANCE: 'actiance',
  EXPORT_FORMAT_GLOBALRELAY: 'globalrelay'
};
class message_export_settings_MessageExportSettings extends admin_settings_AdminSettings {
  constructor(props) {
    super(props);

    message_export_settings_defineProperty(this, "getJobDetails", job => {
      if (job.data && job.data.messages_exported) {
        return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.complianceExport.messagesExportedCount",
          defaultMessage: "{count} messages exported.",
          values: {
            count: job.data.messages_exported
          }
        });
      }

      return null;
    });

    this.getConfigFromState = this.getConfigFromState.bind(this);
    this.renderSettings = this.renderSettings.bind(this);
  }

  getConfigFromState(config) {
    config.MessageExportSettings.EnableExport = this.state.enableComplianceExport;
    config.MessageExportSettings.ExportFormat = this.state.exportFormat;
    config.MessageExportSettings.DailyRunTime = this.state.exportJobStartTime;

    if (this.state.exportFormat === exportFormats.EXPORT_FORMAT_GLOBALRELAY) {
      config.MessageExportSettings.GlobalRelaySettings = {
        CustomerType: this.state.globalRelayCustomerType,
        SmtpUsername: this.state.globalRelaySmtpUsername,
        SmtpPassword: this.state.globalRelaySmtpPassword,
        EmailAddress: this.state.globalRelayEmailAddress
      };
    }

    return config;
  }

  getStateFromConfig(config) {
    const state = {
      enableComplianceExport: config.MessageExportSettings.EnableExport,
      exportFormat: config.MessageExportSettings.ExportFormat,
      exportJobStartTime: config.MessageExportSettings.DailyRunTime
    };

    if (config.MessageExportSettings.GlobalRelaySettings) {
      state.globalRelayCustomerType = config.MessageExportSettings.GlobalRelaySettings.CustomerType;
      state.globalRelaySmtpUsername = config.MessageExportSettings.GlobalRelaySettings.SmtpUsername;
      state.globalRelaySmtpPassword = config.MessageExportSettings.GlobalRelaySettings.SmtpPassword;
      state.globalRelayEmailAddress = config.MessageExportSettings.GlobalRelaySettings.EmailAddress;
    }

    return state;
  }

  renderTitle() {
    return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.complianceExport.title",
      defaultMessage: "Compliance Export (Beta)"
    });
  }

  renderSettings() {
    const exportFormatOptions = [{
      value: exportFormats.EXPORT_FORMAT_ACTIANCE,
      text: utils["gb" /* localizeMessage */]('admin.complianceExport.exportFormat.actiance', 'Actiance XML')
    }, {
      value: exportFormats.EXPORT_FORMAT_CSV,
      text: utils["gb" /* localizeMessage */]('admin.complianceExport.exportFormat.csv', 'CSV')
    }, {
      value: exportFormats.EXPORT_FORMAT_GLOBALRELAY,
      text: utils["gb" /* localizeMessage */]('admin.complianceExport.exportFormat.globalrelay', 'GlobalRelay EML')
    }]; // if the export format is globalrelay, the user needs to set some additional parameters

    let globalRelaySettings;

    if (this.state.exportFormat === exportFormats.EXPORT_FORMAT_GLOBALRELAY) {
      const globalRelayCustomerType = react_default.a.createElement(radio_setting_RadioSetting, {
        id: "globalRelayCustomerType",
        values: [{
          value: 'A9',
          text: utils["gb" /* localizeMessage */]('admin.complianceExport.globalRelayCustomerType.a9.description', 'A9/Type 9')
        }, {
          value: 'A10',
          text: utils["gb" /* localizeMessage */]('admin.complianceExport.globalRelayCustomerType.a10.description', 'A10/Type 10')
        }],
        label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.complianceExport.globalRelayCustomerType.title",
          defaultMessage: "Customer Type:"
        }),
        helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.complianceExport.globalRelayCustomerType.description",
          defaultMessage: "The type of GlobalRelay customer account that your organization has."
        }),
        value: this.state.globalRelayCustomerType ? this.state.globalRelayCustomerType : '',
        disabled: !this.state.enableComplianceExport,
        onChange: this.handleChange,
        setByEnv: this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.CustomerType')
      });
      const globalRelaySmtpUsername = react_default.a.createElement(admin_console_text_setting, {
        id: "globalRelaySmtpUsername",
        label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.complianceExport.globalRelaySmtpUsername.title",
          defaultMessage: "SMTP Username:"
        }),
        placeholder: utils["gb" /* localizeMessage */]('admin.complianceExport.globalRelaySmtpUsername.example', 'E.g.: "globalRelayUser"'),
        helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.complianceExport.globalRelaySmtpUsername.description",
          defaultMessage: "The username that is used to authenticate against the GlobalRelay SMTP server."
        }),
        value: this.state.globalRelaySmtpUsername ? this.state.globalRelaySmtpUsername : '',
        disabled: !this.state.enableComplianceExport,
        onChange: this.handleChange,
        setByEnv: this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.SmtpUsername')
      });
      const globalRelaySmtpPassword = react_default.a.createElement(admin_console_text_setting, {
        id: "globalRelaySmtpPassword",
        label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.complianceExport.globalRelaySmtpPassword.title",
          defaultMessage: "SMTP Password:"
        }),
        placeholder: utils["gb" /* localizeMessage */]('admin.complianceExport.globalRelaySmtpPassword.example', 'E.g.: "globalRelayPassword"'),
        helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.complianceExport.globalRelaySmtpPassword.description",
          defaultMessage: "The password that is used to authenticate against the GlobalRelay SMTP server."
        }),
        value: this.state.globalRelaySmtpPassword ? this.state.globalRelaySmtpPassword : '',
        disabled: !this.state.enableComplianceExport,
        onChange: this.handleChange,
        setByEnv: this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.SmtpPassword')
      });
      const globalRelayEmail = react_default.a.createElement(admin_console_text_setting, {
        id: "globalRelayEmailAddress",
        label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.complianceExport.globalRelayEmailAddress.title",
          defaultMessage: "Email Address:"
        }),
        placeholder: utils["gb" /* localizeMessage */]('admin.complianceExport.globalRelayEmailAddress.example', 'E.g.: "globalrelay@mattermost.com"'),
        helpText: react_default.a.createElement(index_es["b" /* FormattedHTMLMessage */], {
          id: "admin.complianceExport.globalRelayEmailAddress.description",
          defaultMessage: "The email address that your GlobalRelay server monitors for incoming Compliance Exports."
        }),
        value: this.state.globalRelayEmailAddress ? this.state.globalRelayEmailAddress : '',
        disabled: !this.state.enableComplianceExport,
        onChange: this.handleChange,
        setByEnv: this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.EmailAddress')
      });
      globalRelaySettings = react_default.a.createElement(settings_group_SettingsGroup, {
        id: 'globalRelaySettings'
      }, globalRelayCustomerType, globalRelaySmtpUsername, globalRelaySmtpPassword, globalRelayEmail);
    }

    const dropdownHelpText = react_default.a.createElement(formatted_markdown_message["b" /* default */], {
      id: "admin.complianceExport.exportFormat.description",
      defaultMessage: "Format of the compliance export. Corresponds to the system that you want to import the data into.\\n \\nFor Actiance XML, compliance export files are written to the \\\"exports\\\" subdirectory of the configured [Local Storage Directory]({siteURL}/admin_console/environment/file_storage). For Global Relay EML, they are emailed to the configured email address.",
      values: {
        siteURL: Object(url["e" /* getSiteURL */])()
      }
    });
    return react_default.a.createElement(settings_group_SettingsGroup, null, react_default.a.createElement(boolean_setting_BooleanSetting, {
      id: "enableComplianceExport",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.service.complianceExportTitle",
        defaultMessage: "Enable Compliance Export:"
      }),
      helpText: react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "admin.service.complianceExportDesc",
        defaultMessage: "When true, Mattermost will export all messages that were posted in the last 24 hours. The export task is scheduled to run once per day. See [the documentation](!https://about.mattermost.com/default-compliance-export-documentation) to learn more."
      }),
      value: this.state.enableComplianceExport,
      onChange: this.handleChange,
      setByEnv: this.isSetByEnv('DataRetentionSettings.EnableExport')
    }), react_default.a.createElement(admin_console_text_setting, {
      id: "exportJobStartTime",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.complianceExport.exportJobStartTime.title",
        defaultMessage: "Compliance Export Time:"
      }),
      placeholder: utils["gb" /* localizeMessage */]('admin.complianceExport.exportJobStartTime.example', 'E.g.: "02:00"'),
      helpText: react_default.a.createElement(index_es["b" /* FormattedHTMLMessage */], {
        id: "admin.complianceExport.exportJobStartTime.description",
        defaultMessage: "Set the start time of the daily scheduled compliance export job. Choose a time when fewer people are using your system. Must be a 24-hour time stamp in the form HH:MM."
      }),
      value: this.state.exportJobStartTime,
      disabled: !this.state.enableComplianceExport,
      onChange: this.handleChange,
      setByEnv: this.isSetByEnv('DataRetentionSettings.DailyRunTime')
    }), react_default.a.createElement(dropdown_setting_DropdownSetting, {
      id: "exportFormat",
      values: exportFormatOptions,
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.complianceExport.exportFormat.title",
        defaultMessage: "Export Format:"
      }),
      helpText: dropdownHelpText,
      value: this.state.exportFormat,
      disabled: !this.state.enableComplianceExport,
      onChange: this.handleChange,
      setByEnv: this.isSetByEnv('DataRetentionSettings.ExportFormat')
    }), globalRelaySettings, react_default.a.createElement(admin_console_jobs, {
      jobType: constants["n" /* JobTypes */].MESSAGE_EXPORT,
      disabled: !this.state.enableComplianceExport,
      createJobButtonText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.complianceExport.createJob.title",
        defaultMessage: "Run Compliance Export Job Now"
      }),
      createJobHelpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.complianceExport.createJob.help",
        defaultMessage: "Initiates a Compliance Export job immediately."
      }),
      getExtraInfoText: this.getJobDetails
    }));
  }

}
// CONCATENATED MODULE: ./components/admin_console/database_settings.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.











class database_settings_DatabaseSettings extends admin_settings_AdminSettings {
  constructor(props) {
    super(props);
    this.getConfigFromState = this.getConfigFromState.bind(this);
    this.renderSettings = this.renderSettings.bind(this);
  }

  getConfigFromState(config) {
    // driverName and dataSource are read-only from the UI
    config.SqlSettings.MaxIdleConns = this.parseIntNonZero(this.state.maxIdleConns);
    config.SqlSettings.MaxOpenConns = this.parseIntNonZero(this.state.maxOpenConns);
    config.SqlSettings.Trace = this.state.trace;
    config.SqlSettings.QueryTimeout = this.parseIntNonZero(this.state.queryTimeout);
    config.SqlSettings.ConnMaxLifetimeMilliseconds = this.parseIntNonNegative(this.state.connMaxLifetimeMilliseconds);
    config.ServiceSettings.MinimumHashtagLength = this.parseIntNonZero(this.state.minimumHashtagLength, 3, 2);
    return config;
  }

  getStateFromConfig(config) {
    return {
      driverName: config.SqlSettings.DriverName,
      dataSource: config.SqlSettings.DataSource,
      maxIdleConns: config.SqlSettings.MaxIdleConns,
      maxOpenConns: config.SqlSettings.MaxOpenConns,
      trace: config.SqlSettings.Trace,
      queryTimeout: config.SqlSettings.QueryTimeout,
      connMaxLifetimeMilliseconds: config.SqlSettings.ConnMaxLifetimeMilliseconds,
      minimumHashtagLength: config.ServiceSettings.MinimumHashtagLength
    };
  }

  renderTitle() {
    return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.database.title",
      defaultMessage: "Database Settings"
    });
  }

  renderSettings() {
    const dataSource = '**********' + this.state.dataSource.substring(this.state.dataSource.indexOf('@'));
    let recycleDbButton = react_default.a.createElement("div", null);

    if (this.props.license.IsLicensed === 'true') {
      recycleDbButton = react_default.a.createElement(request_button_RequestButton, {
        requestAction: admin_actions["v" /* recycleDatabaseConnection */],
        helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.recycle.recycleDescription",
          defaultMessage: "Deployments using multiple databases can switch from one master database to another without restarting the Mattermost server by updating \"config.json\" to the new desired configuration and using the {reloadConfiguration} feature to load the new settings while the server is running. The administrator should then use {featureName} feature to recycle the database connections based on the new settings.",
          values: {
            featureName: react_default.a.createElement("b", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
              id: "admin.recycle.recycleDescription.featureName",
              defaultMessage: "Recycle Database Connections"
            })),
            reloadConfiguration: react_default.a.createElement("a", {
              href: "../environment/web_server"
            }, react_default.a.createElement("b", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
              id: "admin.recycle.recycleDescription.reloadConfiguration",
              defaultMessage: "Environment > Web Server > Reload Configuration from Disk"
            })))
          }
        }),
        buttonText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.recycle.button",
          defaultMessage: "Recycle Database Connections"
        }),
        showSuccessMessage: false,
        errorMessage: {
          id: Object(utils_i18n["b" /* t */])('admin.recycle.reloadFail'),
          defaultMessage: 'Recycling unsuccessful: {error}'
        },
        includeDetailedError: true
      });
    }

    return react_default.a.createElement(settings_group_SettingsGroup, null, react_default.a.createElement("div", {
      className: "banner"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.sql.noteDescription",
      defaultMessage: "Changing properties in this section will require a server restart before taking effect."
    })), react_default.a.createElement("div", {
      className: "form-group"
    }, react_default.a.createElement("label", {
      className: "control-label col-sm-4",
      htmlFor: "DriverName"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.sql.driverName",
      defaultMessage: "Driver Name:"
    })), react_default.a.createElement("div", {
      className: "col-sm-8"
    }, react_default.a.createElement("input", {
      type: "text",
      className: "form-control",
      value: this.state.driverName,
      disabled: true
    }), react_default.a.createElement("div", {
      className: "help-text"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.sql.driverNameDescription",
      defaultMessage: "Set the database driver in the config.json file."
    })))), react_default.a.createElement("div", {
      className: "form-group"
    }, react_default.a.createElement("label", {
      className: "control-label col-sm-4",
      htmlFor: "DataSource"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.sql.dataSource",
      defaultMessage: "Data Source:"
    })), react_default.a.createElement("div", {
      className: "col-sm-8"
    }, react_default.a.createElement("input", {
      type: "text",
      className: "form-control",
      value: dataSource,
      disabled: true
    }), react_default.a.createElement("div", {
      className: "help-text"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.sql.dataSourceDescription",
      defaultMessage: "Set the database source in the config.json file."
    })))), react_default.a.createElement(admin_console_text_setting, {
      id: "maxIdleConns",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.sql.maxConnectionsTitle",
        defaultMessage: "Maximum Idle Connections:"
      }),
      placeholder: utils["gb" /* localizeMessage */]('admin.sql.maxConnectionsExample', 'E.g.: "10"'),
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.sql.maxConnectionsDescription",
        defaultMessage: "Maximum number of idle connections held open to the database."
      }),
      value: this.state.maxIdleConns,
      onChange: this.handleChange,
      setByEnv: this.isSetByEnv('SqlSettings.MaxIdleConns')
    }), react_default.a.createElement(admin_console_text_setting, {
      id: "maxOpenConns",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.sql.maxOpenTitle",
        defaultMessage: "Maximum Open Connections:"
      }),
      placeholder: utils["gb" /* localizeMessage */]('admin.sql.maxOpenExample', 'E.g.: "10"'),
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.sql.maxOpenDescription",
        defaultMessage: "Maximum number of open connections held open to the database."
      }),
      value: this.state.maxOpenConns,
      onChange: this.handleChange,
      setByEnv: this.isSetByEnv('SqlSettings.MaxOpenConns')
    }), react_default.a.createElement(admin_console_text_setting, {
      id: "queryTimeout",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.sql.queryTimeoutTitle",
        defaultMessage: "Query Timeout:"
      }),
      placeholder: utils["gb" /* localizeMessage */]('admin.sql.queryTimeoutExample', 'E.g.: "30"'),
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.sql.queryTimeoutDescription",
        defaultMessage: "The number of seconds to wait for a response from the database after opening a connection and sending the query. Errors that you see in the UI or in the logs as a result of a query timeout can vary depending on the type of query."
      }),
      value: this.state.queryTimeout,
      onChange: this.handleChange,
      setByEnv: this.isSetByEnv('SqlSettings.QueryTimeout')
    }), react_default.a.createElement(admin_console_text_setting, {
      id: "connMaxLifetimeMilliseconds",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.sql.connMaxLifetimeTitle",
        defaultMessage: "Maximum Connection Lifetime:"
      }),
      placeholder: utils["gb" /* localizeMessage */]('admin.sql.connMaxLifetimeExample', 'E.g.: "3600000"'),
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.sql.connMaxLifetimeDescription",
        defaultMessage: "Maximum lifetime for a connection to the database in milliseconds."
      }),
      value: this.state.connMaxLifetimeMilliseconds,
      onChange: this.handleChange,
      setByEnv: this.isSetByEnv('SqlSettings.ConnMaxLifetimeMilliseconds')
    }), react_default.a.createElement(admin_console_text_setting, {
      id: "minimumHashtagLength",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.service.minimumHashtagLengthTitle",
        defaultMessage: "Minimum Hashtag Length:"
      }),
      placeholder: utils["gb" /* localizeMessage */]('admin.service.minimumHashtagLengthExample', 'E.g.: "3"'),
      helpText: react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "admin.service.minimumHashtagLengthDescription",
        defaultMessage: "Minimum number of characters in a hashtag. This must be greater than or equal to 2. MySQL databases must be configured to support searching strings shorter than three characters, [see documentation](!https://dev.mysql.com/doc/refman/8.0/en/fulltext-fine-tuning.html)."
      }),
      value: this.state.minimumHashtagLength,
      onChange: this.handleChange,
      setByEnv: this.isSetByEnv('ServiceSettings.MinimumHashtagLength')
    }), react_default.a.createElement(boolean_setting_BooleanSetting, {
      id: "trace",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.sql.traceTitle",
        defaultMessage: "SQL Statement Logging: "
      }),
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.sql.traceDescription",
        defaultMessage: "(Development Mode) When true, executing SQL statements are written to the log."
      }),
      value: this.state.trace,
      onChange: this.handleChange,
      setByEnv: this.isSetByEnv('SqlSettings.Trace')
    }), recycleDbButton);
  }

}
// CONCATENATED MODULE: ./components/admin_console/elasticsearch_settings.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.












class elasticsearch_settings_ElasticsearchSettings extends admin_settings_AdminSettings {
  constructor(props) {
    super(props);
    this.getConfigFromState = this.getConfigFromState.bind(this);
    this.doTestConfig = this.doTestConfig.bind(this);
    this.handleSettingChanged = this.handleSettingChanged.bind(this);
    this.handleSaved = this.handleSaved.bind(this);
    this.renderSettings = this.renderSettings.bind(this);
  }

  getConfigFromState(config) {
    config.ElasticsearchSettings.ConnectionUrl = this.state.connectionUrl;
    config.ElasticsearchSettings.SkipTLSVerification = this.state.skipTLSVerification;
    config.ElasticsearchSettings.Username = this.state.username;
    config.ElasticsearchSettings.Password = this.state.password;
    config.ElasticsearchSettings.Sniff = this.state.sniff;
    config.ElasticsearchSettings.EnableIndexing = this.state.enableIndexing;
    config.ElasticsearchSettings.EnableSearching = this.state.enableSearching;
    config.ElasticsearchSettings.EnableAutocomplete = this.state.enableAutocomplete;
    return config;
  }

  getStateFromConfig(config) {
    return {
      connectionUrl: config.ElasticsearchSettings.ConnectionUrl,
      skipTLSVerification: config.ElasticsearchSettings.SkipTLSVerification,
      username: config.ElasticsearchSettings.Username,
      password: config.ElasticsearchSettings.Password,
      sniff: config.ElasticsearchSettings.Sniff,
      enableIndexing: config.ElasticsearchSettings.EnableIndexing,
      enableSearching: config.ElasticsearchSettings.EnableSearching,
      enableAutocomplete: config.ElasticsearchSettings.EnableAutocomplete,
      configTested: true,
      canSave: true,
      canPurgeAndIndex: config.ElasticsearchSettings.EnableIndexing
    };
  }

  handleSettingChanged(id, value) {
    if (id === 'enableIndexing') {
      if (value === false) {
        this.setState({
          enableSearching: false,
          enableAutocomplete: false
        });
      } else {
        this.setState({
          canSave: false,
          configTested: false
        });
      }
    }

    if (id === 'connectionUrl' || id === 'skipTLSVerification' || id === 'username' || id === 'password' || id === 'sniff') {
      this.setState({
        configTested: false,
        canSave: false
      });
    }

    if (id !== 'enableSearching' && id !== 'enableAutocomplete') {
      this.setState({
        canPurgeAndIndex: false
      });
    }

    this.handleChange(id, value);
  }

  handleSaved() {
    this.setState({
      canPurgeAndIndex: this.state.enableIndexing
    });
  }

  canSave() {
    return this.state.canSave;
  }

  doTestConfig(success, error) {
    const config = JSON.parse(JSON.stringify(this.props.config));
    this.getConfigFromState(config);
    Object(admin_actions["i" /* elasticsearchTest */])(config, () => {
      this.setState({
        configTested: true,
        canSave: true
      });
      success();
      this.doSubmit();
    }, err => {
      this.setState({
        configTested: false,
        canSave: false
      });
      error(err);
    });
  }

  getExtraInfo(job) {
    if (job.status === constants["m" /* JobStatuses */].IN_PROGRESS) {
      return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.percentComplete",
        defaultMessage: "{percent}% Complete",
        values: {
          percent: Number(job.progress)
        }
      });
    }

    return null;
  }

  renderTitle() {
    return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.elasticsearch.title",
      defaultMessage: "Elasticsearch"
    });
  }

  renderSettings() {
    return react_default.a.createElement(settings_group_SettingsGroup, null, react_default.a.createElement(boolean_setting_BooleanSetting, {
      id: "enableIndexing",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.enableIndexingTitle",
        defaultMessage: "Enable Elasticsearch Indexing:"
      }),
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.enableIndexingDescription",
        defaultMessage: "When true, indexing of new posts occurs automatically. Search queries will use database search until \"Enable Elasticsearch for search queries\" is enabled. {documentationLink}",
        values: {
          documentationLink: react_default.a.createElement("a", {
            href: "https://about.mattermost.com/default-elasticsearch-documentation/",
            rel: "noopener noreferrer",
            target: "_blank"
          }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
            id: "admin.elasticsearch.enableIndexingDescription.documentationLinkText",
            defaultMessage: "Learn more about Elasticsearch in our documentation."
          }))
        }
      }),
      value: this.state.enableIndexing,
      onChange: this.handleSettingChanged,
      setByEnv: this.isSetByEnv('ElasticsearchSettings.EnableIndexing')
    }), react_default.a.createElement(admin_console_text_setting, {
      id: "connectionUrl",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.connectionUrlTitle",
        defaultMessage: "Server Connection Address:"
      }),
      placeholder: utils["gb" /* localizeMessage */]('admin.elasticsearch.connectionUrlExample', 'E.g.: "https://elasticsearch.example.org:9200"'),
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.connectionUrlDescription",
        defaultMessage: "The address of the Elasticsearch server. {documentationLink}",
        values: {
          documentationLink: react_default.a.createElement("a", {
            href: "https://about.mattermost.com/default-elasticsearch-server-setup/",
            rel: "noopener noreferrer",
            target: "_blank"
          }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
            id: "admin.elasticsearch.connectionUrlExample.documentationLinkText",
            defaultMessage: "Please see documentation with server setup instructions."
          }))
        }
      }),
      value: this.state.connectionUrl,
      disabled: !this.state.enableIndexing,
      onChange: this.handleSettingChanged,
      setByEnv: this.isSetByEnv('ElasticsearchSettings.ConnectionUrl')
    }), react_default.a.createElement(boolean_setting_BooleanSetting, {
      id: "skipTLSVerification",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.skipTLSVerificationTitle",
        defaultMessage: "Skip TLS Verification:"
      }),
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.skipTLSVerificationDescription",
        defaultMessage: "When true, Mattermost will not require the Elasticsearch certificate to be signed by a trusted Certificate Authority."
      }),
      value: this.state.skipTLSVerification,
      disabled: !this.state.enableIndexing,
      onChange: this.handleSettingChanged,
      setByEnv: this.isSetByEnv('ElasticsearchSettings.SkipTLSVerification')
    }), react_default.a.createElement(admin_console_text_setting, {
      id: "username",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.usernameTitle",
        defaultMessage: "Server Username:"
      }),
      placeholder: utils["gb" /* localizeMessage */]('admin.elasticsearch.usernameExample', 'E.g.: "elastic"'),
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.usernameDescription",
        defaultMessage: "(Optional) The username to authenticate to the Elasticsearch server."
      }),
      value: this.state.username,
      disabled: !this.state.enableIndexing,
      onChange: this.handleSettingChanged,
      setByEnv: this.isSetByEnv('ElasticsearchSettings.Username')
    }), react_default.a.createElement(admin_console_text_setting, {
      id: "password",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.passwordTitle",
        defaultMessage: "Server Password:"
      }),
      placeholder: utils["gb" /* localizeMessage */]('admin.elasticsearch.password', 'E.g.: "yourpassword"'),
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.passwordDescription",
        defaultMessage: "(Optional) The password to authenticate to the Elasticsearch server."
      }),
      value: this.state.password,
      disabled: !this.state.enableIndexing,
      onChange: this.handleSettingChanged,
      setByEnv: this.isSetByEnv('ElasticsearchSettings.Password')
    }), react_default.a.createElement(boolean_setting_BooleanSetting, {
      id: "sniff",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.sniffTitle",
        defaultMessage: "Enable Cluster Sniffing:"
      }),
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.sniffDescription",
        defaultMessage: "When true, sniffing finds and connects to all data nodes in your cluster automatically."
      }),
      value: this.state.sniff,
      disabled: !this.state.enableIndexing,
      onChange: this.handleSettingChanged,
      setByEnv: this.isSetByEnv('ElasticsearchSettings.Sniff')
    }), react_default.a.createElement(request_button_RequestButton, {
      requestAction: this.doTestConfig,
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.testHelpText",
        defaultMessage: "Tests if the Mattermost server can connect to the Elasticsearch server specified. Testing the connection only saves the configuration if the test is successful. See log file for more detailed error messages."
      }),
      buttonText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.elasticsearch_test_button",
        defaultMessage: "Test Connection"
      }),
      successMessage: {
        id: Object(utils_i18n["b" /* t */])('admin.elasticsearch.testConfigSuccess'),
        defaultMessage: 'Test successful. Configuration saved.'
      },
      disabled: !this.state.enableIndexing
    }), react_default.a.createElement("div", {
      className: "form-group"
    }, react_default.a.createElement("label", {
      className: "control-label col-sm-4"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.elasticsearch.bulkIndexingTitle",
      defaultMessage: "Bulk Indexing:"
    })), react_default.a.createElement("div", {
      className: "col-sm-8"
    }, react_default.a.createElement("div", {
      className: "job-table-setting"
    }, react_default.a.createElement(admin_console_jobs, {
      jobType: constants["n" /* JobTypes */].ELASTICSEARCH_POST_INDEXING,
      disabled: !this.state.canPurgeAndIndex,
      createJobButtonText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.createJob.title",
        defaultMessage: "Index Now"
      }),
      createJobHelpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.createJob.help",
        defaultMessage: "All users, channels and posts in the database will be indexed from oldest to newest. Elasticsearch is available during indexing but search results may be incomplete until the indexing job is complete."
      }),
      getExtraInfoText: this.getExtraInfo
    })))), react_default.a.createElement(request_button_RequestButton, {
      requestAction: admin_actions["h" /* elasticsearchPurgeIndexes */],
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.purgeIndexesHelpText",
        defaultMessage: "Purging will entirely remove the indexes on the Elasticsearch server. Search results may be incomplete until a bulk index of the existing database is rebuilt."
      }),
      buttonText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.purgeIndexesButton",
        defaultMessage: "Purge Index"
      }),
      successMessage: {
        id: Object(utils_i18n["b" /* t */])('admin.elasticsearch.purgeIndexesButton.success'),
        defaultMessage: 'Indexes purged successfully.'
      },
      errorMessage: {
        id: Object(utils_i18n["b" /* t */])('admin.elasticsearch.purgeIndexesButton.error'),
        defaultMessage: 'Failed to purge indexes: {error}'
      },
      disabled: !this.state.canPurgeAndIndex,
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.purgeIndexesButton.label",
        defaultMessage: "Purge Indexes:"
      })
    }), react_default.a.createElement(boolean_setting_BooleanSetting, {
      id: "enableSearching",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.enableSearchingTitle",
        defaultMessage: "Enable Elasticsearch for search queries:"
      }),
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.enableSearchingDescription",
        defaultMessage: "Requires a successful connection to the Elasticsearch server. When true, Elasticsearch will be used for all search queries using the latest index. Search results may be incomplete until a bulk index of the existing post database is finished. When false, database search is used."
      }),
      value: this.state.enableSearching,
      disabled: !this.state.enableIndexing || !this.state.configTested,
      onChange: this.handleSettingChanged,
      setByEnv: this.isSetByEnv('ElasticsearchSettings.EnableSearching')
    }), react_default.a.createElement(boolean_setting_BooleanSetting, {
      id: "enableAutocomplete",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.enableAutocompleteTitle",
        defaultMessage: "Enable Elasticsearch for autocomplete queries:"
      }),
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.elasticsearch.enableAutocompleteDescription",
        defaultMessage: "Requires a successful connection to the Elasticsearch server. When true, Elasticsearch will be used for all autocompletion queries on users and channels using the latest index. Autocompletion results may be incomplete until a bulk index of the existing users and channels database is finished. When false, database autocomplete is used."
      }),
      value: this.state.enableAutocomplete,
      disabled: !this.state.enableIndexing || !this.state.configTested,
      onChange: this.handleSettingChanged,
      setByEnv: this.isSetByEnv('ElasticsearchSettings.EnableAutocomplete')
    }));
  }

}
// EXTERNAL MODULE: ./images/status_green.png
var status_green = __webpack_require__(3417);
var status_green_default = /*#__PURE__*/__webpack_require__.n(status_green);

// EXTERNAL MODULE: ./images/status_yellow.png
var status_yellow = __webpack_require__(3418);
var status_yellow_default = /*#__PURE__*/__webpack_require__.n(status_yellow);

// CONCATENATED MODULE: ./components/admin_console/cluster_table.jsx
function cluster_table_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.







class cluster_table_ClusterTable extends react_default.a.Component {
  render() {
    var versionMismatch = react_default.a.createElement("img", {
      alt: "version mismatch",
      className: "cluster-status",
      src: status_green_default.a
    });
    var configMismatch = react_default.a.createElement("img", {
      alt: "config mismatch",
      className: "cluster-status",
      src: status_green_default.a
    });
    var version = '';
    var configHash = '';
    var singleItem = false;

    if (this.props.clusterInfos.length) {
      version = this.props.clusterInfos[0].version;
      configHash = this.props.clusterInfos[0].config_hash;
      singleItem = this.props.clusterInfos.length === 1;
    }

    this.props.clusterInfos.map(clusterInfo => {
      if (clusterInfo.version !== version) {
        versionMismatch = react_default.a.createElement("img", {
          alt: "version mismatch",
          className: "cluster-status",
          src: status_yellow_default.a
        });
      }

      if (clusterInfo.config_hash !== configHash) {
        configMismatch = react_default.a.createElement("img", {
          alt: "config mismatch",
          className: "cluster-status",
          src: status_yellow_default.a
        });
      }

      return null;
    });
    var items = this.props.clusterInfos.map(clusterInfo => {
      var status = null;

      if (clusterInfo.hostname === '') {
        clusterInfo.hostname = utils["gb" /* localizeMessage */]('admin.cluster.unknown', 'unknown');
      }

      if (clusterInfo.version === '') {
        clusterInfo.version = utils["gb" /* localizeMessage */]('admin.cluster.unknown', 'unknown');
      }

      if (clusterInfo.config_hash === '') {
        clusterInfo.config_hash = utils["gb" /* localizeMessage */]('admin.cluster.unknown', 'unknown');
      }

      if (singleItem) {
        status = react_default.a.createElement("img", {
          alt: "Cluster status",
          className: "cluster-status",
          src: status_yellow_default.a
        });
      } else {
        status = react_default.a.createElement("img", {
          alt: "Cluster status",
          className: "cluster-status",
          src: status_green_default.a
        });
      }

      return react_default.a.createElement("tr", {
        key: clusterInfo.ipaddress
      }, react_default.a.createElement("td", {
        style: cluster_table_style.clusterCell
      }, status), react_default.a.createElement("td", {
        style: cluster_table_style.clusterCell
      }, clusterInfo.hostname), react_default.a.createElement("td", {
        style: cluster_table_style.clusterCell
      }, versionMismatch, " ", clusterInfo.version), react_default.a.createElement("td", {
        style: cluster_table_style.clusterCell
      }, react_default.a.createElement("div", {
        className: "config-hash"
      }, configMismatch, " ", clusterInfo.config_hash)), react_default.a.createElement("td", {
        style: cluster_table_style.clusterCell
      }, clusterInfo.ipaddress));
    });
    return react_default.a.createElement("div", {
      className: "cluster-panel__table",
      style: cluster_table_style.clusterTable
    }, react_default.a.createElement("div", {
      className: "text-right"
    }, react_default.a.createElement("button", {
      type: "submit",
      className: "btn btn-link",
      onClick: this.props.reload
    }, react_default.a.createElement(reload_icon_ReloadIcon, null), react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.cluster.status_table.reload",
      defaultMessage: " Reload Cluster Status"
    }))), react_default.a.createElement("table", {
      className: "table"
    }, react_default.a.createElement("thead", null, react_default.a.createElement("tr", null, react_default.a.createElement("th", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.cluster.status_table.status",
      defaultMessage: "Status"
    })), react_default.a.createElement("th", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.cluster.status_table.hostname",
      defaultMessage: "Hostname"
    })), react_default.a.createElement("th", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.cluster.status_table.version",
      defaultMessage: "Version"
    })), react_default.a.createElement("th", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.cluster.status_table.config_hash",
      defaultMessage: "Config File MD5"
    })), react_default.a.createElement("th", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.cluster.status_table.url",
      defaultMessage: "Gossip Address"
    })))), react_default.a.createElement("tbody", null, items)));
  }

}

cluster_table_defineProperty(cluster_table_ClusterTable, "propTypes", {
  clusterInfos: prop_types_default.a.array.isRequired,
  reload: prop_types_default.a.func.isRequired
});

const cluster_table_style = {
  clusterTable: {
    margin: 10,
    marginBottom: 30
  },
  clusterCell: {
    whiteSpace: 'nowrap'
  }
};
// CONCATENATED MODULE: ./components/admin_console/cluster_table_container.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




class cluster_table_container_ClusterTableContainer extends react_default.a.Component {
  constructor(props) {
    super(props);
    this.load = this.load.bind(this);
    this.reload = this.reload.bind(this);
    this.interval = null;
    this.state = {
      clusterInfos: null
    };
  }

  load() {
    Object(admin_actions["m" /* getClusterStatus */])(data => {
      this.setState({
        clusterInfos: data
      });
    }, null);
  }

  UNSAFE_componentWillMount() {
    // eslint-disable-line camelcase
    this.load(); // reload the cluster status every 15 seconds

    this.interval = setInterval(this.load, 15000);
  }

  componentWillUnmount() {
    if (this.interval) {
      clearInterval(this.interval);
    }
  }

  reload(e) {
    if (e) {
      e.preventDefault();
    }

    this.setState({
      clusterInfos: null
    });
    this.load();
  }

  render() {
    if (this.state.clusterInfos == null) {
      return react_default.a.createElement(loading_screen["a" /* default */], null);
    }

    return react_default.a.createElement(cluster_table_ClusterTable, {
      clusterInfos: this.state.clusterInfos,
      reload: this.reload
    });
  }

}
// CONCATENATED MODULE: ./components/admin_console/cluster_settings.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.











class cluster_settings_ClusterSettings extends admin_settings_AdminSettings {
  constructor(props) {
    super(props);
    this.getConfigFromState = this.getConfigFromState.bind(this);
    this.renderSettings = this.renderSettings.bind(this);
    this.overrideHandleChange = this.overrideHandleChange.bind(this);
  }

  getConfigFromState(config) {
    config.ClusterSettings.Enable = this.state.Enable;
    config.ClusterSettings.ClusterName = this.state.ClusterName;
    config.ClusterSettings.OverrideHostname = this.state.OverrideHostname;
    config.ClusterSettings.UseIpAddress = this.state.UseIpAddress;
    config.ClusterSettings.UseExperimentalGossip = this.state.UseExperimentalGossip;
    config.ClusterSettings.GossipPort = this.parseIntNonZero(this.state.GossipPort, 8074);
    config.ClusterSettings.StreamingPort = this.parseIntNonZero(this.state.StreamingPort, 8075);
    return config;
  }

  getStateFromConfig(config) {
    const settings = config.ClusterSettings;
    return {
      Enable: settings.Enable,
      ClusterName: settings.ClusterName,
      OverrideHostname: settings.OverrideHostname,
      UseIpAddress: settings.UseIpAddress,
      UseExperimentalGossip: settings.UseExperimentalGossip,
      GossipPort: settings.GossipPort,
      StreamingPort: settings.StreamingPort,
      showWarning: false
    };
  }

  renderTitle() {
    return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.advance.cluster",
      defaultMessage: "High Availability"
    });
  }

  overrideHandleChange(id, value) {
    this.setState({
      showWarning: true
    });
    this.handleChange(id, value);
  }

  renderSettings() {
    const licenseEnabled = this.props.license.IsLicensed === 'true' && this.props.license.Cluster === 'true';

    if (!licenseEnabled) {
      return null;
    }

    var configLoadedFromCluster = null;

    if (client["Client4"].clusterId) {
      configLoadedFromCluster = react_default.a.createElement("div", {
        style: cluster_settings_style.configLoadedFromCluster,
        className: "alert alert-warning"
      }, react_default.a.createElement(warning_icon["a" /* default */], null), react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "admin.cluster.loadedFrom",
        defaultMessage: "This configuration file was loaded from Node ID {clusterId}. Please see the Troubleshooting Guide in our [documentation](!http://docs.mattermost.com/deployment/cluster.html) if you are accessing the System Console through a load balancer and experiencing issues.",
        values: {
          clusterId: client["Client4"].clusterId
        }
      }));
    }

    var warning = null;

    if (this.state.showWarning) {
      warning = react_default.a.createElement("div", {
        style: cluster_settings_style.warning,
        className: "alert alert-warning"
      }, react_default.a.createElement(warning_icon["a" /* default */], null), react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "admin.cluster.should_not_change",
        defaultMessage: "WARNING: These settings may not sync with the other servers in the cluster. High Availability inter-node communication will not start until you modify the config.json to be identical on all servers and restart Mattermost. Please see the [documentation](!http://docs.mattermost.com/deployment/cluster.html) on how to add or remove a server from the cluster. If you are accessing the System Console through a load balancer and experiencing issues, please see the Troubleshooting Guide in our [documentation](!http://docs.mattermost.com/deployment/cluster.html)."
      }));
    }

    var clusterTableContainer = null;

    if (this.state.Enable) {
      clusterTableContainer = react_default.a.createElement(cluster_table_container_ClusterTableContainer, null);
    }

    return react_default.a.createElement(settings_group_SettingsGroup, null, configLoadedFromCluster, clusterTableContainer, react_default.a.createElement("div", {
      className: "banner"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.cluster.noteDescription",
      defaultMessage: "Changing properties in this section will require a server restart before taking effect."
    })), warning, react_default.a.createElement(boolean_setting_BooleanSetting, {
      id: "Enable",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.cluster.enableTitle",
        defaultMessage: "Enable High Availability Mode:"
      }),
      helpText: react_default.a.createElement(formatted_markdown_message["b" /* default */], {
        id: "admin.cluster.enableDescription",
        defaultMessage: "When true, Mattermost will run in High Availability mode. Please see [documentation](!http://docs.mattermost.com/deployment/cluster.html) to learn more about configuring High Availability for Mattermost."
      }),
      value: this.state.Enable,
      onChange: this.overrideHandleChange,
      setByEnv: this.isSetByEnv('ClusterSettings.Enable')
    }), react_default.a.createElement(admin_console_text_setting, {
      id: "ClusterName",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.cluster.ClusterName",
        defaultMessage: "Cluster Name:"
      }),
      placeholder: utils["gb" /* localizeMessage */]('admin.cluster.ClusterNameEx', 'E.g.: "Production" or "Staging"'),
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.cluster.ClusterNameDesc",
        defaultMessage: "The cluster to join by name.  Only nodes with the same cluster name will join together.  This is to support Blue-Green deployments or staging pointing to the same database."
      }),
      value: this.state.ClusterName,
      onChange: this.overrideHandleChange,
      setByEnv: this.isSetByEnv('ClusterSettings.ClusterName')
    }), react_default.a.createElement(admin_console_text_setting, {
      id: "OverrideHostname",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.cluster.OverrideHostname",
        defaultMessage: "Override Hostname:"
      }),
      placeholder: utils["gb" /* localizeMessage */]('admin.cluster.OverrideHostnameEx', 'E.g.: "app-server-01"'),
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.cluster.OverrideHostnameDesc",
        defaultMessage: "The default value of <blank> will attempt to get the Hostname from the OS or use the IP Address.  You can override the hostname of this server with this property.  It is not recommended to override the Hostname unless needed. This property can also be set to a specific IP Address if needed."
      }),
      value: this.state.OverrideHostname,
      onChange: this.overrideHandleChange,
      setByEnv: this.isSetByEnv('ClusterSettings.OverrideHostname')
    }), react_default.a.createElement(boolean_setting_BooleanSetting, {
      id: "UseIpAddress",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.cluster.UseIpAddress",
        defaultMessage: "Use IP Address:"
      }),
      helpText: react_default.a.createElement(index_es["b" /* FormattedHTMLMessage */], {
        id: "admin.cluster.UseIpAddressDesc",
        defaultMessage: "When true, the cluster will attempt to communicate via IP Address vs using the hostname."
      }),
      value: this.state.UseIpAddress,
      onChange: this.overrideHandleChange,
      setByEnv: this.isSetByEnv('ClusterSettings.UseIpAddress')
    }), react_default.a.createElement(boolean_setting_BooleanSetting, {
      id: "UseExperimentalGossip",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.cluster.UseExperimentalGossip",
        defaultMessage: "Use Experimental Gossip:"
      }),
      helpText: react_default.a.createElement(index_es["b" /* FormattedHTMLMessage */], {
        id: "admin.cluster.UseExperimentalGossipDesc",
        defaultMessage: "When true, the server will attempt to communicate via the gossip protocol over the gossip port.  When false the server will attempt to communicate over the streaming port. When false the gossip port and protocol are still used to determine cluster health."
      }),
      value: this.state.UseExperimentalGossip,
      onChange: this.overrideHandleChange,
      setByEnv: this.isSetByEnv('ClusterSettings.UseExperimentalGossip')
    }), react_default.a.createElement(admin_console_text_setting, {
      id: "GossipPort",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.cluster.GossipPort",
        defaultMessage: "Gossip Port:"
      }),
      placeholder: utils["gb" /* localizeMessage */]('admin.cluster.GossipPortEx', 'E.g.: "8074"'),
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.cluster.GossipPortDesc",
        defaultMessage: "The port used for the gossip protocol.  Both UDP and TCP should be allowed on this port."
      }),
      value: this.state.GossipPort,
      onChange: this.overrideHandleChange,
      setByEnv: this.isSetByEnv('ClusterSettings.GossipPort')
    }), react_default.a.createElement(admin_console_text_setting, {
      id: "StreamingPort",
      label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.cluster.StreamingPort",
        defaultMessage: "Streaming Port:"
      }),
      placeholder: utils["gb" /* localizeMessage */]('admin.cluster.StreamingPortEx', 'E.g.: "8075"'),
      helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
        id: "admin.cluster.StreamingPortDesc",
        defaultMessage: "The port used for streaming data between servers."
      }),
      value: this.state.StreamingPort,
      onChange: this.overrideHandleChange,
      setByEnv: this.isSetByEnv('ClusterSettings.StreamingPort')
    }));
  }

}
const cluster_settings_style = {
  configLoadedFromCluster: {
    marginBottom: 10
  },
  warning: {
    marginBottom: 10
  }
};
// CONCATENATED MODULE: ./components/admin_console/custom_terms_of_service_settings/custom_terms_of_service_settings.jsx
function custom_terms_of_service_settings_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.











class custom_terms_of_service_settings_CustomTermsOfServiceSettings extends admin_settings_AdminSettings {
  constructor(props) {
    super(props);

    custom_terms_of_service_settings_defineProperty(this, "getConfigFromState", config => {
      config.SupportSettings.CustomTermsOfServiceEnabled = this.state.termsEnabled;
      config.SupportSettings.CustomTermsOfServiceReAcceptancePeriod = this.parseIntNonZero(this.state.reAcceptancePeriod, constants["g" /* Constants */].DEFAULT_TERMS_OF_SERVICE_RE_ACCEPTANCE_PERIOD);
      return config;
    });

    custom_terms_of_service_settings_defineProperty(this, "doSubmit", async callback => {
      this.setState({
        saving: true,
        serverError: null
      });

      if (this.state.termsEnabled && (this.state.receivedTermsText !== this.state.termsText || !this.props.config.SupportSettings.CustomTermsOfServiceEnabled)) {
        const result = await this.props.actions.createTermsOfService(this.state.termsText);

        if (result.error) {
          this.handleAPIError(result.error, callback);
          return;
        }
      } // clone config so that we aren't modifying data in the stores


      let config = JSON.parse(JSON.stringify(this.props.config));
      config = this.getConfigFromState(config);
      Object(admin_actions["B" /* saveConfig */])(config, savedConfig => {
        this.setState(this.getStateFromConfig(savedConfig));
        this.setState({
          saveNeeded: false,
          saving: false
        });
        this.props.setNavigationBlocked(false);

        if (callback) {
          callback();
        }

        if (this.handleSaved) {
          this.handleSaved(config);
        }
      }, err => {
        this.handleAPIError(err, callback, config);
      });
    });

    custom_terms_of_service_settings_defineProperty(this, "handleAPIError", (err, callback, config) => {
      this.setState({
        saving: false,
        serverError: err.message,
        serverErrorId: err.id
      });

      if (callback) {
        callback();
      }

      if (this.handleSaved && config) {
        this.handleSaved(config);
      }
    });

    custom_terms_of_service_settings_defineProperty(this, "getTermsOfService", async () => {
      this.setState({
        loadingTermsText: true
      });
      const res = await this.props.actions.getTermsOfService();

      if (res.data) {
        this.setState({
          termsText: res.data.text,
          receivedTermsText: res.data.text
        });
      }

      this.setState({
        loadingTermsText: false
      });
    });

    custom_terms_of_service_settings_defineProperty(this, "handleTermsTextChange", (id, value) => {
      this.handleChange('termsText', value);
    });

    custom_terms_of_service_settings_defineProperty(this, "handleTermsEnabledChange", (id, value) => {
      this.handleChange('termsEnabled', value);
    });

    custom_terms_of_service_settings_defineProperty(this, "handleReAcceptancePeriodChange", (id, value) => {
      this.handleChange('reAcceptancePeriod', value);
    });

    custom_terms_of_service_settings_defineProperty(this, "renderSettings", () => {
      if (this.state.loadingTermsText) {
        return react_default.a.createElement(loading_screen["a" /* default */], null);
      }

      return react_default.a.createElement(settings_group_SettingsGroup, null, react_default.a.createElement(boolean_setting_BooleanSetting, {
        key: 'customTermsOfServiceEnabled',
        id: 'SupportSettings.CustomTermsOfServiceEnabled',
        label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.support.enableTermsOfServiceTitle",
          defaultMessage: "Enable Custom Terms of Service"
        }),
        helpText: react_default.a.createElement(formatted_markdown_message["b" /* default */], {
          id: "admin.support.enableTermsOfServiceHelp",
          defaultMessage: "When true, new users must accept the terms of service before accessing any Mattermost teams on desktop, web or mobile. Existing users must accept them after login or a page refresh.\\n \\nTo update terms of service link displayed in account creation and login pages, go to [Site Configuration > Customization](../site_config/customization)."
        }),
        value: this.state.termsEnabled,
        disabled: !(this.props.license.IsLicensed && this.props.license.CustomTermsOfService === 'true'),
        onChange: this.handleTermsEnabledChange,
        setByEnv: this.isSetByEnv('SupportSettings.CustomTermsOfServiceEnabled')
      }), react_default.a.createElement(admin_console_text_setting, {
        key: 'customTermsOfServiceText',
        id: 'SupportSettings.CustomTermsOfServiceText',
        type: 'textarea',
        label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.support.termsOfServiceTextTitle",
          defaultMessage: "Custom Terms of Service Text"
        }),
        helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.support.termsOfServiceTextHelp",
          defaultMessage: "Text that will appear in your custom Terms of Service. Supports Markdown-formatted text."
        }),
        disabled: !this.state.termsEnabled,
        onChange: this.handleTermsTextChange,
        setByEnv: this.isSetByEnv('SupportSettings.CustomTermsOfServiceText'),
        value: this.state.termsText,
        maxLength: constants["g" /* Constants */].MAX_TERMS_OF_SERVICE_TEXT_LENGTH
      }), react_default.a.createElement(admin_console_text_setting, {
        key: 'customTermsOfServiceReAcceptancePeriod',
        id: 'SupportSettings.CustomTermsOfServiceReAcceptancePeriod',
        type: 'number',
        label: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.support.termsOfServiceReAcceptanceTitle",
          defaultMessage: "Re-Acceptance Period:"
        }),
        helpText: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "admin.support.termsOfServiceReAcceptanceHelp",
          defaultMessage: "The number of days before Terms of Service acceptance expires, and the terms must be re-accepted."
        }),
        disabled: !this.state.termsEnabled,
        value: this.state.reAcceptancePeriod,
        onChange: this.handleReAcceptancePeriodChange,
        setByEnv: this.isSetByEnv('SupportSettings.CustomTermsOfServiceReAcceptancePeriod')
      }));
    });

    this.state = {
      termsEnabled: props.config.SupportSettings.CustomTermsOfServiceEnabled,
      reAcceptancePeriod: props.config.SupportSettings.CustomTermsOfServiceReAcceptancePeriod,
      loadingTermsText: true,
      receivedTermsText: '',
      termsText: '',
      saveNeeded: false,
      saving: false,
      serverError: null,
      errorTooltip: false
    };
  }

  getStateFromConfig(config) {
    return {
      termsEnabled: config.SupportSettings.CustomTermsOfServiceEnabled,
      reAcceptancePeriod: config.SupportSettings.CustomTermsOfServiceReAcceptancePeriod
    };
  }

  componentDidMount() {
    this.getTermsOfService();
  }

  renderTitle() {
    return react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.support.termsOfServiceTitle",
      defaultMessage: "Custom Terms of Service (Beta)"
    });
  }

}

custom_terms_of_service_settings_defineProperty(custom_terms_of_service_settings_CustomTermsOfServiceSettings, "propTypes", {
  actions: prop_types_default.a.shape({
    getTermsOfService: prop_types_default.a.func.isRequired,
    createTermsOfService: prop_types_default.a.func.isRequired
  }).isRequired,
  config: prop_types_default.a.object,
  license: prop_types_default.a.object,
  setNavigationBlocked: prop_types_default.a.func
});
// CONCATENATED MODULE: ./components/admin_console/custom_terms_of_service_settings/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





function custom_terms_of_service_settings_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      getTermsOfService: actions_users["getTermsOfService"],
      createTermsOfService: actions_users["createTermsOfService"]
    }, dispatch)
  };
}

/* harmony default export */ var custom_terms_of_service_settings = (Object(es["connect"])(null, custom_terms_of_service_settings_mapDispatchToProps)(custom_terms_of_service_settings_CustomTermsOfServiceSettings));
// EXTERNAL MODULE: ./utils/request.js
var request = __webpack_require__(25);

// EXTERNAL MODULE: ./node_modules/react-bootstrap/es/ProgressBar.js
var ProgressBar = __webpack_require__(2005);

// EXTERNAL MODULE: ./node_modules/axios/index.js
var axios = __webpack_require__(450);

// CONCATENATED MODULE: ./components/admin_console/upload/admin_download.jsx
function admin_download_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.





class admin_download_AdminDownload extends react_default.a.Component {
  constructor(props) {
    super(props);

    admin_download_defineProperty(this, "onChangeInput", e => {
      this.setState({
        inputTxt: this.fileInput.current.value
      });
    });

    admin_download_defineProperty(this, "onChangeMac", e => {
      this.setState({
        macInput: e.currentTarget.files[0].name,
        filesMac: e.currentTarget.files[0]
      });
    });

    admin_download_defineProperty(this, "onChangeWin", e => {
      this.setState({
        winInput: e.currentTarget.files[0].name,
        filesWin: e.currentTarget.files[0]
      });
    });

    admin_download_defineProperty(this, "onUpfileMac", e => {
      //file, type, version
      if (!this.state.filesMac) {
        alert("请上传文件");
        return;
      }

      this.upFile({
        file: this.state.filesMac,
        type: 'mac',
        version: this.state.inputTxt,
        loadProgress: e => {
          let percent = e.loaded / e.total * 100 | 0;
          this.setState({
            percentmac: percent,
            showTxtmac: percent + "%"
          });
        }
      }).then(res => {
        if (res.data && res.data.file_infos && res.data.file_infos.length > 0) this.setState({
          percentmac: 100,
          showTxtmac: "上传成功!"
        });
      });
    });

    admin_download_defineProperty(this, "onUpfileWin", e => {
      //file, type, version
      if (!this.state.filesWin) {
        alert("请上传文件");
        return;
      }

      this.upFile({
        file: this.state.filesWin,
        type: 'win',
        version: this.state.inputTxt,
        loadProgress: e => {
          let percent = e.loaded / e.total * 100 | 0;
          this.setState({
            percentwin: percent,
            showTxtwin: percent + "%"
          });
        }
      }).then(res => {
        if (res.data && res.data.file_infos && res.data.file_infos.length > 0) this.setState({
          percentwin: 100,
          showTxtwin: "上传成功!"
        });
      });
    });

    this.state = {
      macInput: "请选择Mac文件",
      inputTxt: "3333",
      winInput: "请选择win文件",
      filesWin: null,
      filesMac: null,
      percentmac: 0,
      percentwin: 0,
      showTxtmac: '',
      showTxtwin: ''
    };
    this.fileInput = react_default.a.createRef();
  }

  upFile({
    file,
    type,
    version,
    loadProgress
  }) {
    const formData = new window.FormData();
    formData.append('files', file);
    return Object(request["a" /* default */])({
      url: `/api/v4/files/ao?file_type=${type}&version=${version}`,
      method: "POST",
      data: formData,
      onUploadProgress: function (progressEvent) {
        //原生获取上传进度的事件
        if (progressEvent.lengthComputable) {
          //属性lengthComputable主要表明总共需要完成的工作量和已经完成的工作是否可以被测量
          //如果lengthComputable为false，就获取不到progressEvent.total和progressEvent.loaded
          loadProgress(progressEvent);
        }
      }
    });
  }

  render() {
    return react_default.a.createElement("div", {
      className: "main-wrapper"
    }, react_default.a.createElement("div", {
      className: "header"
    }, react_default.a.createElement("div", {
      className: "logo-box"
    }, react_default.a.createElement("div", {
      className: "logo"
    }), react_default.a.createElement("span", {
      className: "desc-version"
    }, "version 0.1.0")), react_default.a.createElement("div", {
      className: "subtitle"
    }, "Make your IT team collaboration, ", react_default.a.createElement("span", {
      className: "green"
    }, "O"), "nclound,", react_default.a.createElement("span", {
      className: "green"
    }, "N"), "ogap,", react_default.a.createElement("span", {
      className: "green"
    }, "E"), "fficient")), react_default.a.createElement("div", {
      className: "content"
    }, react_default.a.createElement("ol", {
      className: "form"
    }, react_default.a.createElement("li", {
      className: "form-item"
    }, react_default.a.createElement("label", null, "Version:"), react_default.a.createElement("div", {
      className: "input-box"
    }, react_default.a.createElement("input", {
      id: "version",
      type: "text",
      ref: this.fileInput,
      onChange: this.onChangeInput
    }))), react_default.a.createElement("li", {
      className: "form-item"
    }, react_default.a.createElement("label", null, "Mac:"), react_default.a.createElement("div", {
      className: "input-box file-fix"
    }, react_default.a.createElement("input", {
      placeholder: this.state.macInput,
      disabled: true,
      type: "text"
    }), react_default.a.createElement("input", {
      id: "mac-file-input",
      className: "file-input",
      type: "file",
      onChange: this.onChangeMac
    })), react_default.a.createElement("div", {
      className: "suffix-btn",
      type: "windows",
      onClick: this.onUpfileMac
    }, "\u63D0\u4EA4"), this.state.percentmac && react_default.a.createElement("div", null, react_default.a.createElement(ProgressBar["a" /* default */], {
      className: "post-image__progressBar",
      now: this.state.percentmac,
      active: this.state.percentmac === 100
    }), react_default.a.createElement("div", {
      className: "form-item-progressBar"
    }, this.state.showTxtmac))), react_default.a.createElement("li", {
      className: "form-item"
    }, react_default.a.createElement("label", null, "Windows:"), react_default.a.createElement("div", {
      className: "input-box file-fix"
    }, react_default.a.createElement("input", {
      placeholder: this.state.winInput,
      disabled: true,
      type: "text"
    }), react_default.a.createElement("input", {
      id: "windows-file-input",
      className: "file-input",
      type: "file",
      onChange: this.onChangeWin
    })), react_default.a.createElement("div", {
      className: "suffix-btn",
      type: "windows",
      onClick: this.onUpfileWin
    }, "\u63D0\u4EA4"), this.state.percentwin && react_default.a.createElement("div", null, react_default.a.createElement(ProgressBar["a" /* default */], {
      className: "post-image__progressBar",
      now: this.state.percentwin,
      active: this.state.percentwin === 100
    }), react_default.a.createElement("div", {
      className: "form-item-progressBar"
    }, this.state.showTxtwin))))));
  }

}

admin_download_defineProperty(admin_download_AdminDownload, "propTypes", {
  license: prop_types_default.a.object.isRequired,
  config: prop_types_default.a.object
});
// CONCATENATED MODULE: ./components/admin_console/admin_definition_constants.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.


const SECTION_NONE = react_default.a.createElement("tr", null, react_default.a.createElement("td", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
  id: "admin.connectionSecurityNone",
  defaultMessage: "None"
})), react_default.a.createElement("td", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
  id: "admin.connectionSecurityNoneDescription",
  defaultMessage: "Mattermost will connect over an insecure connection."
})));
const SECTION_TLS = react_default.a.createElement("tr", null, react_default.a.createElement("td", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
  id: "admin.connectionSecurityTls",
  defaultMessage: "TLS"
})), react_default.a.createElement("td", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
  id: "admin.connectionSecurityTlsDescription",
  defaultMessage: "Encrypts the communication between Mattermost and your server."
})));
const SECTION_STARTTLS = react_default.a.createElement("tr", null, react_default.a.createElement("td", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
  id: "admin.connectionSecurityStart",
  defaultMessage: "STARTTLS"
})), react_default.a.createElement("td", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
  id: "admin.connectionSecurityStartDescription",
  defaultMessage: "Takes an existing insecure connection and attempts to upgrade it to a secure connection using TLS."
})));
const CONNECTION_SECURITY_HELP_TEXT_EMAIL = react_default.a.createElement("table", {
  className: "table table-bordered table-margin--none",
  cellPadding: "5"
}, react_default.a.createElement("tbody", null, SECTION_NONE, SECTION_TLS, SECTION_STARTTLS));
const CONNECTION_SECURITY_HELP_TEXT_LDAP = react_default.a.createElement("table", {
  className: "table table-bordered table-margin--none",
  cellPadding: "5"
}, react_default.a.createElement("tbody", null, SECTION_NONE, SECTION_TLS, SECTION_STARTTLS));
const CONNECTION_SECURITY_HELP_TEXT_WEBSERVER = react_default.a.createElement("table", {
  className: "table table-bordered table-margin--none",
  cellPadding: "5"
}, react_default.a.createElement("tbody", null, SECTION_NONE, SECTION_TLS));
const WEBSERVER_MODE_HELP_TEXT = react_default.a.createElement("div", null, react_default.a.createElement("table", {
  className: "table table-bordered table-margin--none",
  cellPadding: "5"
}, react_default.a.createElement("tbody", null, react_default.a.createElement("tr", null, react_default.a.createElement("td", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
  id: "admin.webserverModeGzip",
  defaultMessage: "gzip"
})), react_default.a.createElement("td", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
  id: "admin.webserverModeGzipDescription",
  defaultMessage: "The Mattermost server will serve static files compressed with gzip."
}))), react_default.a.createElement("tr", null, react_default.a.createElement("td", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
  id: "admin.webserverModeUncompressed",
  defaultMessage: "Uncompressed"
})), react_default.a.createElement("td", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
  id: "admin.webserverModeUncompressedDescription",
  defaultMessage: "The Mattermost server will serve static files uncompressed."
}))), react_default.a.createElement("tr", null, react_default.a.createElement("td", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
  id: "admin.webserverModeDisabled",
  defaultMessage: "Disabled"
})), react_default.a.createElement("td", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
  id: "admin.webserverModeDisabledDescription",
  defaultMessage: "The Mattermost server will not serve static files."
}))))), react_default.a.createElement("p", {
  className: "help-text"
}, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
  id: "admin.webserverModeHelpText",
  defaultMessage: "gzip compression applies to static content files. It is recommended to enable gzip to improve performance unless your environment has specific restrictions, such as a web proxy that distributes gzip files poorly."
})));
const LOG_LEVEL_OPTIONS = [{
  value: 'DEBUG',
  display_name: 'DEBUG',
  display_name_default: 'DEBUG'
}, {
  value: 'INFO',
  display_name: 'INFO',
  display_name_default: 'INFO'
}, {
  value: 'ERROR',
  display_name: 'ERROR',
  display_name_default: 'ERROR'
}];
// CONCATENATED MODULE: ./components/admin_console/admin_definition.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




































const FILE_STORAGE_DRIVER_LOCAL = 'local';
const FILE_STORAGE_DRIVER_S3 = 'amazons3';
const MEBIBYTE = Math.pow(1024, 2);
const MINIMUM_IDLE_TIMEOUT = 5; // admin_definitions data structure define the autogenerated admin_console
// section. It defines the structure of the menu based on sections, subsections
// and pages. Each page contains an schema which defines a component to use for
// render the entire section or the name of the section (name and
// name_default), the section in the config file (id), and a list of options to
// configure (settings).
//
// All text fiels contains a transation key, and the <field>_default string are the
// default text when the translation is still not avaiable (the english version
// of the text).
//
// We can define different types of settings configuration widgets:
//
// Widget:
//   - type: which define the widget type.
//   - label (and label_default): which define the main text of the setting.
//   - isDisabled: a function which receive current config, the state of the page and the license.
//   - isHidden: a function which receive current config, the state of the page and the license.
//
// Custom Widget (extends from Widget):
//   - component: The component used to render the widget
//
// JobsTable Widget (extends from Widget):
//   - job_type: The kind of job from Constants.JobTypes
//   - render_job: Function to convert a job object into a react component.
//
// Banner Widget (extends from Widget):
//   - banner_type: The type of banner (options: info or warning)
//
// Setting Widget (extends from Widget):
//   - key: The key to store the configuration in the config file.
//   - help_text (and help_text_default): Long description of the field.
//   - help_text_markdown: True if the translation text contains markdown.
//   - help_text_values: Values to fill the translation (if needed).
//
// Bool Widget (extends from Setting Widget)
//
// Number Widget (extends from Setting Widget)
//
// Color Widget (extends from Setting Widget)
//
// Text Widget (extends from Setting Widget)
//   - placeholder (and placeholder_default): Placeholder text to show in the input.
//   - dynamic_value: function that generate the value of the field based on the current value, the config, the state and the license.
//   - default_value: function that generate the default value of the field based on the config, the state and the license.
//   - max_length: The maximun length allowed
//
// Button Widget (extends from Setting Widget)
//   - action: A redux action to execute on click.
//   - error_message (and error_message_default): Error to show if action doesn't work.
//   - success_message (and success_message_default): Success message to show if action doesn't work.
//
// Language Widget (extends from Setting Widget)
//   - multiple: If you can select multiple languages.
//   - no_result (and no_result_default): Text to show on not results found (only for multiple = true).
//   - not_present (and not_present_default): Text to show when the default language is not present (only for multiple = true).
//
// Dropdown Widget (extends from Setting Widget)
//   - options: List of options of the dropdown (each options has value, display_name, display_name_default and optionally help_text, help_text_default, help_text_values, help_text_markdown fields).
//
// Permissions Flag (extends from Setting Widget)
//   - permissions_mapping_name: A permission name in the utils/policy_roles_adapter.js file.
//
// FileUpload (extends from Setting Widget)
//   - remove_help_text (and remove_help_text_default):  Long description of the field when a file is uploaded.
//   - remove_help_text_markdown: True if the translation text contains markdown.
//   - remove_help_text_values: Values to fill the translation (if needed).
//   - remove_button_text (and remove_button_text_default): Button text for remove when the file is uploaded.
//   - removing_text (and removing_text_default): Text shown while the system is removing the file.
//   - uploading_text (and uploading_text_default): Text shown while the system is uploading the file.
//   - upload_action: An store action to upload the file.
//   - remove_action: An store action to remove the file.
//   - fileType: A list of extensions separated by ",". E.g. ".jpg,.png,.gif".

const it = {
  isnt: func => (config, state, license, enterpriseReady) => !func(config, state, license, enterpriseReady),
  both: (...funcs) => (config, state, license) => {
    for (const func of funcs) {
      if (!func(config, state, license)) {
        return false;
      }
    }

    return true;
  },
  either: (...funcs) => (config, state, license, enterpriseReady) => {
    for (const func of funcs) {
      if (func(config, state, license, enterpriseReady)) {
        return true;
      }
    }

    return false;
  },
  stateMatches: (key, regex) => (config, state) => state[key].match(regex),
  stateEquals: (key, value) => (config, state) => state[key] === value,
  stateIsTrue: key => (config, state) => Boolean(state[key]),
  stateIsFalse: key => (config, state) => !state[key],
  configIsTrue: (group, setting) => config => Boolean(config[group][setting]),
  configIsFalse: (group, setting) => config => !config[group][setting],
  enterpriseReady: (config, state, license, enterpriseReady) => enterpriseReady,
  licensed: (config, state, license) => license.IsLicensed === 'true',
  licensedForFeature: feature => (config, state, license) => license.IsLicensed && license[feature] === 'true'
};
/* harmony default export */ var admin_definition = ({
  about: {
    icon: 'fa-info-circle',
    sectionTitle: Object(utils_i18n["b" /* t */])('admin.sidebar.about'),
    sectionTitleDefault: 'About',
    license: {
      url: 'about/license',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.license'),
      title_default: 'Edition and License',
      isHidden: false,
      searchableStrings: ['admin.license.title', 'admin.license.uploadDesc', 'admin.license.keyRemove', 'admin.license.edition', 'admin.license.type', 'admin.license.key', 'Mattermost Enterprise Edition. Unlock enterprise features in this software through the purchase of a subscription from ', 'This software is offered under a commercial license.\n\nSee ENTERPRISE-EDITION-LICENSE.txt in your root install directory for details. See NOTICE.txt for information about open source software used in this system.'],
      schema: {
        id: 'LicenseSettings',
        component: license_settings_LicenseSettings
      }
    }
  },
  reporting: {
    icon: 'fa-bar-chart',
    sectionTitle: Object(utils_i18n["b" /* t */])('admin.sidebar.reporting'),
    sectionTitleDefault: 'Reporting',
    system_analytics: {
      url: 'reporting/system_analytics',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.siteStatistics'),
      title_default: 'Site Statistics',
      searchableStrings: ['analytics.system.title', 'analytics.system.totalPosts', 'analytics.system.activeUsers', 'analytics.system.totalSessions', 'analytics.system.totalCommands', 'analytics.system.totalIncomingWebhooks', 'analytics.system.totalOutgoingWebhooks', 'analytics.system.totalWebsockets', 'analytics.system.totalMasterDbConnections', 'analytics.system.totalReadDbConnections', 'analytics.system.postTypes', 'analytics.system.channelTypes', 'analytics.system.totalUsers', 'analytics.system.totalTeams', 'analytics.system.totalChannels', 'analytics.system.dailyActiveUsers', 'analytics.system.monthlyActiveUsers'],
      schema: {
        id: 'SystemAnalytics',
        component: system_analytics
      }
    },
    team_statistics: {
      url: 'reporting/team_statistics',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.teamStatistics'),
      title_default: 'Team Statistics',
      searchableStrings: [['analytics.team.title', {
        team: ''
      }], 'analytics.system.info', 'analytics.team.totalPosts', 'analytics.team.activeUsers', 'analytics.team.totalUsers', 'analytics.team.publicChannels', 'analytics.team.privateGroups', 'analytics.team.recentUsers', 'analytics.team.newlyCreated'],
      schema: {
        id: 'TeamAnalytics',
        component: team_analytics
      }
    },
    server_logs: {
      url: 'reporting/server_logs',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.logs'),
      title_default: 'Server Logs',
      searchableStrings: ['admin.logs.bannerDesc', 'admin.logs.title'],
      schema: {
        id: 'ServerLogs',
        component: server_logs
      }
    }
  },
  user_management: {
    icon: 'fa-users',
    sectionTitle: Object(utils_i18n["b" /* t */])('admin.sidebar.userManagement'),
    sectionTitleDefault: 'User Management',
    system_users: {
      url: 'user_management/users',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.users'),
      title_default: 'Users',
      searchableStrings: [['admin.system_users.title', {
        siteName: ''
      }]],
      schema: {
        id: 'SystemUsers',
        component: system_users
      }
    },
    group_detail: {
      url: 'user_management/groups/:group_id',
      isHidden: it.configIsFalse('ServiceSettings', 'ExperimentalLdapGroupSync'),
      schema: {
        id: 'GroupDetail',
        component: group_details
      }
    },
    groups: {
      url: 'user_management/groups',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.groups'),
      title_default: 'Groups',
      isHidden: it.configIsFalse('ServiceSettings', 'ExperimentalLdapGroupSync'),
      schema: {
        id: 'Groups',
        component: group_settings_GroupSettings
      }
    },
    team_detail: {
      url: 'user_management/teams/:team_id',
      isHidden: it.configIsFalse('ServiceSettings', 'ExperimentalLdapGroupSync'),
      schema: {
        id: 'TeamDetail',
        component: details
      }
    },
    teams: {
      url: 'user_management/teams',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.teams'),
      title_default: 'Teams',
      isHidden: it.configIsFalse('ServiceSettings', 'ExperimentalLdapGroupSync'),
      schema: {
        id: 'Teams',
        component: team_channel_settings_team
      }
    },
    channel_detail: {
      url: 'user_management/channels/:channel_id',
      isHidden: it.configIsFalse('ServiceSettings', 'ExperimentalLdapGroupSync'),
      schema: {
        id: 'ChannelDetail',
        component: channel_details
      }
    },
    channel: {
      url: 'user_management/channels',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.channels'),
      title_default: 'Channels',
      isHidden: it.configIsFalse('ServiceSettings', 'ExperimentalLdapGroupSync'),
      schema: {
        id: 'Channels',
        component: team_channel_settings_channel
      }
    },
    systemScheme: {
      url: 'user_management/permissions/system_scheme',
      isHidden: false,
      schema: {
        id: 'PermissionSystemScheme',
        component: permission_system_scheme_settings
      }
    },
    teamSchemeDetail: {
      url: 'user_management/permissions/team_override_scheme/:scheme_id',
      isHidden: false,
      schema: {
        id: 'PermissionSystemScheme',
        component: permission_team_scheme_settings
      }
    },
    teamScheme: {
      url: 'user_management/permissions/team_override_scheme',
      isHidden: false,
      schema: {
        id: 'PermissionSystemScheme',
        component: permission_team_scheme_settings
      }
    },
    permissions: {
      url: 'user_management/permissions/',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.permissions'),
      title_default: 'Permissions',
      isHidden: false,
      searchableStrings: ['admin.permissions.documentationLinkText', 'admin.permissions.teamOverrideSchemesNoSchemes', 'admin.permissions.loadMoreSchemes', 'admin.permissions.introBanner', 'admin.permissions.systemSchemeBannerTitle', 'admin.permissions.systemSchemeBannerText', 'admin.permissions.systemSchemeBannerButton', 'admin.permissions.teamOverrideSchemesTitle', 'admin.permissions.teamOverrideSchemesBannerText', 'admin.permissions.teamOverrideSchemesNewButton'],
      schema: {
        id: 'PermissionSchemes',
        component: permission_schemes_settings
      }
    }
  },
  environment: {
    icon: 'fa-server',
    sectionTitle: Object(utils_i18n["b" /* t */])('admin.sidebar.environment'),
    sectionTitleDefault: 'Environment',
    web_server: {
      url: 'environment/web_server',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.webServer'),
      title_default: 'Web Server',
      isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),
      schema: {
        id: 'ServiceSettings',
        name: Object(utils_i18n["b" /* t */])('admin.environment.webServer'),
        name_default: 'Web Server',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BANNER,
          label: Object(utils_i18n["b" /* t */])('admin.rate.noteDescription'),
          label_default: 'Changing properties in this section will require a server restart before taking effect.',
          banner_type: 'info'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'ServiceSettings.SiteURL',
          label: Object(utils_i18n["b" /* t */])('admin.service.siteURL'),
          label_default: 'Site URL:',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.siteURLDescription'),
          help_text_default: 'The URL that users will use to access Mattermost. Standard ports, such as 80 and 443, can be omitted, but non-standard ports are required. For example: http://example.com:8065. This setting is required.\n \nMattermost may be hosted at a subpath. For example: http://example.com:8065/company/mattermost. A restart is required before the server will work correctly.',
          help_text_markdown: true,
          placeholder: Object(utils_i18n["b" /* t */])('admin.service.siteURLExample'),
          placeholder_default: 'E.g.: "http://example.com:8065"'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'ServiceSettings.ListenAddress',
          label: Object(utils_i18n["b" /* t */])('admin.service.listenAddress'),
          label_default: 'Listen Address:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.service.listenExample'),
          placeholder_default: 'E.g.: ":8065"',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.listenDescription'),
          help_text_default: 'The address and port to which to bind and listen. Specifying ":8065" will bind to all network interfaces. Specifying "127.0.0.1:8065" will only bind to the network interface having that IP address. If you choose a port of a lower level (called "system ports" or "well-known ports", in the range of 0-1023), you must have permissions to bind to that port. On Linux you can use: "sudo setcap cap_net_bind_service=+ep ./bin/mattermost" to allow Mattermost to bind to well-known ports.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.Forward80To443',
          label: Object(utils_i18n["b" /* t */])('admin.service.forward80To443'),
          label_default: 'Forward port 80 to 443:',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.forward80To443Description'),
          help_text_default: 'Forwards all insecure traffic from port 80 to secure port 443. Not recommended when using a proxy server.',
          disabled_help_text: Object(utils_i18n["b" /* t */])('admin.service.forward80To443Description.disabled'),
          disabled_help_text_default: 'Forwards all insecure traffic from port 80 to secure port 443. Not recommended when using a proxy server.\n \nThis setting cannot be enabled until your server is [listening](#ListenAddress) on port 443.',
          disabled_help_text_markdown: true,
          isDisabled: it.isnt(it.stateMatches('ServiceSettings.ListenAddress', /:443$/))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_DROPDOWN,
          key: 'ServiceSettings.ConnectionSecurity',
          label: Object(utils_i18n["b" /* t */])('admin.connectionSecurityTitle'),
          label_default: 'Connection Security:',
          help_text: CONNECTION_SECURITY_HELP_TEXT_WEBSERVER,
          options: [{
            value: '',
            display_name: Object(utils_i18n["b" /* t */])('admin.connectionSecurityNone'),
            display_name_default: 'None'
          }, {
            value: 'TLS',
            display_name: Object(utils_i18n["b" /* t */])('admin.connectionSecurityTls'),
            display_name_default: 'TLS (Recommended)'
          }]
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'ServiceSettings.TLSCertFile',
          label: Object(utils_i18n["b" /* t */])('admin.service.tlsCertFile'),
          label_default: 'TLS Certificate File:',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.tlsCertFileDescription'),
          help_text_default: 'The certificate file to use.',
          isDisabled: it.stateIsTrue('ServiceSettings.UseLetsEncrypt')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'ServiceSettings.TLSKeyFile',
          label: Object(utils_i18n["b" /* t */])('admin.service.tlsKeyFile'),
          label_default: 'TLS Key File:',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.tlsKeyFileDescription'),
          help_text_default: 'The private key file to use.',
          isDisabled: it.stateIsTrue('ServiceSettings.UseLetsEncrypt')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.UseLetsEncrypt',
          label: Object(utils_i18n["b" /* t */])('admin.service.useLetsEncrypt'),
          label_default: 'Use Let\'s Encrypt:',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.useLetsEncryptDescription'),
          help_text_default: 'Enable the automatic retrieval of certificates from Let\'s Encrypt. The certificate will be retrieved when a client attempts to connect from a new domain. This will work with multiple domains.',
          disabled_help_text: Object(utils_i18n["b" /* t */])('admin.service.useLetsEncryptDescription.disabled'),
          disabled_help_text_default: 'Enable the automatic retrieval of certificates from Let\'s Encrypt. The certificate will be retrieved when a client attempts to connect from a new domain. This will work with multiple domains.\n \nThis setting cannot be enabled unless the [Forward port 80 to 443](#Forward80To443) setting is set to true.',
          disabled_help_text_markdown: true,
          isDisabled: it.stateIsFalse('ServiceSettings.Forward80To443')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'ServiceSettings.LetsEncryptCertificateCacheFile',
          label: Object(utils_i18n["b" /* t */])('admin.service.letsEncryptCertificateCacheFile'),
          label_default: 'Let\'s Encrypt Certificate Cache File:',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.letsEncryptCertificateCacheFileDescription'),
          help_text_default: 'Certificates retrieved and other data about the Let\'s Encrypt service will be stored in this file.',
          isDisabled: it.stateIsFalse('ServiceSettings.UseLetsEncrypt')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_NUMBER,
          key: 'ServiceSettings.ReadTimeout',
          label: Object(utils_i18n["b" /* t */])('admin.service.readTimeout'),
          label_default: 'Read Timeout:',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.readTimeoutDescription'),
          help_text_default: 'Maximum time allowed from when the connection is accepted to when the request body is fully read.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_NUMBER,
          key: 'ServiceSettings.WriteTimeout',
          label: Object(utils_i18n["b" /* t */])('admin.service.writeTimeout'),
          label_default: 'Write Timeout:',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.writeTimeoutDescription'),
          help_text_default: 'If using HTTP (insecure), this is the maximum time allowed from the end of reading the request headers until the response is written. If using HTTPS, it is the total time from when the connection is accepted until the response is written.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_DROPDOWN,
          key: 'ServiceSettings.WebserverMode',
          label: Object(utils_i18n["b" /* t */])('admin.webserverModeTitle'),
          label_default: 'Webserver Mode:',
          help_text: WEBSERVER_MODE_HELP_TEXT,
          options: [{
            value: 'gzip',
            display_name: Object(utils_i18n["b" /* t */])('admin.webserverModeGzip'),
            display_name_default: 'gzip'
          }, {
            value: 'uncompressed',
            display_name: Object(utils_i18n["b" /* t */])('admin.webserverModeUncompressed'),
            display_name_default: 'Uncompressed'
          }, {
            value: 'disabled',
            display_name: Object(utils_i18n["b" /* t */])('admin.webserverModeDisabled'),
            display_name_default: 'Disabled'
          }]
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.EnableInsecureOutgoingConnections',
          label: Object(utils_i18n["b" /* t */])('admin.service.insecureTlsTitle'),
          label_default: 'Enable Insecure Outgoing Connections: ',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.insecureTlsDesc'),
          help_text_default: 'When true, any outgoing HTTPS requests will accept unverified, self-signed certificates. For example, outgoing webhooks to a server with a self-signed TLS certificate, using any domain, will be allowed. Note that this makes these connections susceptible to man-in-the-middle attacks.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BUTTON,
          action: admin_actions["w" /* reloadConfig */],
          key: 'ReloadConfigButton',
          label: Object(utils_i18n["b" /* t */])('admin.reload.button'),
          label_default: 'Reload Configuration From Disk',
          help_text: Object(utils_i18n["b" /* t */])('admin.reload.reloadDescription'),
          help_text_default: 'Deployments using multiple databases can switch from one master database to another without restarting the Mattermost server by updating "config.json" to the new desired configuration and using the {featureName} feature to load the new settings while the server is running. The administrator should then use the {recycleDatabaseConnections} feature to recycle the database connections based on the new settings.',
          help_text_values: {
            featureName: react_default.a.createElement("b", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
              id: "admin.reload.reloadDescription.featureName",
              defaultMessage: "Reload Configuration from Disk"
            })),
            recycleDatabaseConnections: react_default.a.createElement("a", {
              href: "../environment/database"
            }, react_default.a.createElement("b", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
              id: "admin.reload.reloadDescription.recycleDatabaseConnections",
              defaultMessage: "Environment > Database > Recycle Database Connections"
            })))
          },
          error_message: Object(utils_i18n["b" /* t */])('admin.reload.reloadFail'),
          error_message_default: 'Reload unsuccessful: {error}'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BUTTON,
          key: 'PurgeButton',
          action: admin_actions["r" /* invalidateAllCaches */],
          label: Object(utils_i18n["b" /* t */])('admin.purge.button'),
          label_default: 'Purge All Caches',
          help_text: Object(utils_i18n["b" /* t */])('admin.purge.purgeDescription'),
          help_text_default: 'This will purge all the in-memory caches for things like sessions, accounts, channels, etc. Deployments using High Availability will attempt to purge all the servers in the cluster.  Purging the caches may adversely impact performance.',
          error_message: Object(utils_i18n["b" /* t */])('admin.purge.purgeFail'),
          error_message_default: 'Purging unsuccessful: {error}'
        }]
      }
    },
    database: {
      url: 'environment/database',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.database'),
      title_default: 'Database',
      isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),
      searchableStrings: ['admin.database.title', ['admin.recycle.recycleDescription', {
        featureName: '',
        reloadConfiguration: ''
      }], 'admin.recycle.recycleDescription.featureName', 'admin.recycle.recycleDescription.reloadConfiguration', 'admin.recycle.button', 'admin.sql.noteDescription', 'admin.sql.driverName', 'admin.sql.driverNameDescription', 'admin.sql.dataSource', 'admin.sql.dataSourceDescription', 'admin.sql.maxConnectionsTitle', 'admin.sql.maxConnectionsDescription', 'admin.sql.maxOpenTitle', 'admin.sql.maxOpenDescription', 'admin.sql.queryTimeoutTitle', 'admin.sql.queryTimeoutDescription', 'admin.sql.connMaxLifetimeTitle', 'admin.sql.connMaxLifetimeDescription', 'admin.sql.traceTitle', 'admin.sql.traceDescription'],
      schema: {
        id: 'DatabaseSettings',
        component: database_settings_DatabaseSettings
      }
    },
    elasticsearch: {
      url: 'environment/elasticsearch',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.elasticsearch'),
      title_default: 'Elasticsearch',
      isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),
      searchableStrings: ['admin.elasticsearch.title', 'admin.elasticsearch.enableIndexingTitle', ['admin.elasticsearch.enableIndexingDescription', {
        documentationLink: ''
      }], 'admin.elasticsearch.enableIndexingDescription.documentationLinkText', 'admin.elasticsearch.connectionUrlTitle', ['admin.elasticsearch.connectionUrlDescription', {
        documentationLink: ''
      }], 'admin.elasticsearch.connectionUrlExample.documentationLinkText', 'admin.elasticsearch.skipTLSVerificationTitle', 'admin.elasticsearch.skipTLSVerificationDescription', 'admin.elasticsearch.usernameTitle', 'admin.elasticsearch.usernameDescription', 'admin.elasticsearch.passwordTitle', 'admin.elasticsearch.passwordDescription', 'admin.elasticsearch.sniffTitle', 'admin.elasticsearch.sniffDescription', 'admin.elasticsearch.testHelpText', 'admin.elasticsearch.elasticsearch_test_button', 'admin.elasticsearch.bulkIndexingTitle', 'admin.elasticsearch.createJob.help', 'admin.elasticsearch.purgeIndexesHelpText', 'admin.elasticsearch.purgeIndexesButton', 'admin.elasticsearch.purgeIndexesButton.label', 'admin.elasticsearch.enableSearchingTitle', 'admin.elasticsearch.enableSearchingDescription'],
      schema: {
        id: 'ElasticSearchSettings',
        component: elasticsearch_settings_ElasticsearchSettings
      }
    },
    storage: {
      url: 'environment/file_storage',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.fileStorage'),
      title_default: 'File Storage',
      isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),
      schema: {
        id: 'FileSettings',
        name: Object(utils_i18n["b" /* t */])('admin.environment.fileStorage'),
        name_default: 'File Storage',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_DROPDOWN,
          key: 'FileSettings.DriverName',
          label: Object(utils_i18n["b" /* t */])('admin.image.storeTitle'),
          label_default: 'File Storage System:',
          help_text: Object(utils_i18n["b" /* t */])('admin.image.storeDescription'),
          help_text_default: 'Storage system where files and image attachments are saved.\n \nSelecting "Amazon S3" enables fields to enter your Amazon credentials and bucket details.\n \nSelecting "Local File System" enables the field to specify a local file directory.',
          help_text_markdown: true,
          options: [{
            value: FILE_STORAGE_DRIVER_LOCAL,
            display_name: Object(utils_i18n["b" /* t */])('admin.image.storeLocal'),
            display_name_default: 'Local File System'
          }, {
            value: FILE_STORAGE_DRIVER_S3,
            display_name: Object(utils_i18n["b" /* t */])('admin.image.storeAmazonS3'),
            display_name_default: 'Amazon S3'
          }]
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'FileSettings.Directory',
          label: Object(utils_i18n["b" /* t */])('admin.image.localTitle'),
          label_default: 'Local Storage Directory:',
          help_text: Object(utils_i18n["b" /* t */])('admin.image.localDescription'),
          help_text_default: 'Directory to which files and images are written. If blank, defaults to ./data/.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.image.localExample'),
          placeholder_default: 'E.g.: "./data/"',
          isDisabled: it.isnt(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_LOCAL))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_NUMBER,
          key: 'FileSettings.MaxFileSize',
          label: Object(utils_i18n["b" /* t */])('admin.image.maxFileSizeTitle'),
          label_default: 'Maximum File Size:',
          help_text: Object(utils_i18n["b" /* t */])('admin.image.maxFileSizeDescription'),
          help_text_default: 'Maximum file size for message attachments in megabytes. Caution: Verify server memory can support your setting choice. Large file sizes increase the risk of server crashes and failed uploads due to network interruptions.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.image.maxFileSizeExample'),
          placeholder_default: '50',
          onConfigLoad: configVal => configVal / MEBIBYTE,
          onConfigSave: displayVal => displayVal * MEBIBYTE
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'FileSettings.AmazonS3Bucket',
          label: Object(utils_i18n["b" /* t */])('admin.image.amazonS3BucketTitle'),
          label_default: 'Amazon S3 Bucket:',
          help_text: Object(utils_i18n["b" /* t */])('admin.image.amazonS3BucketDescription'),
          help_text_default: 'Name you selected for your S3 bucket in AWS.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.image.amazonS3BucketExample'),
          placeholder_default: 'E.g.: "aboutone-media"',
          isDisabled: it.isnt(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'FileSettings.AmazonS3Region',
          label: Object(utils_i18n["b" /* t */])('admin.image.amazonS3RegionTitle'),
          label_default: 'Amazon S3 Region:',
          help_text: Object(utils_i18n["b" /* t */])('admin.image.amazonS3RegionDescription'),
          help_text_default: 'AWS region you selected when creating your S3 bucket. If no region is set, Mattermost attempts to get the appropriate region from AWS, or sets it to "us-east-1" if none found.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.image.amazonS3RegionExample'),
          placeholder_default: 'E.g.: "us-east-1"',
          isDisabled: it.isnt(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'FileSettings.AmazonS3AccessKeyId',
          label: Object(utils_i18n["b" /* t */])('admin.image.amazonS3IdTitle'),
          label_default: 'Amazon S3 Access Key ID:',
          help_text: Object(utils_i18n["b" /* t */])('admin.image.amazonS3IdDescription'),
          help_text_markdown: true,
          help_text_default: '(Optional) Only required if you do not want to authenticate to S3 using an [IAM role](!https://about.mattermost.com/default-iam-role). Enter the Access Key ID provided by your Amazon EC2 administrator.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.image.amazonS3IdExample'),
          placeholder_default: 'E.g.: "AKIADTOVBGERKLCBV"',
          isDisabled: it.isnt(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'FileSettings.AmazonS3Endpoint',
          label: Object(utils_i18n["b" /* t */])('admin.image.amazonS3EndpointTitle'),
          label_default: 'Amazon S3 Endpoint:',
          help_text: Object(utils_i18n["b" /* t */])('admin.image.amazonS3EndpointDescription'),
          help_text_default: 'Hostname of your S3 Compatible Storage provider. Defaults to "s3.amazonaws.com".',
          placeholder: Object(utils_i18n["b" /* t */])('admin.image.amazonS3EndpointExample'),
          placeholder_default: 'E.g.: "s3.amazonaws.com"',
          isDisabled: it.isnt(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'FileSettings.AmazonS3SecretAccessKey',
          label: Object(utils_i18n["b" /* t */])('admin.image.amazonS3SecretTitle'),
          label_default: 'Amazon S3 Secret Access Key:',
          help_text: Object(utils_i18n["b" /* t */])('admin.image.amazonS3SecretDescription'),
          help_text_default: '(Optional) The secret access key associated with your Amazon S3 Access Key ID.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.image.amazonS3SecretExample'),
          placeholder_default: 'E.g.: "jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY"',
          isDisabled: it.isnt(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'FileSettings.AmazonS3SSL',
          label: Object(utils_i18n["b" /* t */])('admin.image.amazonS3SSLTitle'),
          label_default: 'Enable Secure Amazon S3 Connections:',
          help_text: Object(utils_i18n["b" /* t */])('admin.image.amazonS3SSLDescription'),
          help_text_default: 'When false, allow insecure connections to Amazon S3. Defaults to secure connections only.',
          isDisabled: it.isnt(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'FileSettings.AmazonS3SSE',
          label: Object(utils_i18n["b" /* t */])('admin.image.amazonS3SSETitle'),
          label_default: 'Enable Server-Side Encryption for Amazon S3:',
          help_text: Object(utils_i18n["b" /* t */])('admin.image.amazonS3SSEDescription'),
          help_text_markdown: true,
          help_text_default: 'When true, encrypt files in Amazon S3 using server-side encryption with Amazon S3-managed keys. See [documentation](!https://about.mattermost.com/default-server-side-encryption) to learn more.',
          isHidden: false,
          isDisabled: it.isnt(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'FileSettings.AmazonS3Trace',
          label: Object(utils_i18n["b" /* t */])('admin.image.amazonS3TraceTitle'),
          label_default: 'Enable Amazon S3 Debugging:',
          help_text: Object(utils_i18n["b" /* t */])('admin.image.amazonS3TraceDescription'),
          help_text_default: '(Development Mode) When true, log additional debugging information to the system logs.',
          isDisabled: it.isnt(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BUTTON,
          action: admin_actions["D" /* testS3Connection */],
          key: 'TestS3Connection',
          label: Object(utils_i18n["b" /* t */])('admin.s3.connectionS3Test'),
          label_default: 'Test Connection',
          loading: Object(utils_i18n["b" /* t */])('admin.s3.testing'),
          loading_default: 'Testing...',
          error_message: Object(utils_i18n["b" /* t */])('admin.s3.s3Fail'),
          error_message_default: 'Connection unsuccessful: {error}',
          success_message: Object(utils_i18n["b" /* t */])('admin.s3.s3Success'),
          success_message_default: 'Connection was successful'
        }]
      }
    },
    image_proxy: {
      url: 'environment/image_proxy',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.imageProxy'),
      title_default: 'Image Proxy',
      isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),
      schema: {
        id: 'ImageProxy',
        name: Object(utils_i18n["b" /* t */])('admin.environment.imageProxy'),
        name_default: 'Image Proxy',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ImageProxySettings.Enable',
          label: Object(utils_i18n["b" /* t */])('admin.image.enableProxy'),
          label_default: 'Enable Image Proxy:',
          help_text: Object(utils_i18n["b" /* t */])('admin.image.enableProxyDescription'),
          help_text_default: 'When true, enables an image proxy for loading all Markdown images.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_DROPDOWN,
          key: 'ImageProxySettings.ImageProxyType',
          label: Object(utils_i18n["b" /* t */])('admin.image.proxyType'),
          label_default: 'Image Proxy Type:',
          help_text: Object(utils_i18n["b" /* t */])('admin.image.proxyTypeDescription'),
          help_text_default: 'Configure an image proxy to load all Markdown images through a proxy. The image proxy prevents users from making insecure image requests, provides caching for increased performance, and automates image adjustments such as resizing. See [documentation](!https://about.mattermost.com/default-image-proxy-documentation) to learn more.',
          help_text_markdown: true,
          options: [{
            value: 'atmos/camo',
            display_name: Object(utils_i18n["b" /* t */])('atmos/camo'),
            display_name_default: 'atmos/camo'
          }, {
            value: 'local',
            display_name: Object(utils_i18n["b" /* t */])('local'),
            display_name_default: 'local'
          }],
          isDisabled: it.stateIsFalse('ImageProxySettings.Enable')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'ImageProxySettings.RemoteImageProxyURL',
          label: Object(utils_i18n["b" /* t */])('admin.image.proxyURL'),
          label_default: 'Remote Image Proxy URL:',
          help_text: Object(utils_i18n["b" /* t */])('admin.image.proxyURLDescription'),
          help_text_default: 'URL of your remote image proxy server.',
          isDisabled: it.either(it.stateIsFalse('ImageProxySettings.Enable'), it.stateEquals('ImageProxySettings.ImageProxyType', 'local'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'ImageProxySettings.RemoteImageProxyOptions',
          label: Object(utils_i18n["b" /* t */])('admin.image.proxyOptions'),
          label_default: 'Remote Image Proxy Options:',
          help_text: Object(utils_i18n["b" /* t */])('admin.image.proxyOptionsDescription'),
          help_text_default: 'Additional options such as the URL signing key. Refer to your image proxy documentation to learn more about what options are supported.',
          isDisabled: it.either(it.stateIsFalse('ImageProxySettings.Enable'), it.stateEquals('ImageProxySettings.ImageProxyType', 'local'))
        }]
      }
    },
    smtp: {
      url: 'environment/smtp',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.smtp'),
      title_default: 'SMTP',
      isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),
      schema: {
        id: 'SMTP',
        name: Object(utils_i18n["b" /* t */])('admin.environment.smtp'),
        name_default: 'SMTP',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'EmailSettings.SMTPServer',
          label: Object(utils_i18n["b" /* t */])('admin.environment.smtp.smtpServer.title'),
          label_default: 'SMTP Server:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.environment.smtp.smtpServer.placeholder'),
          placeholder_default: 'Ex: "smtp.yourcompany.com", "email-smtp.us-east-1.amazonaws.com"',
          help_text: Object(utils_i18n["b" /* t */])('admin.environment.smtp.smtpServer.description'),
          help_text_default: 'Location of SMTP email server.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'EmailSettings.SMTPPort',
          label: Object(utils_i18n["b" /* t */])('admin.environment.smtp.smtpPort.title'),
          label_default: 'SMTP Server Port:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.environment.smtp.smtpPort.placeholder'),
          placeholder_default: 'Ex: "25", "465", "587"',
          help_text: Object(utils_i18n["b" /* t */])('admin.environment.smtp.smtpPort.description'),
          help_text_default: 'Port of SMTP email server.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'EmailSettings.EnableSMTPAuth',
          label: Object(utils_i18n["b" /* t */])('admin.environment.smtp.smtpAuth.title'),
          label_default: 'Enable SMTP Authentication:',
          help_text: Object(utils_i18n["b" /* t */])('admin.environment.smtp.smtpAuth.description'),
          help_text_default: 'When true, SMTP Authentication is enabled.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'EmailSettings.SMTPUsername',
          label: Object(utils_i18n["b" /* t */])('admin.environment.smtp.smtpUsername.title'),
          label_default: 'SMTP Server Username:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.environment.smtp.smtpUsername.placeholder'),
          placeholder_default: 'Ex: "admin@yourcompany.com", "AKIADTOVBGERKLCBV"',
          help_text: Object(utils_i18n["b" /* t */])('admin.environment.smtp.smtpUsername.description'),
          help_text_default: 'Obtain this credential from administrator setting up your email server.',
          isDisabled: it.stateIsFalse('EmailSettings.EnableSMTPAuth')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'EmailSettings.SMTPPassword',
          label: Object(utils_i18n["b" /* t */])('admin.environment.smtp.smtpPassword.title'),
          label_default: 'SMTP Server Password:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.environment.smtp.smtpPassword.placeholder'),
          placeholder_default: 'Ex: "yourpassword", "jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY"',
          help_text: Object(utils_i18n["b" /* t */])('admin.environment.smtp.smtpPassword.description'),
          help_text_default: 'Obtain this credential from administrator setting up your email server.',
          isDisabled: it.stateIsFalse('EmailSettings.EnableSMTPAuth')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_DROPDOWN,
          key: 'EmailSettings.ConnectionSecurity',
          label: Object(utils_i18n["b" /* t */])('admin.environment.smtp.connectionSecurity.title'),
          label_default: 'Connection Security:',
          help_text: CONNECTION_SECURITY_HELP_TEXT_EMAIL,
          options: [{
            value: '',
            display_name: Object(utils_i18n["b" /* t */])('admin.environment.smtp.connectionSecurity.option.none'),
            display_name_default: 'None'
          }, {
            value: 'TLS',
            display_name: Object(utils_i18n["b" /* t */])('admin.environment.smtp.connectionSecurity.option.tls'),
            display_name_default: 'TLS (Recommended)'
          }, {
            value: 'STARTTLS',
            display_name: Object(utils_i18n["b" /* t */])('admin.environment.smtp.connectionSecurity.option.starttls'),
            display_name_default: 'STARTTLS'
          }]
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BUTTON,
          action: admin_actions["E" /* testSmtp */],
          key: 'TestSmtpConnection',
          label: Object(utils_i18n["b" /* t */])('admin.environment.smtp.connectionSmtpTest'),
          label_default: 'Test Connection',
          loading: Object(utils_i18n["b" /* t */])('admin.environment.smtp.testing'),
          loading_default: 'Testing...',
          error_message: Object(utils_i18n["b" /* t */])('admin.environment.smtp.smtpFail'),
          error_message_default: 'Connection unsuccessful: {error}',
          success_message: Object(utils_i18n["b" /* t */])('admin.environment.smtp.smtpSuccess'),
          success_message_default: 'No errors were reported while sending an email. Please check your inbox to make sure.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'EmailSettings.SkipServerCertificateVerification',
          label: Object(utils_i18n["b" /* t */])('admin.environment.smtp.skipServerCertificateVerification.title'),
          label_default: 'Skip Server Certificate Verification:',
          help_text: Object(utils_i18n["b" /* t */])('admin.environment.smtp.skipServerCertificateVerification.description'),
          help_text_default: 'When true, Mattermost will not verify the email server certificate.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.EnableSecurityFixAlert',
          label: Object(utils_i18n["b" /* t */])('admin.environment.smtp.enableSecurityFixAlert.title'),
          label_default: 'Enable Security Alerts:',
          help_text: Object(utils_i18n["b" /* t */])('admin.environment.smtp.enableSecurityFixAlert.description'),
          help_text_default: 'When true, System Administrators are notified by email if a relevant security fix alert has been announced in the last 12 hours. Requires email to be enabled.'
        }]
      }
    },
    push_notification_server: {
      url: 'environment/push_notification_server',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.pushNotificationServer'),
      title_default: 'Push Notification Server',
      isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),
      searchableStrings: ['admin.environment.pushNotificationServer', 'admin.email.pushTitle', 'admin.email.pushServerTitle', 'admin.email.pushContentTitle', 'admin.email.pushContentDesc'],
      schema: {
        id: 'PushNotificationsSettings',
        component: push_settings_PushSettings
      }
    },
    high_availability: {
      url: 'environment/high_availability',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.highAvailability'),
      title_default: 'High Availability',
      isHidden: false,
      searchableStrings: ['admin.advance.cluster', 'admin.cluster.noteDescription', 'admin.cluster.enableTitle', 'admin.cluster.enableDescription', 'admin.cluster.ClusterName', 'admin.cluster.ClusterNameDesc', 'admin.cluster.OverrideHostname', 'admin.cluster.OverrideHostnameDesc', 'admin.cluster.UseIpAddress', 'admin.cluster.UseIpAddressDesc', 'admin.cluster.UseExperimentalGossip', 'admin.cluster.UseExperimentalGossipDesc', 'admin.cluster.GossipPort', 'admin.cluster.GossipPortDesc', 'admin.cluster.StreamingPort', 'admin.cluster.StreamingPortDesc'],
      schema: {
        id: 'ClusterSettings',
        component: cluster_settings_ClusterSettings
      }
    },
    rate_limiting: {
      url: 'environment/rate_limiting',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.rateLimiting'),
      title_default: 'Rate Limiting',
      isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),
      schema: {
        id: 'ServiceSettings',
        name: Object(utils_i18n["b" /* t */])('admin.rate.title'),
        name_default: 'Rate Limiting',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BANNER,
          label: Object(utils_i18n["b" /* t */])('admin.rate.noteDescription'),
          label_default: 'Changing properties other than Site URL in this section will require a server restart before taking effect.',
          banner_type: 'info'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'RateLimitSettings.Enable',
          label: Object(utils_i18n["b" /* t */])('admin.rate.enableLimiterTitle'),
          label_default: 'Enable Rate Limiting:',
          help_text: Object(utils_i18n["b" /* t */])('admin.rate.enableLimiterDescription'),
          help_text_default: 'When true, APIs are throttled at rates specified below.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_NUMBER,
          key: 'RateLimitSettings.PerSec',
          label: Object(utils_i18n["b" /* t */])('admin.rate.queriesTitle'),
          label_default: 'Maximum Queries per Second:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.rate.queriesExample'),
          placeholder_default: 'E.g.: "10"',
          help_text: Object(utils_i18n["b" /* t */])('admin.rate.queriesDescription'),
          help_text_default: 'Throttles API at this number of requests per second.',
          isDisabled: it.stateEquals('RateLimitSettings.Enable', false)
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_NUMBER,
          key: 'RateLimitSettings.MaxBurst',
          label: Object(utils_i18n["b" /* t */])('admin.rate.maxBurst'),
          label_default: 'Maximum Burst Size:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.rate.maxBurstExample'),
          placeholder_default: 'E.g.: "100"',
          help_text: Object(utils_i18n["b" /* t */])('admin.rate.maxBurstDescription'),
          help_text_default: 'Maximum number of requests allowed beyond the per second query limit.',
          isDisabled: it.stateEquals('RateLimitSettings.Enable', false)
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_NUMBER,
          key: 'RateLimitSettings.MemoryStoreSize',
          label: Object(utils_i18n["b" /* t */])('admin.rate.memoryTitle'),
          label_default: 'Memory Store Size:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.rate.memoryExample'),
          placeholder_default: 'E.g.: "10000"',
          help_text: Object(utils_i18n["b" /* t */])('admin.rate.memoryDescription'),
          help_text_default: 'Maximum number of users sessions connected to the system as determined by "Vary rate limit by remote address" and "Vary rate limit by HTTP header".',
          isDisabled: it.stateEquals('RateLimitSettings.Enable', false)
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'RateLimitSettings.VaryByRemoteAddr',
          label: Object(utils_i18n["b" /* t */])('admin.rate.remoteTitle'),
          label_default: 'Vary rate limit by remote address:',
          help_text: Object(utils_i18n["b" /* t */])('admin.rate.remoteDescription'),
          help_text_default: 'When true, rate limit API access by IP address.',
          isDisabled: it.stateEquals('RateLimitSettings.Enable', false)
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'RateLimitSettings.VaryByUser',
          label: Object(utils_i18n["b" /* t */])('admin.rate.varyByUser'),
          label_default: 'Vary rate limit by user:',
          help_text: Object(utils_i18n["b" /* t */])('admin.rate.varyByUserDescription'),
          help_text_default: 'When true, rate limit API access by user athentication token.',
          isDisabled: it.stateEquals('RateLimitSettings.Enable', false)
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'RateLimitSettings.VaryByHeader',
          label: Object(utils_i18n["b" /* t */])('admin.rate.httpHeaderTitle'),
          label_default: 'Vary rate limit by HTTP header:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.rate.httpHeaderExample'),
          placeholder_default: 'E.g.: "X-Real-IP", "X-Forwarded-For"',
          help_text: Object(utils_i18n["b" /* t */])('admin.rate.httpHeaderDescription'),
          help_text_default: 'When filled in, vary rate limiting by HTTP header field specified (e.g. when configuring NGINX set to "X-Real-IP", when configuring AmazonELB set to "X-Forwarded-For").',
          isDisabled: it.either(it.stateEquals('RateLimitSettings.Enable', false), it.stateEquals('RateLimitSettings.VaryByRemoteAddr', true))
        }]
      }
    },
    logging: {
      url: 'environment/logging',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.logging'),
      title_default: 'Logging',
      isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),
      schema: {
        id: 'LogSettings',
        name: Object(utils_i18n["b" /* t */])('admin.general.log'),
        name_default: 'Logging',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'LogSettings.EnableConsole',
          label: Object(utils_i18n["b" /* t */])('admin.log.consoleTitle'),
          label_default: 'Output logs to console: ',
          help_text: Object(utils_i18n["b" /* t */])('admin.log.consoleDescription'),
          help_text_default: 'Typically set to false in production. Developers may set this field to true to output log messages to console based on the console level option.  If true, server writes messages to the standard output stream (stdout). Changing this setting requires a server restart before taking effect.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_DROPDOWN,
          key: 'LogSettings.ConsoleLevel',
          label: Object(utils_i18n["b" /* t */])('admin.log.levelTitle'),
          label_default: 'Console Log Level:',
          help_text: Object(utils_i18n["b" /* t */])('admin.log.levelDescription'),
          help_text_default: 'This setting determines the level of detail at which log events are written to the console. ERROR: Outputs only error messages. INFO: Outputs error messages and information around startup and initialization. DEBUG: Prints high detail for developers working on debugging issues.',
          options: LOG_LEVEL_OPTIONS,
          isDisabled: it.stateIsFalse('LogSettings.EnableConsole')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'LogSettings.ConsoleJson',
          label: Object(utils_i18n["b" /* t */])('admin.log.consoleJsonTitle'),
          label_default: 'Output console logs as JSON:',
          help_text: Object(utils_i18n["b" /* t */])('admin.log.jsonDescription'),
          help_text_default: 'When true, logged events are written in a machine readable JSON format. Otherwise they are printed as plain text. Changing this setting requires a server restart before taking effect.',
          isDisabled: it.stateIsFalse('LogSettings.EnableConsole')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'LogSettings.EnableFile',
          label: Object(utils_i18n["b" /* t */])('admin.log.fileTitle'),
          label_default: 'Output logs to file: ',
          help_text: Object(utils_i18n["b" /* t */])('admin.log.fileDescription'),
          help_text_default: 'Typically set to true in production. When true, logged events are written to the mattermost.log file in the directory specified in the File Log Directory field. The logs are rotated at 10,000 lines and archived to a file in the same directory, and given a name with a datestamp and serial number. For example, mattermost.2017-03-31.001. Changing this setting requires a server restart before taking effect.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_DROPDOWN,
          key: 'LogSettings.FileLevel',
          label: Object(utils_i18n["b" /* t */])('admin.log.fileLevelTitle'),
          label_default: 'File Log Level:',
          help_text: Object(utils_i18n["b" /* t */])('admin.log.fileLevelDescription'),
          help_text_default: 'This setting determines the level of detail at which log events are written to the log file. ERROR: Outputs only error messages. INFO: Outputs error messages and information around startup and initialization. DEBUG: Prints high detail for developers working on debugging issues.',
          options: LOG_LEVEL_OPTIONS,
          isDisabled: it.stateIsFalse('LogSettings.EnableFile')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'LogSettings.FileJson',
          label: Object(utils_i18n["b" /* t */])('admin.log.fileJsonTitle'),
          label_default: 'Output file logs as JSON:',
          help_text: Object(utils_i18n["b" /* t */])('admin.log.jsonDescription'),
          help_text_default: 'When true, logged events are written in a machine readable JSON format. Otherwise they are printed as plain text. Changing this setting requires a server restart before taking effect.',
          isDisabled: it.stateIsFalse('LogSettings.EnableFile')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'LogSettings.FileLocation',
          label: Object(utils_i18n["b" /* t */])('admin.log.locationTitle'),
          label_default: 'File Log Directory:',
          help_text: Object(utils_i18n["b" /* t */])('admin.log.locationDescription'),
          help_text_default: 'The location of the log files. If blank, they are stored in the ./logs directory. The path that you set must exist and Mattermost must have write permissions in it. Changing this setting requires a server restart before taking effect.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.log.locationPlaceholder'),
          placeholder_default: 'Enter your file location',
          isDisabled: it.stateIsFalse('LogSettings.EnableFile')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'LogSettings.EnableWebhookDebugging',
          label: Object(utils_i18n["b" /* t */])('admin.log.enableWebhookDebugging'),
          label_default: 'Enable Webhook Debugging:',
          help_text: Object(utils_i18n["b" /* t */])('admin.log.enableWebhookDebuggingDescription'),
          help_text_default: 'When true, sends webhook debug messages to the server logs. To also output the request body of incoming webhooks, set {boldedLogLevel} to "DEBUG".',
          help_text_values: {
            boldedLogLevel: react_default.a.createElement("strong", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
              id: "admin.log.logLevel",
              defaultMessage: "Log Level"
            }))
          }
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'LogSettings.EnableDiagnostics',
          label: Object(utils_i18n["b" /* t */])('admin.log.enableDiagnostics'),
          label_default: 'Enable Diagnostics and Error Reporting:',
          help_text: Object(utils_i18n["b" /* t */])('admin.log.enableDiagnosticsDescription'),
          help_text_default: 'Enable this feature to improve the quality and performance of Mattermost by sending error reporting and diagnostic information to Mattermost, Inc. Read our [privacy policy](!https://about.mattermost.com/default-privacy-policy/) to learn more.',
          help_text_markdown: true,
          onConfigSave: (displayVal, previousVal) => {
            if (previousVal && previousVal !== displayVal) {
              Object(diagnostics_actions["d" /* trackEvent */])('ui', 'diagnostics_disabled');
            }

            return displayVal;
          }
        }]
      }
    },
    session_lengths: {
      url: 'environment/session_lengths',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.sessionLengths'),
      title_default: 'Session Lengths',
      isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),
      schema: {
        id: 'SessionLengths',
        name: Object(utils_i18n["b" /* t */])('admin.environment.sessionLengths'),
        name_default: 'Session Lengths',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_NUMBER,
          key: 'ServiceSettings.SessionLengthWebInDays',
          label: Object(utils_i18n["b" /* t */])('admin.service.webSessionDays'),
          label_default: 'Session Length AD/LDAP and Email (days):',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.webSessionDaysDesc'),
          help_text_default: 'The number of days from the last time a user entered their credentials to the expiry of the users session. After changing this setting, the new session length will take effect after the next time the user enters their credentials.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.service.sessionDaysEx'),
          placeholder_default: 'E.g.: "30"'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_NUMBER,
          key: 'ServiceSettings.SessionLengthMobileInDays',
          label: Object(utils_i18n["b" /* t */])('admin.service.mobileSessionDays'),
          label_default: 'Session Length Mobile (days):',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.mobileSessionDaysDesc'),
          help_text_default: 'The number of days from the last time a user entered their credentials to the expiry of the users session. After changing this setting, the new session length will take effect after the next time the user enters their credentials.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.service.sessionDaysEx'),
          placeholder_default: 'E.g.: "30"'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_NUMBER,
          key: 'ServiceSettings.SessionLengthSSOInDays',
          label: Object(utils_i18n["b" /* t */])('admin.service.ssoSessionDays'),
          label_default: 'Session Length SSO (days):',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.ssoSessionDaysDesc'),
          help_text_default: 'The number of days from the last time a user entered their credentials to the expiry of the users session. If the authentication method is SAML or GitLab, the user may automatically be logged back in to Mattermost if they are already logged in to SAML or GitLab. After changing this setting, the setting will take effect after the next time the user enters their credentials.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.service.sessionDaysEx'),
          placeholder_default: 'E.g.: "30"'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_NUMBER,
          key: 'ServiceSettings.SessionCacheInMinutes',
          label: Object(utils_i18n["b" /* t */])('admin.service.sessionCache'),
          label_default: 'Session Cache (minutes):',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.sessionCacheDesc'),
          help_text_default: 'The number of minutes to cache a session in memory.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.service.sessionDaysEx'),
          placeholder_default: 'E.g.: "30"'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_NUMBER,
          key: 'ServiceSettings.SessionIdleTimeoutInMinutes',
          label: Object(utils_i18n["b" /* t */])('admin.service.sessionIdleTimeout'),
          label_default: 'Session Idle Timeout (minutes):',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.sessionIdleTimeoutDesc'),
          help_text_default: 'The number of minutes from the last time a user was active on the system to the expiry of the user\'s session. Once expired, the user will need to log in to continue. Minimum is 5 minutes, and 0 is unlimited.\n \nApplies to the desktop app and browsers. For mobile apps, use an EMM provider to lock the app when not in use. In High Availability mode, enable IP hash load balancing for reliable timeout measurement.',
          help_text_markdown: true,
          placeholder: Object(utils_i18n["b" /* t */])('admin.service.sessionIdleTimeoutEx'),
          placeholder_default: 'E.g.: "60"',
          isHidden: false,
          onConfigSave: value => {
            if (value !== 0 && value < MINIMUM_IDLE_TIMEOUT) {
              return MINIMUM_IDLE_TIMEOUT;
            }

            return value;
          }
        }]
      }
    },
    metrics: {
      url: 'environment/performance_monitoring',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.metrics'),
      title_default: 'Performance Monitoring',
      isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),
      schema: {
        id: 'MetricsSettings',
        name: Object(utils_i18n["b" /* t */])('admin.advance.metrics'),
        name_default: 'Performance Monitoring',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'MetricsSettings.Enable',
          label: Object(utils_i18n["b" /* t */])('admin.metrics.enableTitle'),
          label_default: 'Enable Performance Monitoring:',
          help_text: Object(utils_i18n["b" /* t */])('admin.metrics.enableDescription'),
          help_text_default: 'When true, Mattermost will enable performance monitoring collection and profiling. Please see [documentation](!http://docs.mattermost.com/deployment/metrics.html) to learn more about configuring performance monitoring for Mattermost.',
          help_text_markdown: true
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'MetricsSettings.ListenAddress',
          label: Object(utils_i18n["b" /* t */])('admin.metrics.listenAddressTitle'),
          label_default: 'Listen Address:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.metrics.listenAddressEx'),
          placeholder_default: 'E.g.: ":8067"',
          help_text: Object(utils_i18n["b" /* t */])('admin.metrics.listenAddressDesc'),
          help_text_default: 'The address the server will listen on to expose performance metrics.'
        }]
      }
    },
    developer: {
      url: 'environment/developer',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.developer'),
      title_default: 'Developer',
      isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),
      schema: {
        id: 'ServiceSettings',
        name: Object(utils_i18n["b" /* t */])('admin.developer.title'),
        name_default: 'Developer Settings',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.EnableTesting',
          label: Object(utils_i18n["b" /* t */])('admin.service.testingTitle'),
          label_default: 'Enable Testing Commands:',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.testingDescription'),
          help_text_default: 'When true, /test slash command is enabled to load test accounts, data and text formatting. Changing this requires a server restart before taking effect.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.EnableDeveloper',
          label: Object(utils_i18n["b" /* t */])('admin.service.developerTitle'),
          label_default: 'Enable Developer Mode: ',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.developerDesc'),
          help_text_default: 'When true, JavaScript errors are shown in a purple bar at the top of the user interface. Not recommended for use in production.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'ServiceSettings.AllowedUntrustedInternalConnections',
          label: Object(utils_i18n["b" /* t */])('admin.service.internalConnectionsTitle'),
          label_default: 'Allow untrusted internal connections to: ',
          placeholder: Object(utils_i18n["b" /* t */])('admin.service.internalConnectionsEx'),
          placeholder_default: 'webhooks.internal.example.com 127.0.0.1 10.0.16.0/28',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.internalConnectionsDesc'),
          help_text_default: 'A whitelist of local network addresses that can be requested by the Mattermost server on behalf of a client. Care should be used when configuring this setting to prevent unintended access to your local network. See [documentation](https://mattermost.com/pl/default-allow-untrusted-internal-connections) to learn more.',
          help_text_markdown: true
        }]
      }
    }
  },
  site: {
    icon: 'fa-cogs',
    sectionTitle: Object(utils_i18n["b" /* t */])('admin.sidebar.site'),
    sectionTitleDefault: 'Site Configuration',
    customization: {
      url: 'site_config/customization',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.customization'),
      title_default: 'Customization',
      schema: {
        id: 'Customization',
        name: Object(utils_i18n["b" /* t */])('admin.site.customization'),
        name_default: 'Customization',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'TeamSettings.SiteName',
          label: Object(utils_i18n["b" /* t */])('admin.team.siteNameTitle'),
          label_default: 'Site Name:',
          help_text: Object(utils_i18n["b" /* t */])('admin.team.siteNameDescription'),
          help_text_default: 'Name of service shown in login screens and UI. When not specified, it defaults to "Aboutone".',
          placeholder: Object(utils_i18n["b" /* t */])('admin.team.siteNameExample'),
          placeholder_default: 'E.g.: "Aboutone"',
          max_length: constants["g" /* Constants */].MAX_SITENAME_LENGTH
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'TeamSettings.CustomDescriptionText',
          label: Object(utils_i18n["b" /* t */])('admin.team.brandDescriptionTitle'),
          label_default: 'Site Description: ',
          help_text: Object(utils_i18n["b" /* t */])('admin.team.brandDescriptionHelp'),
          help_text_default: 'Description of service shown in login screens and UI. When not specified, "All team communication in one place, searchable and accessible anywhere" is displayed.',
          placeholder: Object(utils_i18n["b" /* t */])('web.root.signup_info'),
          placeholder_default: 'All team communication in one place, searchable and accessible anywhere'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'TeamSettings.EnableCustomBrand',
          label: Object(utils_i18n["b" /* t */])('admin.team.brandTitle'),
          label_default: 'Enable Custom Branding: ',
          help_text: Object(utils_i18n["b" /* t */])('admin.team.brandDesc'),
          help_text_default: 'Enable custom branding to show an image of your choice, uploaded below, and some help text, written below, on the login page.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_CUSTOM,
          component: brand_image_setting_BrandImageSetting,
          isDisabled: it.stateIsFalse('TeamSettings.EnableCustomBrand'),
          key: 'CustomBrandImage'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_LONG_TEXT,
          key: 'TeamSettings.CustomBrandText',
          label: Object(utils_i18n["b" /* t */])('admin.team.brandTextTitle'),
          label_default: 'Custom Brand Text:',
          help_text: Object(utils_i18n["b" /* t */])('admin.team.brandTextDescription'),
          help_text_default: 'Text that will appear below your custom brand image on your login screen. Supports Markdown-formatted text. Maximum 500 characters allowed.',
          isDisabled: it.stateIsFalse('TeamSettings.EnableCustomBrand'),
          max_length: constants["g" /* Constants */].MAX_CUSTOM_BRAND_TEXT_LENGTH
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'SupportSettings.HelpLink',
          label: Object(utils_i18n["b" /* t */])('admin.support.helpTitle'),
          label_default: 'Help Link:',
          help_text: Object(utils_i18n["b" /* t */])('admin.support.helpDesc'),
          help_text_default: 'The URL for the Help link on the Mattermost login page, sign-up pages, and Main Menu. If this field is empty, the Help link is hidden from users.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'SupportSettings.SupportEmail',
          label: Object(utils_i18n["b" /* t */])('admin.support.emailTitle'),
          label_default: 'Support Email:',
          help_text: Object(utils_i18n["b" /* t */])('admin.support.emailHelp'),
          help_text_default: 'Email address displayed on email notifications and during tutorial for end users to ask support questions.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'SupportSettings.TermsOfServiceLink',
          label: Object(utils_i18n["b" /* t */])('admin.support.termsTitle'),
          label_default: 'Terms of Service Link:',
          help_text: Object(utils_i18n["b" /* t */])('admin.support.termsDesc'),
          help_text_default: 'Link to the terms under which users may use your online service. By default, this includes the "Aboutone Conditions of Use (End Users)" explaining the terms under which Mattermost software is provided to end users. If you change the default link to add your own terms for using the service you provide, your new terms must include a link to the default terms so end users are aware of the Mattermost Conditions of Use (End User) for Mattermost software.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'SupportSettings.PrivacyPolicyLink',
          label: Object(utils_i18n["b" /* t */])('admin.support.privacyTitle'),
          label_default: 'Privacy Policy Link:',
          help_text: Object(utils_i18n["b" /* t */])('admin.support.privacyDesc'),
          help_text_default: 'The URL for the Privacy link on the login and sign-up pages. If this field is empty, the Privacy link is hidden from users.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'SupportSettings.AboutLink',
          label: Object(utils_i18n["b" /* t */])('admin.support.aboutTitle'),
          label_default: 'About Link:',
          help_text: Object(utils_i18n["b" /* t */])('admin.support.aboutDesc'),
          help_text_default: 'The URL for the About link on the Mattermost login and sign-up pages. If this field is empty, the About link is hidden from users.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'SupportSettings.ReportAProblemLink',
          label: Object(utils_i18n["b" /* t */])('admin.support.problemTitle'),
          label_default: 'Report a Problem Link:',
          help_text: Object(utils_i18n["b" /* t */])('admin.support.problemDesc'),
          help_text_default: 'The URL for the Report a Problem link in the Main Menu. If this field is empty, the link is removed from the Main Menu.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'NativeAppSettings.AppDownloadLink',
          label: Object(utils_i18n["b" /* t */])('admin.customization.appDownloadLinkTitle'),
          label_default: 'Mattermost Apps Download Page Link:',
          help_text: Object(utils_i18n["b" /* t */])('admin.customization.appDownloadLinkDesc'),
          help_text_default: 'Add a link to a download page for the Mattermost apps. When a link is present, an option to "Download Mattermost Apps" will be added in the Main Menu so users can find the download page. Leave this field blank to hide the option from the Main Menu.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'NativeAppSettings.AndroidAppDownloadLink',
          label: Object(utils_i18n["b" /* t */])('admin.customization.androidAppDownloadLinkTitle'),
          label_default: 'Android App Download Link:',
          help_text: Object(utils_i18n["b" /* t */])('admin.customization.androidAppDownloadLinkDesc'),
          help_text_default: 'Add a link to download the Android app. Users who access the site on a mobile web browser will be prompted with a page giving them the option to download the app. Leave this field blank to prevent the page from appearing.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'NativeAppSettings.IosAppDownloadLink',
          label: Object(utils_i18n["b" /* t */])('admin.customization.iosAppDownloadLinkTitle'),
          label_default: 'iOS App Download Link:',
          help_text: Object(utils_i18n["b" /* t */])('admin.customization.iosAppDownloadLinkDesc'),
          help_text_default: 'Add a link to download the iOS app. Users who access the site on a mobile web browser will be prompted with a page giving them the option to download the app. Leave this field blank to prevent the page from appearing.'
        }]
      }
    },
    localization: {
      url: 'site_config/localization',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.localization'),
      title_default: 'Localization',
      schema: {
        id: 'LocalizationSettings',
        name: Object(utils_i18n["b" /* t */])('admin.site.localization'),
        name_default: 'Localization',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_LANGUAGE,
          key: 'LocalizationSettings.DefaultServerLocale',
          label: Object(utils_i18n["b" /* t */])('admin.general.localization.serverLocaleTitle'),
          label_default: 'Default Server Language:',
          help_text: Object(utils_i18n["b" /* t */])('admin.general.localization.serverLocaleDescription'),
          help_text_default: 'Default language for system messages. Changing this will require a server restart before taking effect.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_LANGUAGE,
          key: 'LocalizationSettings.DefaultClientLocale',
          label: Object(utils_i18n["b" /* t */])('admin.general.localization.clientLocaleTitle'),
          label_default: 'Default Client Language:',
          help_text: Object(utils_i18n["b" /* t */])('admin.general.localization.clientLocaleDescription'),
          help_text_default: 'Default language for newly created users and pages where the user hasn\'t logged in.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_LANGUAGE,
          key: 'LocalizationSettings.AvailableLocales',
          label: Object(utils_i18n["b" /* t */])('admin.general.localization.availableLocalesTitle'),
          label_default: 'Available Languages:',
          help_text: Object(utils_i18n["b" /* t */])('admin.general.localization.availableLocalesDescription'),
          help_text_markdown: true,
          help_text_default: 'Set which languages are available for users in Account Settings (leave this field blank to have all supported languages available). If you\'re manually adding new languages, the **Default Client Language** must be added before saving this setting.\n \nWould like to help with translations? Join the [Mattermost Translation Server](!http://translate.mattermost.com/) to contribute.',
          multiple: true,
          no_result: Object(utils_i18n["b" /* t */])('admin.general.localization.availableLocalesNoResults'),
          no_result_default: 'No results found',
          not_present: Object(utils_i18n["b" /* t */])('admin.general.localization.availableLocalesNotPresent'),
          not_present_default: 'The default client language must be included in the available list'
        }]
      }
    },
    users_and_teams: {
      url: 'site_config/users_and_teams',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.usersAndTeams'),
      title_default: 'Users and Teams',
      schema: {
        id: 'UserAndTeamsSettings',
        name: Object(utils_i18n["b" /* t */])('admin.site.usersAndTeams'),
        name_default: 'Users and Teams',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_PERMISSION,
          key: 'TeamSettings.EnableTeamCreation',
          label: Object(utils_i18n["b" /* t */])('admin.team.teamCreationTitle'),
          label_default: 'Enable Team Creation: ',
          help_text: Object(utils_i18n["b" /* t */])('admin.team.teamCreationDescription'),
          help_text_default: 'When false, only System Administrators can create teams.',
          permissions_mapping_name: 'enableTeamCreation',
          isHidden: true
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_NUMBER,
          key: 'TeamSettings.MaxUsersPerTeam',
          label: Object(utils_i18n["b" /* t */])('admin.team.maxUsersTitle'),
          label_default: 'Max Users Per Team:',
          help_text: Object(utils_i18n["b" /* t */])('admin.team.maxUsersDescription'),
          help_text_default: 'Maximum total number of users per team, including both active and inactive users.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.team.maxUsersExample'),
          placeholder_default: 'E.g.: "25"'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_NUMBER,
          key: 'TeamSettings.MaxChannelsPerTeam',
          label: Object(utils_i18n["b" /* t */])('admin.team.maxChannelsTitle'),
          label_default: 'Max Channels Per Team:',
          help_text: Object(utils_i18n["b" /* t */])('admin.team.maxChannelsDescription'),
          help_text_default: 'Maximum total number of channels per team, including both active and archived channels.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.team.maxChannelsExample'),
          placeholder_default: 'E.g.: "100"'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_DROPDOWN,
          key: 'TeamSettings.RestrictDirectMessage',
          label: Object(utils_i18n["b" /* t */])('admin.team.restrictDirectMessage'),
          label_default: 'Enable users to open Direct Message channels with:',
          help_text: Object(utils_i18n["b" /* t */])('admin.team.restrictDirectMessageDesc'),
          help_text_default: '"Any user on the Mattermost server" enables users to open a Direct Message channel with any user on the server, even if they are not on any teams together. "Any member of the team" limits the ability in the Direct Messages "More" menu to only open Direct Message channels with users who are in the same team.\n \nNote: This setting only affects the UI, not permissions on the server.',
          options: [{
            value: 'any',
            display_name: Object(utils_i18n["b" /* t */])('admin.team.restrict_direct_message_any'),
            display_name_default: 'Any user on the Mattermost server'
          }, {
            value: 'team',
            display_name: Object(utils_i18n["b" /* t */])('admin.team.restrict_direct_message_team'),
            display_name_default: 'Any member of the team'
          }]
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_DROPDOWN,
          key: 'TeamSettings.TeammateNameDisplay',
          label: Object(utils_i18n["b" /* t */])('admin.team.teammateNameDisplay'),
          label_default: 'Teammate Name Display:',
          help_text: Object(utils_i18n["b" /* t */])('admin.team.teammateNameDisplayDesc'),
          help_text_default: 'Set how to display users\' names in posts and the Direct Messages list.',
          options: [{
            value: constants["g" /* Constants */].TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,
            display_name: Object(utils_i18n["b" /* t */])('admin.team.showUsername'),
            display_name_default: 'Show username (default)'
          }, {
            value: constants["g" /* Constants */].TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,
            display_name: Object(utils_i18n["b" /* t */])('admin.team.showNickname'),
            display_name_default: 'Show nickname if one exists, otherwise show first and last name'
          }, {
            value: constants["g" /* Constants */].TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,
            display_name: Object(utils_i18n["b" /* t */])('admin.team.showFullname'),
            display_name_default: 'Show first and last name'
          }]
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_PERMISSION,
          key: 'TeamSettings.EditOthersPosts',
          label: Object(utils_i18n["b" /* t */])('admin.team.editOthersPostsTitle'),
          label_default: 'Allow Team Administrators to edit others posts:',
          help_text: Object(utils_i18n["b" /* t */])('admin.team.editOthersPostsDesc'),
          help_text_default: 'When true, Team Administrators and System Administrators can edit other user\'s posts.  When false, only System Administrators can edit other user\'s posts.',
          permissions_mapping_name: 'editOthersPosts',
          isHidden: true
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'TeamSettings.ExperimentalViewArchivedChannels',
          label: Object(utils_i18n["b" /* t */])('admin.viewArchivedChannelsTitle'),
          label_default: 'Allow users to view archived channels: ',
          help_text: Object(utils_i18n["b" /* t */])('admin.viewArchivedChannelsHelpText'),
          help_text_default: '(Experimental) When true, allows users to share permalinks and search for content of channels that have been archived. Users can only view the content in channels of which they were a member before the channel was archived.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'PrivacySettings.ShowEmailAddress',
          label: Object(utils_i18n["b" /* t */])('admin.privacy.showEmailTitle'),
          label_default: 'Show Email Address:',
          help_text: Object(utils_i18n["b" /* t */])('admin.privacy.showEmailDescription'),
          help_text_default: 'When false, hides the email address of members from everyone except System Administrators.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'PrivacySettings.ShowFullName',
          label: Object(utils_i18n["b" /* t */])('admin.privacy.showFullNameTitle'),
          label_default: 'Show Full Name:',
          help_text: Object(utils_i18n["b" /* t */])('admin.privacy.showFullNameDescription'),
          help_text_default: 'When false, hides the full name of members from everyone except System Administrators. Username is shown in place of full name.'
        }]
      }
    },
    notifications: {
      url: 'environment/notifications',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.notifications'),
      title_default: 'Notifications',
      schema: {
        id: 'notifications',
        name: Object(utils_i18n["b" /* t */])('admin.environment.notifications'),
        name_default: 'Notifications',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'TeamSettings.EnableConfirmNotificationsToChannel',
          label: Object(utils_i18n["b" /* t */])('admin.environment.notifications.enableConfirmNotificationsToChannel.label'),
          label_default: 'Show @channel and @all confirmation dialog:',
          help_text: Object(utils_i18n["b" /* t */])('admin.environment.notifications.enableConfirmNotificationsToChannel.help'),
          help_text_default: 'When true, users will be prompted to confirm when posting @channel and @all in channels with over five members. When false, no confirmation is required.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'EmailSettings.SendEmailNotifications',
          label: Object(utils_i18n["b" /* t */])('admin.environment.notifications.enable.label'),
          label_default: 'Enable Email Notifications:',
          help_text: Object(utils_i18n["b" /* t */])('admin.environment.notifications.enable.help'),
          help_text_default: 'Typically set to true in production. When true, Mattermost attempts to send email notifications. Developers may set this field to false to skip email setup for faster development.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'EmailSettings.EnablePreviewModeBanner',
          label: Object(utils_i18n["b" /* t */])('admin.environment.notifications.enablePreviewModeBanner.label'),
          label_default: 'Enable Preview Mode Banner:',
          help_text: Object(utils_i18n["b" /* t */])('admin.environment.notifications.enablePreviewModeBanner.help'),
          help_text_default: 'When true, the Preview Mode banner is displayed so users are aware that email notifications are disabled. When false, the Preview Mode banner is not displayed to users.',
          isDisabled: it.either(it.stateIsTrue('EmailSettings.SendEmailNotifications'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'EmailSettings.EnableEmailBatching',
          label: Object(utils_i18n["b" /* t */])('admin.environment.notifications.enableEmailBatching.label'),
          label_default: 'Enable Email Batching:',
          help_text: Object(utils_i18n["b" /* t */])('admin.environment.notifications.enableEmailBatching.help'),
          help_text_default: 'When true, users will have email notifications for multiple direct messages and mentions combined into a single email. Batching will occur at a default interval of 15 minutes, configurable in Account Settings > Notifications.',
          isDisabled: it.either(it.stateIsFalse('EmailSettings.SendEmailNotifications'), it.configIsTrue('ClusterSettings', 'Enable'), it.configIsFalse('ServiceSettings', 'SiteURL'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_DROPDOWN,
          key: 'EmailSettings.EmailNotificationContentsType',
          label: Object(utils_i18n["b" /* t */])('admin.environment.notifications.contents.label'),
          label_default: 'Email Notification Contents:',
          help_text: Object(utils_i18n["b" /* t */])('admin.environment.notifications.contents.help'),
          help_text_default: '**Send full message contents** - Sender name and channel are included in email notifications. Typically used for compliance reasons if Mattermost contains confidential information and policy dictates it cannot be stored in email.\n  **Send generic description with only sender name** - Only the name of the person who sent the message, with no information about channel name or message contents are included in email notifications. Typically used for compliance reasons if Mattermost contains confidential information and policy dictates it cannot be stored in email.',
          help_text_markdown: true,
          isHidden: false,
          options: [{
            value: 'full',
            display_name: Object(utils_i18n["b" /* t */])('admin.environment.notifications.contents.full'),
            display_name_default: 'Send full message contents'
          }, {
            value: 'generic',
            display_name: Object(utils_i18n["b" /* t */])('admin.environment.notifications.contents.generic'),
            display_name_default: 'Send generic description with only sender name'
          }]
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'EmailSettings.FeedbackName',
          label: Object(utils_i18n["b" /* t */])('admin.environment.notifications.notificationDisplay.label'),
          label_default: 'Notification Display Name:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.environment.notifications.notificationDisplay.placeholder'),
          placeholder_default: 'Ex: "Aboutone Notification", "System", "No-Reply"',
          help_text: Object(utils_i18n["b" /* t */])('admin.environment.notifications.notificationDisplay.help'),
          help_text_default: 'Display name on email account used when sending notification emails from Mattermost.',
          isDisabled: it.stateIsFalse('EmailSettings.SendEmailNotifications')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'EmailSettings.FeedbackEmail',
          label: Object(utils_i18n["b" /* t */])('admin.environment.notifications.feedbackEmail.label'),
          label_default: 'Notification From Address:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.environment.notifications.feedbackEmail.placeholder'),
          placeholder_default: 'Ex: "aboutone@yourcompany.com", "admin@yourcompany.com"',
          help_text: Object(utils_i18n["b" /* t */])('admin.environment.notifications.feedbackEmail.help'),
          help_text_default: 'Email address displayed on email account used when sending notification emails from Mattermost.',
          isDisabled: it.stateIsFalse('EmailSettings.SendEmailNotifications'),
          isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'EmailSettings.ReplyToAddress',
          label: Object(utils_i18n["b" /* t */])('admin.environment.notifications.replyToAddress.label'),
          label_default: 'Notification Reply-To Address:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.environment.notifications.replyToAddress.placeholder'),
          placeholder_default: 'Ex: "aboutone@yourcompany.com", "admin@yourcompany.com"',
          help_text: Object(utils_i18n["b" /* t */])('admin.environment.notifications.replyToAddress.help'),
          help_text_default: 'Email address used in the Reply-To header when sending notification emails from Mattermost.',
          isDisabled: it.stateIsFalse('EmailSettings.SendEmailNotifications')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'EmailSettings.FeedbackOrganization',
          label: Object(utils_i18n["b" /* t */])('admin.environment.notifications.feedbackOrganization.label'),
          label_default: 'Notification Footer Mailing Address:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.environment.notifications.feedbackOrganization.placeholder'),
          placeholder_default: 'Ex: "© ABC Corporation, 565 Knight Way, Palo Alto, California, 94305, USA"',
          help_text: Object(utils_i18n["b" /* t */])('admin.environment.notifications.feedbackOrganization.help'),
          help_text_default: 'Organization name and address displayed on email notifications from Mattermost, such as "© ABC Corporation, 565 Knight Way, Palo Alto, California, 94305, USA". If the field is left empty, the organization name and address will not be displayed.',
          isDisabled: it.stateIsFalse('EmailSettings.SendEmailNotifications')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_DROPDOWN,
          key: 'EmailSettings.PushNotificationContents',
          label: Object(utils_i18n["b" /* t */])('admin.environment.notifications.pushContents.label'),
          label_default: 'Push Notification Contents:',
          help_text: Object(utils_i18n["b" /* t */])('admin.environment.notifications.pushContents.help'),
          help_text_default: '**Send generic description with only sender name** - Includes only the name of the person who sent the message in push notifications, with no information about channel name or message contents.\n **Send generic description with sender and channel names** - Includes the name of the person who sent the message and the channel it was sent in, but not the message text.\n **Send full message snippet** - Includes a message excerpt in push notifications, which may contain confidential information sent in messages. If your Push Notification Service is outside your firewall, it is *highly recommended* this option only be used with an "https" protocol to encrypt the connection.',
          help_text_markdown: true,
          isHidden: false,
          options: [{
            value: 'generic_no_channel',
            display_name: Object(utils_i18n["b" /* t */])('admin.environment.notifications.pushContents.genericNoChannel'),
            display_name_default: 'Send generic description with only sender name'
          }, {
            value: 'generic',
            display_name: Object(utils_i18n["b" /* t */])('admin.environment.notifications.pushContents.generic'),
            display_name_default: 'Send generic description with sender and channel names'
          }, {
            value: 'full',
            display_name: Object(utils_i18n["b" /* t */])('admin.environment.notifications.pushContents.full'),
            display_name_default: 'Send full message snippet'
          }]
        }]
      }
    },
    announcement_banner: {
      url: 'site_config/announcement_banner',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.announcement'),
      title_default: 'Announcement Banner',
      isHidden: false,
      schema: {
        id: 'AnnouncementSettings',
        name: Object(utils_i18n["b" /* t */])('admin.site.announcementBanner'),
        name_default: 'Announcement Banner',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'AnnouncementSettings.EnableBanner',
          label: Object(utils_i18n["b" /* t */])('admin.customization.announcement.enableBannerTitle'),
          label_default: 'Enable Announcement Banner:',
          help_text: Object(utils_i18n["b" /* t */])('admin.customization.announcement.enableBannerDesc'),
          help_text_default: 'Enable an announcement banner across all teams.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'AnnouncementSettings.BannerText',
          label: Object(utils_i18n["b" /* t */])('admin.customization.announcement.bannerTextTitle'),
          label_default: 'Banner Text:',
          help_text: Object(utils_i18n["b" /* t */])('admin.customization.announcement.bannerTextDesc'),
          help_text_default: 'Text that will appear in the announcement banner.',
          isDisabled: it.stateIsFalse('AnnouncementSettings.EnableBanner')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_COLOR,
          key: 'AnnouncementSettings.BannerColor',
          label: Object(utils_i18n["b" /* t */])('admin.customization.announcement.bannerColorTitle'),
          label_default: 'Banner Color:',
          isDisabled: it.stateIsFalse('AnnouncementSettings.EnableBanner')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_COLOR,
          key: 'AnnouncementSettings.BannerTextColor',
          label: Object(utils_i18n["b" /* t */])('admin.customization.announcement.bannerTextColorTitle'),
          label_default: 'Banner Text Color:',
          isDisabled: it.stateIsFalse('AnnouncementSettings.EnableBanner')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'AnnouncementSettings.AllowBannerDismissal',
          label: Object(utils_i18n["b" /* t */])('admin.customization.announcement.allowBannerDismissalTitle'),
          label_default: 'Allow Banner Dismissal:',
          help_text: Object(utils_i18n["b" /* t */])('admin.customization.announcement.allowBannerDismissalDesc'),
          help_text_default: 'When true, users can dismiss the banner until its next update. When false, the banner is permanently visible until it is turned off by the System Admin.',
          isDisabled: it.stateIsFalse('AnnouncementSettings.EnableBanner')
        }]
      }
    },
    emoji: {
      url: 'site_config/emoji',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.emoji'),
      title_default: 'Emoji',
      schema: {
        id: 'EmojiSettings',
        name: Object(utils_i18n["b" /* t */])('admin.site.emoji'),
        name_default: 'Emoji',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.EnableEmojiPicker',
          label: Object(utils_i18n["b" /* t */])('admin.customization.enableEmojiPickerTitle'),
          label_default: 'Enable Emoji Picker:',
          help_text: Object(utils_i18n["b" /* t */])('admin.customization.enableEmojiPickerDesc'),
          help_text_default: 'The emoji picker allows users to select emoji to add as reactions or use in messages. Enabling the emoji picker with a large number of custom emoji may slow down performance.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.EnableCustomEmoji',
          label: Object(utils_i18n["b" /* t */])('admin.customization.enableCustomEmojiTitle'),
          label_default: 'Enable Custom Emoji:',
          help_text: Object(utils_i18n["b" /* t */])('admin.customization.enableCustomEmojiDesc'),
          help_text_default: 'Enable users to create custom emoji for use in messages. When enabled, Custom Emoji settings can be accessed by switching to a team and clicking the three dots above the channel sidebar, and selecting "Custom Emoji".'
        }]
      }
    },
    posts: {
      url: 'site_config/posts',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.posts'),
      title_default: 'Posts',
      schema: {
        id: 'PostSettings',
        name: Object(utils_i18n["b" /* t */])('admin.site.posts'),
        name_default: 'Posts',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.EnableLinkPreviews',
          label: Object(utils_i18n["b" /* t */])('admin.customization.enableLinkPreviewsTitle'),
          label_default: 'Enable Link Previews:',
          help_text: Object(utils_i18n["b" /* t */])('admin.customization.enableLinkPreviewsDesc'),
          help_text_default: 'Display a preview of website content below messages, when available. Users can disable these previews from Account Settings > Display > Website Link Previews. This setting only applies to websites with OpenGraph metadata and not for image links or YouTube previews.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_CUSTOM,
          component: custom_url_schemes_setting_CustomUrlSchemesSetting,
          key: 'DisplaySettings.CustomUrlSchemes'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'ServiceSettings.GoogleDeveloperKey',
          label: Object(utils_i18n["b" /* t */])('admin.service.googleTitle'),
          label_default: 'Google API Key:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.service.googleExample'),
          placeholder_default: 'E.g.: "7rAh6iwQCkV4cA1Gsg3fgGOXJAQ43QV"',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.googleDescription'),
          help_text_default: 'Set this key to enable the display of titles for embedded YouTube video previews. Without the key, YouTube previews will still be created based on hyperlinks appearing in messages or comments but they will not show the video title. View a [Google Developers Tutorial](!https://www.youtube.com/watch?v=Im69kzhpR3I) for instructions on how to obtain a key and add YouTube Data API v3 as a service to your key.',
          help_text_markdown: true,
          isHidden: false
        }]
      }
    },
    file_sharing_downloads: {
      url: 'site_config/file_sharing_downloads',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.fileSharingDownloads'),
      title_default: 'File Sharing and Downloads',
      schema: {
        id: 'FileSharingDownloads',
        name: Object(utils_i18n["b" /* t */])('admin.site.fileSharingDownloads'),
        name_default: 'File Sharing and Downloads',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'FileSettings.EnableFileAttachments',
          label: Object(utils_i18n["b" /* t */])('admin.file.enableFileAttachments'),
          label_default: 'Allow File Sharing:',
          help_text: Object(utils_i18n["b" /* t */])('admin.file.enableFileAttachmentsDesc'),
          help_text_default: 'When false, disables file sharing on the server. All file and image uploads on messages are forbidden across clients and devices, including mobile.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'FileSettings.EnableMobileUpload',
          label: Object(utils_i18n["b" /* t */])('admin.file.enableMobileUploadTitle'),
          label_default: 'Allow File Uploads on Mobile:',
          help_text: Object(utils_i18n["b" /* t */])('admin.file.enableMobileUploadDesc'),
          help_text_default: 'When false, disables file uploads on mobile apps. If Allow File Sharing is set to true, users can still upload files from a mobile web browser.',
          isHidden: false
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'FileSettings.EnableMobileDownload',
          label: Object(utils_i18n["b" /* t */])('admin.file.enableMobileDownloadTitle'),
          label_default: 'Allow File Downloads on Mobile:',
          help_text: Object(utils_i18n["b" /* t */])('admin.file.enableMobileDownloadDesc'),
          help_text_default: 'When false, disables file downloads on mobile apps. Users can still download files from a mobile web browser.',
          isHidden: false
        }]
      }
    },
    public_links: {
      url: 'site_config/public_links',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.publicLinks'),
      title_default: 'Public Links',
      schema: {
        id: 'PublicLinkSettings',
        name: Object(utils_i18n["b" /* t */])('admin.site.public_links'),
        name_default: 'Public Links',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'FileSettings.EnablePublicLink',
          label: Object(utils_i18n["b" /* t */])('admin.image.shareTitle'),
          label_default: 'Enable Public File Links: ',
          help_text: Object(utils_i18n["b" /* t */])('admin.image.shareDescription'),
          help_text_default: 'Allow users to share public links to files and images.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_GENERATED,
          key: 'FileSettings.PublicLinkSalt',
          label: Object(utils_i18n["b" /* t */])('admin.image.publicLinkTitle'),
          label_default: 'Public Link Salt:',
          help_text: Object(utils_i18n["b" /* t */])('admin.image.publicLinkDescription'),
          help_text_default: '32-character salt added to signing of public image links. Randomly generated on install. Click "Regenerate" to create new salt.'
        }]
      }
    }
  },
  authentication: {
    icon: 'fa-shield',
    sectionTitle: Object(utils_i18n["b" /* t */])('admin.sidebar.authentication'),
    sectionTitleDefault: 'Authentication',
    signup: {
      url: 'authentication/signup',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.signup'),
      title_default: 'Signup',
      schema: {
        id: 'SignupSettings',
        name: Object(utils_i18n["b" /* t */])('admin.authentication.signup'),
        name_default: 'Signup',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'TeamSettings.EnableUserCreation',
          label: Object(utils_i18n["b" /* t */])('admin.team.userCreationTitle'),
          label_default: 'Enable Account Creation: ',
          help_text: Object(utils_i18n["b" /* t */])('admin.team.userCreationDescription'),
          help_text_default: 'When false, the ability to create accounts is disabled. The create account button displays error when pressed.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'TeamSettings.RestrictCreationToDomains',
          label: Object(utils_i18n["b" /* t */])('admin.team.restrictTitle'),
          label_default: 'Restrict account creation to specified email domains:',
          help_text: Object(utils_i18n["b" /* t */])('admin.team.restrictDescription'),
          help_text_default: 'User accounts can only be created from a specific domain (e.g. "aboutone.org") or list of comma-separated domains (e.g. "corp.mattermost.com, mattermost.org"). This setting only affects email login.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.team.restrictExample'),
          placeholder_default: 'E.g.: "corp.mattermost.com, mattermost.org"'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'TeamSettings.EnableOpenServer',
          label: Object(utils_i18n["b" /* t */])('admin.team.openServerTitle'),
          label_default: 'Enable Open Server: ',
          help_text: Object(utils_i18n["b" /* t */])('admin.team.openServerDescription'),
          help_text_default: 'When true, anyone can signup for a user account on this server without the need to be invited.',
          isHidden: false
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.EnableEmailInvitations',
          label: Object(utils_i18n["b" /* t */])('admin.team.emailInvitationsTitle'),
          label_default: 'Enable Email Invitations: ',
          help_text: Object(utils_i18n["b" /* t */])('admin.team.emailInvitationsDescription'),
          help_text_default: 'When true users can invite others to the system using email.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BUTTON,
          key: 'InvalidateEmailInvitesButton',
          action: admin_actions["s" /* invalidateAllEmailInvites */],
          label: Object(utils_i18n["b" /* t */])('admin.team.invalidateEmailInvitesTitle'),
          label_default: 'Invalidate pending email invites',
          help_text: Object(utils_i18n["b" /* t */])('admin.team.invalidateEmailInvitesDescription'),
          help_text_default: 'This will invalidate active email invitations that have not been accepted by the user.  By default email invitations expire after 48 hours.',
          error_message: Object(utils_i18n["b" /* t */])('admin.team.invalidateEmailInvitesFail'),
          error_message_default: 'Unable to invalidate pending email invites: {error}',
          success_message: Object(utils_i18n["b" /* t */])('admin.team.invalidateEmailInvitesSuccess'),
          success_message_default: 'Pending email invitations invalidated successfully'
        }]
      }
    },
    email: {
      url: 'authentication/email',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.email'),
      title_default: 'Email',
      schema: {
        id: 'EmailSettings',
        name: Object(utils_i18n["b" /* t */])('admin.authentication.email'),
        name_default: 'Email',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'EmailSettings.EnableSignUpWithEmail',
          label: Object(utils_i18n["b" /* t */])('admin.email.allowSignupTitle'),
          label_default: 'Enable account creation with email:',
          help_text: Object(utils_i18n["b" /* t */])('admin.email.allowSignupDescription'),
          help_text_default: 'When true, Mattermost allows account creation using email and password. This value should be false only when you want to limit sign up to a single sign-on service like AD/LDAP, SAML or GitLab.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'EmailSettings.RequireEmailVerification',
          label: Object(utils_i18n["b" /* t */])('admin.email.requireVerificationTitle'),
          label_default: 'Require Email Verification: ',
          help_text: Object(utils_i18n["b" /* t */])('admin.email.requireVerificationDescription'),
          help_text_default: 'Typically set to true in production. When true, Mattermost requires email verification after account creation prior to allowing login. Developers may set this field to false to skip sending verification emails for faster development.',
          disabled_help_text: Object(utils_i18n["b" /* t */])('admin.security.requireEmailVerification.disabled'),
          disabled_help_text_default: 'Email verification cannot be changed while sending emails is disabled.',
          isDisabled: config => !config.EmailSettings.SendEmailNotifications
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'EmailSettings.EnableSignInWithEmail',
          label: Object(utils_i18n["b" /* t */])('admin.email.allowEmailSignInTitle'),
          label_default: 'Enable sign-in with email:',
          help_text: Object(utils_i18n["b" /* t */])('admin.email.allowEmailSignInDescription'),
          help_text_default: 'When true, Mattermost allows users to sign in using their email and password.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'EmailSettings.EnableSignInWithUsername',
          label: Object(utils_i18n["b" /* t */])('admin.email.allowUsernameSignInTitle'),
          label_default: 'Enable sign-in with username:',
          help_text: Object(utils_i18n["b" /* t */])('admin.email.allowUsernameSignInDescription'),
          help_text_default: 'When true, users with email login can sign in using their username and password. This setting does not affect AD/LDAP login.'
        }]
      }
    },
    password: {
      url: 'authentication/password',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.password'),
      title_default: 'Password',
      searchableStrings: ['user.settings.security.passwordMinLength', 'admin.security.password', ['admin.password.minimumLength', {
        max: '',
        min: ''
      }], ['admin.password.minimumLengthDescription', {
        max: '',
        min: ''
      }], 'passwordRequirements', 'admin.password.lowercase', 'admin.password.uppercase', 'admin.password.number', 'admin.password.symbol', 'admin.password.preview', 'admin.service.attemptTitle', 'admin.service.attemptDescription'],
      schema: {
        id: 'PasswordSettings',
        component: password_settings_PasswordSettings
      }
    },
    mfa: {
      url: 'authentication/mfa',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.mfa'),
      title_default: 'MFA',
      schema: {
        id: 'ServiceSettings',
        name: Object(utils_i18n["b" /* t */])('admin.authentication.mfa'),
        name_default: 'Multi-factor Authentication',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BANNER,
          label: Object(utils_i18n["b" /* t */])('admin.mfa.bannerDesc'),
          label_default: '[Multi-factor authentication](!https://docs.mattermost.com/deployment/auth.html) is available for accounts with AD/LDAP or email login. If other login methods are used, MFA should be configured with the authentication provider.',
          label_markdown: true,
          banner_type: 'info'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.EnableMultifactorAuthentication',
          label: Object(utils_i18n["b" /* t */])('admin.service.mfaTitle'),
          label_default: 'Enable Multi-factor Authentication:',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.mfaDesc'),
          help_text_default: 'When true, users with AD/LDAP or email login can add multi-factor authentication to their account using Google Authenticator.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.EnforceMultifactorAuthentication',
          label: Object(utils_i18n["b" /* t */])('admin.service.enforceMfaTitle'),
          label_default: 'Enforce Multi-factor Authentication:',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.enforceMfaDesc'),
          help_text_markdown: true,
          help_text_default: 'When true, [multi-factor authentication](!https://docs.mattermost.com/deployment/auth.html) is required for login. New users will be required to configure MFA on signup. Logged in users without MFA configured are redirected to the MFA setup page until configuration is complete.\n \nIf your system has users with login methods other than AD/LDAP and email, MFA must be enforced with the authentication provider outside of Mattermost.',
          isDisabled: it.stateIsFalse('ServiceSettings.EnableMultifactorAuthentication'),
          isHidden: false
        }]
      }
    },
    ldap: {
      url: 'authentication/ldap',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.ldap'),
      title_default: 'AD/LDAP',
      isHidden: false,
      schema: {
        id: 'LdapSettings',
        name: Object(utils_i18n["b" /* t */])('admin.authentication.ldap'),
        name_default: 'AD/LDAP',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'LdapSettings.Enable',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.enableTitle'),
          label_default: 'Enable sign-in with AD/LDAP:',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.enableDesc'),
          help_text_default: 'When true, Mattermost allows login using AD/LDAP'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'LdapSettings.EnableSync',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.enableSyncTitle'),
          label_default: 'Enable Synchronization with AD/LDAP:',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.enableSyncDesc'),
          help_text_default: 'When true, Mattermost periodically synchronizes users from AD/LDAP. When false, user attributes are updated from AD/LDAP during user login only.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'LdapSettings.LdapServer',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.serverTitle'),
          label_default: 'AD/LDAP Server:',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.serverDesc'),
          help_text_default: 'The domain or IP address of AD/LDAP server.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.ldap.serverEx'),
          placeholder_default: 'E.g.: "10.0.0.23"',
          isDisabled: it.both(it.stateIsFalse('LdapSettings.Enable'), it.stateIsFalse('LdapSettings.EnableSync'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_NUMBER,
          key: 'LdapSettings.LdapPort',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.portTitle'),
          label_default: 'AD/LDAP Port:',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.portDesc'),
          help_text_default: 'The port Mattermost will use to connect to the AD/LDAP server. Default is 389.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.ldap.portEx'),
          placeholder_default: 'E.g.: "389"',
          isDisabled: it.both(it.stateIsFalse('LdapSettings.Enable'), it.stateIsFalse('LdapSettings.EnableSync'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_DROPDOWN,
          key: 'LdapSettings.ConnectionSecurity',
          label: Object(utils_i18n["b" /* t */])('admin.connectionSecurityTitle'),
          label_default: 'Connection Security:',
          help_text: CONNECTION_SECURITY_HELP_TEXT_LDAP,
          options: [{
            value: '',
            display_name: Object(utils_i18n["b" /* t */])('admin.connectionSecurityNone'),
            display_name_default: 'None'
          }, {
            value: 'TLS',
            display_name: Object(utils_i18n["b" /* t */])('admin.connectionSecurityTls'),
            display_name_default: 'TLS (Recommended)'
          }, {
            value: 'STARTTLS',
            display_name: Object(utils_i18n["b" /* t */])('admin.connectionSecurityStart'),
            display_name_default: 'STARTTLS'
          }],
          isDisabled: it.both(it.stateIsFalse('LdapSettings.Enable'), it.stateIsFalse('LdapSettings.EnableSync'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'LdapSettings.SkipCertificateVerification',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.skipCertificateVerification'),
          label_default: 'Skip Certificate Verification:',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.skipCertificateVerificationDesc'),
          help_text_default: 'Skips the certificate verification step for TLS or STARTTLS connections. Not recommended for production environments where TLS is required. For testing only.',
          isDisabled: it.stateIsFalse('LdapSettings.ConnectionSecurity')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'LdapSettings.BaseDN',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.baseTitle'),
          label_default: 'BaseDN:',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.baseDesc'),
          help_text_default: 'The Base DN is the Distinguished Name of the location where Mattermost should start its search for users in the AD/LDAP tree.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.ldap.baseEx'),
          placeholder_default: 'E.g.: "ou=Unit Name,dc=corp,dc=example,dc=com"',
          isDisabled: it.both(it.stateIsFalse('LdapSettings.Enable'), it.stateIsFalse('LdapSettings.EnableSync'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'LdapSettings.BindUsername',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.bindUserTitle'),
          label_default: 'Bind Username:',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.bindUserDesc'),
          help_text_default: 'The username used to perform the AD/LDAP search. This should typically be an account created specifically for use with Mattermost. It should have access limited to read the portion of the AD/LDAP tree specified in the BaseDN field.',
          isDisabled: it.both(it.stateIsFalse('LdapSettings.Enable'), it.stateIsFalse('LdapSettings.EnableSync'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'LdapSettings.BindPassword',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.bindPwdTitle'),
          label_default: 'Bind Password:',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.bindPwdDesc'),
          help_text_default: 'Password of the user given in "Bind Username".',
          isDisabled: it.both(it.stateIsFalse('LdapSettings.Enable'), it.stateIsFalse('LdapSettings.EnableSync'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'LdapSettings.UserFilter',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.userFilterTitle'),
          label_default: 'User Filter:',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.userFilterDisc'),
          help_text_default: '(Optional) Enter an AD/LDAP filter to use when searching for user objects. Only the users selected by the query will be able to access Mattermost. For Active Directory, the query to filter out disabled users is (&(objectCategory=Person)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))).',
          placeholder: Object(utils_i18n["b" /* t */])('admin.ldap.userFilterEx'),
          placeholder_default: 'Ex. "(objectClass=user)"',
          isDisabled: it.both(it.stateIsFalse('LdapSettings.Enable'), it.stateIsFalse('LdapSettings.EnableSync'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'LdapSettings.GroupFilter',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.groupFilterTitle'),
          label_default: 'Group Filter:',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.groupFilterFilterDesc'),
          help_text_markdown: true,
          help_text_default: '(Optional) Enter an AD/LDAP filter to use when searching for group objects. Only the groups selected by the query will be available to Mattermost. From [User Management > Groups](/admin_console/user_management/groups), select which AD/LDAP groups should be linked and configured.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.ldap.groupFilterEx'),
          placeholder_default: 'E.g.: "(objectClass=group)"',
          isDisabled: it.stateIsFalse('LdapSettings.EnableSync'),
          isHidden: false
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'LdapSettings.GroupDisplayNameAttribute',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.groupDisplayNameAttributeTitle'),
          label_default: 'Group Display Name Attribute:',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.groupDisplayNameAttributeDesc'),
          help_text_default: 'The attribute in the AD/LDAP server used to populate the group display names.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.ldap.groupDisplayNameAttributeEx'),
          placeholder_default: 'E.g.: "cn"',
          isDisabled: it.stateIsFalse('LdapSettings.EnableSync'),
          isHidden: false
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'LdapSettings.GroupIdAttribute',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.groupIdAttributeTitle'),
          label_default: 'Group ID Attribute:',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.groupIdAttributeDesc'),
          help_text_default: 'The attribute in the AD/LDAP server used as unique identifier for Groups. This should be a AD/LDAP attribute with a value that does not change.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.ldap.groupIdAttributeEx'),
          placeholder_default: 'E.g.: "entryUUID"',
          isDisabled: it.stateIsFalse('LdapSettings.EnableSync'),
          isHidden: false
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'LdapSettings.FirstNameAttribute',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.firstnameAttrTitle'),
          label_default: 'First Name Attribute:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.ldap.firstnameAttrEx'),
          placeholder_default: 'E.g.: "givenName"',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.firstnameAttrDesc'),
          help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the first name of users in Mattermost. When set, users cannot edit their first name, since it is synchronized with the LDAP server. When left blank, users can set their first name in Account Settings.',
          isDisabled: it.both(it.stateIsFalse('LdapSettings.Enable'), it.stateIsFalse('LdapSettings.EnableSync'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'LdapSettings.LastNameAttribute',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.lastnameAttrTitle'),
          label_default: 'Last Name Attribute:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.ldap.lastnameAttrEx'),
          placeholder_default: 'E.g.: "sn"',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.lastnameAttrDesc'),
          help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the last name of users in Mattermost. When set, users cannot edit their last name, since it is synchronized with the LDAP server. When left blank, users can set their last name in Account Settings.',
          isDisabled: it.both(it.stateIsFalse('LdapSettings.Enable'), it.stateIsFalse('LdapSettings.EnableSync'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'LdapSettings.NicknameAttribute',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.nicknameAttrTitle'),
          label_default: 'Nickname Attribute:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.ldap.nicknameAttrEx'),
          placeholder_default: 'E.g.: "nickname"',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.nicknameAttrDesc'),
          help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the nickname of users in Mattermost. When set, users cannot edit their nickname, since it is synchronized with the LDAP server. When left blank, users can set their nickname in Account Settings.',
          isDisabled: it.both(it.stateIsFalse('LdapSettings.Enable'), it.stateIsFalse('LdapSettings.EnableSync'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'LdapSettings.PositionAttribute',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.positionAttrTitle'),
          label_default: 'Position Attribute:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.ldap.positionAttrEx'),
          placeholder_default: 'E.g.: "title"',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.positionAttrDesc'),
          help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the position field in Mattermost. When set, users cannot edit their position, since it is synchronized with the LDAP server. When left blank, users can set their position in Account Settings.',
          isDisabled: it.both(it.stateIsFalse('LdapSettings.Enable'), it.stateIsFalse('LdapSettings.EnableSync'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'LdapSettings.EmailAttribute',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.emailAttrTitle'),
          label_default: 'Email Attribute:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.ldap.emailAttrEx'),
          placeholder_default: 'E.g.: "mail" or "userPrincipalName"',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.emailAttrDesc'),
          help_text_default: 'The attribute in the AD/LDAP server used to populate the email address field in Mattermost.',
          isDisabled: it.both(it.stateIsFalse('LdapSettings.Enable'), it.stateIsFalse('LdapSettings.EnableSync'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'LdapSettings.UsernameAttribute',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.usernameAttrTitle'),
          label_default: 'Username Attribute:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.ldap.usernameAttrEx'),
          placeholder_default: 'E.g.: "sAMAccountName"',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.usernameAttrDesc'),
          help_text_default: 'The attribute in the AD/LDAP server used to populate the username field in Mattermost. This may be the same as the Login ID Attribute.',
          isDisabled: it.both(it.stateIsFalse('LdapSettings.Enable'), it.stateIsFalse('LdapSettings.EnableSync'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'LdapSettings.IdAttribute',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.idAttrTitle'),
          label_default: 'ID Attribute: ',
          placeholder: Object(utils_i18n["b" /* t */])('admin.ldap.idAttrEx'),
          placeholder_default: 'E.g.: "objectGUID"',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.idAttrDesc'),
          help_text_markdown: true,
          help_text_default: 'The attribute in the AD/LDAP server used as a unique identifier in Mattermost. It should be an AD/LDAP attribute with a value that does not change. If a user\'s ID Attribute changes, it will create a new Mattermost account unassociated with their old one.\n \nIf you need to change this field after users have already logged in, use the [mattermost ldap idmigrate](!https://about.mattermost.com/default-mattermost-ldap-idmigrate) CLI tool.',
          isDisabled: it.both(it.stateEquals('LdapSettings.Enable', false), it.stateEquals('LdapSettings.EnableSync', false))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'LdapSettings.LoginIdAttribute',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.loginAttrTitle'),
          label_default: 'Login ID Attribute: ',
          placeholder: Object(utils_i18n["b" /* t */])('admin.ldap.loginIdAttrEx'),
          placeholder_default: 'E.g.: "sAMAccountName"',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.loginAttrDesc'),
          help_text_markdown: true,
          help_text_default: 'The attribute in the AD/LDAP server used to log in to Mattermost. Normally this attribute is the same as the "Username Attribute" field above.\n \nIf your team typically uses domain/username to log in to other services with AD/LDAP, you may enter domain/username in this field to maintain consistency between sites.',
          isDisabled: it.both(it.stateIsFalse('LdapSettings.Enable'), it.stateIsFalse('LdapSettings.EnableSync'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'LdapSettings.LoginFieldName',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.loginNameTitle'),
          label_default: 'Sign-in Field Default Text:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.ldap.loginNameEx'),
          placeholder_default: 'E.g.: "AD/LDAP Username"',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.loginNameDesc'),
          help_text_default: 'The placeholder text that appears in the login field on the login page. Defaults to "AD/LDAP Username".',
          isDisabled: it.both(it.stateIsFalse('LdapSettings.Enable'), it.stateIsFalse('LdapSettings.EnableSync'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_NUMBER,
          key: 'LdapSettings.SyncIntervalMinutes',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.syncIntervalTitle'),
          label_default: 'Synchronization Interval (minutes):',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.syncIntervalHelpText'),
          help_text_default: 'AD/LDAP Synchronization updates Mattermost user information to reflect updates on the AD/LDAP server. For example, when a user\'s name changes on the AD/LDAP server, the change updates in Mattermost when synchronization is performed. Accounts removed from or disabled in the AD/LDAP server have their Mattermost accounts set to "Inactive" and have their account sessions revoked. Mattermost performs synchronization on the interval entered. For example, if 60 is entered, Mattermost synchronizes every 60 minutes.',
          isDisabled: it.both(it.stateIsFalse('LdapSettings.Enable'), it.stateIsFalse('LdapSettings.EnableSync'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_NUMBER,
          key: 'LdapSettings.MaxPageSize',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.maxPageSizeTitle'),
          label_default: 'Maximum Page Size:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.ldap.maxPageSizeEx'),
          placeholder_default: 'E.g.: "2000"',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.maxPageSizeHelpText'),
          help_text_default: 'The maximum number of users the Mattermost server will request from the AD/LDAP server at one time. 0 is unlimited.',
          isDisabled: it.both(it.stateIsFalse('LdapSettings.Enable'), it.stateIsFalse('LdapSettings.EnableSync'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_NUMBER,
          key: 'LdapSettings.QueryTimeout',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.queryTitle'),
          label_default: 'Query Timeout (seconds):',
          placeholder: Object(utils_i18n["b" /* t */])('admin.ldap.queryEx'),
          placeholder_default: 'E.g.: "60"',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.queryDesc'),
          help_text_default: 'The timeout value for queries to the AD/LDAP server. Increase if you are getting timeout errors caused by a slow AD/LDAP server.',
          isDisabled: it.both(it.stateIsFalse('LdapSettings.Enable'), it.stateIsFalse('LdapSettings.EnableSync'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BUTTON,
          action: admin_actions["t" /* ldapTest */],
          key: 'LdapSettings.LdapTest',
          label: Object(utils_i18n["b" /* t */])('admin.ldap.ldap_test_button'),
          label_default: 'AD/LDAP Test',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.testHelpText'),
          help_text_markdown: true,
          help_text_default: 'Tests if the Mattemost server can connect to the AD/LDAP server specified. Please review "System Console > Logs" and [documentation](!https://mattermost.com/default-ldap-docs) to troubleshoot errors.',
          error_message: Object(utils_i18n["b" /* t */])('admin.ldap.testFailure'),
          error_message_default: 'AD/LDAP Test Failure: {error}',
          success_message: Object(utils_i18n["b" /* t */])('admin.ldap.testSuccess'),
          success_message_default: 'AD/LDAP Test Successful',
          isDisabled: it.both(it.stateIsFalse('LdapSettings.Enable'), it.stateIsFalse('LdapSettings.EnableSync'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_JOBSTABLE,
          job_type: constants["g" /* Constants */].JobTypes.LDAP_SYNC,
          label: Object(utils_i18n["b" /* t */])('admin.ldap.sync_button'),
          label_default: 'AD/LDAP Synchronize Now',
          help_text: Object(utils_i18n["b" /* t */])('admin.ldap.syncNowHelpText'),
          help_text_markdown: true,
          help_text_default: 'Initiates an AD/LDAP synchronization immediately. See the table below for status of each synchronization. Please review "System Console > Logs" and [documentation](!https://mattermost.com/default-ldap-docs) to troubleshoot errors.',
          isDisabled: it.stateIsFalse('LdapSettings.EnableSync'),
          render_job: job => {
            let ldapUsers = 0;
            let deleteCount = 0;
            let updateCount = 0;
            let linkedLdapGroupsCount; // Deprecated.

            let totalLdapGroupsCount = 0;
            let groupDeleteCount = 0;
            let groupMemberDeleteCount = 0;
            let groupMemberAddCount = 0;

            if (job && job.data) {
              if (job.data.ldap_users_count && job.data.ldap_users_count.length > 0) {
                ldapUsers = job.data.ldap_users_count;
              }

              if (job.data.delete_count && job.data.delete_count.length > 0) {
                deleteCount = job.data.delete_count;
              }

              if (job.data.update_count && job.data.update_count.length > 0) {
                updateCount = job.data.update_count;
              } // Deprecated groups count representing the number of linked LDAP groups.


              if (job.data.ldap_groups_count) {
                linkedLdapGroupsCount = job.data.ldap_groups_count;
              } // Groups count representing the total number of LDAP groups available based on
              // the configured based DN and groups filter.


              if (job.data.total_ldap_groups_count) {
                totalLdapGroupsCount = job.data.total_ldap_groups_count;
              }

              if (job.data.group_delete_count) {
                groupDeleteCount = job.data.group_delete_count;
              }

              if (job.data.group_member_delete_count) {
                groupMemberDeleteCount = job.data.group_member_delete_count;
              }

              if (job.data.group_member_add_count) {
                groupMemberAddCount = job.data.group_member_add_count;
              }
            }

            return react_default.a.createElement("span", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
              id: linkedLdapGroupsCount ? 'admin.ldap.jobExtraInfo' : 'admin.ldap.jobExtraInfoTotal',
              defaultMessage: linkedLdapGroupsCount ? 'Scanned {ldapUsers, number} LDAP users and {ldapGroups, number} linked groups.' : 'Scanned {ldapUsers, number} LDAP users and {ldapGroups, number} groups.',
              values: {
                ldapUsers,
                ldapGroups: linkedLdapGroupsCount || totalLdapGroupsCount // Show the old count for jobs records containing the old JSON key.

              }
            }), react_default.a.createElement("ul", null, updateCount > 0 && react_default.a.createElement("li", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
              id: "admin.ldap.jobExtraInfo.updatedUsers",
              defaultMessage: "Updated {updateCount, number} users.",
              values: {
                updateCount
              }
            })), deleteCount > 0 && react_default.a.createElement("li", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
              id: "admin.ldap.jobExtraInfo.deactivatedUsers",
              defaultMessage: "Deactivated {deleteCount, number} users.",
              values: {
                deleteCount
              }
            })), groupDeleteCount > 0 && react_default.a.createElement("li", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
              id: "admin.ldap.jobExtraInfo.deletedGroups",
              defaultMessage: "Deleted {groupDeleteCount, number} groups.",
              values: {
                groupDeleteCount
              }
            })), groupMemberDeleteCount > 0 && react_default.a.createElement("li", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
              id: "admin.ldap.jobExtraInfo.deletedGroupMembers",
              defaultMessage: "Deleted {groupMemberDeleteCount, number} group members.",
              values: {
                groupMemberDeleteCount
              }
            })), groupMemberAddCount > 0 && react_default.a.createElement("li", null, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
              id: "admin.ldap.jobExtraInfo.addedGroupMembers",
              defaultMessage: "Added {groupMemberAddCount, number} group members.",
              values: {
                groupMemberAddCount
              }
            }))));
          }
        }]
      }
    },
    saml: {
      url: 'authentication/saml',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.saml'),
      title_default: 'SAML 2.0',
      isHidden: it.isnt(it.licensedForFeature('SAML')),
      schema: {
        id: 'SamlSettings',
        name: Object(utils_i18n["b" /* t */])('admin.authentication.saml'),
        name_default: 'SAML 2.0',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'SamlSettings.Enable',
          label: Object(utils_i18n["b" /* t */])('admin.saml.enableTitle'),
          label_default: 'Enable Login With SAML 2.0:',
          help_text: Object(utils_i18n["b" /* t */])('admin.saml.enableDescription'),
          help_text_default: 'When true, Mattermost allows login using SAML 2.0. Please see [documentation](!http://docs.mattermost.com/deployment/sso-saml.html) to learn more about configuring SAML for Mattermost.',
          help_text_markdown: true
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'SamlSettings.EnableSyncWithLdap',
          label: Object(utils_i18n["b" /* t */])('admin.saml.enableSyncWithLdapTitle'),
          label_default: 'Enable Synchronizing SAML Accounts With AD/LDAP:',
          help_text: Object(utils_i18n["b" /* t */])('admin.saml.enableSyncWithLdapDescription'),
          help_text_default: 'When true, Mattermost periodically synchronizes SAML user attributes, including user deactivation and removal, from AD/LDAP. Enable and configure synchronization settings at **Authentication > AD/LDAP**. When false, user attributes are updated from SAML during user login. See [documentation](!https://about.mattermost.com/default-saml-ldap-sync) to learn more.',
          help_text_markdown: true,
          isDisabled: it.stateIsFalse('SamlSettings.Enable')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'SamlSettings.EnableSyncWithLdapIncludeAuth',
          label: Object(utils_i18n["b" /* t */])('admin.saml.enableSyncWithLdapIncludeAuthTitle'),
          label_default: 'Override SAML bind data with AD/LDAP information:',
          help_text: Object(utils_i18n["b" /* t */])('admin.saml.enableSyncWithLdapIncludeAuthDescription'),
          help_text_default: 'When true, Mattermost will override the SAML ID attribute with the AD/LDAP ID attribute if configured or override the SAML Email attribute with the AD/LDAP Email attribute if SAML ID attribute is not present.  This will allow you automatically migrate users from Email binding to ID binding to prevent creation of new users when an email address changes for a user. Moving from true to false, will remove the override from happening.\n \n**Note:** SAML IDs must match the LDAP IDs to prevent disabling of user accounts.  Please review [documentation](!https://docs.mattermost.com/deployment/sso-saml-ldapsync.html) for more information.',
          help_text_markdown: true,
          isDisabled: it.either(it.stateIsFalse('SamlSettings.Enable'), it.stateIsFalse('SamlSettings.EnableSyncWithLdap'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'SamlSettings.IdpUrl',
          label: Object(utils_i18n["b" /* t */])('admin.saml.idpUrlTitle'),
          label_default: 'SAML SSO URL:',
          help_text: Object(utils_i18n["b" /* t */])('admin.saml.idpUrlDesc'),
          help_text_default: 'The URL where Mattermost sends a SAML request to start login sequence.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.saml.idpUrlEx'),
          placeholder_default: 'E.g.: "https://idp.example.org/SAML2/SSO/Login"',
          isDisabled: it.stateIsFalse('SamlSettings.Enable')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'SamlSettings.IdpDescriptorUrl',
          label: Object(utils_i18n["b" /* t */])('admin.saml.idpDescriptorUrlTitle'),
          label_default: 'Identity Provider Issuer URL:',
          help_text: Object(utils_i18n["b" /* t */])('admin.saml.idpDescriptorUrlDesc'),
          help_text_default: 'The issuer URL for the Identity Provider you use for SAML requests.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.saml.idpDescriptorUrlEx'),
          placeholder_default: 'E.g.: "https://idp.example.org/SAML2/issuer"',
          isDisabled: it.stateIsFalse('SamlSettings.Enable')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_FILE_UPLOAD,
          key: 'SamlSettings.IdpCertificateFile',
          label: Object(utils_i18n["b" /* t */])('admin.saml.idpCertificateFileTitle'),
          label_default: 'Identity Provider Public Certificate:',
          help_text: Object(utils_i18n["b" /* t */])('admin.saml.idpCertificateFileDesc'),
          help_text_default: 'The public authentication certificate issued by your Identity Provider.',
          remove_help_text: Object(utils_i18n["b" /* t */])('admin.saml.idpCertificateFileRemoveDesc'),
          remove_help_text_default: 'Remove the public authentication certificate issued by your Identity Provider.',
          remove_button_text: Object(utils_i18n["b" /* t */])('admin.saml.remove.idp_certificate'),
          remove_button_text_default: 'Remove Identity Provider Certificate',
          removing_text: Object(utils_i18n["b" /* t */])('admin.saml.removing.certificate'),
          removing_text_default: 'Removing Certificate...',
          uploading_text: Object(utils_i18n["b" /* t */])('admin.saml.uploading.certificate'),
          uploading_text_default: 'Uploading Certificate...',
          isDisabled: it.stateIsFalse('SamlSettings.Enable'),
          fileType: '.crt,.cer,.cert,.pem',
          upload_action: admin_actions["G" /* uploadIdpSamlCertificate */],
          remove_action: admin_actions["x" /* removeIdpSamlCertificate */]
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'SamlSettings.Verify',
          label: Object(utils_i18n["b" /* t */])('admin.saml.verifyTitle'),
          label_default: 'Verify Signature:',
          help_text: Object(utils_i18n["b" /* t */])('admin.saml.verifyDescription'),
          help_text_default: 'When false, Mattermost will not verify that the signature sent from a SAML Response matches the Service Provider Login URL. Not recommended for production environments. For testing only.',
          isDisabled: it.stateIsFalse('SamlSettings.Enable')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'SamlSettings.AssertionConsumerServiceURL',
          label: Object(utils_i18n["b" /* t */])('admin.saml.assertionConsumerServiceURLTitle'),
          label_default: 'Service Provider Login URL:',
          help_text: Object(utils_i18n["b" /* t */])('admin.saml.assertionConsumerServiceURLPopulatedDesc'),
          help_text_default: 'This field is also known as the Assertion Consumer Service URL.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.saml.assertionConsumerServiceURLEx'),
          placeholder_default: 'E.g.: "https://<your-mattermost-url>/login/sso/saml"',
          isDisabled: it.either(it.stateIsFalse('SamlSettings.Enable'), it.stateIsFalse('SamlSettings.Verify')),
          onConfigLoad: (value, config) => {
            const siteUrl = config.ServiceSettings.SiteURL;

            if (siteUrl.length > 0 && value.length === 0) {
              const addSlashIfNeeded = siteUrl[siteUrl.length - 1] === '/' ? '' : '/';
              return `${siteUrl}${addSlashIfNeeded}login/sso/saml`;
            }

            return value;
          }
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'SamlSettings.Encrypt',
          label: Object(utils_i18n["b" /* t */])('admin.saml.encryptTitle'),
          label_default: 'Enable Encryption:',
          help_text: Object(utils_i18n["b" /* t */])('admin.saml.encryptDescription'),
          help_text_default: 'When false, Mattermost will not decrypt SAML Assertions encrypted with your Service Provider Public Certificate. Not recommended for production environments. For testing only.',
          isDisabled: it.stateIsFalse('SamlSettings.Enable')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_FILE_UPLOAD,
          key: 'SamlSettings.PrivateKeyFile',
          label: Object(utils_i18n["b" /* t */])('admin.saml.privateKeyFileTitle'),
          label_default: 'Service Provider Private Key:',
          help_text: Object(utils_i18n["b" /* t */])('admin.saml.privateKeyFileFileDesc'),
          help_text_default: 'The private key used to decrypt SAML Assertions from the Identity Provider.',
          remove_help_text: Object(utils_i18n["b" /* t */])('admin.saml.privateKeyFileFileRemoveDesc'),
          remove_help_text_default: 'Remove the private key used to decrypt SAML Assertions from the Identity Provider.',
          remove_button_text: Object(utils_i18n["b" /* t */])('admin.saml.remove.privKey'),
          remove_button_text_default: 'Remove Service Provider Private Key',
          removing_text: Object(utils_i18n["b" /* t */])('admin.saml.removing.privKey'),
          removing_text_default: 'Removing Private Key...',
          uploading_text: Object(utils_i18n["b" /* t */])('admin.saml.uploading.privateKey'),
          uploading_text_default: 'Uploading Private Key...',
          isDisabled: it.either(it.stateIsFalse('SamlSettings.Enable'), it.stateIsFalse('SamlSettings.Encrypt')),
          fileType: '.key',
          upload_action: admin_actions["I" /* uploadPrivateSamlCertificate */],
          remove_action: admin_actions["z" /* removePrivateSamlCertificate */]
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_FILE_UPLOAD,
          key: 'SamlSettings.PublicCertificateFile',
          label: Object(utils_i18n["b" /* t */])('admin.saml.publicCertificateFileTitle'),
          label_default: 'Service Provider Public Certificate:',
          help_text: Object(utils_i18n["b" /* t */])('admin.saml.publicCertificateFileDesc'),
          help_text_default: 'The certificate used to generate the signature on a SAML request to the Identity Provider for a service provider initiated SAML login, when Mattermost is the Service Provider.',
          remove_help_text: Object(utils_i18n["b" /* t */])('admin.saml.publicCertificateFileRemoveDesc'),
          remove_help_text_default: 'Remove the certificate used to generate the signature on a SAML request to the Identity Provider for a service provider initiated SAML login, when Mattermost is the Service Provider.',
          remove_button_text: Object(utils_i18n["b" /* t */])('admin.saml.remove.sp_certificate'),
          remove_button_text_default: 'Remove Service Provider Certificate',
          removing_text: Object(utils_i18n["b" /* t */])('admin.saml.removing.certificate'),
          removing_text_default: 'Removing Certificate...',
          uploading_text: Object(utils_i18n["b" /* t */])('admin.saml.uploading.certificate'),
          uploading_text_default: 'Uploading Certificate...',
          isDisabled: it.either(it.stateIsFalse('SamlSettings.Enable'), it.stateIsFalse('SamlSettings.Encrypt')),
          fileType: '.crt,.cer',
          upload_action: admin_actions["J" /* uploadPublicSamlCertificate */],
          remove_action: admin_actions["A" /* removePublicSamlCertificate */]
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'SamlSettings.SignRequest',
          label: Object(utils_i18n["b" /* t */])('admin.saml.signRequestTitle'),
          label_default: 'Sign Request:',
          help_text: Object(utils_i18n["b" /* t */])('admin.saml.signRequestDescription'),
          help_text_default: 'When true, Mattermost will sign the SAML request using your private key. When false, Mattermost will not sign the SAML request.',
          isDisabled: it.either(it.stateIsFalse('SamlSettings.Encrypt'), it.stateIsFalse('SamlSettings.PrivateKeyFile'), it.stateIsFalse('SamlSettings.PublicCertificateFile'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'SamlSettings.EmailAttribute',
          label: Object(utils_i18n["b" /* t */])('admin.saml.emailAttrTitle'),
          label_default: 'Email Attribute:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.saml.emailAttrEx'),
          placeholder_default: 'E.g.: "Email" or "PrimaryEmail"',
          help_text: Object(utils_i18n["b" /* t */])('admin.saml.emailAttrDesc'),
          help_text_default: 'The attribute in the SAML Assertion that will be used to populate the email addresses of users in Mattermost.',
          isDisabled: it.stateIsFalse('SamlSettings.Enable')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'SamlSettings.UsernameAttribute',
          label: Object(utils_i18n["b" /* t */])('admin.saml.usernameAttrTitle'),
          label_default: 'Username Attribute:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.saml.usernameAttrEx'),
          placeholder_default: 'E.g.: "Username"',
          help_text: Object(utils_i18n["b" /* t */])('admin.saml.usernameAttrDesc'),
          help_text_default: 'The attribute in the SAML Assertion that will be used to populate the username field in Mattermost.',
          isDisabled: it.stateIsFalse('SamlSettings.Enable')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'SamlSettings.IdAttribute',
          label: Object(utils_i18n["b" /* t */])('admin.saml.idAttrTitle'),
          label_default: 'Id Attribute:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.saml.idAttrEx'),
          placeholder_default: 'E.g.: "Id"',
          help_text: Object(utils_i18n["b" /* t */])('admin.saml.idAttrDesc'),
          help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to bind users from SAML to users in Mattermost.',
          isDisabled: it.stateIsFalse('SamlSettings.Enable')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'SamlSettings.FirstNameAttribute',
          label: Object(utils_i18n["b" /* t */])('admin.saml.firstnameAttrTitle'),
          label_default: 'First Name Attribute:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.saml.firstnameAttrEx'),
          placeholder_default: 'E.g.: "FirstName"',
          help_text: Object(utils_i18n["b" /* t */])('admin.saml.firstnameAttrDesc'),
          help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the first name of users in Mattermost.',
          isDisabled: it.stateIsFalse('SamlSettings.Enable')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'SamlSettings.LastNameAttribute',
          label: Object(utils_i18n["b" /* t */])('admin.saml.lastnameAttrTitle'),
          label_default: 'Last Name Attribute:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.saml.lastnameAttrEx'),
          placeholder_default: 'E.g.: "LastName"',
          help_text: Object(utils_i18n["b" /* t */])('admin.saml.lastnameAttrDesc'),
          help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the last name of users in Mattermost.',
          isDisabled: it.stateIsFalse('SamlSettings.Enable')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'SamlSettings.NicknameAttribute',
          label: Object(utils_i18n["b" /* t */])('admin.saml.nicknameAttrTitle'),
          label_default: 'Nickname Attribute:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.saml.nicknameAttrEx'),
          placeholder_default: 'E.g.: "Nickname"',
          help_text: Object(utils_i18n["b" /* t */])('admin.saml.nicknameAttrDesc'),
          help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the nickname of users in Mattermost.',
          isDisabled: it.stateIsFalse('SamlSettings.Enable')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'SamlSettings.PositionAttribute',
          label: Object(utils_i18n["b" /* t */])('admin.saml.positionAttrTitle'),
          label_default: 'Position Attribute:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.saml.positionAttrEx'),
          placeholder_default: 'E.g.: "Role"',
          help_text: Object(utils_i18n["b" /* t */])('admin.saml.positionAttrDesc'),
          help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the position of users in Mattermost.',
          isDisabled: it.stateIsFalse('SamlSettings.Enable')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'SamlSettings.LocaleAttribute',
          label: Object(utils_i18n["b" /* t */])('admin.saml.localeAttrTitle'),
          label_default: 'Preferred Language Attribute:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.saml.localeAttrEx'),
          placeholder_default: 'E.g.: "Locale" or "PrimaryLanguage"',
          help_text: Object(utils_i18n["b" /* t */])('admin.saml.localeAttrDesc'),
          help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the language of users in Mattermost.',
          isDisabled: it.stateIsFalse('SamlSettings.Enable')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'SamlSettings.LoginButtonText',
          label: Object(utils_i18n["b" /* t */])('admin.saml.loginButtonTextTitle'),
          label_default: 'Login Button Text:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.saml.loginButtonTextEx'),
          placeholder_default: 'E.g.: "OKTA"',
          help_text: Object(utils_i18n["b" /* t */])('admin.saml.loginButtonTextDesc'),
          help_text_default: '(Optional) The text that appears in the login button on the login page. Defaults to "SAML".',
          isDisabled: it.stateIsFalse('SamlSettings.Enable')
        }]
      }
    },
    gitlab: {
      url: 'authentication/gitlab',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.gitlab'),
      title_default: 'GitLab',
      isHidden: it.licensed,
      schema: {
        id: 'GitLabSettings',
        name: Object(utils_i18n["b" /* t */])('admin.authentication.gitlab'),
        name_default: 'GitLab',
        onConfigLoad: config => {
          const newState = {};
          newState['GitLabSettings.Url'] = config.GitLabSettings.UserApiEndpoint.replace('/api/v4/user', '');
          return newState;
        },
        onConfigSave: config => {
          const newConfig = { ...config
          };
          newConfig.GitLabSettings.UserApiEndpoint = config.GitLabSettings.Url.replace(/\/$/, '') + '/api/v4/user';
          return newConfig;
        },
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'GitLabSettings.Enable',
          label: Object(utils_i18n["b" /* t */])('admin.gitlab.enableTitle'),
          label_default: 'Enable authentication with GitLab: ',
          help_text: Object(utils_i18n["b" /* t */])('admin.gitlab.enableDescription'),
          help_text_default: 'When true, Mattermost allows team creation and account signup using GitLab OAuth.\n \n1. Log in to your GitLab account and go to Profile Settings -> Applications.\n2. Enter Redirect URIs "<your-mattermost-url>/login/gitlab/complete" (example: http://localhost:8065/login/gitlab/complete) and "<your-mattermost-url>/signup/gitlab/complete".\n3. Then use "Application Secret Key" and "Application ID" fields from GitLab to complete the options below.\n4. Complete the Endpoint URLs below.',
          help_text_markdown: true
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'GitLabSettings.Id',
          label: Object(utils_i18n["b" /* t */])('admin.gitlab.clientIdTitle'),
          label_default: 'Application ID:',
          help_text: Object(utils_i18n["b" /* t */])('admin.gitlab.clientIdDescription'),
          help_text_default: 'Obtain this value via the instructions above for logging into GitLab.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.gitlab.clientIdExample'),
          placeholder_default: 'E.g.: "jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY"',
          isDisabled: it.stateIsFalse('GitLabSettings.Enable')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'GitLabSettings.Secret',
          label: Object(utils_i18n["b" /* t */])('admin.gitlab.clientSecretTitle'),
          label_default: 'Application Secret Key:',
          help_text: Object(utils_i18n["b" /* t */])('admin.gitlab.clientSecretDescription'),
          help_text_default: 'Obtain this value via the instructions above for logging into GitLab.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.gitlab.clientSecretExample'),
          placeholder_default: 'E.g.: "jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY"',
          isDisabled: it.stateIsFalse('GitLabSettings.Enable')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'GitLabSettings.Url',
          label: Object(utils_i18n["b" /* t */])('admin.gitlab.siteUrl'),
          label_default: 'GitLab Site URL:',
          help_text: Object(utils_i18n["b" /* t */])('admin.gitlab.siteUrlDescription'),
          help_text_default: 'Enter the URL of your GitLab instance, e.g. https://example.com:3000. If your GitLab instance is not set up with SSL, start the URL with http:// instead of https://.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.gitlab.siteUrlExample'),
          placeholder_default: 'E.g.: https://',
          isDisabled: it.stateIsFalse('GitLabSettings.Enable')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'GitLabSettings.UserApiEndpoint',
          label: Object(utils_i18n["b" /* t */])('admin.gitlab.userTitle'),
          label_default: 'User API Endpoint:',
          dynamic_value: (value, config, state) => {
            if (state['GitLabSettings.Url']) {
              return state['GitLabSettings.Url'].replace(/\/$/, '') + '/api/v4/user';
            }

            return '';
          },
          isDisabled: true
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'GitLabSettings.AuthEndpoint',
          label: Object(utils_i18n["b" /* t */])('admin.gitlab.authTitle'),
          label_default: 'Auth Endpoint:',
          dynamic_value: (value, config, state) => {
            if (state['GitLabSettings.Url']) {
              return state['GitLabSettings.Url'].replace(/\/$/, '') + '/oauth/authorize';
            }

            return '';
          },
          isDisabled: true
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'GitLabSettings.TokenEndpoint',
          label: Object(utils_i18n["b" /* t */])('admin.gitlab.tokenTitle'),
          label_default: 'Token Endpoint:',
          dynamic_value: (value, config, state) => {
            if (state['GitLabSettings.Url']) {
              return state['GitLabSettings.Url'].replace(/\/$/, '') + '/oauth/token';
            }

            return '';
          },
          isDisabled: true
        }]
      }
    },
    oauth: {
      url: 'authentication/oauth',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.oauth'),
      title_default: 'OAuth 2.0',
      isHidden: it.isnt(it.licensed),
      schema: {
        id: 'OAuthSettings',
        name: Object(utils_i18n["b" /* t */])('admin.authentication.oauth'),
        name_default: 'OAuth 2.0',
        onConfigLoad: config => {
          const newState = {};

          if (config.GitLabSettings && config.GitLabSettings.Enable) {
            newState.oauthType = constants["g" /* Constants */].GITLAB_SERVICE;
          }

          if (config.Office365Settings && config.Office365Settings.Enable) {
            newState.oauthType = constants["g" /* Constants */].OFFICE365_SERVICE;
          }

          if (config.GoogleSettings && config.GoogleSettings.Enable) {
            newState.oauthType = constants["g" /* Constants */].GOOGLE_SERVICE;
          }

          newState['GitLabSettings.Url'] = config.GitLabSettings.UserApiEndpoint.replace('/api/v4/user', '');
          return newState;
        },
        onConfigSave: config => {
          const newConfig = { ...config
          };
          newConfig.GitLabSettings = config.GitLabSettings || {};
          newConfig.Office365Settings = config.Office365Settings || {};
          newConfig.GoogleSettings = config.GoogleSettings || {};
          newConfig.GitLabSettings.Enable = false;
          newConfig.Office365Settings.Enable = false;
          newConfig.GoogleSettings.Enable = false;
          newConfig.GitLabSettings.UserApiEndpoint = config.GitLabSettings.Url.replace(/\/$/, '') + '/api/v4/user';

          if (config.oauthType === constants["g" /* Constants */].GITLAB_SERVICE) {
            newConfig.GitLabSettings.Enable = true;
          }

          if (config.oauthType === constants["g" /* Constants */].OFFICE365_SERVICE) {
            newConfig.Office365Settings.Enable = true;
          }

          if (config.oauthType === constants["g" /* Constants */].GOOGLE_SERVICE) {
            newConfig.GoogleSettings.Enable = true;
          }

          delete newConfig.oauthType;
          return newConfig;
        },
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_DROPDOWN,
          key: 'oauthType',
          label: Object(utils_i18n["b" /* t */])('admin.oauth.select'),
          label_default: 'Select OAuth 2.0 Service Provider:',
          options: [{
            value: 'off',
            display_name: Object(utils_i18n["b" /* t */])('admin.oauth.off'),
            display_name_default: 'Do not allow sign-in via an OAuth 2.0 provider.'
          }, {
            value: constants["g" /* Constants */].GITLAB_SERVICE,
            display_name: Object(utils_i18n["b" /* t */])('admin.oauth.gitlab'),
            display_name_default: 'GitLab',
            help_text: Object(utils_i18n["b" /* t */])('admin.gitlab.EnableMarkdownDesc'),
            help_text_default: '1. Log in to your GitLab account and go to Profile Settings -> Applications.\n2. Enter Redirect URIs "<your-mattermost-url>/login/gitlab/complete" (example: http://localhost:8065/login/gitlab/complete) and "<your-mattermost-url>/signup/gitlab/complete".\n3. Then use "Application Secret Key" and "Application ID" fields from GitLab to complete the options below.\n4. Complete the Endpoint URLs below.',
            help_text_markdown: true
          }, {
            value: constants["g" /* Constants */].GOOGLE_SERVICE,
            display_name: Object(utils_i18n["b" /* t */])('admin.oauth.google'),
            display_name_default: 'Google Apps',
            isHidden: it.isnt(it.licensedForFeature('GoogleOAuth')),
            help_text: Object(utils_i18n["b" /* t */])('admin.google.EnableMarkdownDesc'),
            help_text_default: '1. [Log in](!https://accounts.google.com/login) to your Google account.\n2. Go to [https://console.developers.google.com](!https://console.developers.google.com), click **Credentials** in the left hand sidebar and enter "aboutone - your-company-name" as the **Project Name**, then click **Create**.\n3. Click the **OAuth consent screen** header and enter "Aboutone" as the **Product name shown to users**, then click **Save**.\n4. Under the **Credentials** header, click **Create credentials**, choose **OAuth client ID** and select **Web Application**.\n5. Under **Restrictions** and **Authorized redirect URIs** enter **your-mattermost-url/signup/google/complete** (example: http://localhost:8065/signup/google/complete). Click **Create**.\n6. Paste the **Client ID** and **Client Secret** to the fields below, then click **Save**.\n7. Finally, go to [Google+ API](!https://console.developers.google.com/apis/api/plus/overview") and click *Enable*. This might take a few minutes to propagate through Google`s systems.',
            help_text_markdown: true
          }, {
            value: constants["g" /* Constants */].OFFICE365_SERVICE,
            display_name: Object(utils_i18n["b" /* t */])('admin.oauth.office365'),
            display_name_default: 'Office 365 (Beta)',
            isHidden: it.isnt(it.licensedForFeature('Office365OAuth')),
            help_text: Object(utils_i18n["b" /* t */])('admin.office365.EnableMarkdownDesc'),
            help_text_default: '1. [Log in](!https://login.microsoftonline.com/) to your Microsoft or Office 365 account. Make sure it`s the account on the same [tenant](!https://msdn.microsoft.com/en-us/library/azure/jj573650.aspx#Anchor_0) that you would like users to log in with.\n2. Go to [https://apps.dev.microsoft.com](!https://apps.dev.microsoft.com), click **Go to app list** > **Add an app** and use "aboutone - your-company-name" as the **Application Name**.\n3. Under **Application Secrets**, click **Generate New Password** and paste it to the **Application Secret Password** field below.\n4. Under **Platforms**, click **Add Platform**, choose **Web** and enter **your-mattermost-url/signup/office365/complete** (example: http://localhost:8065/signup/office365/complete) under **Redirect URIs**. Also uncheck **Allow Implicit Flow**.\n5. Finally, click **Save** and then paste the **Application ID** below.',
            help_text_markdown: true
          }]
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'GitLabSettings.Id',
          label: Object(utils_i18n["b" /* t */])('admin.gitlab.clientIdTitle'),
          label_default: 'Application ID:',
          help_text: Object(utils_i18n["b" /* t */])('admin.gitlab.clientIdDescription'),
          help_text_default: 'Obtain this value via the instructions above for logging into GitLab.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.gitlab.clientIdExample'),
          placeholder_default: 'E.g.: "jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY"',
          isHidden: it.isnt(it.stateEquals('oauthType', 'gitlab'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'GitLabSettings.Secret',
          label: Object(utils_i18n["b" /* t */])('admin.gitlab.clientSecretTitle'),
          label_default: 'Application Secret Key:',
          help_text: Object(utils_i18n["b" /* t */])('admin.gitlab.clientSecretDescription'),
          help_text_default: 'Obtain this value via the instructions above for logging into GitLab.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.gitlab.clientSecretExample'),
          placeholder_default: 'E.g.: "jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY"',
          isHidden: it.isnt(it.stateEquals('oauthType', 'gitlab'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'GitLabSettings.Url',
          label: Object(utils_i18n["b" /* t */])('admin.gitlab.siteUrl'),
          label_default: 'GitLab Site URL:',
          help_text: Object(utils_i18n["b" /* t */])('admin.gitlab.siteUrlDescription'),
          help_text_default: 'Enter the URL of your GitLab instance, e.g. https://example.com:3000. If your GitLab instance is not set up with SSL, start the URL with http:// instead of https://.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.gitlab.siteUrlExample'),
          placeholder_default: 'E.g.: https://',
          isHidden: it.isnt(it.stateEquals('oauthType', 'gitlab'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'GitLabSettings.UserApiEndpoint',
          label: Object(utils_i18n["b" /* t */])('admin.gitlab.userTitle'),
          label_default: 'User API Endpoint:',
          dynamic_value: (value, config, state) => {
            if (state['GitLabSettings.Url']) {
              return state['GitLabSettings.Url'].replace(/\/$/, '') + '/api/v4/user';
            }

            return '';
          },
          isDisabled: true,
          isHidden: it.isnt(it.stateEquals('oauthType', 'gitlab'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'GitLabSettings.AuthEndpoint',
          label: Object(utils_i18n["b" /* t */])('admin.gitlab.authTitle'),
          label_default: 'Auth Endpoint:',
          dynamic_value: (value, config, state) => {
            if (state['GitLabSettings.Url']) {
              return state['GitLabSettings.Url'].replace(/\/$/, '') + '/oauth/authorize';
            }

            return '';
          },
          isDisabled: true,
          isHidden: it.isnt(it.stateEquals('oauthType', 'gitlab'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'GitLabSettings.TokenEndpoint',
          label: Object(utils_i18n["b" /* t */])('admin.gitlab.tokenTitle'),
          label_default: 'Token Endpoint:',
          dynamic_value: (value, config, state) => {
            if (state['GitLabSettings.Url']) {
              return state['GitLabSettings.Url'].replace(/\/$/, '') + '/oauth/token';
            }

            return '';
          },
          isDisabled: true,
          isHidden: it.isnt(it.stateEquals('oauthType', 'gitlab'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'GoogleSettings.Id',
          label: Object(utils_i18n["b" /* t */])('admin.google.clientIdTitle'),
          label_default: 'Client ID:',
          help_text: Object(utils_i18n["b" /* t */])('admin.google.clientIdDescription'),
          help_text_default: 'The Client ID you received when registering your application with Google.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.google.clientIdExample'),
          placeholder_default: 'E.g.: "7602141235235-url0fhs1mayfasbmop5qlfns8dh4.apps.googleusercontent.com"',
          isHidden: it.isnt(it.stateEquals('oauthType', 'google'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'GoogleSettings.Secret',
          label: Object(utils_i18n["b" /* t */])('admin.google.clientSecretTitle'),
          label_default: 'Client Secret:',
          help_text: Object(utils_i18n["b" /* t */])('admin.google.clientSecretDescription'),
          help_text_default: 'The Client Secret you received when registering your application with Google.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.google.clientSecretExample'),
          placeholder_default: 'E.g.: "H8sz0Az-dDs2p15-7QzD231"',
          isHidden: it.isnt(it.stateEquals('oauthType', 'google'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'GoogleSettings.UserApiEndpoint',
          label: Object(utils_i18n["b" /* t */])('admin.google.userTitle'),
          label_default: 'User API Endpoint:',
          dynamic_value: () => 'https://www.googleapis.com/plus/v1/people/me',
          isDisabled: true,
          isHidden: it.isnt(it.stateEquals('oauthType', 'google'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'GoogleSettings.AuthEndpoint',
          label: Object(utils_i18n["b" /* t */])('admin.google.authTitle'),
          label_default: 'Auth Endpoint:',
          dynamic_value: () => 'https://accounts.google.com/o/oauth2/v2/auth',
          isDisabled: true,
          isHidden: it.isnt(it.stateEquals('oauthType', 'google'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'GoogleSettings.TokenEndpoint',
          label: Object(utils_i18n["b" /* t */])('admin.google.tokenTitle'),
          label_default: 'Token Endpoint:',
          dynamic_value: () => 'https://www.googleapis.com/oauth2/v4/token',
          isDisabled: true,
          isHidden: it.isnt(it.stateEquals('oauthType', 'google'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'Office365Settings.Id',
          label: Object(utils_i18n["b" /* t */])('admin.office365.clientIdTitle'),
          label_default: 'Application ID:',
          help_text: Object(utils_i18n["b" /* t */])('admin.office365.clientIdDescription'),
          help_text_default: 'The Application/Client ID you received when registering your application with Microsoft.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.office365.clientIdExample'),
          placeholder_default: 'E.g.: "adf3sfa2-ag3f-sn4n-ids0-sh1hdax192qq"',
          isHidden: it.isnt(it.stateEquals('oauthType', 'office365'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'Office365Settings.Secret',
          label: Object(utils_i18n["b" /* t */])('admin.office365.clientSecretTitle'),
          label_default: 'Application Secret Password:',
          help_text: Object(utils_i18n["b" /* t */])('admin.office365.clientSecretDescription'),
          help_text_default: 'The Application Secret Password you generated when registering your application with Microsoft.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.office365.clientSecretExample'),
          placeholder_default: 'E.g.: "shAieM47sNBfgl20f8ci294"',
          isHidden: it.isnt(it.stateEquals('oauthType', 'office365'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'Office365Settings.UserApiEndpoint',
          label: Object(utils_i18n["b" /* t */])('admin.office365.userTitle'),
          label_default: 'User API Endpoint:',
          dynamic_value: () => 'https://graph.microsoft.com/v1.0/me',
          isDisabled: true,
          isHidden: it.isnt(it.stateEquals('oauthType', 'office365'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'Office365Settings.AuthEndpoint',
          label: Object(utils_i18n["b" /* t */])('admin.office365.authTitle'),
          label_default: 'Auth Endpoint:',
          dynamic_value: () => 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize',
          isDisabled: true,
          isHidden: it.isnt(it.stateEquals('oauthType', 'office365'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'Office365Settings.TokenEndpoint',
          label: Object(utils_i18n["b" /* t */])('admin.office365.tokenTitle'),
          label_default: 'Token Endpoint:',
          dynamic_value: () => 'https://login.microsoftonline.com/common/oauth2/v2.0/token',
          isDisabled: true,
          isHidden: it.isnt(it.stateEquals('oauthType', 'office365'))
        }]
      }
    }
  },
  plugins: {
    icon: 'fa-plug',
    sectionTitle: Object(utils_i18n["b" /* t */])('admin.sidebar.plugins'),
    sectionTitleDefault: 'Plugins (Beta)',
    id: 'plugins',
    plugin_management: {
      url: 'plugins/plugin_management',
      title: Object(utils_i18n["b" /* t */])('admin.plugins.pluginManagement'),
      title_default: 'Plugin Management',
      searchableStrings: ['admin.plugin.management.title', 'admin.plugins.settings.enable', 'admin.plugins.settings.enableDesc', 'admin.plugin.uploadTitle', 'admin.plugin.installedTitle', 'admin.plugin.installedDesc', 'admin.plugin.uploadDesc', 'admin.plugin.uploadDisabledDesc'],
      schema: {
        id: 'PluginManagementSettings',
        component: plugin_management
      }
    },
    custom: {
      url: 'plugins/plugin_:plugin_id',
      schema: {
        id: 'CustomPluginSettings',
        component: custom_plugin_settings
      }
    }
  },
  integrations: {
    icon: 'fa-sitemap',
    sectionTitle: Object(utils_i18n["b" /* t */])('admin.sidebar.integrations'),
    sectionTitleDefault: 'Integrations',
    id: 'integrations',
    integration_management: {
      url: 'integrations/integration_management',
      title: Object(utils_i18n["b" /* t */])('admin.integrations.integrationManagement'),
      title_default: 'Integration Management',
      schema: {
        id: 'CustomIntegrationSettings',
        name: Object(utils_i18n["b" /* t */])('admin.integrations.integrationManagement.title'),
        name_default: 'Integration Management',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.EnableIncomingWebhooks',
          label: Object(utils_i18n["b" /* t */])('admin.service.webhooksTitle'),
          label_default: 'Enable Incoming Webhooks: ',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.webhooksDescription'),
          help_text_default: 'When true, incoming webhooks will be allowed. To help combat phishing attacks, all posts from webhooks will be labelled by a BOT tag. See [documentation](!http://docs.mattermost.com/developer/webhooks-incoming.html) to learn more.',
          help_text_markdown: true
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.EnableOutgoingWebhooks',
          label: Object(utils_i18n["b" /* t */])('admin.service.outWebhooksTitle'),
          label_default: 'Enable Outgoing Webhooks: ',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.outWebhooksDesc'),
          help_text_default: 'When true, outgoing webhooks will be allowed. See [documentation](!http://docs.mattermost.com/developer/webhooks-outgoing.html) to learn more.',
          help_text_markdown: true
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.EnableCommands',
          label: Object(utils_i18n["b" /* t */])('admin.service.cmdsTitle'),
          label_default: 'Enable Custom Slash Commands: ',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.cmdsDesc'),
          help_text_default: 'When true, custom slash commands will be allowed. See [documentation](!http://docs.mattermost.com/developer/slash-commands.html) to learn more.',
          help_text_markdown: true
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.EnableOAuthServiceProvider',
          label: Object(utils_i18n["b" /* t */])('admin.oauth.providerTitle'),
          label_default: 'Enable OAuth 2.0 Service Provider: ',
          help_text: Object(utils_i18n["b" /* t */])('admin.oauth.providerDescription'),
          help_text_default: 'When true, Mattermost can act as an OAuth 2.0 service provider allowing Mattermost to authorize API requests from external applications. See [documentation](!https://docs.mattermost.com/developer/oauth-2-0-applications.html) to learn more.',
          help_text_markdown: true
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_PERMISSION,
          key: 'ServiceSettings.EnableOnlyAdminIntegrations',
          label: Object(utils_i18n["b" /* t */])('admin.service.integrationAdmin'),
          label_default: 'Restrict managing integrations to Admins:',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.integrationAdminDesc'),
          help_text_default: 'When true, webhooks and slash commands can only be created, edited and viewed by Team and System Admins, and OAuth 2.0 applications by System Admins. Integrations are available to all users after they have been created by the Admin.',
          permissions_mapping_name: 'enableOnlyAdminIntegrations',
          isHidden: it.licensed
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.EnablePostUsernameOverride',
          label: Object(utils_i18n["b" /* t */])('admin.service.overrideTitle'),
          label_default: 'Enable integrations to override usernames:',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.overrideDescription'),
          help_text_default: 'When true, webhooks, slash commands and other integrations, such as [Zapier](!https://docs.mattermost.com/integrations/zapier.html), will be allowed to change the username they are posting as. Note: Combined with allowing integrations to override profile picture icons, users may be able to perform phishing attacks by attempting to impersonate other users.',
          help_text_markdown: true
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.EnablePostIconOverride',
          label: Object(utils_i18n["b" /* t */])('admin.service.iconTitle'),
          label_default: 'Enable integrations to override profile picture icons:',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.iconDescription'),
          help_text_default: 'When true, webhooks, slash commands and other integrations, such as [Zapier](!https://docs.mattermost.com/integrations/zapier.html), will be allowed to change the profile picture they post with. Note: Combined with allowing integrations to override usernames, users may be able to perform phishing attacks by attempting to impersonate other users.',
          help_text_markdown: true
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.EnableUserAccessTokens',
          label: Object(utils_i18n["b" /* t */])('admin.service.userAccessTokensTitle'),
          label_default: 'Enable User Access Tokens: ',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.userAccessTokensDescription'),
          help_text_default: 'When true, users can create [user access tokens](!https://about.mattermost.com/default-user-access-tokens) for integrations in **Account Settings > Security**. They can be used to authenticate against the API and give full access to the account.\n\n To manage who can create personal access tokens or to search users by token ID, go to the **User Management > Users** page.',
          help_text_markdown: true
        }]
      }
    },
    bot_accounts: {
      url: 'integrations/bot_accounts',
      title: Object(utils_i18n["b" /* t */])('admin.integrations.botAccounts'),
      title_default: 'Bot Accounts',
      schema: {
        id: 'BotAccountSettings',
        name: Object(utils_i18n["b" /* t */])('admin.integrations.botAccounts.title'),
        name_default: 'Bot Accounts',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.EnableBotAccountCreation',
          label: Object(utils_i18n["b" /* t */])('admin.service.enableBotTitle'),
          label_default: 'Enable Bot Account Creation: ',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.enableBotAccountCreation'),
          help_text_default: 'When true, users can create bot accounts for integrations in **Integrations > Bot Accounts**. Bot accounts are similar to user accounts except they cannot be used to log in. See [documentation](https://mattermost.com/pl/default-bot-accounts) to learn more.',
          help_text_markdown: true
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.DisableBotsWhenOwnerIsDeactivated',
          label: Object(utils_i18n["b" /* t */])('admin.service.disableBotOwnerDeactivatedTitle'),
          label_default: 'Disable bot accounts when owner is deactivated:',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.disableBotWhenOwnerIsDeactivated'),
          help_text_default: 'When a user is deactivated, disables all bot accounts managed by the user. To re-enable bot accounts, go to **Integrations > Bot Accounts**.',
          help_text_markdown: true
        }]
      }
    },
    gif: {
      url: 'integrations/gif',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.gif'),
      title_default: 'GIF (Beta)',
      schema: {
        id: 'GifSettings',
        name: Object(utils_i18n["b" /* t */])('admin.integrations.gif'),
        name_default: 'GIF (Beta)',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.EnableGifPicker',
          label: Object(utils_i18n["b" /* t */])('admin.customization.enableGifPickerTitle'),
          label_default: 'Enable GIF Picker:',
          help_text: Object(utils_i18n["b" /* t */])('admin.customization.enableGifPickerDesc'),
          help_text_default: 'Allow users to select GIFs from the emoji picker via a Gfycat integration.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'ServiceSettings.GfycatApiKey',
          label: Object(utils_i18n["b" /* t */])('admin.customization.gfycatApiKey'),
          label_default: 'Gfycat API Key:',
          help_text: Object(utils_i18n["b" /* t */])('admin.customization.gfycatApiKeyDescription'),
          help_text_default: 'Request an API key at [https://developers.gfycat.com/signup/#](!https://developers.gfycat.com/signup/#). Enter the client ID you receive via email to this field. When blank, uses the default API key provided by Gfycat.',
          help_text_markdown: true
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'ServiceSettings.GfycatApiSecret',
          label: Object(utils_i18n["b" /* t */])('admin.customization.gfycatApiSecret'),
          label_default: 'Gfycat API Secret:',
          help_text: Object(utils_i18n["b" /* t */])('admin.customization.gfycatApiSecretDescription'),
          help_text_default: 'The API secret generated by Gfycat for your API key. When blank, uses the default API secret provided by Gfycat.'
        }]
      }
    },
    cors: {
      url: 'integrations/cors',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.cors'),
      title_default: 'CORS',
      isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),
      schema: {
        id: 'CORS',
        name: Object(utils_i18n["b" /* t */])('admin.integrations.cors'),
        name_default: 'CORS',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'ServiceSettings.AllowCorsFrom',
          label: Object(utils_i18n["b" /* t */])('admin.service.corsTitle'),
          label_default: 'Enable cross-origin requests from:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.service.corsEx'),
          placeholder_default: 'http://example.com',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.corsDescription'),
          help_text_default: 'Enable HTTP Cross origin request from a specific domain. Use "*" if you want to allow CORS from any domain or leave it blank to disable it. Should not be set to "*" in production.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'ServiceSettings.CorsExposedHeaders',
          label: Object(utils_i18n["b" /* t */])('admin.service.corsExposedHeadersTitle'),
          label_default: 'CORS Exposed Headers:',
          placeholder: Object(utils_i18n["b" /* t */])('admin.service.corsHeadersEx'),
          placeholder_default: 'X-My-Header',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.corsExposedHeadersDescription'),
          help_text_default: 'Whitelist of headers that will be accessible to the requester.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.CorsAllowCredentials',
          label: Object(utils_i18n["b" /* t */])('admin.service.corsAllowCredentialsLabel'),
          label_default: 'CORS Allow Credentials:',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.corsAllowCredentialsDescription'),
          help_text_default: 'When true, requests that pass validation will include the Access-Control-Allow-Credentials header.'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.CorsDebug',
          label: Object(utils_i18n["b" /* t */])('admin.service.CorsDebugLabel'),
          label_default: 'CORS Debug:',
          help_text: Object(utils_i18n["b" /* t */])('admin.service.corsDebugDescription'),
          help_text_default: 'When true, prints messages to the logs to help when developing an integration that uses CORS. These messages will include the structured key value pair "source":"cors".'
        }]
      }
    }
  },
  compliance: {
    icon: 'fa-list',
    sectionTitle: Object(utils_i18n["b" /* t */])('admin.sidebar.compliance'),
    sectionTitleDefault: 'Compliance',
    data_retention: {
      url: 'compliance/data_retention',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.dataRetentionPolicy'),
      title_default: 'Data Retention Policy',
      isHidden: it.isnt(it.licensedForFeature('DataRetention')),
      searchableStrings: ['admin.data_retention.title', 'admin.data_retention.messageRetentionDays.description', 'admin.data_retention.fileRetentionDays.description', ['admin.data_retention.note.description', {
        documentationLink: ''
      }], 'admin.data_retention.enableMessageDeletion.title', 'admin.data_retention.enableMessageDeletion.description', 'admin.data_retention.enableFileDeletion.title', 'admin.data_retention.enableFileDeletion.description', 'admin.data_retention.deletionJobStartTime.title', 'admin.data_retention.deletionJobStartTime.description', 'admin.data_retention.createJob.title', 'admin.data_retention.createJob.help'],
      schema: {
        id: 'DataRetentionSettings',
        component: data_retention_settings_DataRetentionSettings
      }
    },
    message_export: {
      url: 'compliance/export',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.complianceExport'),
      title_default: 'Compliance Export (Beta)',
      isHidden: it.isnt(it.licensedForFeature('MessageExport')),
      searchableStrings: ['admin.service.complianceExportTitle', 'admin.service.complianceExportDesc', 'admin.complianceExport.exportJobStartTime.title', 'admin.complianceExport.exportJobStartTime.description', 'admin.complianceExport.exportFormat.title', ['admin.complianceExport.exportFormat.description', {
        siteURL: ''
      }], 'admin.complianceExport.createJob.title', 'admin.complianceExport.createJob.help', 'admin.complianceExport.globalRelayCustomerType.title', 'admin.complianceExport.globalRelayCustomerType.description', 'admin.complianceExport.globalRelaySmtpUsername.title', 'admin.complianceExport.globalRelaySmtpUsername.description', 'admin.complianceExport.globalRelaySmtpPassword.title', 'admin.complianceExport.globalRelaySmtpPassword.description', 'admin.complianceExport.globalRelayEmailAddress.title', 'admin.complianceExport.globalRelayEmailAddress.description'],
      schema: {
        id: 'MessageExportSettings',
        component: message_export_settings_MessageExportSettings
      }
    },
    audits: {
      url: 'compliance/monitoring',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.complianceMonitoring'),
      title_default: 'Compliance Monitoring',
      isHidden: it.isnt(it.licensed),
      searchableStrings: ['admin.audits.title', 'admin.audits.reload'],
      schema: {
        id: 'Audits',
        name: Object(utils_i18n["b" /* t */])('admin.compliance.complianceMonitoring'),
        name_default: 'Compliance Monitoring',
        component: audits,
        isHidden: it.isnt(it.licensedForFeature('Compliance')),
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BANNER,
          label: Object(utils_i18n["b" /* t */])('admin.compliance.newComplianceExportBanner'),
          label_markdown: true,
          label_default: 'This feature is replaced by a new [Compliance Export]({siteURL}/admin_console/compliance/export) feature, and will be removed in a future release. We recommend migrating to the new system.',
          label_values: {
            siteURL: Object(url["e" /* getSiteURL */])()
          },
          isHidden: it.isnt(it.licensedForFeature('Compliance')),
          banner_type: 'info'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ComplianceSettings.Enable',
          label: Object(utils_i18n["b" /* t */])('admin.compliance.enableTitle'),
          label_default: 'Enable Compliance Reporting:',
          help_text: Object(utils_i18n["b" /* t */])('admin.compliance.enableDesc'),
          help_text_default: 'When true, Mattermost allows compliance reporting from the **Compliance and Auditing** tab. See [documentation](!https://docs.mattermost.com/administration/compliance.html) to learn more.',
          help_text_markdown: true,
          isHidden: it.isnt(it.licensedForFeature('Compliance'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'ComplianceSettings.Directory',
          label: Object(utils_i18n["b" /* t */])('admin.compliance.directoryTitle'),
          label_default: 'Compliance Report Directory:',
          help_text: Object(utils_i18n["b" /* t */])('admin.compliance.directoryDescription'),
          help_text_default: 'Directory to which compliance reports are written. If blank, will be set to ./data/.',
          placeholder: Object(utils_i18n["b" /* t */])('admin.compliance.directoryExample'),
          placeholder_default: 'E.g.: "./data/"',
          isDisabled: it.stateIsFalse('ComplianceSettings.Enable'),
          isHidden: it.isnt(it.licensedForFeature('Compliance'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ComplianceSettings.EnableDaily',
          label: Object(utils_i18n["b" /* t */])('admin.compliance.enableDailyTitle'),
          label_default: 'Enable Daily Report:',
          help_text: Object(utils_i18n["b" /* t */])('admin.compliance.enableDailyDesc'),
          help_text_default: 'When true, Mattermost will generate a daily compliance report.',
          isDisabled: it.stateIsFalse('ComplianceSettings.Enable'),
          isHidden: it.isnt(it.licensedForFeature('Compliance'))
        }]
      }
    },
    custom_terms_of_service: {
      url: 'compliance/custom_terms_of_service',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.customTermsOfService'),
      title_default: 'Custom Terms of Service (Beta)',
      isHidden: it.isnt(it.licensedForFeature('CustomTermsOfService')),
      searchableStrings: ['admin.support.termsOfServiceTitle', 'admin.support.enableTermsOfServiceTitle', 'admin.support.enableTermsOfServiceHelp', 'admin.support.termsOfServiceTextTitle', 'admin.support.termsOfServiceTextHelp', 'admin.support.termsOfServiceReAcceptanceTitle', 'admin.support.termsOfServiceReAcceptanceHelp'],
      schema: {
        id: 'TermsOfServiceSettings',
        component: custom_terms_of_service_settings
      }
    }
  },
  experimental: {
    icon: 'fa-flask',
    sectionTitle: Object(utils_i18n["b" /* t */])('admin.sidebar.experimental'),
    sectionTitleDefault: 'Experimental',
    experimental_features: {
      url: 'experimental/features',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.experimentalFeatures'),
      title_default: 'Features',
      schema: {
        id: 'ExperimentalSettings',
        name: Object(utils_i18n["b" /* t */])('admin.experimental.experimentalFeatures'),
        name_default: 'Experimental Features',
        settings: [{
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'LdapSettings.LoginButtonColor',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.ldapSettingsLoginButtonColor.title'),
          label_default: 'AD/LDAP Login Button Color:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.ldapSettingsLoginButtonColor.desc'),
          help_text_default: 'Specify the color of the AD/LDAP login button for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',
          help_text_markdown: false,
          isHidden: it.isnt(it.licensedForFeature('LDAP'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'LdapSettings.LoginButtonBorderColor',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.ldapSettingsLoginButtonBorderColor.title'),
          label_default: 'AD/LDAP Login Button Border Color:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.ldapSettingsLoginButtonBorderColor.desc'),
          help_text_default: 'Specify the color of the AD/LDAP login button border for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',
          help_text_markdown: false,
          isHidden: it.isnt(it.licensedForFeature('LDAP'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'LdapSettings.LoginButtonTextColor',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.ldapSettingsLoginButtonTextColor.title'),
          label_default: 'AD/LDAP Login Button Text Color:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.ldapSettingsLoginButtonTextColor.desc'),
          help_text_default: 'Specify the color of the AD/LDAP login button text for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',
          help_text_markdown: false,
          isHidden: it.isnt(it.licensedForFeature('LDAP'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.ExperimentalEnableAuthenticationTransfer',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.experimentalEnableAuthenticationTransfer.title'),
          label_default: 'Allow Authentication Transfer:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.experimentalEnableAuthenticationTransfer.desc'),
          help_text_default: 'When true, users can change their sign-in method to any that is enabled on the server, either via Account Settings or the APIs. When false, Users cannot change their sign-in method, regardless of which authentication options are enabled.',
          help_text_markdown: false,
          isHidden: it.isnt(it.licensed) // documented as E20 and higher, but only E10 in the code

        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.CloseUnusedDirectMessages',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.closeUnusedDirectMessages.title'),
          label_default: 'Autoclose Direct Messages in Sidebar:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.closeUnusedDirectMessages.desc'),
          help_text_default: 'When true, direct message conversations with no activity for 7 days will be hidden from the sidebar. When false, conversations remain in the sidebar until they are manually closed.',
          help_text_markdown: false
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_NUMBER,
          key: 'ExperimentalSettings.LinkMetadataTimeoutMilliseconds',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.linkMetadataTimeoutMilliseconds.title'),
          label_default: 'Link Metadata Timeout:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.linkMetadataTimeoutMilliseconds.desc'),
          help_text_default: 'The number of milliseconds to wait for metadata from a third-party link. Used with Post Metadata.',
          help_text_markdown: false,
          placeholder: Object(utils_i18n["b" /* t */])('admin.experimental.linkMetadataTimeoutMilliseconds.example'),
          placeholder_default: 'E.g.: "5000"'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_NUMBER,
          key: 'EmailSettings.EmailBatchingBufferSize',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.emailBatchingBufferSize.title'),
          label_default: 'Email Batching Buffer Size:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.emailBatchingBufferSize.desc'),
          help_text_default: 'Specify the maximum number of notifications batched into a single email.',
          help_text_markdown: false,
          placeholder: Object(utils_i18n["b" /* t */])('admin.experimental.emailBatchingBufferSize.example'),
          placeholder_default: 'E.g.: "256"'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_NUMBER,
          key: 'EmailSettings.EmailBatchingInterval',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.emailBatchingInterval.title'),
          label_default: 'Email Batching Interval:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.emailBatchingInterval.desc'),
          help_text_default: 'Specify the maximum frequency, in seconds, which the batching job checks for new notifications. Longer batching intervals will increase performance.',
          help_text_markdown: false,
          placeholder: Object(utils_i18n["b" /* t */])('admin.experimental.emailBatchingInterval.example'),
          placeholder_default: 'E.g.: "30"'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'EmailSettings.LoginButtonColor',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.emailSettingsLoginButtonColor.title'),
          label_default: 'Email Login Button Color:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.emailSettingsLoginButtonColor.desc'),
          help_text_default: 'Specify the color of the email login button for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',
          help_text_markdown: false
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'EmailSettings.LoginButtonBorderColor',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.emailSettingsLoginButtonBorderColor.title'),
          label_default: 'Email Login Button Border Color:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.emailSettingsLoginButtonBorderColor.desc'),
          help_text_default: 'Specify the color of the email login button border for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',
          help_text_markdown: false
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'EmailSettings.LoginButtonTextColor',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.emailSettingsLoginButtonTextColor.title'),
          label_default: 'Email Login Button Text Color:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.emailSettingsLoginButtonTextColor.desc'),
          help_text_default: 'Specify the color of the email login button text for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',
          help_text_markdown: false
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'TeamSettings.EnableUserDeactivation',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.enableUserDeactivation.title'),
          label_default: 'Enable Account Deactivation:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.enableUserDeactivation.desc'),
          help_text_default: 'When true, users may deactivate their own account from **Account Settings > Advanced**. If a user deactivates their own account, they will get an email notification confirming they were deactivated. When false, users may not deactivate their own account.',
          help_text_markdown: true
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'TeamSettings.ExperimentalEnableAutomaticReplies',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.experimentalEnableAutomaticReplies.title'),
          label_default: 'Enable Automatic Replies:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.experimentalEnableAutomaticReplies.desc'),
          help_text_default: 'When true, users can enable Automatic Replies in **Account Settings > Notifications**. Users set a custom message that will be automatically sent in response to Direct Messages. When false, disables the Automatic Direct Message Replies feature and hides it from Account Settings.',
          help_text_markdown: true
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.EnableChannelViewedMessages',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.enableChannelViewedMessages.title'),
          label_default: 'Enable Channel Viewed WebSocket Messages:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.enableChannelViewedMessages.desc'),
          help_text_default: 'This setting determines whether `channel_viewed` WebSocket events are sent, which synchronize unread notifications across clients and devices. Disabling the setting in larger deployments may improve server performance.',
          help_text_markdown: false
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ExperimentalSettings.ClientSideCertEnable',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.clientSideCertEnable.title'),
          label_default: 'Enable Client-Side Certification:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.clientSideCertEnable.desc'),
          help_text_default: 'Enables client-side certification for your Mattermost server. See [documentation](!https://docs.mattermost.com/deployment/certificate-based-authentication.html) to learn more.',
          help_text_markdown: true,
          isHidden: it.isnt(it.licensedForFeature('SAML'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_DROPDOWN,
          key: 'ExperimentalSettings.ClientSideCertCheck',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.clientSideCertCheck.title'),
          label_default: 'Client-Side Certification Login Method:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.clientSideCertCheck.desc'),
          help_text_default: 'When **primary**, after the client side certificate is verified, user’s email is retrieved from the certificate and is used to log in without a password. When **secondary**, after the client side certificate is verified, user’s email is retrieved from the certificate and matched against the one supplied by the user. If they match, the user logs in with regular email/password credentials.',
          help_text_markdown: true,
          options: [{
            value: 'primary',
            display_name: 'primary',
            display_name_default: 'primary'
          }, {
            value: 'secondary',
            display_name: 'secondary',
            display_name_default: 'secondary'
          }],
          isDisabled: it.stateIsFalse('ExperimentalSettings.ClientSideCertEnable'),
          isHidden: it.isnt(it.licensedForFeature('SAML'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.ExperimentalEnableDefaultChannelLeaveJoinMessages',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.experimentalEnableDefaultChannelLeaveJoinMessages.title'),
          label_default: 'Enable Default Channel Leave/Join System Messages:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.experimentalEnableDefaultChannelLeaveJoinMessages.desc'),
          help_text_default: 'This setting determines whether team leave/join system messages are posted in the default town-square channel.',
          help_text_markdown: false
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.ExperimentalEnableHardenedMode',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.experimentalEnableHardenedMode.title'),
          label_default: 'Enable Hardened Mode:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.experimentalEnableHardenedMode.desc'),
          help_text_default: 'Enables a hardened mode for Mattermost that makes user experience trade-offs in the interest of security. See [documentation](!https://docs.mattermost.com/administration/config-settings.html#enable-hardened-mode-experimental) to learn more.',
          help_text_markdown: true
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.ExperimentalLdapGroupSync',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.experimentalLdapGroupSync.title'),
          label_default: 'Enable AD/LDAP Group Sync:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.experimentalLdapGroupSync.desc'),
          help_text_default: 'When true, enables **AD/LDAP Group Sync** configurable under **User Management > Groups**. See [documentation](!https://mattermost.com/pl/default-ldap-group-sync) to learn more.',
          help_text_markdown: true,
          isHidden: it.isnt(it.licensedForFeature('LDAPGroups'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.EnablePreviewFeatures',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.enablePreviewFeatures.title'),
          label_default: 'Enable Preview Features:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.enablePreviewFeatures.desc'),
          help_text_default: 'When true, preview features can be enabled from **Account Settings > Advanced > Preview pre-release features**. When false, disables and hides preview features from **Account Settings > Advanced > Preview pre-release features**.',
          help_text_markdown: true
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ThemeSettings.EnableThemeSelection',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.enableThemeSelection.title'),
          label_default: 'Enable Theme Selection:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.enableThemeSelection.desc'),
          help_text_default: 'Enables the **Display > Theme** tab in Account Settings so users can select their theme.',
          help_text_markdown: true,
          isHidden: it.isnt(it.licensed) // E10 and higher

        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ThemeSettings.AllowCustomThemes',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.allowCustomThemes.title'),
          label_default: 'Allow Custom Themes:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.allowCustomThemes.desc'),
          help_text_default: 'Enables the **Display > Theme > Custom Theme** section in Account Settings.',
          help_text_markdown: true,
          isHidden: it.isnt(it.licensed),
          // E10 and higher
          isDisabled: it.stateIsFalse('ThemeSettings.EnableThemeSelection')
        }, // {
        //     type: Constants.SettingsTypes.TYPE_LIST,
        //     key: 'ThemeSettings.AllowedThemes',
        //     label: t('admin.experimental.allowedThemes.title'),
        //     label_default: 'Allowed Themes:',
        //     help_text: t('admin.experimental.allowedThemes.desc'),
        //     help_text_default: 'A comma-separated list of themes that can be chosen by users when "EnableThemeSelection" is set to true.',
        //     help_text_markdown: true,
        //     placeholder: t('admin.experimental.allowedThemes.example'),
        //     placeholder_default: 'E.g.: "default, organization, mattermostDark, windows10"',
        //     isHidden: it.isnt(it.licensed), // E10 and higher
        //     isDisabled: it.stateIsTrue('ThemeSettings.EnableThemeSelection'),
        // },
        {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'ThemeSettings.DefaultTheme',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.defaultTheme.title'),
          label_default: 'Default Theme:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.defaultTheme.desc'),
          help_text_default: 'Set a default theme that applies to all new users on the system.',
          help_text_markdown: true,
          options: [{
            value: 'default',
            display_name: 'default',
            display_name_default: 'default'
          }, {
            value: 'organization',
            display_name: 'organization',
            display_name_default: 'organization'
          }, {
            value: 'mattermostDark',
            display_name: 'mattermostDark',
            display_name_default: 'mattermostDark'
          }, {
            value: 'windows10',
            display_name: 'windows10',
            display_name_default: 'windows10'
          }],
          isHidden: it.isnt(it.licensed) // E10 and higher

        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.EnableTutorial',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.enableTutorial.title'),
          label_default: 'Enable Tutorial:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.enableTutorial.desc'),
          help_text_default: 'When true, users are prompted with a tutorial when they open Mattermost for the first time after account creation. When false, the tutorial is disabled, and users are placed in Town Square when they open Mattermost for the first time after account creation.',
          help_text_markdown: false
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.EnableUserTypingMessages',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.enableUserTypingMessages.title'),
          label_default: 'Enable User Typing Messages:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.enableUserTypingMessages.desc'),
          help_text_default: 'This setting determines whether "user is typing..." messages are displayed below the message box. Disabling the setting in larger deployments may improve server performance.',
          help_text_markdown: false
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_NUMBER,
          key: 'ServiceSettings.TimeBetweenUserTypingUpdatesMilliseconds',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.timeBetweenUserTypingUpdatesMilliseconds.title'),
          label_default: 'User Typing Timeout:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.timeBetweenUserTypingUpdatesMilliseconds.desc'),
          help_text_default: 'The number of milliseconds to wait between emitting user typing websocket events.',
          help_text_markdown: false,
          placeholder: Object(utils_i18n["b" /* t */])('admin.experimental.timeBetweenUserTypingUpdatesMilliseconds.example'),
          placeholder_default: 'E.g.: "5000"',
          isDisabled: it.stateIsFalse('ServiceSettings.EnableUserTypingMessages')
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'TeamSettings.EnableXToLeaveChannelsFromLHS',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.enableXToLeaveChannelsFromLHS.title'),
          label_default: 'Enable X to Leave Channels from Left-Hand Sidebar:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.enableXToLeaveChannelsFromLHS.desc'),
          help_text_default: 'When true, users can leave Public and Private Channels by clicking the “x” beside the channel name. When false, users must use the **Leave Channel** option from the channel menu to leave channels.',
          help_text_markdown: true
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'TeamSettings.ExperimentalPrimaryTeam',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.experimentalPrimaryTeam.title'),
          label_default: 'Primary Team:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.experimentalPrimaryTeam.desc'),
          help_text_default: 'The primary team of which users on the server are members. When a primary team is set, the options to join other teams or leave the primary team are disabled.',
          help_text_markdown: true,
          placeholder: Object(utils_i18n["b" /* t */])('admin.experimental.experimentalPrimaryTeam.example'),
          placeholder_default: 'E.g.: "teamname"'
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'SamlSettings.LoginButtonColor',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.samlSettingsLoginButtonColor.title'),
          label_default: 'SAML Login Button Color:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.samlSettingsLoginButtonColor.desc'),
          help_text_default: 'Specify the color of the SAML login button for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',
          help_text_markdown: false,
          isHidden: it.isnt(it.licensedForFeature('SAML'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'SamlSettings.LoginButtonBorderColor',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.samlSettingsLoginButtonBorderColor.title'),
          label_default: 'SAML Login Button Border Color:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.samlSettingsLoginButtonBorderColor.desc'),
          help_text_default: 'Specify the color of the SAML login button border for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',
          help_text_markdown: false,
          isHidden: it.isnt(it.licensedForFeature('SAML'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_TEXT,
          key: 'SamlSettings.LoginButtonTextColor',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.samlSettingsLoginButtonTextColor.title'),
          label_default: 'SAML Login Button Text Color:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.samlSettingsLoginButtonTextColor.desc'),
          help_text_default: 'Specify the color of the SAML login button text for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',
          help_text_markdown: false,
          isHidden: it.isnt(it.licensedForFeature('SAML'))
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'ServiceSettings.ExperimentalChannelOrganization',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.experimentalChannelOrganization.title'),
          label_default: 'Sidebar Organization:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.experimentalChannelOrganization.desc'),
          help_text_default: 'Enables channel sidebar organization options in **Account Settings > Sidebar > Channel grouping and sorting** including options for grouping unread channels, sorting channels by most recent post and combining all channel types into a single list.',
          help_text_markdown: true
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'DisplaySettings.ExperimentalTimezone',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.experimentalTimezone.title'),
          label_default: 'Timezone:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.experimentalTimezone.desc'),
          help_text_default: 'Select the timezone used for timestamps in the user interface and email notifications. When true, the Timezone setting is visible in the Account Settings and a time zone is automatically assigned in the next active session. When false, the Timezone setting is hidden in the Account Settings.',
          help_text_markdown: false
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'TeamSettings.ExperimentalHideTownSquareinLHS',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.experimentalHideTownSquareinLHS.title'),
          label_default: 'Town Square is Hidden in Left-Hand Sidebar:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.experimentalHideTownSquareinLHS.desc'),
          help_text_default: 'When true, hides Town Square in the left-hand sidebar if there are no unread messages in the channel. When false, Town Square is always visible in the left-hand sidebar even if all messages have been read.',
          help_text_markdown: true,
          isHidden: it.isnt(it.licensed) // E10 and higher

        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'TeamSettings.ExperimentalTownSquareIsReadOnly',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.experimentalTownSquareIsReadOnly.title'),
          label_default: 'Town Square is Read-Only:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.experimentalTownSquareIsReadOnly.desc'),
          help_text_default: 'When true, only System Admins can post in Town Square. Other members are not able to post, reply, upload files, emoji react or pin messages to Town Square, nor are they able to change the channel name, header or purpose. When false, anyone can post in Town Square.',
          help_text_markdown: true,
          isHidden: it.isnt(it.licensed) // E10 and higher

        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_BOOL,
          key: 'EmailSettings.UseChannelInEmailNotifications',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.useChannelInEmailNotifications.title'),
          label_default: 'Use Channel Name in Email Notifications:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.useChannelInEmailNotifications.desc'),
          help_text_default: 'When true, channel and team name appears in email notification subject lines. Useful for servers using only one team. When false, only team name appears in email notification subject line.',
          help_text_markdown: false
        }, {
          type: constants["g" /* Constants */].SettingsTypes.TYPE_NUMBER,
          key: 'TeamSettings.UserStatusAwayTimeout',
          label: Object(utils_i18n["b" /* t */])('admin.experimental.userStatusAwayTimeout.title'),
          label_default: 'User Status Away Timeout:',
          help_text: Object(utils_i18n["b" /* t */])('admin.experimental.userStatusAwayTimeout.desc'),
          help_text_default: 'This setting defines the number of seconds after which the user’s status indicator changes to "Away", when they are away from Mattermost.',
          help_text_markdown: false,
          placeholder: Object(utils_i18n["b" /* t */])('admin.experimental.userStatusAwayTimeout.example'),
          placeholder_default: 'E.g.: "300"'
        }]
      }
    }
  },
  download: {
    icon: 'fa-info-circle',
    sectionTitle: Object(utils_i18n["b" /* t */])('admin.sidebar.download'),
    sectionTitleDefault: 'Download',
    license: {
      url: 'down/license',
      title: Object(utils_i18n["b" /* t */])('admin.sidebar.download'),
      title_default: 'Download',
      isHidden: false,
      //搜索关键字配置
      searchableStrings: ['admin.sidebar.download'],
      schema: {
        id: 'AdminDownload',
        component: admin_download_AdminDownload
      }
    }
  }
});
Object(utils_i18n["b" /* t */])('admin.field_names.allowBannerDismissal');
Object(utils_i18n["b" /* t */])('admin.field_names.bannerColor');
Object(utils_i18n["b" /* t */])('admin.field_names.bannerText');
Object(utils_i18n["b" /* t */])('admin.field_names.bannerTextColor');
Object(utils_i18n["b" /* t */])('admin.field_names.enableBanner');
Object(utils_i18n["b" /* t */])('admin.field_names.enableCommands');
Object(utils_i18n["b" /* t */])('admin.field_names.enableConfirmNotificationsToChannel');
Object(utils_i18n["b" /* t */])('admin.field_names.enableIncomingWebhooks');
Object(utils_i18n["b" /* t */])('admin.field_names.enableOAuthServiceProvider');
Object(utils_i18n["b" /* t */])('admin.field_names.enableOutgoingWebhooks');
Object(utils_i18n["b" /* t */])('admin.field_names.enablePostIconOverride');
Object(utils_i18n["b" /* t */])('admin.field_names.enablePostUsernameOverride');
Object(utils_i18n["b" /* t */])('admin.field_names.enableUserAccessTokens');
Object(utils_i18n["b" /* t */])('admin.field_names.enableUserCreation');
Object(utils_i18n["b" /* t */])('admin.field_names.maxChannelsPerTeam');
Object(utils_i18n["b" /* t */])('admin.field_names.maxNotificationsPerChannel');
Object(utils_i18n["b" /* t */])('admin.field_names.maxUsersPerTeam');
Object(utils_i18n["b" /* t */])('admin.field_names.postEditTimeLimit');
Object(utils_i18n["b" /* t */])('admin.field_names.restrictCreationToDomains');
Object(utils_i18n["b" /* t */])('admin.field_names.restrictDirectMessage');
Object(utils_i18n["b" /* t */])('admin.field_names.teammateNameDisplay');
// CONCATENATED MODULE: ./utils/admin_console_index.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.



function extractTextsFromSection(section, intl) {
  const texts = [];

  if (section.title) {
    texts.push(intl.formatMessage({
      id: section.title,
      defaultMessage: section.title_default
    }));
  }

  if (section.schema && section.schema.name) {
    texts.push(section.schema.name);
  }

  if (section.searchableStrings) {
    for (const searchableString of section.searchableStrings) {
      if (typeof searchableString === 'string') {
        texts.push(intl.formatMessage({
          id: searchableString,
          defaultMessage: searchableString
        }));
      } else {
        texts.push(intl.formatMessage({
          id: searchableString[0],
          defaultMessage: ''
        }, searchableString[1]));
      }
    }
  }

  if (section.schema && section.schema.settings) {
    for (const setting of Object.values(section.schema.settings)) {
      if (setting.label) {
        texts.push(intl.formatMessage({
          id: setting.label,
          defaultMessage: setting.label_default
        }, setting.label_values));
      }

      if (setting.help_text && typeof setting.help_text === 'string') {
        texts.push(intl.formatMessage({
          id: setting.help_text,
          defaultMessage: setting.help_text_default
        }, setting.help_text_values));
      }

      if (setting.remove_help_text) {
        texts.push(intl.formatMessage({
          id: setting.remove_help_text,
          defaultMessage: setting.remove_help_text_default
        }));
      }

      if (setting.remove_button_text) {
        texts.push(intl.formatMessage({
          id: setting.remove_button_text,
          defaultMessage: setting.remove_button_text_default
        }));
      }
    }
  }

  return texts;
}

function adminDefinitionsToUrlsAndTexts(adminDefinition, intl) {
  const entries = {};

  for (const item of Object.values(adminDefinition.about)) {
    entries[item.url] = extractTextsFromSection(item, intl);
  }

  for (const item of Object.values(adminDefinition.reporting)) {
    entries[item.url] = extractTextsFromSection(item, intl);
  }

  for (const item of Object.values(adminDefinition.user_management)) {
    entries[item.url] = extractTextsFromSection(item, intl);
  }

  for (const item of Object.values(adminDefinition.environment)) {
    entries[item.url] = extractTextsFromSection(item, intl);
  }

  for (const item of Object.values(adminDefinition.site)) {
    entries[item.url] = extractTextsFromSection(item, intl);
  }

  for (const item of Object.values(adminDefinition.authentication)) {
    entries[item.url] = extractTextsFromSection(item, intl);
  }

  for (const item of Object.values(adminDefinition.plugins)) {
    entries[item.url] = extractTextsFromSection(item, intl);
  }

  for (const item of Object.values(adminDefinition.integrations)) {
    entries[item.url] = extractTextsFromSection(item, intl);
  }

  for (const item of Object.values(adminDefinition.compliance)) {
    entries[item.url] = extractTextsFromSection(item, intl);
  }

  for (const item of Object.values(adminDefinition.experimental)) {
    entries[item.url] = extractTextsFromSection(item, intl);
  }

  return entries;
}
function generateIndex(intl) {
  const idx = new flexsearch_es5_default.a();
  const mappingSectionsToTexts = adminDefinitionsToUrlsAndTexts(admin_definition, intl);

  for (const key of Object.keys(mappingSectionsToTexts)) {
    let text = '';

    for (const str of mappingSectionsToTexts[key]) {
      text += ' ' + str;
    }

    idx.add(key, text);
  }

  return idx;
}
// CONCATENATED MODULE: ./components/admin_console/admin_sidebar_category.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.



class admin_sidebar_category_AdminSidebarCategory extends react_default.a.Component {
  static get propTypes() {
    return {
      name: prop_types_default.a.string,
      title: prop_types_default.a.node.isRequired,
      icon: prop_types_default.a.string.isRequired,
      sectionClass: prop_types_default.a.string,
      parentLink: prop_types_default.a.string,
      children: prop_types_default.a.node,
      action: prop_types_default.a.node
    };
  }

  static get defaultProps() {
    return {
      parentLink: ''
    };
  }

  render() {
    let link = this.props.parentLink;
    let title = react_default.a.createElement("div", {
      className: "category-title category-title--active"
    }, react_default.a.createElement("i", {
      className: 'category-icon fa ' + this.props.icon
    }), react_default.a.createElement("span", {
      className: "category-title__text"
    }, this.props.title), this.props.action);

    if (this.props.name) {
      link += '/' + name;
      title = react_default.a.createElement(react_router_dom["b" /* NavLink */], {
        to: link,
        className: "category-title",
        activeClassName: "category-title category-title--active"
      }, title);
    }

    let clonedChildren = null;

    if (this.props.children) {
      clonedChildren = react_default.a.createElement(react_router["b" /* Route */], {
        path: link,
        render: () => react_default.a.createElement("ul", {
          className: 'sections ' + this.props.sectionClass
        }, react_default.a.Children.map(this.props.children, child => {
          if (child === null) {
            return null;
          }

          return react_default.a.cloneElement(child, {
            parentLink: link
          });
        }))
      });
    }

    return react_default.a.createElement("li", {
      className: "sidebar-category"
    }, title, clonedChildren);
  }

}
// EXTERNAL MODULE: ./components/svg/menu_icon.jsx
var menu_icon = __webpack_require__(1709);

// EXTERNAL MODULE: ./components/about_build_modal/index.js + 1 modules
var about_build_modal = __webpack_require__(2270);

// EXTERNAL MODULE: ./components/widgets/menu/menu_group.jsx
var menu_group = __webpack_require__(1807);

// EXTERNAL MODULE: ./components/widgets/menu/menu_items/menu_item_external_link.jsx
var menu_item_external_link = __webpack_require__(2186);

// EXTERNAL MODULE: ./components/widgets/menu/menu_items/menu_item_toggle_modal_redux.jsx
var menu_item_toggle_modal_redux = __webpack_require__(1934);

// EXTERNAL MODULE: ./components/widgets/menu/menu_items/menu_item.jsx
var menu_item = __webpack_require__(1730);

// CONCATENATED MODULE: ./components/widgets/menu/menu_items/menu_item_blockable_link.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




const MenuItemBlockableLinkImpl = ({
  to,
  text
}) => react_default.a.createElement(blockable_link, {
  to: to
}, text);
MenuItemBlockableLinkImpl.propTypes = {
  to: prop_types_default.a.string.isRequired,
  text: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.node]).isRequired
};
const MenuItemBlockableLink = Object(menu_item["a" /* default */])(MenuItemBlockableLinkImpl);
MenuItemBlockableLink.displayName = 'MenuItemBlockableLinkImpl';
/* harmony default export */ var menu_item_blockable_link = (MenuItemBlockableLink);
// CONCATENATED MODULE: ./components/admin_console/admin_navbar_dropdown/admin_navbar_dropdown.jsx
function admin_navbar_dropdown_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.














class admin_navbar_dropdown_AdminNavbarDropdown extends react_default.a.Component {
  constructor(...args) {
    super(...args);

    admin_navbar_dropdown_defineProperty(this, "handleLogout", e => {
      if (this.props.navigationBlocked) {
        e.preventDefault();
        this.props.actions.deferNavigation(global_actions["e" /* emitUserLoggedOutEvent */]);
      } else {
        global_actions["e" /* emitUserLoggedOutEvent */]();
      }
    });
  }

  render() {
    const {
      locale,
      teams,
      siteName
    } = this.props;
    const {
      formatMessage
    } = this.context.intl;
    const teamToRender = []; // Array of team components

    let switchTeams;

    if (teams && teams.length > 0) {
      const teamsArray = Object(team_utils["a" /* filterAndSortTeamsByDisplayName */])(teams, locale);

      for (const team of teamsArray) {
        teamToRender.push(react_default.a.createElement(menu_item_blockable_link, {
          key: 'team_' + team.name,
          to: '/' + team.name,
          text: utils["gb" /* localizeMessage */]('navbar_dropdown.switchTo', 'Switch to ') + ' ' + team.display_name
        }));
      }
    } else {
      switchTeams = react_default.a.createElement(menu_item_blockable_link, {
        to: '/select_team',
        icon: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
          id: "select_team.icon",
          defaultMessage: "Select Team Icon"
        }, title => react_default.a.createElement("i", {
          className: "fa fa-exchange",
          title: title
        })),
        text: utils["gb" /* localizeMessage */]('admin.nav.switch', 'Team Selection')
      });
    }

    return react_default.a.createElement(menu["a" /* default */], {
      ariaLabel: utils["gb" /* localizeMessage */]('admin.nav.menuAriaLabel', 'Admin Console Menu')
    }, react_default.a.createElement(menu_group["a" /* default */], null, teamToRender, switchTeams), react_default.a.createElement(menu_group["a" /* default */], null, react_default.a.createElement(menu_item_external_link["a" /* default */], {
      url: "https://about.mattermost.com/administrators-guide/",
      text: utils["gb" /* localizeMessage */]('admin.nav.administratorsGuide', 'Administrator Guide')
    }), react_default.a.createElement(menu_item_external_link["a" /* default */], {
      url: "https://about.mattermost.com/troubleshooting-forum/",
      text: utils["gb" /* localizeMessage */]('admin.nav.troubleshootingForum', 'Troubleshooting Forum')
    }), react_default.a.createElement(menu_item_external_link["a" /* default */], {
      url: "https://about.mattermost.com/commercial-support/",
      text: utils["gb" /* localizeMessage */]('admin.nav.commercialSupport', 'Commercial Support')
    }), react_default.a.createElement(menu_item_toggle_modal_redux["a" /* default */], {
      modalId: constants["p" /* ModalIdentifiers */].ABOUT,
      dialogType: about_build_modal["a" /* default */],
      text: formatMessage({
        id: 'navbar_dropdown.about',
        defaultMessage: 'About {appTitle}'
      }, {
        appTitle: siteName || 'Aboutone'
      })
    })), react_default.a.createElement(menu_group["a" /* default */], null, react_default.a.createElement(menu_item_action["a" /* default */], {
      onClick: this.handleLogout,
      text: utils["gb" /* localizeMessage */]('navbar_dropdown.logout', 'Logout')
    })));
  }

}

admin_navbar_dropdown_defineProperty(admin_navbar_dropdown_AdminNavbarDropdown, "propTypes", {
  locale: prop_types_default.a.string.isRequired,
  siteName: prop_types_default.a.string,
  navigationBlocked: prop_types_default.a.bool,
  teams: prop_types_default.a.arrayOf(prop_types_default.a.object).isRequired,
  actions: prop_types_default.a.shape({
    deferNavigation: prop_types_default.a.func
  }).isRequired
});

admin_navbar_dropdown_defineProperty(admin_navbar_dropdown_AdminNavbarDropdown, "contextTypes", {
  intl: index_es["i" /* intlShape */].isRequired
});
// CONCATENATED MODULE: ./components/admin_console/admin_navbar_dropdown/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.









function admin_navbar_dropdown_mapStateToProps(state) {
  return {
    locale: Object(selectors_i18n["a" /* getCurrentLocale */])(state),
    teams: Object(entities_teams["getMyTeams"])(state),
    siteName: Object(general["getConfig"])(state).SiteName,
    navigationBlocked: Object(views_admin["a" /* getNavigationBlocked */])(state)
  };
}

function admin_navbar_dropdown_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      deferNavigation: admin_actions["g" /* deferNavigation */]
    }, dispatch)
  };
}

/* harmony default export */ var admin_navbar_dropdown = (Object(es["connect"])(admin_navbar_dropdown_mapStateToProps, admin_navbar_dropdown_mapDispatchToProps)(admin_navbar_dropdown_AdminNavbarDropdown));
// CONCATENATED MODULE: ./components/admin_console/admin_sidebar_header/admin_sidebar_header.jsx
function admin_sidebar_header_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.







class admin_sidebar_header_SidebarHeader extends react_default.a.Component {
  render() {
    const me = this.props.currentUser;
    let profilePicture = null;

    if (!me) {
      return null;
    }

    if (me.last_picture_update) {
      profilePicture = react_default.a.createElement("img", {
        alt: '',
        className: "user__picture",
        src: client["Client4"].getProfilePictureUrl(me.id, me.last_picture_update)
      });
    }

    return react_default.a.createElement(menu_wrapper["a" /* default */], {
      className: "AdminSidebarHeader"
    }, react_default.a.createElement("div", null, profilePicture, react_default.a.createElement("div", {
      className: "header__info"
    }, react_default.a.createElement("div", {
      className: "team__name"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.sidebarHeader.systemConsole",
      defaultMessage: "System Console"
    })), react_default.a.createElement("div", {
      className: "user__name overflow--ellipsis whitespace--nowrap"
    }, '@' + me.username)), react_default.a.createElement("button", {
      className: "style--none"
    }, react_default.a.createElement(menu_icon["a" /* default */], {
      className: "menu-icon"
    }))), react_default.a.createElement(admin_navbar_dropdown, null));
  }

}

admin_sidebar_header_defineProperty(admin_sidebar_header_SidebarHeader, "propTypes", {
  currentUser: prop_types_default.a.object
});
// CONCATENATED MODULE: ./components/admin_console/admin_sidebar_header/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




function admin_sidebar_header_mapStateToProps(state) {
  return {
    currentUser: Object(entities_users["getCurrentUser"])(state)
  };
}

/* harmony default export */ var admin_sidebar_header = (Object(es["connect"])(admin_sidebar_header_mapStateToProps)(admin_sidebar_header_SidebarHeader));
// CONCATENATED MODULE: ./components/admin_console/admin_sidebar_section.jsx
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




class admin_sidebar_section_AdminSidebarSection extends react_default.a.Component {
  static get propTypes() {
    return {
      name: prop_types_default.a.string.isRequired,
      title: prop_types_default.a.node.isRequired,
      type: prop_types_default.a.string,
      parentLink: prop_types_default.a.string,
      subsection: prop_types_default.a.bool,
      children: prop_types_default.a.node,
      action: prop_types_default.a.node
    };
  }

  static get defaultProps() {
    return {
      parentLink: '',
      subsection: false,
      children: []
    };
  }

  getLink() {
    return this.props.parentLink + '/' + this.props.name;
  }

  render() {
    const link = this.getLink();
    let clonedChildren = null;

    if (this.props.children) {
      clonedChildren = react_default.a.createElement("ul", {
        className: "nav nav__sub-menu subsections"
      }, react_default.a.Children.map(this.props.children, child => {
        if (child === null) {
          return null;
        }

        return react_default.a.cloneElement(child, {
          parentLink: link,
          subsection: true
        });
      }));
    }

    let className = 'sidebar-section';

    if (this.props.subsection) {
      className += ' sidebar-subsection';
    }

    let sidebarItem = react_default.a.createElement(blockable_link, {
      id: utils["h" /* createSafeId */](this.props.name),
      className: `${className}-title`,
      activeClassName: `${className}-title ${className}-title--active`,
      to: link
    }, react_default.a.createElement("span", {
      className: `${className}-title__text`
    }, this.props.title), this.props.action);

    if (this.props.type === 'text') {
      sidebarItem = react_default.a.createElement("div", {
        className: `${className}-title`
      }, react_default.a.createElement("span", {
        className: `${className}-title__text`
      }, this.props.title), this.props.action);
    }

    return react_default.a.createElement("li", {
      className: className
    }, sidebarItem, clonedChildren);
  }

}
// EXTERNAL MODULE: ./node_modules/mark.js/dist/mark.js
var mark = __webpack_require__(3419);
var mark_default = /*#__PURE__*/__webpack_require__.n(mark);

// EXTERNAL MODULE: ./node_modules/lodash/debounce.js
var debounce = __webpack_require__(1599);
var debounce_default = /*#__PURE__*/__webpack_require__.n(debounce);

// CONCATENATED MODULE: ./components/admin_console/highlight.jsx
function highlight_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.




class highlight_Highlight extends react_default.a.Component {
  constructor(props) {
    super(props);

    highlight_defineProperty(this, "redrawHighlight", debounce_default()(() => {
      if (this.markInstance !== null) {
        this.markInstance.unmark();
      }

      if (!this.props.filter) {
        return;
      }

      if (!this.ref.current) {
        return;
      } // Is necesary to recreate the instances to get again the DOM elements after the re-render


      this.markInstance = new mark_default.a(this.ref.current);
      this.markInstance.mark(this.props.filter, {
        accuracy: 'complementary'
      });
    }, 100, {
      leading: true,
      trailing: true
    }));

    this.markInstance = null;
    this.ref = react_default.a.createRef();
  }

  render() {
    // Run on next frame
    setTimeout(this.redrawHighlight, 0);
    return react_default.a.createElement("div", {
      ref: this.ref
    }, this.props.children);
  }

}

highlight_defineProperty(highlight_Highlight, "propTypes", {
  filter: prop_types_default.a.string.isRequired,
  children: prop_types_default.a.node.isRequired
});
// CONCATENATED MODULE: ./components/admin_console/admin_sidebar/admin_sidebar.jsx
function admin_sidebar_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.















class admin_sidebar_AdminSidebar extends react_default.a.Component {
  static get contextTypes() {
    return {
      intl: index_es["i" /* intlShape */].isRequired
    };
  }

  constructor(props) {
    super(props);

    admin_sidebar_defineProperty(this, "onFilterChange", e => {
      const filter = e.target.value;

      if (filter === '') {
        this.setState({
          sections: null,
          filter
        });
        this.props.onFilterChange(filter);
        return;
      }

      if (this.idx === null) {
        this.idx = generateIndex(this.context.intl);
      }

      let query = '';

      for (const term of filter.split(' ')) {
        term.trim();

        if (term !== '') {
          query += term + ' ';
          query += term + '* ';
        }
      }

      const sections = this.idx.search(query);
      this.setState({
        sections,
        filter
      });
      this.props.onFilterChange(filter);

      if (this.props.navigationBlocked) {
        return;
      }

      const validSection = sections.indexOf(browser_history["a" /* browserHistory */].location.pathname.replace('/admin_console/', '')) !== -1;

      if (!validSection) {
        const visibleSections = this.visibleSections();

        for (const section of sections) {
          if (visibleSections.has(section)) {
            browser_history["a" /* browserHistory */].replace('/admin_console/' + section);
            break;
          }
        }
      }
    });

    admin_sidebar_defineProperty(this, "updateTitle", () => {
      let currentSiteName = '';

      if (this.props.siteName) {
        currentSiteName = ' - ' + this.props.siteName;
      }

      document.title = utils["gb" /* localizeMessage */]('sidebar_right_menu.console', 'System Console') + currentSiteName;
    });

    admin_sidebar_defineProperty(this, "visibleSections", () => {
      const isVisible = item => {
        if (!item.schema) {
          return false;
        }

        if (!item.title) {
          return false;
        }
        /*if (item.isHidden && item.isHidden(this.props.config, {}, this.props.license, this.props.buildEnterpriseReady)) {
            return false;
        }*/


        return true;
      };

      const result = new Set();

      for (const section of Object.values(admin_definition)) {
        for (const item of Object.values(section)) {
          if (isVisible(item)) {
            result.add(item.url);
          }
        }
      }

      return result;
    });

    admin_sidebar_defineProperty(this, "renderRootMenu", definition => {
      const sidebarSections = [];
      Object.values(definition).forEach((section, sectionIndex) => {
        const sidebarItems = [];
        Object.values(section).forEach((item, itemIndex) => {
          if (!item.title) {
            return;
          }
          /* if (item.isHidden && item.isHidden(this.props.config, {}, this.props.license, this.props.buildEnterpriseReady)) {
               return;
           }*/


          if (this.state.sections !== null) {
            let active = false;

            for (const url of this.state.sections) {
              if (url === item.url) {
                active = true;
              }
            }

            if (!active) {
              return;
            }
          }

          sidebarItems.push(react_default.a.createElement(admin_sidebar_section_AdminSidebarSection, {
            key: itemIndex,
            name: item.url,
            title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
              id: item.title,
              defaultMessage: item.title_default
            })
          }));
        }); // If no visible items, don't display this section

        if (sidebarItems.length === 0) {
          return null;
        } // Special case for plugins entries


        let moreSidebarItems;

        if (section.id === 'plugins') {
          moreSidebarItems = this.renderPluginsMenu();
        }

        if (sidebarItems.length) {
          sidebarSections.push(react_default.a.createElement(admin_sidebar_category_AdminSidebarCategory, {
            key: sectionIndex,
            parentLink: "/admin_console",
            icon: section.icon,
            sectionClass: "",
            title: react_default.a.createElement(index_es["c" /* FormattedMessage */], {
              id: section.sectionTitle,
              defaultMessage: section.sectionTitleDefault
            })
          }, sidebarItems, moreSidebarItems));
        }

        return null;
      });
      return sidebarSections;
    });

    admin_sidebar_defineProperty(this, "renderPluginsMenu", () => {
      const customPlugins = [];

      if (this.props.config.PluginSettings.Enable) {
        Object.values(this.props.plugins).sort((a, b) => {
          const nameCompare = a.name.localeCompare(b.name);

          if (nameCompare !== 0) {
            return nameCompare;
          }

          return a.id.localeCompare(b.id);
        }).forEach(p => {
          const hasSettings = p.settings_schema && (p.settings_schema.header || p.settings_schema.footer || p.settings_schema.settings);

          if (!hasSettings) {
            return;
          }

          if (p.settings_schema.settings && !p.settings_schema.header && !p.settings_schema.footer) {
            if (p.settings_schema.settings.hasOwnProperty('length')) {
              if (p.settings_schema.settings.length === 0) {
                return;
              }
            }
          }

          customPlugins.push(react_default.a.createElement(admin_sidebar_section_AdminSidebarSection, {
            key: 'customplugin' + p.id,
            name: 'plugins/plugin_' + p.id,
            title: p.name
          }));
        });
      }

      return customPlugins;
    });

    admin_sidebar_defineProperty(this, "handleClearFilter", () => {
      this.setState({
        sections: null,
        filter: ''
      });
      this.props.onFilterChange('');
    });

    this.state = {
      sections: null,
      filter: ''
    };
    this.idx = null;
    this.searchRef = react_default.a.createRef();
  }

  componentDidMount() {
    if (this.props.config.PluginSettings.Enable) {
      this.props.actions.getPlugins();
    }

    if (this.searchRef.current) {
      this.searchRef.current.focus();
    }

    this.updateTitle();

    if (!utils["Y" /* isMobile */]()) {
      jquery_default()('.admin-sidebar .nav-pills__container').perfectScrollbar({
        suppressScrollX: true
      });
    }
  }

  componentDidUpdate() {
    if (!utils["Y" /* isMobile */]()) {
      jquery_default()('.admin-sidebar .nav-pills__container').perfectScrollbar({
        suppressScrollX: true
      });
    }
  }

  render() {
    const filterClearTooltip = react_default.a.createElement(Tooltip["a" /* default */], {
      id: "admin-sidebar-fitler-clear"
    }, react_default.a.createElement(index_es["c" /* FormattedMessage */], {
      id: "admin.sidebar.filter-clear",
      defaultMessage: "Clear search"
    }));
    return react_default.a.createElement("div", {
      className: "admin-sidebar"
    }, react_default.a.createElement(admin_sidebar_header, null), react_default.a.createElement("div", {
      className: "nav-pills__container"
    }, react_default.a.createElement(highlight_Highlight, {
      filter: this.state.filter
    }, react_default.a.createElement("ul", {
      className: "nav nav-pills nav-stacked"
    }, react_default.a.createElement("li", {
      className: "filter-container"
    }, react_default.a.createElement(search_icon["a" /* default */], {
      id: "searchIcon",
      className: "search__icon",
      "aria-hidden": "true"
    }), react_default.a.createElement("input", {
      className: 'filter ' + (this.state.filter ? 'active' : ''),
      type: "text",
      onChange: this.onFilterChange,
      value: this.state.filter,
      placeholder: utils["gb" /* localizeMessage */]('admin.sidebar.filter', 'Find settings'),
      ref: this.searchRef
    }), this.state.filter && react_default.a.createElement("div", {
      className: "sidebar__search-clear visible",
      onClick: this.handleClearFilter
    }, react_default.a.createElement(OverlayTrigger["a" /* default */], {
      trigger: ['hover', 'focus'],
      delayShow: constants["N" /* default */].OVERLAY_TIME_DELAY,
      placement: "bottom",
      overlay: filterClearTooltip
    }, react_default.a.createElement("span", {
      className: "sidebar__search-clear-x",
      "aria-hidden": "true"
    }, '×')))), this.renderRootMenu(admin_definition)))));
  }

}

admin_sidebar_defineProperty(admin_sidebar_AdminSidebar, "propTypes", {
  license: prop_types_default.a.object.isRequired,
  config: prop_types_default.a.object,
  plugins: prop_types_default.a.object,
  buildEnterpriseReady: prop_types_default.a.bool,
  siteName: prop_types_default.a.string,
  onFilterChange: prop_types_default.a.func.isRequired,
  navigationBlocked: prop_types_default.a.bool.isRequired,
  actions: prop_types_default.a.shape({
    /*
     * Function to get installed plugins
     */
    getPlugins: prop_types_default.a.func.isRequired
  }).isRequired
});

admin_sidebar_defineProperty(admin_sidebar_AdminSidebar, "defaultProps", {
  plugins: {}
});
// CONCATENATED MODULE: ./components/admin_console/admin_sidebar/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.







function admin_sidebar_mapStateToProps(state) {
  const license = Object(general["getLicense"])(state);
  const config = Object(general["getConfig"])(state);
  const buildEnterpriseReady = config.BuildEnterpriseReady === 'true';
  const siteName = config.SiteName;
  return {
    license,
    config: state.entities.admin.config,
    plugins: state.entities.admin.plugins,
    navigationBlocked: Object(views_admin["a" /* getNavigationBlocked */])(state),
    buildEnterpriseReady,
    siteName
  };
}

function admin_sidebar_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      getPlugins: admin["getPlugins"]
    }, dispatch)
  };
}

/* harmony default export */ var admin_sidebar = (Object(es["connect"])(admin_sidebar_mapStateToProps, admin_sidebar_mapDispatchToProps, null, {
  pure: false
})(admin_sidebar_AdminSidebar));
// CONCATENATED MODULE: ./components/admin_console/admin_console.jsx
function admin_console_extends() { admin_console_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return admin_console_extends.apply(this, arguments); }

function admin_console_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.












class admin_console_AdminConsole extends react_default.a.Component {
  constructor(_props) {
    super(_props);

    admin_console_defineProperty(this, "onFilterChange", filter => {
      this.setState({
        filter
      });
    });

    admin_console_defineProperty(this, "renderRoutes", extraProps => {
      const schemas = Object.values(admin_definition).reduce((acc, section) => {
        const items = Object.values(section).filter(item => {
          /*if (item.isHidden && item.isHidden(this.props.config)) {
              return false;
          }
          if (!item.schema) {
              return false;
          }*/
          return true;
        });
        return acc.concat(items);
      }, []);
      const schemaRoutes = schemas.map(item => {
        return react_default.a.createElement(react_router["b" /* Route */], {
          key: item.url + "1",
          path: `${this.props.match.url}/${item.url}`,
          render: props => react_default.a.createElement(schema_admin_settings_SchemaAdminSettings, admin_console_extends({}, extraProps, props, {
            schema: item.schema
          }))
        });
      });
      const defaultUrl = schemas[0].url;
      return react_default.a.createElement(react_router["d" /* Switch */], null, schemaRoutes, react_default.a.createElement(react_router["a" /* Redirect */], {
        to: `${this.props.match.url}/${defaultUrl}`
      }));
    });

    this.state = {
      filter: ''
    };
  }

  componentDidMount() {
    this.props.actions.getConfig();
    this.props.actions.getEnvironmentConfig();
    this.props.actions.loadRolesIfNeeded(['channel_user', 'team_user', 'system_user', 'channel_admin', 'team_admin', 'system_admin']);
  }

  mainRolesLoaded(roles) {
    return roles && roles.channel_admin && roles.channel_user && roles.team_admin && roles.team_user && roles.system_admin && roles.system_user;
  }

  render() {
    const {
      license,
      config,
      environmentConfig,
      showNavigationPrompt,
      roles
    } = this.props;
    const {
      setNavigationBlocked,
      cancelNavigation,
      confirmNavigation,
      editRole
    } = this.props.actions;

    if (!this.props.isCurrentUserSystemAdmin) {
      return react_default.a.createElement(react_router["a" /* Redirect */], {
        to: "/"
      });
    }

    if (!this.mainRolesLoaded(this.props.roles)) {
      return null;
    }

    if (Object.keys(config).length === 0) {
      return react_default.a.createElement("div", null);
    }

    if (config && Object.keys(config).length === 0 && config.constructor === 'Object') {
      return react_default.a.createElement("div", {
        className: "admin-console__wrapper"
      }, react_default.a.createElement(announcement_bar["a" /* default */], null), react_default.a.createElement("div", {
        className: "admin-console"
      }));
    }

    const discardChangesModal = react_default.a.createElement(discard_changes_modal_DiscardChangesModal, {
      show: showNavigationPrompt,
      onConfirm: confirmNavigation,
      onCancel: cancelNavigation
    }); // not every page in the system console will need the license and config, but the vast majority will

    const extraProps = {
      license,
      config,
      environmentConfig,
      setNavigationBlocked,
      roles,
      editRole
    };
    return react_default.a.createElement("div", {
      className: "admin-console__wrapper",
      id: "adminConsoleWrapper"
    }, react_default.a.createElement(announcement_bar["a" /* default */], null), react_default.a.createElement(system_notice["a" /* default */], null), react_default.a.createElement(admin_sidebar, {
      onFilterChange: this.onFilterChange
    }), react_default.a.createElement("div", {
      className: "admin-console"
    }, react_default.a.createElement(highlight_Highlight, {
      filter: this.state.filter
    }, this.renderRoutes(extraProps))), discardChangesModal, react_default.a.createElement(modal_controller["a" /* default */], null));
  }

}

admin_console_defineProperty(admin_console_AdminConsole, "propTypes", {
  config: prop_types_default.a.object.isRequired,
  environmentConfig: prop_types_default.a.object,
  license: prop_types_default.a.object.isRequired,
  buildEnterpriseReady: prop_types_default.a.bool,
  roles: prop_types_default.a.object.isRequired,
  match: prop_types_default.a.shape({
    url: prop_types_default.a.string.isRequired
  }).isRequired,
  showNavigationPrompt: prop_types_default.a.bool.isRequired,
  isCurrentUserSystemAdmin: prop_types_default.a.bool.isRequired,
  actions: prop_types_default.a.shape({
    getConfig: prop_types_default.a.func.isRequired,
    getEnvironmentConfig: prop_types_default.a.func.isRequired,
    setNavigationBlocked: prop_types_default.a.func.isRequired,
    confirmNavigation: prop_types_default.a.func.isRequired,
    cancelNavigation: prop_types_default.a.func.isRequired,
    loadRolesIfNeeded: prop_types_default.a.func.isRequired,
    editRole: prop_types_default.a.func.isRequired
  }).isRequired
});
// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--4!./components/admin_console/index.js
// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.













function admin_console_mapStateToProps(state) {
  const generalConfig = Object(general["getConfig"])(state);
  const buildEnterpriseReady = generalConfig.BuildEnterpriseReady === 'true';
  return {
    config: entities_admin["getConfig"](state),
    environmentConfig: entities_admin["getEnvironmentConfig"](state),
    license: Object(general["getLicense"])(state),
    buildEnterpriseReady,
    navigationBlocked: Object(views_admin["a" /* getNavigationBlocked */])(state),
    showNavigationPrompt: Object(views_admin["c" /* showNavigationPrompt */])(state),
    isCurrentUserSystemAdmin: Object(entities_users["isCurrentUserSystemAdmin"])(state),
    roles: Object(entities_roles["getRoles"])(state)
  };
}

function admin_console_mapDispatchToProps(dispatch) {
  return {
    actions: Object(redux["bindActionCreators"])({
      getConfig: admin["getConfig"],
      getEnvironmentConfig: admin["getEnvironmentConfig"],
      setNavigationBlocked: admin_actions["C" /* setNavigationBlocked */],
      deferNavigation: admin_actions["g" /* deferNavigation */],
      cancelNavigation: admin_actions["e" /* cancelNavigation */],
      confirmNavigation: admin_actions["f" /* confirmNavigation */],
      loadRolesIfNeeded: actions_roles["loadRolesIfNeeded"],
      editRole: actions_roles["editRole"]
    }, dispatch)
  };
}

/* harmony default export */ var admin_console = __webpack_exports__["default"] = (Object(react_router["f" /* withRouter */])(Object(es["connect"])(admin_console_mapStateToProps, admin_console_mapDispatchToProps)(admin_console_AdminConsole)));

/***/ })

}]);
//# sourceMappingURL=6.bef2c474d43211939263.js.map