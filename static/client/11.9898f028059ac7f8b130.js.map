{"version":3,"sources":["webpack:///./components/common/back_button.jsx","webpack:///./images/logo.png","webpack:///./components/common/site_name_and_description.jsx","webpack:///./components/login/login_mfa.jsx","webpack:///./actions/views/login.js","webpack:///./components/login/login_controller/login_controller.jsx","webpack:///./components/login/login_controller/index.js"],"names":["BackButton","React","PureComponent","render","props","onClick","url","title","PropTypes","string","func","SiteNameAndDescription","customDescriptionText","siteName","description","LoginMfa","constructor","e","preventDefault","token","target","value","trim","replace","state","setState","serverError","saving","submit","loginId","password","errorClass","handleSubmit","id","t","defaultMessage","handleChange","localizeMessage","isRequired","login","mfaToken","dispatch","ignoreMfaRequiredError","UserActions","loginById","userId","promise","result","error","server_error_id","data","LoginController","Component","sessionExpired","document","intl","formatMessage","closeSessionExpiredNotification","showNotification","body","Utils","requireInteraction","silent","window","focus","then","closeNotification","catch","onDismissSessionExpired","location","newQuery","search","browserHistory","pathname","hash","refs","toLowerCase","msgId","emailSigninEnabled","usernameSigninEnabled","ldapEnabled","ldapUsername","ldapLoginFieldName","loading","actions","push","encodeURIComponent","showMfa","message","params","URLSearchParams","inviteToken","get","inviteId","team","addUserToTeamFromInvite","finishSignin","experimentalPrimaryTeam","query","redirectTo","LocalStorageStore","setWasLoggedIn","match","name","GlobalActions","brandImageError","enableCustomBrand","text","customBrandText","formattedText","TextFormatting","brandImageUrl","Client4","getBrandImageUrl","brandImageStyle","display","handleBrandImageError","messageHtmlToComponent","mentions","imagesMetadata","loginPlaceholders","length","slice","join","enableSignUpWithEmail","enableSignUpWithGitLab","enableSignUpWithOffice365","enableSignUpWithGoogle","enableLdap","enableSaml","extraParam","Constants","GET_TERMS_ERROR","TERMS_REJECTED","SIGNIN_CHANGE","SIGNIN_VERIFIED","PASSWORD_CHANGE","CREATE_LDAP","loginControls","gitlabSigninEnabled","googleSigninEnabled","office365SigninEnabled","samlSigninEnabled","samlEnabled","preSubmit","handleLoginIdChange","createLoginPlaceholder","handlePasswordChange","enableOpenServer","checkSignUpEnabled","getOAuthRoute","getUrl","samlLoginButtonText","createExtraText","isLicensed","enableSignInWithUsername","enableSignInWithEmail","componentDidMount","configureTitle","currentUser","extra","email","getWasLoggedIn","set","SESSION_EXPIRED","showSessionExpiredNotificationIfNeeded","componentDidUpdate","componentWillUnmount","initializing","content","customContent","customClass","backButton","hideMfa","createLoginOptions","createCustomLogin","intlShape","object","bool","shape","ossLogin","injectIntl","mapStateToProps","config","getConfig","license","getLicense","IsLicensed","CustomBrandText","CustomDescriptionText","EnableCustomBrand","EnableLdap","EnableOpenServer","EnableSaml","EnableSignInWithEmail","EnableSignInWithUsername","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOffice365","LdapLoginFieldName","SamlLoginButtonText","SiteName","requests","users","logout","status","RequestStatus","SUCCESS","storage","initialized","ExperimentalPrimaryTeam","getTeamByName","member","getMyTeamMember","team_id","getCurrentUser","mapDispatchToProps","bindActionCreators","connect"],"mappings":"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","file":"11.9898f028059ac7f8b130.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default class BackButton extends React.PureComponent {\r\n    static propTypes = {\r\n\r\n        /**\r\n         * URL to return to\r\n         */\r\n        url: PropTypes.string,\r\n\r\n        /**\r\n         * An optional click handler that will trigger when the user clicks on the back button\r\n         */\r\n        onClick: PropTypes.func,\r\n    };\r\n\r\n    static defaultProps = {\r\n        url: '/',\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                id='back_button'\r\n                className='signup-header'\r\n            >\r\n                <Link\r\n                    onClick={this.props.onClick}\r\n                    to={this.props.url}\r\n                >\r\n                    <FormattedMessage\r\n                        id='generic_icons.back'\r\n                        defaultMessage='Back Icon'\r\n                    >\r\n                        {(title) => (\r\n                            <span\r\n                                id='back_button_icon'\r\n                                className='fa fa-1x fa-angle-left'\r\n                                title={title}\r\n                            />\r\n                        )}\r\n                    </FormattedMessage>\r\n                    <FormattedMessage\r\n                        id='web.header.back'\r\n                        defaultMessage='Back'\r\n                    />\r\n                </Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","module.exports = __webpack_public_path__ + \"files/87b80d01a017833f1357800bfca49cea.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\n\r\nexport default class SiteNameAndDescription extends React.PureComponent {\r\n    static propTypes = {\r\n        customDescriptionText: PropTypes.string,\r\n        siteName: PropTypes.string,\r\n    };\r\n\r\n    static defaultProps = {\r\n        siteName: 'Aboutone',\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            customDescriptionText,\r\n            siteName,\r\n        } = this.props;\r\n        let description = null;\r\n        if (customDescriptionText) {\r\n            description = customDescriptionText;\r\n        } else {\r\n            description = (\r\n                <FormattedMessage\r\n                    id='web.root.signup_info'\r\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <h1 id='site_name'>Aboutone</h1>\r\n                <h4\r\n                    id='site_description'\r\n                    className='color--light'\r\n                >\r\n                    {description}\r\n                </h4>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\n\r\nimport {localizeMessage} from 'utils/utils.jsx';\r\nimport {t} from 'utils/i18n.jsx';\r\nimport SaveButton from 'components/save_button.jsx';\r\nimport LocalizedInput from 'components/localized_input/localized_input';\r\n\r\nexport default class LoginMfa extends React.PureComponent {\r\n    static propTypes = {\r\n\r\n        /*\r\n         * User's login ID\r\n         */\r\n        loginId: PropTypes.string.isRequired,\r\n\r\n        /*\r\n         * User's password\r\n         */\r\n        password: PropTypes.string.isRequired,\r\n\r\n        /*\r\n         * Function to call when submitting user credentials\r\n         */\r\n        submit: PropTypes.func.isRequired,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            saving: false,\r\n            token: '',\r\n            serverError: '',\r\n        };\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        e.preventDefault();\r\n        const token = e.target.value.trim().replace(/\\s/g, '');\r\n\r\n        if (token !== this.state.token) {\r\n            this.setState({\r\n                token,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const state = {};\r\n\r\n        state.serverError = '';\r\n        state.saving = true;\r\n        this.setState(state);\r\n\r\n        this.props.submit(\r\n            this.props.loginId,\r\n            this.props.password,\r\n            this.state.token\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let serverError;\r\n        let errorClass = '';\r\n        if (this.state.serverError) {\r\n            serverError = <label className='control-label'>{this.state.serverError}</label>;\r\n            errorClass = ' has-error';\r\n        }\r\n\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <div className='signup__email-container'>\r\n                    <p>\r\n                        <FormattedMessage\r\n                            id='login_mfa.enterToken'\r\n                            defaultMessage=\"To complete the sign in process, please enter a token from your smartphone's authenticator\"\r\n                        />\r\n                    </p>\r\n                    <div className={'form-group' + errorClass}>\r\n                        {serverError}\r\n                    </div>\r\n                    <div className={'form-group' + errorClass}>\r\n                        <LocalizedInput\r\n                            type='text'\r\n                            className='form-control'\r\n                            name='token'\r\n                            placeholder={{id: t('login_mfa.token'), defaultMessage: 'MFA Token'}}\r\n                            spellCheck='false'\r\n                            autoComplete='off'\r\n                            autoFocus={true}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <SaveButton\r\n                            saving={this.state.saving}\r\n                            disabled={this.state.saving}\r\n                            onClick={this.handleSubmit}\r\n                            defaultMessage={localizeMessage('login_mfa.submit', 'Submit')}\r\n                            savingMessage={localizeMessage('login_mfa.submitting', 'Submitting...')}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport * as UserActions from 'mattermost-redux/actions/users';\r\n\r\nexport function login(loginId, password, mfaToken) {\r\n    return (dispatch) => {\r\n        return ignoreMfaRequiredError(dispatch(UserActions.login(loginId, password, mfaToken)));\r\n    };\r\n}\r\n\r\nexport function loginById(userId, password, mfaToken) {\r\n    return (dispatch) => {\r\n        return ignoreMfaRequiredError(dispatch(UserActions.loginById(userId, password, mfaToken)));\r\n    };\r\n}\r\n\r\nasync function ignoreMfaRequiredError(promise) {\r\n    let result = await promise;\r\n\r\n    if (result.error && result.error.server_error_id === 'api.context.mfa_required.app_error') {\r\n        result = {data: true};\r\n    }\r\n\r\n    return result;\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {FormattedMessage, injectIntl, intlShape} from 'react-intl';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport {Client4} from 'mattermost-redux/client';\r\n\r\nimport * as GlobalActions from 'actions/global_actions.jsx';\r\nimport LocalStorageStore from 'stores/local_storage_store';\r\n\r\nimport {browserHistory} from 'utils/browser_history';\r\nimport Constants from 'utils/constants.jsx';\r\nimport messageHtmlToComponent from 'utils/message_html_to_component';\r\nimport * as TextFormatting from 'utils/text_formatting.jsx';\r\nimport * as Utils from 'utils/utils.jsx';\r\nimport {showNotification} from 'utils/notifications.jsx';\r\nimport {t} from 'utils/i18n.jsx';\r\n\r\nimport logoImage from 'images/logo.png';\r\n\r\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\r\nimport AnnouncementBar from 'components/announcement_bar';\r\nimport FormError from 'components/form_error.jsx';\r\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\r\nimport BackButton from 'components/common/back_button.jsx';\r\nimport LoadingScreen from 'components/loading_screen.jsx';\r\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper.jsx';\r\nimport SuccessIcon from 'components/icon/success_icon';\r\nimport WarningIcon from 'components/icon/warning_icon';\r\nimport LocalizedInput from 'components/localized_input/localized_input';\r\nimport { getUrlTicket } from \"utils/auth.js\";\r\n\r\nimport LoginMfa from '../login_mfa.jsx';\r\n\r\nclass LoginController extends React.Component {\r\n    static propTypes = {\r\n        intl: intlShape.isRequired,\r\n\r\n        location: PropTypes.object.isRequired,\r\n        isLicensed: PropTypes.bool.isRequired,\r\n        currentUser: PropTypes.object,\r\n        customBrandText: PropTypes.string,\r\n        customDescriptionText: PropTypes.string,\r\n        enableCustomBrand: PropTypes.bool.isRequired,\r\n        enableLdap: PropTypes.bool.isRequired,\r\n        enableOpenServer: PropTypes.bool.isRequired,\r\n        enableSaml: PropTypes.bool.isRequired,\r\n        enableSignInWithEmail: PropTypes.bool.isRequired,\r\n        enableSignInWithUsername: PropTypes.bool.isRequired,\r\n        enableSignUpWithEmail: PropTypes.bool.isRequired,\r\n        enableSignUpWithGitLab: PropTypes.bool.isRequired,\r\n        enableSignUpWithGoogle: PropTypes.bool.isRequired,\r\n        enableSignUpWithOffice365: PropTypes.bool.isRequired,\r\n        experimentalPrimaryTeam: PropTypes.string,\r\n        ldapLoginFieldName: PropTypes.string,\r\n        samlLoginButtonText: PropTypes.string,\r\n        siteName: PropTypes.string,\r\n        initializing: PropTypes.bool,\r\n        actions: PropTypes.shape({\r\n            login: PropTypes.func.isRequired,\r\n            addUserToTeamFromInvite: PropTypes.func.isRequired,\r\n            ossLogin:PropTypes.func.isRequired,\r\n        }).isRequired,\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let loginId = '';\r\n        if ((new URLSearchParams(this.props.location.search)).get('extra') === Constants.SIGNIN_VERIFIED && (new URLSearchParams(this.props.location.search)).get('email')) {\r\n            loginId = (new URLSearchParams(this.props.location.search)).get('email');\r\n        }\r\n\r\n        this.state = {\r\n            ldapEnabled: this.props.isLicensed && this.props.enableLdap,\r\n            usernameSigninEnabled: this.props.enableSignInWithUsername,\r\n            emailSigninEnabled: this.props.enableSignInWithEmail,\r\n            samlEnabled: this.props.isLicensed && this.props.enableSaml,\r\n            loginId,\r\n            password: '',\r\n            showMfa: false,\r\n            loading: false,\r\n            sessionExpired: false,\r\n            brandImageError: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // const ticket = getUrlTicket(\"ticket\", this.props.location.search);\r\n        // if(ticket){\r\n        //     this.props.actions.ossLogin(ticket)\r\n        //       .then(async res => {\r\n        //         console.log(6666666, res);\r\n        //         //const {data: team} = await addUserToTeamFromInvite(inviteToken, inviteId);\r\n        //         console.log(7777777, window.location.href, this.props);\r\n        //         //window.location.href = \"http://localhost:8065/\";\r\n        //         //browserHistory.push(\"/\");\r\n        //       })\r\n        //       .finally(() => {});\r\n        // }else{\r\n        //     window.location.href =\"http://nsso.zhonganonline.com/login?service=za-white-screen&target=http://localhost:8065/login\";\r\n        //     return;\r\n        // }\r\n        \r\n        this.configureTitle();\r\n\r\n        if (this.props.currentUser) {\r\n            GlobalActions.redirectUserToDefaultTeam();\r\n            return;\r\n        }\r\n\r\n        const search = new URLSearchParams(this.props.location.search);\r\n        const extra = search.get('extra');\r\n        const email = search.get('email');\r\n\r\n        if (extra === Constants.SIGNIN_VERIFIED && email) {\r\n            this.refs.password.focus();\r\n        }\r\n\r\n        // Determine if the user was unexpectedly logged out.\r\n        if (LocalStorageStore.getWasLoggedIn()) {\r\n            if (extra === Constants.SIGNIN_CHANGE) {\r\n                // Assume that if the user triggered a sign in change, it was intended to logout.\r\n                // We can't preflight this, since in some flows it's the server that invalidates\r\n                // our session after we use it to complete the sign in change.\r\n                LocalStorageStore.setWasLoggedIn(false);\r\n            } else {\r\n                // Although the authority remains the local sessionExpired bit on the state, set this\r\n                // extra field in the querystring to signal the desktop app. And although eslint\r\n                // complains about this, it is allowed: https://reactjs.org/docs/react-component.html#componentdidmount.\r\n                // eslint-disable-next-line react/no-did-mount-set-state\r\n                this.setState({sessionExpired: true});\r\n                search.set('extra', Constants.SESSION_EXPIRED);\r\n                browserHistory.replace(`${this.props.location.pathname}?${search}`);\r\n            }\r\n        }\r\n\r\n        this.showSessionExpiredNotificationIfNeeded();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.configureTitle();\r\n        this.showSessionExpiredNotificationIfNeeded();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.closeSessionExpiredNotification) {\r\n            this.closeSessionExpiredNotification();\r\n            this.closeSessionExpiredNotification = null;\r\n        }\r\n    }\r\n\r\n    configureTitle = () => {\r\n        if (this.state.sessionExpired) {\r\n            document.title = this.props.intl.formatMessage({\r\n                id: 'login.session_expired.title',\r\n                defaultMessage: '* {siteName} - Session Expired',\r\n            }, {\r\n                siteName: this.props.siteName,\r\n            });\r\n        } else {\r\n            document.title = this.props.siteName;\r\n        }\r\n    }\r\n\r\n    showSessionExpiredNotificationIfNeeded = () => {\r\n        if (this.state.sessionExpired && !this.closeSessionExpiredNotification) {\r\n            showNotification({\r\n                title: this.props.siteName,\r\n                body: Utils.localizeMessage(\r\n                    'login.session_expired.notification',\r\n                    'Session Expired: Please sign in to continue receiving notifications.'\r\n                ),\r\n                requireInteraction: true,\r\n                silent: false,\r\n                onClick: () => {\r\n                    window.focus();\r\n                    if (this.closeSessionExpiredNotification()) {\r\n                        this.closeSessionExpiredNotification();\r\n                        this.closeSessionExpiredNotification = null;\r\n                    }\r\n                },\r\n            }).then((closeNotification) => {\r\n                this.closeSessionExpiredNotification = closeNotification;\r\n            }).catch(() => {\r\n                // Ignore the failure to display the notification.\r\n            });\r\n        } else if (!this.state.sessionExpired && this.closeSessionExpiredNotification) {\r\n            this.closeSessionExpiredNotification();\r\n            this.closeSessionExpiredNotification = null;\r\n        }\r\n    }\r\n\r\n    preSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // Discard any session expiry notice once the user interacts with the login page.\r\n        this.onDismissSessionExpired();\r\n\r\n        const {location} = this.props;\r\n        const newQuery = location.search.replace(/(extra=password_change)&?/i, '');\r\n        if (newQuery !== location.search) {\r\n            browserHistory.replace(`${location.pathname}${newQuery}${location.hash}`);\r\n        }\r\n\r\n        // password managers don't always call onInput handlers for form fields so it's possible\r\n        // for the state to get out of sync with what the user sees in the browser\r\n        let loginId = this.state.loginId;\r\n        if (this.refs.loginId) {\r\n            loginId = this.refs.loginId.value;\r\n            if (loginId !== this.state.loginId) {\r\n                this.setState({loginId});\r\n            }\r\n        }\r\n\r\n        let password = this.state.password;\r\n        if (this.refs.password) {\r\n            password = this.refs.password.value;\r\n            if (password !== this.state.password) {\r\n                this.setState({password});\r\n            }\r\n        }\r\n\r\n        // don't trim the password since we support spaces in passwords\r\n        loginId = loginId.trim().toLowerCase();\r\n\r\n        if (!loginId) {\r\n            t('login.noEmail');\r\n            t('login.noEmailLdapUsername');\r\n            t('login.noEmailUsername');\r\n            t('login.noEmailUsernameLdapUsername');\r\n            t('login.noLdapUsername');\r\n            t('login.noUsername');\r\n            t('login.noUsernameLdapUsername');\r\n\r\n            // it's slightly weird to be constructing the message ID, but it's a bit nicer than triply nested if statements\r\n            let msgId = 'login.no';\r\n            if (this.state.emailSigninEnabled) {\r\n                msgId += 'Email';\r\n            }\r\n            if (this.state.usernameSigninEnabled) {\r\n                msgId += 'Username';\r\n            }\r\n            if (this.state.ldapEnabled) {\r\n                msgId += 'LdapUsername';\r\n            }\r\n\r\n            this.setState({\r\n                serverError: (\r\n                    <FormattedMessage\r\n                        id={msgId}\r\n                        values={{\r\n                            ldapUsername: this.props.ldapLoginFieldName || Utils.localizeMessage('login.ldapUsernameLower', 'AD/LDAP username'),\r\n                        }}\r\n                    />\r\n                ),\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (!password) {\r\n            this.setState({\r\n                serverError: (\r\n                    <FormattedMessage\r\n                        id='login.noPassword'\r\n                        defaultMessage='Please enter your password'\r\n                    />\r\n                ),\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.submit(loginId, password, '');\r\n    }\r\n\r\n    submit = (loginId, password, token) => {\r\n        this.setState({serverError: null, loading: true});\r\n\r\n        this.props.actions.login(loginId, password, token).then(async ({error}) => {\r\n            if (error) {\r\n                if (error.server_error_id === 'api.user.login.not_verified.app_error') {\r\n                    browserHistory.push('/should_verify_email?&email=' + encodeURIComponent(loginId));\r\n                } else if (error.server_error_id === 'store.sql_user.get_for_login.app_error' ||\r\n                    error.server_error_id === 'ent.ldap.do_login.user_not_registered.app_error') {\r\n                    this.setState({\r\n                        showMfa: false,\r\n                        loading: false,\r\n                        serverError: (\r\n                            <FormattedMessage\r\n                                id='login.userNotFound'\r\n                                defaultMessage=\"We couldn't find an account matching your login credentials.\"\r\n                            />\r\n                        ),\r\n                    });\r\n                } else if (error.server_error_id === 'api.user.check_user_password.invalid.app_error' || error.server_error_id === 'ent.ldap.do_login.invalid_password.app_error') {\r\n                    this.setState({\r\n                        showMfa: false,\r\n                        loading: false,\r\n                        serverError: (\r\n                            <FormattedMessage\r\n                                id='login.invalidPassword'\r\n                                defaultMessage='Your password is incorrect.'\r\n                            />\r\n                        ),\r\n                    });\r\n                } else if (!this.state.showMfa && error.server_error_id === 'mfa.validate_token.authenticate.app_error') {\r\n                    this.setState({showMfa: true});\r\n                } else {\r\n                    this.setState({showMfa: false, serverError: error.message, loading: false});\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            // check for query params brought over from signup_user_complete\r\n            const params = new URLSearchParams(this.props.location.search);\r\n            const inviteToken = params.get('t') || '';\r\n            const inviteId = params.get('id') || '';\r\n\r\n            if (inviteId || inviteToken) {\r\n                const {data: team} = await this.props.actions.addUserToTeamFromInvite(inviteToken, inviteId);\r\n                if (team) {\r\n                    this.finishSignin(team);\r\n                } else {\r\n                    // there's not really a good way to deal with this, so just let the user log in like normal\r\n                    this.finishSignin();\r\n                }\r\n            } else {\r\n                this.finishSignin();\r\n            }\r\n        });\r\n    }\r\n\r\n    finishSignin = (team) => {\r\n        const experimentalPrimaryTeam = this.props.experimentalPrimaryTeam;\r\n        const query = new URLSearchParams(this.props.location.search);\r\n        const redirectTo = query.get('redirect_to');\r\n\r\n        Utils.setCSRFFromCookie();\r\n\r\n        // Record a successful login to local storage. If an unintentional logout occurs, e.g.\r\n        // via session expiration, this bit won't get reset and we can notify the user as such.\r\n        LocalStorageStore.setWasLoggedIn(true);\r\n        if (redirectTo && redirectTo.match(/^\\/([^/]|$)/)) {\r\n            browserHistory.push(redirectTo);\r\n        } else if (team) {\r\n            browserHistory.push(`/${team.name}`);\r\n        } else if (experimentalPrimaryTeam) {\r\n            browserHistory.push(`/${experimentalPrimaryTeam}`);\r\n        } else {\r\n            GlobalActions.redirectUserToDefaultTeam();\r\n        }\r\n    }\r\n\r\n    handleLoginIdChange = (e) => {\r\n        this.setState({\r\n            loginId: e.target.value,\r\n        });\r\n    }\r\n\r\n    handlePasswordChange = (e) => {\r\n        this.setState({\r\n            password: e.target.value,\r\n        });\r\n    }\r\n\r\n    handleBrandImageError = () => {\r\n        this.setState({brandImageError: true});\r\n    }\r\n\r\n    createCustomLogin = () => {\r\n        if (this.props.enableCustomBrand) {\r\n            const text = this.props.customBrandText || '';\r\n            const formattedText = TextFormatting.formatText(text);\r\n            const brandImageUrl = Client4.getBrandImageUrl(0);\r\n            const brandImageStyle = this.state.brandImageError ? {display: 'none'} : {};\r\n\r\n            return (\r\n                <div>\r\n                    <img\r\n                        alt={'brand image'}\r\n                        src={brandImageUrl}\r\n                        onError={this.handleBrandImageError}\r\n                        style={brandImageStyle}\r\n                    />\r\n                    <div>\r\n                        {messageHtmlToComponent(formattedText, false, {mentions: false, imagesMetadata: null})}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    createLoginPlaceholder = () => {\r\n        const ldapEnabled = this.state.ldapEnabled;\r\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\r\n        const emailSigninEnabled = this.state.emailSigninEnabled;\r\n\r\n        const loginPlaceholders = [];\r\n        if (emailSigninEnabled) {\r\n            loginPlaceholders.push(Utils.localizeMessage('login.email', 'Email'));\r\n        }\r\n\r\n        if (usernameSigninEnabled) {\r\n            loginPlaceholders.push(Utils.localizeMessage('login.username', 'Username'));\r\n        }\r\n\r\n        if (ldapEnabled) {\r\n            if (this.props.ldapLoginFieldName) {\r\n                loginPlaceholders.push(this.props.ldapLoginFieldName);\r\n            } else {\r\n                loginPlaceholders.push(Utils.localizeMessage('login.ldapUsername', 'AD/LDAP Username'));\r\n            }\r\n        }\r\n\r\n        if (loginPlaceholders.length >= 2) {\r\n            return loginPlaceholders.slice(0, loginPlaceholders.length - 1).join(', ') +\r\n                Utils.localizeMessage('login.placeholderOr', ' or ') +\r\n                loginPlaceholders[loginPlaceholders.length - 1];\r\n        } else if (loginPlaceholders.length === 1) {\r\n            return loginPlaceholders[0];\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    checkSignUpEnabled = () => {\r\n        return this.props.enableSignUpWithEmail ||\r\n            this.props.enableSignUpWithGitLab ||\r\n            this.props.enableSignUpWithOffice365 ||\r\n            this.props.enableSignUpWithGoogle ||\r\n            this.props.enableLdap ||\r\n            this.props.enableSaml;\r\n    }\r\n\r\n    onDismissSessionExpired = () => {\r\n        LocalStorageStore.setWasLoggedIn(false);\r\n        this.setState({sessionExpired: false});\r\n    }\r\n\r\n    createExtraText = () => {\r\n        const extraParam = (new URLSearchParams(this.props.location.search)).get('extra');\r\n\r\n        if (this.state.sessionExpired) {\r\n            return (\r\n                <div className='alert alert-warning'>\r\n                    <WarningIcon/>\r\n                    {' '}\r\n                    <FormattedMessage\r\n                        id='login.session_expired'\r\n                        defaultMessage='Your session has expired. Please log in again.'\r\n                    />\r\n                    {' '}\r\n                    <Link\r\n                        className='btn-close'\r\n                        to='/login'\r\n                        onClick={this.onDismissSessionExpired}\r\n                    >\r\n                        <span>\r\n                            {'×'}\r\n                        </span>\r\n                    </Link>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (extraParam === Constants.GET_TERMS_ERROR) {\r\n            return (\r\n                <div className='alert has-error no-padding'>\r\n                    <label className='control-label'>\r\n                        <FormattedMessage\r\n                            id='login.get_terms_error'\r\n                            defaultMessage='Unable to load terms of service. If this issue persists, contact your System Administrator.'\r\n                        />\r\n                    </label>\r\n                </div>\r\n            );\r\n        } else if (extraParam === Constants.TERMS_REJECTED) {\r\n            return (\r\n                <div className='alert alert-warning'>\r\n                    <WarningIcon/>\r\n                    <FormattedMarkdownMessage\r\n                        id='login.terms_rejected'\r\n                        defaultMessage='You must agree to the terms of service before accessing {siteName}. Please contact your System Administrator for more details.'\r\n                        values={{\r\n                            siteName: this.props.siteName,\r\n                        }}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (extraParam === Constants.SIGNIN_CHANGE) {\r\n            return (\r\n                <div className='alert alert-success'>\r\n                    <SuccessIcon/>\r\n                    <FormattedMessage\r\n                        id='login.changed'\r\n                        defaultMessage=' Sign-in method changed successfully'\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (extraParam === Constants.SIGNIN_VERIFIED) {\r\n            return (\r\n                <div className='alert alert-success'>\r\n                    <SuccessIcon/>\r\n                    <FormattedMessage\r\n                        id='login.verified'\r\n                        defaultMessage=' Email Verified'\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (extraParam === Constants.PASSWORD_CHANGE) {\r\n            return (\r\n                <div\r\n                    id='passwordUpdatedSuccess'\r\n                    className='alert alert-success'\r\n                >\r\n                    <SuccessIcon/>\r\n                    <FormattedMessage\r\n                        id='login.passwordChanged'\r\n                        defaultMessage=' Password updated successfully'\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (extraParam === Constants.CREATE_LDAP) {\r\n            return (\r\n                <div className='alert alert-grey'>\r\n                    <FormattedMessage\r\n                        id='login.ldapCreate'\r\n                        defaultMessage=' Enter your AD/LDAP username and password to create an account.'\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    createLoginOptions = () => {\r\n        const loginControls = [];\r\n\r\n        const ldapEnabled = this.state.ldapEnabled;\r\n        const gitlabSigninEnabled = this.props.enableSignUpWithGitLab;\r\n        const googleSigninEnabled = this.props.enableSignUpWithGoogle;\r\n        const office365SigninEnabled = this.props.enableSignUpWithOffice365;\r\n        const samlSigninEnabled = this.state.samlEnabled;\r\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\r\n        const emailSigninEnabled = this.state.emailSigninEnabled;\r\n\r\n        if (emailSigninEnabled || usernameSigninEnabled || ldapEnabled) {\r\n            let errorClass = '';\r\n            if (this.state.serverError) {\r\n                errorClass = ' has-error';\r\n            }\r\n\r\n            loginControls.push(\r\n                <form\r\n                    key='loginBoxes'\r\n                    onSubmit={this.preSubmit}\r\n                >\r\n                    <div className='signup__email-container'>\r\n                        <FormError\r\n                            error={this.state.serverError}\r\n                            margin={true}\r\n                        />\r\n                        <div className={'form-group' + errorClass}>\r\n                            <input\r\n                                id='loginId'\r\n                                className='form-control'\r\n                                ref='loginId'\r\n                                name='loginId'\r\n                                value={this.state.loginId}\r\n                                onChange={this.handleLoginIdChange}\r\n                                placeholder={this.createLoginPlaceholder()}\r\n                                spellCheck='false'\r\n                                autoCapitalize='off'\r\n                                autoFocus={true}\r\n                            />\r\n                        </div>\r\n                        <div className={'form-group' + errorClass}>\r\n                            <LocalizedInput\r\n                                id='loginPassword'\r\n                                type='password'\r\n                                className='form-control'\r\n                                ref='password'\r\n                                name='password'\r\n                                value={this.state.password}\r\n                                onChange={this.handlePasswordChange}\r\n                                placeholder={{id: t('login.password'), defaultMessage: 'Password'}}\r\n                                spellCheck='false'\r\n                            />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <button\r\n                                id='loginButton'\r\n                                type='submit'\r\n                                className='btn btn-primary'\r\n                            >\r\n                                <LoadingWrapper\r\n                                    id='login_button_signing'\r\n                                    loading={this.state.loading}\r\n                                    text={Utils.localizeMessage('login.signInLoading', 'Signing in...')}\r\n                                >\r\n                                    <FormattedMessage\r\n                                        id='login.signIn'\r\n                                        defaultMessage='Sign in'\r\n                                    />\r\n                                </LoadingWrapper>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            );\r\n        }\r\n\r\n        if (this.props.enableOpenServer && this.checkSignUpEnabled()) {\r\n            loginControls.push(\r\n                <div\r\n                    className='form-group'\r\n                    key='signup'\r\n                >\r\n                    <span>\r\n                        <FormattedMessage\r\n                            id='login.noAccount'\r\n                            defaultMessage=\"Don't have an account? \"\r\n                        />\r\n                        <Link\r\n                            id='signup'\r\n                            to={'/signup_user_complete' + this.props.location.search}\r\n                            className='signup-team-login'\r\n                        >\r\n                            <FormattedMessage\r\n                                id='login.create'\r\n                                defaultMessage='Create one now'\r\n                            />\r\n                        </Link>\r\n                    </span>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (false) {\r\n            loginControls.push(\r\n                <div\r\n                    id='login_forgot'\r\n                    key='forgotPassword'\r\n                    className='form-group'\r\n                >\r\n                    <Link to={'/reset_password'}>\r\n                        <FormattedMessage\r\n                            id='login.forgot'\r\n                            defaultMessage='I forgot my password'\r\n                        />\r\n                    </Link>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if ((emailSigninEnabled || usernameSigninEnabled || ldapEnabled) && (gitlabSigninEnabled || googleSigninEnabled || samlSigninEnabled || office365SigninEnabled)) {\r\n            loginControls.push(\r\n                <div\r\n                    key='divider'\r\n                    className='or__container'\r\n                >\r\n                    <FormattedMessage\r\n                        id='login.or'\r\n                        defaultMessage='or'\r\n                    />\r\n                </div>\r\n            );\r\n\r\n            loginControls.push(\r\n                <h5 key='oauthHeader'>\r\n                    <FormattedMessage\r\n                        id='login.signInWith'\r\n                        defaultMessage='Sign in with:'\r\n                    />\r\n                </h5>\r\n            );\r\n        }\r\n\r\n        if (gitlabSigninEnabled) {\r\n            loginControls.push(\r\n                <a\r\n                    className='btn btn-custom-login gitlab'\r\n                    key='gitlab'\r\n                    href={Client4.getOAuthRoute() + '/gitlab/login' + this.props.location.search}\r\n                >\r\n                    <span>\r\n                        <span className='icon'/>\r\n                        <span>\r\n                            <FormattedMessage\r\n                                id='login.gitlab'\r\n                                defaultMessage='GitLab'\r\n                            />\r\n                        </span>\r\n                    </span>\r\n                </a>\r\n            );\r\n        }\r\n\r\n        if (googleSigninEnabled) {\r\n            loginControls.push(\r\n                <a\r\n                    className='btn btn-custom-login google'\r\n                    key='google'\r\n                    href={Client4.getOAuthRoute() + '/google/login' + this.props.location.search}\r\n                >\r\n                    <span>\r\n                        <span className='icon'/>\r\n                        <span>\r\n                            <FormattedMessage\r\n                                id='login.google'\r\n                                defaultMessage='Google Apps'\r\n                            />\r\n                        </span>\r\n                    </span>\r\n                </a>\r\n            );\r\n        }\r\n\r\n        if (office365SigninEnabled) {\r\n            loginControls.push(\r\n                <a\r\n                    className='btn btn-custom-login office365'\r\n                    key='office365'\r\n                    href={Client4.getOAuthRoute() + '/office365/login' + this.props.location.search}\r\n                >\r\n                    <span>\r\n                        <span className='icon'/>\r\n                        <span>\r\n                            <FormattedMessage\r\n                                id='login.office365'\r\n                                defaultMessage='Office 365'\r\n                            />\r\n                        </span>\r\n                    </span>\r\n                </a>\r\n            );\r\n        }\r\n\r\n        if (samlSigninEnabled) {\r\n            loginControls.push(\r\n                <a\r\n                    className='btn btn-custom-login saml'\r\n                    key='saml'\r\n                    href={Client4.getUrl() + '/login/sso/saml' + this.props.location.search}\r\n                >\r\n                    <span>\r\n                        <span\r\n                            className='icon fa fa-lock fa--margin-top'\r\n                            title='Saml icon'\r\n                        />\r\n                        <span>\r\n                            {this.props.samlLoginButtonText}\r\n                        </span>\r\n                    </span>\r\n                </a>\r\n            );\r\n        }\r\n\r\n        if (loginControls.length === 0) {\r\n            loginControls.push(\r\n                <FormError\r\n                    key='noMethods'\r\n                    error={\r\n                        <FormattedMessage\r\n                            id='login.noMethods'\r\n                            defaultMessage='No sign-in methods are enabled. Please contact your System Administrator.'\r\n                        />\r\n                    }\r\n                    margin={true}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {this.createExtraText()}\r\n                {loginControls}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    hideMfa = () => {\r\n        this.setState({showMfa: false});\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            customDescriptionText,\r\n            siteName,\r\n            initializing,\r\n        } = this.props;\r\n\r\n        if (initializing) {\r\n            return (<LoadingScreen/>);\r\n        }\r\n\r\n        let content;\r\n        let customContent;\r\n        let customClass;\r\n        let backButton;\r\n        if (this.state.showMfa) {\r\n            content = (\r\n                <LoginMfa\r\n                    loginId={this.state.loginId}\r\n                    password={this.state.password}\r\n                    submit={this.submit}\r\n                />\r\n            );\r\n            backButton = (<BackButton onClick={this.hideMfa}/>);\r\n        } else {\r\n            content = this.createLoginOptions();\r\n            customContent = this.createCustomLogin();\r\n            if (customContent) {\r\n                customClass = 'branded';\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {/* <AnnouncementBar/>\r\n                {backButton}\r\n                <div\r\n                    id='login_section'\r\n                    className='col-sm-12'\r\n                >\r\n                    <div className={'signup-team__container ' + customClass}>\r\n                        <div className='signup__markdown'>\r\n                            {customContent}\r\n                        </div>\r\n                        <img\r\n                            alt={'signup team logo'}\r\n                            className='signup-team-logo'\r\n                            src={logoImage}\r\n                        />\r\n                        <div className='signup__content'>\r\n                            <SiteNameAndDescription\r\n                                customDescriptionText={customDescriptionText}\r\n                                siteName={siteName}\r\n                            />\r\n                            {content}\r\n                        </div>\r\n                    </div>\r\n                </div> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default injectIntl(LoginController);\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport {\r\n  getConfig,\r\n  getLicense\r\n} from \"mattermost-redux/selectors/entities/general\";\r\nimport {\r\n  getTeamByName,\r\n  getMyTeamMember\r\n} from \"mattermost-redux/selectors/entities/teams\";\r\nimport { getCurrentUser } from \"mattermost-redux/selectors/entities/users\";\r\nimport { RequestStatus } from \"mattermost-redux/constants\";\r\n\r\nimport { addUserToTeamFromInvite } from \"actions/team_actions\";\r\n\r\nimport { login } from \"actions/views/login\";\r\n\r\nimport LoginController from \"./login_controller.jsx\";\r\nimport { ossLogin } from \"api/login.js\";\r\n\r\nfunction mapStateToProps(state) {\r\n  const config = getConfig(state);\r\n  const license = getLicense(state);\r\n\r\n  const isLicensed = license.IsLicensed === \"true\";\r\n\r\n  const customBrandText = config.CustomBrandText;\r\n  const customDescriptionText = config.CustomDescriptionText;\r\n  const enableCustomBrand = config.EnableCustomBrand === \"true\";\r\n  const enableLdap = config.EnableLdap === \"true\";\r\n  const enableOpenServer = config.EnableOpenServer === \"true\";\r\n  const enableSaml = config.EnableSaml === \"true\";\r\n  const enableSignInWithEmail = config.EnableSignInWithEmail === \"true\";\r\n  const enableSignInWithUsername = config.EnableSignInWithUsername === \"true\";\r\n  const enableSignUpWithEmail = config.EnableSignUpWithEmail === \"true\";\r\n  const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === \"true\";\r\n  const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === \"true\";\r\n  const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === \"true\";\r\n  const ldapLoginFieldName = config.LdapLoginFieldName;\r\n  const samlLoginButtonText = config.SamlLoginButtonText;\r\n  const siteName = config.SiteName;\r\n  const initializing =\r\n    state.requests.users.logout.status === RequestStatus.SUCCESS ||\r\n    !state.storage.initialized;\r\n\r\n  // Only set experimental team if user is on that team\r\n  let experimentalPrimaryTeam = config.ExperimentalPrimaryTeam;\r\n  if (experimentalPrimaryTeam) {\r\n    const team = getTeamByName(state, experimentalPrimaryTeam);\r\n    if (team) {\r\n      const member = getMyTeamMember(state, team.id);\r\n      if (!member || !member.team_id) {\r\n        experimentalPrimaryTeam = null;\r\n      }\r\n    } else {\r\n      experimentalPrimaryTeam = null;\r\n    }\r\n  }\r\n\r\n  return {\r\n    currentUser: getCurrentUser(state),\r\n    isLicensed,\r\n    customBrandText,\r\n    customDescriptionText,\r\n    enableCustomBrand,\r\n    enableLdap,\r\n    enableOpenServer,\r\n    enableSaml,\r\n    enableSignInWithEmail,\r\n    enableSignInWithUsername,\r\n    enableSignUpWithEmail,\r\n    enableSignUpWithGitLab,\r\n    enableSignUpWithGoogle,\r\n    enableSignUpWithOffice365,\r\n    experimentalPrimaryTeam,\r\n    ldapLoginFieldName,\r\n    samlLoginButtonText,\r\n    siteName,\r\n    initializing\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: bindActionCreators(\r\n      {\r\n        login,\r\n        ossLogin,\r\n        addUserToTeamFromInvite\r\n      },\r\n      dispatch\r\n    )\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(LoginController);\r\n"],"sourceRoot":""}