{"version":3,"sources":["webpack:///./mattermost-redux/utils/notify_props.js","webpack:///./components/user_settings/advanced/join_leave_section/join_leave_section.jsx","webpack:///./components/user_settings/advanced/join_leave_section/index.js","webpack:///./components/user_settings/advanced/user_settings_advanced.jsx","webpack:///./components/user_settings/advanced/index.js","webpack:///./components/color_input.jsx","webpack:///./components/user_settings/display/user_settings_theme/color_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/custom_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/premade_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/index.js","webpack:///./components/user_settings/display/user_settings_theme/user_settings_theme.jsx","webpack:///./components/user_settings/display/user_settings_theme/index.js","webpack:///./components/suggestion/timezone_provider.jsx","webpack:///./components/user_settings/display/manage_timezones/manage_timezones.jsx","webpack:///./components/user_settings/display/manage_timezones/index.js","webpack:///./components/user_settings/display/manage_languages/manage_languages.jsx","webpack:///./components/user_settings/display/manage_languages/index.js","webpack:///./components/user_settings/display/user_settings_display.jsx","webpack:///./components/user_settings/display/index.js","webpack:///./components/user_settings/general/user_settings_general.jsx","webpack:///./components/user_settings/general/index.js","webpack:///./components/user_settings/notifications/desktop_notification_settings.jsx","webpack:///./components/user_settings/notifications/email_notification_setting/email_notification_setting.jsx","webpack:///./components/user_settings/notifications/email_notification_setting/index.js","webpack:///./components/user_settings/notifications/manage_auto_responder.jsx","webpack:///./components/user_settings/notifications/user_settings_notifications.jsx","webpack:///./components/user_settings/notifications/index.js","webpack:///./components/user_settings/security/mfa_section/mfa_section.jsx","webpack:///./components/user_settings/security/mfa_section/index.js","webpack:///./components/user_settings/security/user_access_token_section/user_access_token_section.jsx","webpack:///./components/user_settings/security/user_access_token_section/index.js","webpack:///./components/user_settings/security/user_settings_security.jsx","webpack:///./components/user_settings/security/index.js","webpack:///./components/user_settings/sidebar/user_settings_sidebar.jsx","webpack:///./components/user_settings/sidebar/index.js","webpack:///./components/user_settings/user_settings.jsx","webpack:///./components/user_settings/index.js"],"names":["Object","defineProperty","exports","value","getEmailInterval","_constants","require","enableEmailNotification","enableEmailBatching","emailIntervalPreference","INTERVAL_NEVER","Preferences","INTERVAL_IMMEDIATE","INTERVAL_FIFTEEN_MINUTES","INTERVAL_HOUR","validValuesWithEmailBatching","validValuesWithoutEmailBatching","indexOf","JoinLeaveSection","React","PureComponent","constructor","props","e","currentTarget","setState","joinLeaveState","section","joinLeave","onUpdateSection","actions","currentUserId","joinLeavePreference","category","CATEGORY_ADVANCED_SETTINGS","user_id","name","ADVANCED_FILTER_JOIN_LEAVE","state","savePreferences","render","activeSection","AdvancedSections","JOIN_LEAVE","handleOnChange","handleSubmit","isSaving","serverError","handleUpdateSection","renderOnOffLabel","prevActiveSection","PropTypes","string","isRequired","func","shape","mapStateToProps","getPreference","getCurrentUserId","mapDispatchToProps","dispatch","bindActionCreators","connect","PreReleaseFeatures","Constants","PRE_RELEASE_FEATURES","AdvancedSettingsDisplay","advancedSettings","advancedSettingsCategory","settings","send_on_ctrl_enter","sendOnCtrlEnter","code_block_ctrl_enter","codeBlockOnCtrlEnter","formatting","join_leave","preReleaseFeaturesKeys","keys","enabledFeatures","as","key","feature","FeatureTogglePrefix","label","previewFeaturesEnabled","enablePreviewFeatures","showDeactivateAccountModal","preReleaseFeatures","setting","checked","String","forEach","lastIndexOf","features","push","preferences","currentUser","userId","id","Array","isArray","updateUserActive","then","error","message","data","revokeAllSessionsForUser","emitUserLoggedOutEvent","getStateFromProps","updateSection","updateSetting","bind","prevSections","advancedCtrlSend","advancedPreviewFeatures","deactivateAccount","enabled","renderCtrlEnterLabel","ctrlEnter","codeBlockCtrlEnter","renderFeatureLabel","ctrlSendSection","ctrlSendActive","inputs","formattingSection","renderFormattingSection","formattingSectionDivider","previewFeaturesSection","previewFeaturesSectionDivider","length","toggleFeature","target","saveEnabledFeatures","Utils","count","deactivateAccountSection","makeConfirmationModal","auth_service","enableUserDeactivation","handleShowDeactivateAccountModal","confirmButtonClass","deactivateMemberButton","handleDeactivateAccountSubmit","handleHideDeactivateAccountModal","closeModal","collapseModal","object","array","bool","makeMapStateToProps","getAdvancedSettingsCategory","makeGetCategory","config","getConfig","EnablePreviewFeatures","EnableUserDeactivation","get","getCurrentUser","ColorInput","Component","colorPickerDOMNode","ReactDom","findDOMNode","colorPicker","contains","isOpened","newColorData","hex","onChange","handleChange","node","idOpened","componentDidUpdate","prevProps","prevState","prevIsOpened","document","addEventListener","checkClick","removeEventListener","color","togglePicker","backgroundColor","getColorPicker","ColorChooser","newColor","messages","defineMessages","sidebarBg","t","defaultMessage","sidebarText","sidebarHeaderBg","sidebarHeaderTextColor","sidebarUnreadText","sidebarTextHoverBg","sidebarTextActiveBorder","sidebarTextActiveColor","onlineIndicator","awayIndicator","dndIndicator","mentionBg","mentionColor","centerChannelBg","centerChannelColor","newMessageSeparator","linkColor","buttonBg","buttonColor","errorTextColor","mentionHighlightBg","mentionHighlightLink","codeTheme","CustomThemeChooser","settingId","updateTheme","theme","newTheme","type","mentionBj","copyTheme","setCopyTheme","text","window","clipboardData","getData","JSON","parse","err","stringify","stopPropagation","textarea","refs","focus","setSelectionRange","preventDefault","$","sidebarStylesHeader","toggleClass","toggleSection","sidebarStyles","centerChannelStylesHeader","centerChannelStyles","linkAndButtonStylesHeader","linkAndButtonStyles","componentDidMount","on","onCodeThemeChange","componentWillUnmount","off","assign","image","UserAgent","slideToggle","formatMessage","context","intl","sidebarElements","centerChannelElements","linkAndButtonElements","THEME_ELEMENTS","element","index","codeThemeOptions","codeThemeURL","themes","codeThemeIndex","iconURL","uiName","popoverContent","group","handleColorChange","pasteBox","pasteBoxChange","onChangeHandle","selectTheme","toggleSidebarStyles","toggleCenterChannelStyles","toggleLinkAndButtonStyles","intlShape","PremadeThemeChooser","premadeThemes","allowedThemes","hasAllowedThemes","trim","k","THEMES","hasOwnProperty","premadeTheme","extend","activeClass","replace","propTypes","arrayOf","defaultProps","AllowedThemes","split","ThemeSetting","teamId","applyToAllTeams","currentTeamId","saveTheme","deleteTeamSpecificThemes","setRequireConfirm","originalTheme","scrollToTop","themeChanged","field","AppDispatcher","handleViewAction","ActionTypes","TOGGLE_IMPORT_THEME_MODAL","callback","setEnforceFocus","selected","ReactDOM","addClass","removeClass","UNSAFE_componentWillReceiveProps","nextProps","resetFields","DEFAULT_CODE_THEME","showAllTeamsCheckbox","scrollTop","updateType","displayCustom","custom","premade","allowCustomThemes","themeUI","handleImportModal","allTeamsCheckbox","submitTheme","focused","getThemeCategory","getCurrentTeamId","getTheme","CATEGORY_THEME","getMyTeamsCount","UserSettingsTheme","TimezoneSuggestion","Suggestion","item","isSelection","timezone","className","handleClick","baseProps","TimezoneProvider","Provider","handlePretextChanged","timezonePrefix","resultsCallback","displayAllTimezones","filterTimezones","matchedPretext","terms","getSupportedTimezones","items","component","filteredTimezones","filter","getTimezoneRegion","toLowerCase","ManageTimezones","manualTimezoneInput","manualTimezone","useAutomaticTimezone","automaticTimezone","oldUseAutomaticTimezone","oldAutomaticTimezone","oldManualTimezone","timezoneNotChanged","submitUser","user","toString","updatedUser","updateMe","getBrowserTimezone","timezones","timezoneRegion","noTimezonesFromServer","automaticTimezoneInput","handleAutomaticTimezone","providers","setSwitchBoxRef","handleTimezoneSelected","SuggestionList","changeTimezone","ManageLanguage","locale","options","locales","I18n","languages","map","l","order","sort","a","b","lang","input","setLanguage","changeLanguage","ManageLanguages","getDisplayStateFromProps","militaryTime","teammateNameDisplay","channelDisplayMode","messageDisplay","collapseDisplay","linkPreviewDisplay","UserSettingsDisplay","timePreference","CATEGORY_DISPLAY_SETTINGS","USE_MILITARY_TIME","teammateNameDisplayPreference","NAME_NAME_FORMAT","channelDisplayModePreference","CHANNEL_DISPLAY_MODE","messageDisplayPreference","MESSAGE_DISPLAY","collapseDisplayPreference","COLLAPSE_DISPLAY","linkPreviewDisplayPreference","LINK_PREVIEW_DISPLAY","updateState","newState","clock","linkpreview","message_display","channel_display_mode","enableTimezone","shouldAutoUpdateTimezone","autoUpdateTimezone","handleChannelDisplayModeRadio","handlemessageDisplayRadio","handleCollapseRadio","handleLinkPreviewRadio","display","createSection","title","firstOption","secondOption","thirdOption","description","firstMessage","radionButtonText","moreColon","firstMessageMore","moreId","moreMessage","secondMessage","secondMessageMore","thirdMessage","messageTitle","messageDesc","format","firstDisplay","secondDisplay","thirdDisplay","thirdSection","describe","collapseSection","defaultDisplay","linkPreviewSection","enableLinkPreviews","clockSection","teammateNameDisplaySection","configTeammateNameDisplay","TEAMMATE_NAME_DISPLAY","SHOW_USERNAME","SHOW_NICKNAME_FULLNAME","SHOW_FULLNAME","timezoneSelection","userTimezone","currentUserTimezone","messageDisplaySection","MESSAGE_DISPLAY_CLEAN","MESSAGE_DISPLAY_COMPACT","channelDisplayModeSection","CHANNEL_DISPLAY_MODE_FULL_SCREEN","CHANNEL_DISPLAY_MODE_CENTERED","languagesSection","userLocale","defaultClientLocale","themeSection","enableThemeSelection","getTimezones","getUserTimezone","automaticTimezoneNotSet","AllowCustomThemes","EnableLinkPreviews","DefaultClientLocale","EnableThemeSelection","ExperimentalTimezone","TeammateNameDisplay","getUserCurrentTimezone","USE_MILITARY_TIME_DEFAULT","CHANNEL_DISPLAY_MODE_DEFAULT","MESSAGE_DISPLAY_DEFAULT","COLLAPSE_DISPLAY_DEFAULT","LINK_PREVIEW_DISPLAY_DEFAULT","holders","usernameReserved","usernameRestrictions","validEmail","emailMatch","incorrectPassword","emptyPassword","validImage","imageTooLarge","uploadImage","uploadImageMobile","fullName","nickname","username","profilePicture","close","position","email","picture","UserSettingsGeneralTab","resendStatus","showSpinner","sendVerificationEmail","handleEmailResend","setTimeout","usernameError","clientError","min","MIN_USERNAME_LENGTH","max","MAX_USERNAME_LENGTH","trackEvent","firstName","lastName","first_name","last_name","confirmEmail","currentPassword","isEmail","emailError","password","emailUpdated","sectionIsSaving","getMe","verificationEnabled","sendEmailNotifications","requireEmailVerification","clearErrors","logError","AnnouncementBarMessages","EMAIL_VERIFICATION_REQUIRED","AnnouncementBarTypes","SUCCESS","server_error_id","setDefaultProfileImage","submitActive","pictureFile","file","AcceptedProfileImageTypes","includes","size","maxFileSize","loadingPicture","uploadProfileImage","setupInitialState","files","originalEmail","createEmailSection","emailSection","emailEnabled","emailVerificationEnabled","helpText","submit","updateEmail","updateConfirmEmail","updateCurrentPassword","submitEmail","GITLAB_SERVICE","GOOGLE_SERVICE","OFFICE365_SERVICE","LDAP_SERVICE","SAML_SERVICE","nameSection","extraInfo","ldapFirstNameAttributeSet","ldapLastNameAttributeSet","samlFirstNameAttributeSet","samlLastNameAttributeSet","updateFirstName","moveCursorToEnd","updateLastName","notifClick","updateTab","notifLink","notify","submitName","nicknameSection","ldapNicknameAttributeSet","samlNicknameAttributeSet","nicknameLabel","updateNickname","MAX_NICKNAME_LENGTH","submitNickname","usernameSection","usernameLabel","updateUsername","submitUsername","positionSection","ldapPositionAttributeSet","samlPositionAttributeSet","positionLabel","updatePosition","MAX_POSITION_LENGTH","submitPosition","pictureSection","submitPicture","last_picture_update","setDefaultProfilePicture","updatePicture","minMessage","date","Date","number","injectIntl","SendEmailNotifications","RequireEmailVerification","parseInt","MaxFileSize","LdapFirstNameAttributeSet","LdapLastNameAttributeSet","SamlFirstNameAttributeSet","SamlLastNameAttributeSet","LdapNicknameAttributeSet","SamlNicknameAttributeSet","SamlPositionAttributeSet","LdapPositionAttributeSet","DesktopNotificationSettings","cancel","getAttribute","setParentState","activityRadio","activity","NotificationLevels","MENTION","NONE","soundSection","soundRadio","sound","ALL","saving","handleMaxUpdateSection","formattedMessageProps","hasSoundOption","handleMinUpdateSection","active","buildMaximizedSetting","buildMinimizedSetting","SECONDS_PER_MINUTE","EmailNotificationSetting","enableEmail","newInterval","emailInterval","CATEGORY_NOTIFICATIONS","EMAIL_INTERVAL","onSubmit","onCancel","localizeMessage","batchingOptions","batchingInfo","siteName","getDerivedStateFromProps","renderMinSettingView","renderMaxSettingView","INTERVAL_NOT_SET","EnableEmailBatching","MESSAGE_MAX_LENGTH","ManageAutoResponder","autoResponderActive","autoResponderMessage","activeToggle","handleAutoResponderChecked","resize","onMessageChanged","getNotificationsStateFromProps","desktop","comments","pushActivity","pushStatus","UserStatuses","AWAY","notify_props","desktop_sound","push_status","auto_responder_active","auto_responder_message","usernameKey","customKeys","firstNameKey","channelKey","mention_keys","splice","join","channel","desktopActivity","desktopSound","customKeysChecked","notifyCommentsLevel","NotificationsTab","mentionKeys","stringKeys","console","log","result","handleCancel","val","customcheck","custommentions","updateCustomMentionKeys","sendPushNotifications","pushActivityRadio","pushStatusRadio","ONLINE","pushStatusSettings","handlePushStatusRadio","OFFLINE","handlePushRadio","handleNotifyCommentsRadio","keysSection","handleUpdateFirstNameKey","updateFirstNameKey","handleUpdateUsernameKey","updateUsernameKey","handleUpdateChannelKey","updateChannelKey","onCustomChange","concat","i","substring","commentsSection","commentsActive","autoResponderSection","enableAutoResponder","setStateValue","pushNotificationSection","createPushNotificationSection","handleEmailRadio","activeTab","SiteName","SendPushNotifications","ExperimentalEnableAutomaticReplies","UserSettingsNotifications","SECTION_MFA","MfaSection","browserHistory","deactivateMfa","mfaEnforced","mfaActive","content","buttonText","removeMfa","setupMfa","renderTitle","mfaAvailable","renderDescription","renderContent","renderHelpText","license","getLicense","mfaLicensed","IsLicensed","MFA","mfaEnabled","EnableMultifactorAuthentication","EnforceMultifactorAuthentication","mfa_active","SECTION_TOKENS","TOKEN_CREATING","TOKEN_CREATED","TOKEN_NOT_CREATING","UserAccessTokenSection","tokenCreationState","handleCancelConfirm","newtokendescription","tokenError","confirmCopyToken","createUserAccessToken","newToken","confirmAction","showConfirmModal","confirmTitle","confirmMessage","token","confirmButton","confirmComplete","confirmHideCancel","UserUtils","roles","handleCreateToken","KeyCodes","ENTER","confirmCreateToken","tokenId","userAccessTokens","revokeToken","revokeUserAccessToken","enableUserAccessToken","disableUserAccessToken","clearUserAccessTokens","getUserAccessTokensForUser","tokenListClass","tokenList","values","activeLink","activeStatus","is_active","deactivateToken","activateToken","confirmRevokeToken","noTokenText","isMobile","newTokenSection","saveTokenKeyPress","stopCreatingToken","startCreatingToken","entities","users","myUserAccessTokens","SECTION_PASSWORD","SECTION_SIGNIN","SECTION_APPS","SecurityTab","getAuthorizedOAuthApps","authorizedApps","newPassword","confirmPassword","passwordError","valid","passwordConfig","defaultState","getDefaultState","savingPassword","updateUserPassword","appId","deauthorizeOAuthApp","app","submitPassword","updateNewPassword","updateConfirmPassword","d","last_password_update","time","emailOption","gitlabOption","googleOption","office365Option","ldapOption","samlOption","enableSignUpWithGitLab","encodeURIComponent","enableSignUpWithGoogle","enableSignUpWithOffice365","enableLdap","enableSaml","enableSignUpWithEmail","link","apps","homepage","deauthorizeApp","icon_url","icon50","wrapperClass","authService","enableOAuthServiceProvider","loadAuthorizedOAuthApps","passwordSection","createPasswordSection","numMethods","signInSection","experimentalEnableAuthenticationTransfer","createSignInSection","oauthSection","createOAuthAppsSection","tokensSection","canUseAccessTokens","ariaLabel","AccessHistoryModal","ActivityLogModal","ownProps","tokensEnabled","EnableUserAccessTokens","userHasTokenRole","EnableOAuthServiceProvider","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableLdap","EnableSaml","EnableSignUpWithOffice365","ExperimentalEnableAuthenticationTransfer","getPasswordConfig","getBool","UserSettingsSidebar","closeUnusedDirectMessages","channelSwitcherOption","sidebarPreference","grouping","sorting","unreadsAtTop","favoriteAtTop","close_unused_direct_messages","channel_switcher_section","updatedSidebarSettings","unreads_at_top","favorite_at_top","CATEGORY_SIDEBAR_SETTINGS","trackSettingChangeIfNecessary","contents","renderAutoCloseDMLabel","sortingId","sortingDefaultMessage","atTopId","atTopDefaultMessage","renderOrganizationLabel","channelSwitcherSectionDescId","channelSwitcherSectionDescDefault","isMac","helpChannelSwitcherText","renderChannelSwitcherLabel","showUnusedOption","showChannelOrganization","channelOrganizationSection","renderChannelOrganizationSection","autoCloseDMSection","renderAutoCloseDMSection","channelSwitcherSection","renderChannelSwitcherSection","getSidebarPreferences","ExperimentalChannelOrganization","CloseUnusedDirectMessages","UserSettings"],"mappings":"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","file":"28.7959435a541d4d4f822c.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getEmailInterval = getEmailInterval;\n\nvar _constants = require(\"../constants\");\n\n// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n// @flow\nfunction getEmailInterval(enableEmailNotification\n/*: boolean*/\n, enableEmailBatching\n/*: number*/\n, emailIntervalPreference\n/*: number*/\n)\n/*: number*/\n{\n  var INTERVAL_NEVER = _constants.Preferences.INTERVAL_NEVER,\n      INTERVAL_IMMEDIATE = _constants.Preferences.INTERVAL_IMMEDIATE,\n      INTERVAL_FIFTEEN_MINUTES = _constants.Preferences.INTERVAL_FIFTEEN_MINUTES,\n      INTERVAL_HOUR = _constants.Preferences.INTERVAL_HOUR;\n  var validValuesWithEmailBatching = [INTERVAL_IMMEDIATE, INTERVAL_NEVER, INTERVAL_FIFTEEN_MINUTES, INTERVAL_HOUR];\n  var validValuesWithoutEmailBatching = [INTERVAL_IMMEDIATE, INTERVAL_NEVER];\n\n  if (!enableEmailNotification) {\n    return INTERVAL_NEVER;\n  } else if (enableEmailBatching && validValuesWithEmailBatching.indexOf(emailIntervalPreference) === -1) {\n    // When email batching is enabled, the default interval is 15 minutes\n    return INTERVAL_FIFTEEN_MINUTES;\n  } else if (!enableEmailBatching && validValuesWithoutEmailBatching.indexOf(emailIntervalPreference) === -1) {\n    // When email batching is not enabled, the default interval is immediately\n    return INTERVAL_IMMEDIATE;\n  }\n\n  return emailIntervalPreference;\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {FormattedMessage} from 'react-intl';\r\n\r\nimport {Preferences} from 'mattermost-redux/constants';\r\n\r\nimport SettingItemMax from 'components/setting_item_max.jsx';\r\nimport SettingItemMin from 'components/setting_item_min.jsx';\r\n\r\nimport {AdvancedSections} from 'utils/constants.jsx';\r\n\r\nexport default class JoinLeaveSection extends React.PureComponent {\r\n    static propTypes = {\r\n        activeSection: PropTypes.string,\r\n        currentUserId: PropTypes.string.isRequired,\r\n        joinLeave: PropTypes.string,\r\n        onUpdateSection: PropTypes.func.isRequired,\r\n        prevActiveSection: PropTypes.string,\r\n        renderOnOffLabel: PropTypes.func.isRequired,\r\n        actions: PropTypes.shape({\r\n            savePreferences: PropTypes.func.isRequired,\r\n        }).isRequired,\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            joinLeaveState: props.joinLeave,\r\n        };\r\n    }\r\n\r\n    handleOnChange = (e) => {\r\n        const value = e.currentTarget.value;\r\n\r\n        this.setState({joinLeaveState: value});\r\n    }\r\n\r\n    handleUpdateSection = (section) => {\r\n        if (!section) {\r\n            this.setState({joinLeaveState: this.props.joinLeave});\r\n        }\r\n\r\n        this.props.onUpdateSection(section);\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        const {actions, currentUserId, onUpdateSection} = this.props;\r\n        const joinLeavePreference = {category: Preferences.CATEGORY_ADVANCED_SETTINGS, user_id: currentUserId, name: Preferences.ADVANCED_FILTER_JOIN_LEAVE, value: this.state.joinLeaveState};\r\n        actions.savePreferences(currentUserId, [joinLeavePreference]);\r\n\r\n        onUpdateSection();\r\n    }\r\n\r\n    render() {\r\n        const {joinLeaveState} = this.state;\r\n        if (this.props.activeSection === AdvancedSections.JOIN_LEAVE) {\r\n            return (\r\n                <SettingItemMax\r\n                    title={\r\n                        <FormattedMessage\r\n                            id='user.settings.advance.joinLeaveTitle'\r\n                            defaultMessage='Enable Join/Leave Messages'\r\n                        />\r\n                    }\r\n                    inputs={[\r\n                        <div key='joinLeaveSetting'>\r\n                            <div className='radio'>\r\n                                <label>\r\n                                    <input\r\n                                        id='joinLeaveOn'\r\n                                        type='radio'\r\n                                        value={'true'}\r\n                                        name={AdvancedSections.JOIN_LEAVE}\r\n                                        checked={joinLeaveState === 'true'}\r\n                                        onChange={this.handleOnChange}\r\n                                    />\r\n                                    <FormattedMessage\r\n                                        id='user.settings.advance.on'\r\n                                        defaultMessage='On'\r\n                                    />\r\n                                </label>\r\n                                <br/>\r\n                            </div>\r\n                            <div className='radio'>\r\n                                <label>\r\n                                    <input\r\n                                        id='joinLeaveOff'\r\n                                        type='radio'\r\n                                        value={'false'}\r\n                                        name={AdvancedSections.JOIN_LEAVE}\r\n                                        checked={joinLeaveState === 'false'}\r\n                                        onChange={this.handleOnChange}\r\n                                    />\r\n                                    <FormattedMessage\r\n                                        id='user.settings.advance.off'\r\n                                        defaultMessage='Off'\r\n                                    />\r\n                                </label>\r\n                                <br/>\r\n                            </div>\r\n                            <div>\r\n                                <br/>\r\n                                <FormattedMessage\r\n                                    id='user.settings.advance.joinLeaveDesc'\r\n                                    defaultMessage='When \"On\", System Messages saying a user has joined or left a channel will be visible. When \"Off\", the System Messages about joining or leaving a channel will be hidden. A message will still show up when you are added to a channel, so you can receive a notification.'\r\n                                />\r\n                            </div>\r\n                        </div>,\r\n                    ]}\r\n                    setting={AdvancedSections.JOIN_LEAVE}\r\n                    submit={this.handleSubmit}\r\n                    saving={this.state.isSaving}\r\n                    server_error={this.state.serverError}\r\n                    updateSection={this.handleUpdateSection}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <SettingItemMin\r\n                title={\r\n                    <FormattedMessage\r\n                        id='user.settings.advance.joinLeaveTitle'\r\n                        defaultMessage='Enable Join/Leave Messages'\r\n                    />\r\n                }\r\n                describe={this.props.renderOnOffLabel(joinLeaveState)}\r\n                focused={this.props.prevActiveSection === AdvancedSections.JOIN_LEAVE}\r\n                section={AdvancedSections.JOIN_LEAVE}\r\n                updateSection={this.handleUpdateSection}\r\n            />\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport {bindActionCreators} from 'redux';\r\nimport {connect} from 'react-redux';\r\n\r\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\r\nimport {Preferences} from 'mattermost-redux/constants';\r\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\r\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\r\n\r\nimport JoinLeaveSection from './join_leave_section.jsx';\r\n\r\nfunction mapStateToProps(state) {\r\n    const joinLeave = getPreference(\r\n        state,\r\n        Preferences.CATEGORY_ADVANCED_SETTINGS,\r\n        Preferences.ADVANCED_FILTER_JOIN_LEAVE,\r\n        'true'\r\n    );\r\n\r\n    return {\r\n        currentUserId: getCurrentUserId(state),\r\n        joinLeave,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators({\r\n            savePreferences,\r\n        }, dispatch),\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(JoinLeaveSection);\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\n\r\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\r\nimport Constants from 'utils/constants.jsx';\r\nimport * as Utils from 'utils/utils.jsx';\r\nimport SettingItemMax from 'components/setting_item_max.jsx';\r\nimport SettingItemMin from 'components/setting_item_min.jsx';\r\nimport ConfirmModal from 'components/confirm_modal.jsx';\r\nimport BackIcon from 'components/icon/back_icon';\r\n\r\nimport JoinLeaveSection from './join_leave_section';\r\n\r\nconst PreReleaseFeatures = Constants.PRE_RELEASE_FEATURES;\r\n\r\nexport default class AdvancedSettingsDisplay extends React.PureComponent {\r\n    static propTypes = {\r\n        currentUser: PropTypes.object.isRequired,\r\n        advancedSettingsCategory: PropTypes.array.isRequired,\r\n        sendOnCtrlEnter: PropTypes.string.isRequired,\r\n        codeBlockOnCtrlEnter: PropTypes.bool,\r\n        formatting: PropTypes.string.isRequired,\r\n        joinLeave: PropTypes.string.isRequired,\r\n        updateSection: PropTypes.func,\r\n        activeSection: PropTypes.string,\r\n        prevActiveSection: PropTypes.string,\r\n        closeModal: PropTypes.func.isRequired,\r\n        collapseModal: PropTypes.func.isRequired,\r\n        enablePreviewFeatures: PropTypes.bool,\r\n        enableUserDeactivation: PropTypes.bool,\r\n        actions: PropTypes.shape({\r\n            savePreferences: PropTypes.func.isRequired,\r\n            updateUserActive: PropTypes.func.isRequired,\r\n            revokeAllSessionsForUser: PropTypes.func.isRequired,\r\n        }).isRequired,\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = this.getStateFromProps();\r\n\r\n        this.prevSections = {\r\n            advancedCtrlSend: 'dummySectionName', // dummy value that should never match any section name\r\n            formatting: 'advancedCtrlSend',\r\n            join_leave: 'formatting',\r\n            advancedPreviewFeatures: 'join_leave',\r\n            deactivateAccount: 'advancedPreviewFeatures',\r\n        };\r\n    }\r\n\r\n    getStateFromProps = () => {\r\n        const advancedSettings = this.props.advancedSettingsCategory;\r\n        const settings = {\r\n            send_on_ctrl_enter: this.props.sendOnCtrlEnter,\r\n            code_block_ctrl_enter: this.props.codeBlockOnCtrlEnter,\r\n            formatting: this.props.formatting,\r\n            join_leave: this.props.joinLeave,\r\n        };\r\n\r\n        const preReleaseFeaturesKeys = Object.keys(PreReleaseFeatures);\r\n        let enabledFeatures = 0;\r\n        for (const as of advancedSettings) {\r\n            for (const key of preReleaseFeaturesKeys) {\r\n                const feature = PreReleaseFeatures[key];\r\n\r\n                if (as.name === Constants.FeatureTogglePrefix + feature.label) {\r\n                    settings[as.name] = as.value;\r\n\r\n                    if (as.value === 'true') {\r\n                        enabledFeatures += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const isSaving = false;\r\n\r\n        const previewFeaturesEnabled = this.props.enablePreviewFeatures;\r\n        const showDeactivateAccountModal = false;\r\n\r\n        return {\r\n            preReleaseFeatures: PreReleaseFeatures,\r\n            settings,\r\n            preReleaseFeaturesKeys,\r\n            enabledFeatures,\r\n            isSaving,\r\n            previewFeaturesEnabled,\r\n            showDeactivateAccountModal,\r\n        };\r\n    }\r\n\r\n    updateSetting = (setting, value) => {\r\n        const settings = this.state.settings;\r\n        settings[setting] = value;\r\n        this.setState(settings);\r\n    }\r\n\r\n    toggleFeature = (feature, checked) => {\r\n        const settings = this.state.settings;\r\n        settings[Constants.FeatureTogglePrefix + feature] = String(checked);\r\n\r\n        let enabledFeatures = 0;\r\n        Object.keys(this.state.settings).forEach((setting) => {\r\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0 && this.state.settings[setting] === 'true') {\r\n                enabledFeatures++;\r\n            }\r\n        });\r\n\r\n        this.setState({settings, enabledFeatures});\r\n    }\r\n\r\n    saveEnabledFeatures = () => {\r\n        const features = [];\r\n        Object.keys(this.state.settings).forEach((setting) => {\r\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0) {\r\n                features.push(setting);\r\n            }\r\n        });\r\n\r\n        this.handleSubmit(features);\r\n    }\r\n\r\n    handleSubmit = async (settings) => {\r\n        const preferences = [];\r\n        const {actions, currentUser} = this.props;\r\n        const userId = currentUser.id;\r\n\r\n        // this should be refactored so we can actually be certain about what type everything is\r\n        (Array.isArray(settings) ? settings : [settings]).forEach((setting) => {\r\n            preferences.push({\r\n                user_id: userId,\r\n                category: Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\r\n                name: setting,\r\n                value: this.state.settings[setting],\r\n            });\r\n        });\r\n\r\n        this.setState({isSaving: true});\r\n        await actions.savePreferences(userId, preferences);\r\n\r\n        this.handleUpdateSection('');\r\n    }\r\n\r\n    handleDeactivateAccountSubmit = async () => {\r\n        const userId = this.props.currentUser.id;\r\n\r\n        this.setState({isSaving: true});\r\n\r\n        this.props.actions.updateUserActive(userId, false).\r\n            then(({error}) => {\r\n                if (error) {\r\n                    this.setState({serverError: error.message});\r\n                }\r\n            });\r\n\r\n        const {data, error} = await this.props.actions.revokeAllSessionsForUser(userId);\r\n        if (data) {\r\n            emitUserLoggedOutEvent();\r\n        } else if (error) {\r\n            this.setState({serverError: error.message});\r\n        }\r\n    }\r\n\r\n    handleShowDeactivateAccountModal = () => {\r\n        this.setState({\r\n            showDeactivateAccountModal: true,\r\n        });\r\n    }\r\n\r\n    handleHideDeactivateAccountModal = () => {\r\n        this.setState({\r\n            showDeactivateAccountModal: false,\r\n        });\r\n    }\r\n\r\n    handleUpdateSection = (section) => {\r\n        if (!section) {\r\n            this.setState(this.getStateFromProps());\r\n        }\r\n        this.setState({isSaving: false});\r\n        this.props.updateSection(section);\r\n    }\r\n\r\n    renderOnOffLabel(enabled) {\r\n        if (enabled === 'false') {\r\n            return (\r\n                <FormattedMessage\r\n                    id='user.settings.advance.off'\r\n                    defaultMessage='Off'\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <FormattedMessage\r\n                id='user.settings.advance.on'\r\n                defaultMessage='On'\r\n            />\r\n        );\r\n    }\r\n\r\n    renderCtrlEnterLabel() {\r\n        const ctrlEnter = this.state.settings.send_on_ctrl_enter;\r\n        const codeBlockCtrlEnter = this.state.settings.code_block_ctrl_enter;\r\n        if (ctrlEnter === 'false' && codeBlockCtrlEnter === 'false') {\r\n            return (\r\n                <FormattedMessage\r\n                    id='user.settings.advance.off'\r\n                    defaultMessage='Off'\r\n                />\r\n            );\r\n        } else if (ctrlEnter === 'true' && codeBlockCtrlEnter === 'true') {\r\n            return (\r\n                <FormattedMessage\r\n                    id='user.settings.advance.onForAllMessages'\r\n                    defaultMessage='On for all messages'\r\n                />\r\n            );\r\n        }\r\n        return (\r\n            <FormattedMessage\r\n                id='user.settings.advance.onForCode'\r\n                defaultMessage='On only for code blocks starting with ```'\r\n            />\r\n        );\r\n    }\r\n\r\n    renderFormattingSection = () => {\r\n        if (this.props.activeSection === 'formatting') {\r\n            return (\r\n                <SettingItemMax\r\n                    title={\r\n                        <FormattedMessage\r\n                            id='user.settings.advance.formattingTitle'\r\n                            defaultMessage='Enable Post Formatting'\r\n                        />\r\n                    }\r\n                    inputs={[\r\n                        <div key='formattingSetting'>\r\n                            <div className='radio'>\r\n                                <label>\r\n                                    <input\r\n                                        id='postFormattingOn'\r\n                                        type='radio'\r\n                                        name='formatting'\r\n                                        checked={this.state.settings.formatting !== 'false'}\r\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'true')}\r\n                                    />\r\n                                    <FormattedMessage\r\n                                        id='user.settings.advance.on'\r\n                                        defaultMessage='On'\r\n                                    />\r\n                                </label>\r\n                                <br/>\r\n                            </div>\r\n                            <div className='radio'>\r\n                                <label>\r\n                                    <input\r\n                                        id='postFormattingOff'\r\n                                        type='radio'\r\n                                        name='formatting'\r\n                                        checked={this.state.settings.formatting === 'false'}\r\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'false')}\r\n                                    />\r\n                                    <FormattedMessage\r\n                                        id='user.settings.advance.off'\r\n                                        defaultMessage='Off'\r\n                                    />\r\n                                </label>\r\n                                <br/>\r\n                            </div>\r\n                            <div>\r\n                                <br/>\r\n                                <FormattedMessage\r\n                                    id='user.settings.advance.formattingDesc'\r\n                                    defaultMessage='If enabled, posts will be formatted to create links, show emoji, style the text, and add line breaks. By default, this setting is enabled.'\r\n                                />\r\n                            </div>\r\n                        </div>,\r\n                    ]}\r\n                    setting={'formatting'}\r\n                    submit={this.handleSubmit}\r\n                    saving={this.state.isSaving}\r\n                    server_error={this.state.serverError}\r\n                    updateSection={this.handleUpdateSection}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <SettingItemMin\r\n                title={\r\n                    <FormattedMessage\r\n                        id='user.settings.advance.formattingTitle'\r\n                        defaultMessage='Enable Post Formatting'\r\n                    />\r\n                }\r\n                describe={this.renderOnOffLabel(this.state.settings.formatting)}\r\n                focused={this.props.prevActiveSection === this.prevSections.formatting}\r\n                section={'formatting'}\r\n                updateSection={this.handleUpdateSection}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderFeatureLabel(feature) {\r\n        switch (feature) {\r\n        case 'MARKDOWN_PREVIEW':\r\n            return (\r\n                <FormattedMessage\r\n                    id='user.settings.advance.markdown_preview'\r\n                    defaultMessage='Show markdown preview option in message input box'\r\n                />\r\n            );\r\n        default:\r\n            return null;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const serverError = this.state.serverError || null;\r\n        let ctrlSendSection;\r\n\r\n        if (this.props.activeSection === 'advancedCtrlSend') {\r\n            const ctrlSendActive = [\r\n                this.state.settings.send_on_ctrl_enter === 'true',\r\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'true',\r\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'false',\r\n            ];\r\n\r\n            const inputs = [\r\n                <div key='ctrlSendSetting'>\r\n                    <div className='radio'>\r\n                        <label>\r\n                            <input\r\n                                id='ctrlSendOn'\r\n                                type='radio'\r\n                                name='sendOnCtrlEnter'\r\n                                checked={ctrlSendActive[0]}\r\n                                onChange={() => {\r\n                                    this.updateSetting('send_on_ctrl_enter', 'true');\r\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\r\n                                }}\r\n                            />\r\n                            <FormattedMessage\r\n                                id='user.settings.advance.onForAllMessages'\r\n                                defaultMessage='On for all messages'\r\n                            />\r\n                        </label>\r\n                        <br/>\r\n                    </div>\r\n                    <div className='radio'>\r\n                        <label>\r\n                            <input\r\n                                id='ctrlSendOnForCode'\r\n                                type='radio'\r\n                                name='sendOnCtrlEnter'\r\n                                checked={ctrlSendActive[1]}\r\n                                onChange={() => {\r\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\r\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\r\n                                }}\r\n                            />\r\n                            <FormattedMessage\r\n                                id='user.settings.advance.onForCode'\r\n                                defaultMessage='On only for code blocks starting with ```'\r\n                            />\r\n                        </label>\r\n                        <br/>\r\n                    </div>\r\n                    <div className='radio'>\r\n                        <label>\r\n                            <input\r\n                                id='ctrlSendOff'\r\n                                type='radio'\r\n                                name='sendOnCtrlEnter'\r\n                                checked={ctrlSendActive[2]}\r\n                                onChange={() => {\r\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\r\n                                    this.updateSetting('code_block_ctrl_enter', 'false');\r\n                                }}\r\n                            />\r\n                            <FormattedMessage\r\n                                id='user.settings.advance.off'\r\n                                defaultMessage='Off'\r\n                            />\r\n                        </label>\r\n                        <br/>\r\n                    </div>\r\n                    <div>\r\n                        <br/>\r\n                        <FormattedMessage\r\n                            id='user.settings.advance.sendDesc'\r\n                            defaultMessage='When enabled, CTRL + ENTER will send the message and ENTER inserts a new line.'\r\n                        />\r\n                    </div>\r\n                </div>,\r\n            ];\r\n            ctrlSendSection = (\r\n                <SettingItemMax\r\n                    title={\r\n                        <FormattedMessage\r\n                            id='user.settings.advance.sendTitle'\r\n                            defaultMessage='Send messages on CTRL+ENTER'\r\n                        />\r\n                    }\r\n                    inputs={inputs}\r\n                    submit={this.handleSubmit.bind(this, ['send_on_ctrl_enter', 'code_block_ctrl_enter'])}\r\n                    saving={this.state.isSaving}\r\n                    server_error={serverError}\r\n                    updateSection={this.handleUpdateSection}\r\n                />\r\n            );\r\n        } else {\r\n            ctrlSendSection = (\r\n                <SettingItemMin\r\n                    title={\r\n                        <FormattedMessage\r\n                            id='user.settings.advance.sendTitle'\r\n                            defaultMessage='Send messages on CTRL+ENTER'\r\n                        />\r\n                    }\r\n                    describe={this.renderCtrlEnterLabel()}\r\n                    focused={this.props.prevActiveSection === this.prevSections.advancedCtrlSend}\r\n                    section={'advancedCtrlSend'}\r\n                    updateSection={this.handleUpdateSection}\r\n                />\r\n            );\r\n        }\r\n\r\n        const formattingSection = this.renderFormattingSection();\r\n        let formattingSectionDivider = null;\r\n        if (formattingSection) {\r\n            formattingSectionDivider = <div className='divider-light'/>;\r\n        }\r\n\r\n        let previewFeaturesSection;\r\n        let previewFeaturesSectionDivider;\r\n        if (this.state.previewFeaturesEnabled && this.state.preReleaseFeaturesKeys.length > 0) {\r\n            previewFeaturesSectionDivider = (\r\n                <div className='divider-light'/>\r\n            );\r\n\r\n            if (this.props.activeSection === 'advancedPreviewFeatures') {\r\n                const inputs = [];\r\n\r\n                this.state.preReleaseFeaturesKeys.forEach((key) => {\r\n                    const feature = this.state.preReleaseFeatures[key];\r\n                    inputs.push(\r\n                        <div key={'advancedPreviewFeatures_' + feature.label}>\r\n                            <div className='checkbox'>\r\n                                <label>\r\n                                    <input\r\n                                        id={'advancedPreviewFeatures' + feature.label}\r\n                                        type='checkbox'\r\n                                        checked={this.state.settings[Constants.FeatureTogglePrefix + feature.label] === 'true'}\r\n                                        onChange={(e) => {\r\n                                            this.toggleFeature(feature.label, e.target.checked);\r\n                                        }}\r\n                                    />\r\n                                    {this.renderFeatureLabel(key)}\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                inputs.push(\r\n                    <div key='advancedPreviewFeatures_helptext'>\r\n                        <br/>\r\n                        <FormattedMessage\r\n                            id='user.settings.advance.preReleaseDesc'\r\n                            defaultMessage=\"Check any pre-released features you'd like to preview.  You may also need to refresh the page before the setting will take effect.\"\r\n                        />\r\n                    </div>\r\n                );\r\n                previewFeaturesSection = (\r\n                    <SettingItemMax\r\n                        title={\r\n                            <FormattedMessage\r\n                                id='user.settings.advance.preReleaseTitle'\r\n                                defaultMessage='Preview pre-release features'\r\n                            />\r\n                        }\r\n                        inputs={inputs}\r\n                        submit={this.saveEnabledFeatures}\r\n                        saving={this.state.isSaving}\r\n                        server_error={serverError}\r\n                        updateSection={this.handleUpdateSection}\r\n                    />\r\n                );\r\n            } else {\r\n                previewFeaturesSection = (\r\n                    <SettingItemMin\r\n                        title={Utils.localizeMessage('user.settings.advance.preReleaseTitle', 'Preview pre-release features')}\r\n                        describe={\r\n                            <FormattedMessage\r\n                                id='user.settings.advance.enabledFeatures'\r\n                                defaultMessage='{count, number} {count, plural, one {Feature} other {Features}} Enabled'\r\n                                values={{count: this.state.enabledFeatures}}\r\n                            />\r\n                        }\r\n                        focused={this.props.prevActiveSection === this.prevSections.advancedPreviewFeatures}\r\n                        section={'advancedPreviewFeatures'}\r\n                        updateSection={this.handleUpdateSection}\r\n                    />\r\n                );\r\n            }\r\n        }\r\n\r\n        let deactivateAccountSection = '';\r\n        let makeConfirmationModal = '';\r\n        const currentUser = this.props.currentUser;\r\n\r\n        if (currentUser.auth_service === '' && this.props.enableUserDeactivation) {\r\n            if (this.props.activeSection === 'deactivateAccount') {\r\n                deactivateAccountSection = (\r\n                    <SettingItemMax\r\n                        title={\r\n                            <FormattedMessage\r\n                                id='user.settings.advance.deactivateAccountTitle'\r\n                                defaultMessage='Deactivate Account'\r\n                            />\r\n                        }\r\n                        inputs={[\r\n                            <div key='formattingSetting'>\r\n                                <div>\r\n                                    <br/>\r\n                                    <FormattedMessage\r\n                                        id='user.settings.advance.deactivateDesc'\r\n                                        defaultMessage='Deactivating your account removes your ability to log in to this server and disables all email and mobile notifications. To reactivate your account, contact your System Administrator.'\r\n                                    />\r\n                                </div>\r\n                            </div>,\r\n                        ]}\r\n                        saveButtonText={'Deactivate'}\r\n                        setting={'deactivateAccount'}\r\n                        submit={this.handleShowDeactivateAccountModal}\r\n                        saving={this.state.isSaving}\r\n                        server_error={this.state.serverError}\r\n                        updateSection={this.handleUpdateSection}\r\n                    />\r\n                );\r\n            } else {\r\n                deactivateAccountSection = (\r\n                    <SettingItemMin\r\n                        title={\r\n                            <FormattedMessage\r\n                                id='user.settings.advance.deactivateAccountTitle'\r\n                                defaultMessage='Deactivate Account'\r\n                            />\r\n                        }\r\n                        describe={\r\n                            <FormattedMessage\r\n                                id='user.settings.advance.deactivateDescShort'\r\n                                defaultMessage=\"Click 'Edit' to deactivate your account\"\r\n                            />\r\n                        }\r\n                        focused={this.props.prevActiveSection === this.prevSections.deactivateAccount}\r\n                        section={'deactivateAccount'}\r\n                        updateSection={this.handleUpdateSection}\r\n                    />\r\n                );\r\n            }\r\n\r\n            const confirmButtonClass = 'btn btn-danger';\r\n            const deactivateMemberButton = (\r\n                <FormattedMessage\r\n                    id='user.settings.advance.deactivate_member_modal.deactivateButton'\r\n                    defaultMessage='Yes, deactivate my account'\r\n                />\r\n            );\r\n\r\n            makeConfirmationModal = (\r\n                <ConfirmModal\r\n                    show={this.state.showDeactivateAccountModal}\r\n                    title={\r\n                        <FormattedMessage\r\n                            id='user.settings.advance.confirmDeactivateAccountTitle'\r\n                            defaultMessage='Confirm Deactivation'\r\n                        />\r\n                    }\r\n                    message={\r\n                        <FormattedMessage\r\n                            id='user.settings.advance.confirmDeactivateDesc'\r\n                            defaultMessage='Are you sure you want to deactivate your account? This can only be reversed by your System Administrator.'\r\n                        />\r\n                    }\r\n                    confirmButtonClass={confirmButtonClass}\r\n                    confirmButtonText={deactivateMemberButton}\r\n                    onConfirm={this.handleDeactivateAccountSubmit}\r\n                    onCancel={this.handleHideDeactivateAccountModal}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='modal-header'>\r\n                    <button\r\n                        id='closeButton'\r\n                        type='button'\r\n                        className='close'\r\n                        data-dismiss='modal'\r\n                        aria-label='Close'\r\n                        onClick={this.props.closeModal}\r\n                    >\r\n                        <span aria-hidden='true'>{'×'}</span>\r\n                    </button>\r\n                    <h4\r\n                        className='modal-title'\r\n                        ref='title'\r\n                    >\r\n                        <div className='modal-back'>\r\n                            <span onClick={this.props.collapseModal}>\r\n                                <BackIcon/>\r\n                            </span>\r\n                        </div>\r\n                        <FormattedMessage\r\n                            id='user.settings.advance.title'\r\n                            defaultMessage='Advanced Settings'\r\n                        />\r\n                    </h4>\r\n                </div>\r\n                <div className='user-settings'>\r\n                    <h3 className='tab-header'>\r\n                        <FormattedMessage\r\n                            id='user.settings.advance.title'\r\n                            defaultMessage='Advanced Settings'\r\n                        />\r\n                    </h3>\r\n                    <div className='divider-dark first'/>\r\n                    {ctrlSendSection}\r\n                    {formattingSectionDivider}\r\n                    {formattingSection}\r\n                    <div className='divider-light'/>\r\n                    <JoinLeaveSection\r\n                        activeSection={this.props.activeSection}\r\n                        onUpdateSection={this.handleUpdateSection}\r\n                        prevActiveSection={this.props.prevActiveSection}\r\n                        renderOnOffLabel={this.renderOnOffLabel}\r\n                    />\r\n                    {previewFeaturesSectionDivider}\r\n                    {previewFeaturesSection}\r\n                    {formattingSectionDivider}\r\n                    {deactivateAccountSection}\r\n                    <div className='divider-dark'/>\r\n                    {makeConfirmationModal}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\n\r\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\r\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\r\nimport {get, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\r\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\r\nimport {updateUserActive, revokeAllSessionsForUser} from 'mattermost-redux/actions/users';\r\n\r\nimport {Preferences} from 'utils/constants.jsx';\r\n\r\nimport AdvancedSettingsDisplay from './user_settings_advanced.jsx';\r\n\r\nfunction makeMapStateToProps() {\r\n    const getAdvancedSettingsCategory = makeGetCategory();\r\n\r\n    return (state) => {\r\n        const config = getConfig(state);\r\n\r\n        const enablePreviewFeatures = config.EnablePreviewFeatures === 'true';\r\n        const enableUserDeactivation = config.EnableUserDeactivation === 'true';\r\n\r\n        return {\r\n            advancedSettingsCategory: getAdvancedSettingsCategory(state, Preferences.CATEGORY_ADVANCED_SETTINGS),\r\n            sendOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter', 'false'),\r\n            codeBlockOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', 'true'),\r\n            formatting: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'formatting', 'true'),\r\n            joinLeave: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', 'true'),\r\n            currentUser: getCurrentUser(state),\r\n            enablePreviewFeatures,\r\n            enableUserDeactivation,\r\n        };\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators({\r\n            savePreferences,\r\n            updateUserActive,\r\n            revokeAllSessionsForUser,\r\n        }, dispatch),\r\n    };\r\n}\r\n\r\nexport default connect(makeMapStateToProps, mapDispatchToProps)(AdvancedSettingsDisplay);\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport {ChromePicker} from 'react-color';\r\n\r\nclass ColorInput extends React.Component {\r\n    static propTypes = {\r\n\r\n        /*\r\n         * Selected color\r\n         */\r\n        color: PropTypes.string.isRequired,\r\n\r\n        /*\r\n         * Function called when color changed. Takes hex format of color Ex: #ffeec0\r\n         */\r\n        onChange: PropTypes.func,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            idOpened: false,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const {isOpened: prevIsOpened} = prevState;\r\n        const {isOpened} = this.state;\r\n\r\n        if (isOpened !== prevIsOpened) {\r\n            if (isOpened) {\r\n                document.addEventListener('click', this.checkClick);\r\n            } else {\r\n                document.removeEventListener('click', this.checkClick);\r\n            }\r\n        }\r\n    }\r\n\r\n    checkClick = (e) => {\r\n        const colorPickerDOMNode = ReactDom.findDOMNode(this.colorPicker);\r\n        if (!colorPickerDOMNode || !colorPickerDOMNode.contains(e.target)) {\r\n            this.setState({isOpened: false});\r\n        }\r\n    };\r\n\r\n    togglePicker = () => {\r\n        this.setState({isOpened: !this.state.isOpened});\r\n    };\r\n\r\n    handleChange = (newColorData) => {\r\n        const {hex} = newColorData;\r\n        const {onChange: handleChange} = this.props;\r\n\r\n        if (handleChange) {\r\n            handleChange(hex);\r\n        }\r\n    };\r\n\r\n    getColorPicker = (node) => {\r\n        this.colorPicker = node;\r\n    };\r\n\r\n    render() {\r\n        const {color} = this.props;\r\n        const {isOpened} = this.state;\r\n\r\n        return (\r\n            <div className='color-input input-group'>\r\n                <input\r\n                    className='form-control'\r\n                    type='text'\r\n                    value={color}\r\n                    readOnly={true}\r\n                />\r\n                <span\r\n                    className='input-group-addon'\r\n                    onClick={this.togglePicker}\r\n                >\r\n                    <i\r\n                        className='color-icon'\r\n                        style={{\r\n                            backgroundColor: color,\r\n                        }}\r\n                    />\r\n                </span>\r\n                {isOpened && (\r\n                    <div\r\n                        ref={this.getColorPicker}\r\n                        className='color-popover'\r\n                    >\r\n                        <ChromePicker\r\n                            color={color}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ColorInput;\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ColorInput from 'components/color_input';\r\n\r\nclass ColorChooser extends React.Component {\r\n    static propTypes = {\r\n\r\n        /*\r\n         * The id of setting that we will change\r\n         */\r\n        id: PropTypes.string.isRequired,\r\n\r\n        /*\r\n         * The label of setting that we will choose\r\n         */\r\n        label: PropTypes.string.isRequired,\r\n\r\n        /*\r\n         * Selected color\r\n         */\r\n        color: PropTypes.string.isRequired,\r\n\r\n        /*\r\n         * Function called when color changed takes 2 arguments: Id of changing setting and new color\r\n         */\r\n        onChange: PropTypes.func,\r\n    }\r\n\r\n    handleChange = (newColor) => {\r\n        const {id, onChange: handleChange} = this.props;\r\n        if (handleChange) {\r\n            handleChange(id, newColor);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {label, color} = this.props;\r\n        return (\r\n            <div>\r\n                <label className='custom-label'>{label}</label>\r\n                <ColorInput\r\n                    color={color}\r\n                    onChange={this.handleChange}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ColorChooser;\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport $ from 'jquery';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {OverlayTrigger, Popover} from 'react-bootstrap';\r\nimport {defineMessages, FormattedMessage, intlShape} from 'react-intl';\r\n\r\nimport {t} from 'utils/i18n';\r\nimport 'bootstrap-colorpicker';\r\n\r\nimport Constants from 'utils/constants.jsx';\r\nimport * as UserAgent from 'utils/user_agent.jsx';\r\n\r\nimport ColorChooser from './color_chooser.jsx';\r\n\r\nconst messages = defineMessages({\r\n    sidebarBg: {\r\n        id: t('user.settings.custom_theme.sidebarBg'),\r\n        defaultMessage: 'Sidebar BG',\r\n    },\r\n    sidebarText: {\r\n        id: t('user.settings.custom_theme.sidebarText'),\r\n        defaultMessage: 'Sidebar Text',\r\n    },\r\n    sidebarHeaderBg: {\r\n        id: t('user.settings.custom_theme.sidebarHeaderBg'),\r\n        defaultMessage: 'Sidebar Header BG',\r\n    },\r\n    sidebarHeaderTextColor: {\r\n        id: t('user.settings.custom_theme.sidebarHeaderTextColor'),\r\n        defaultMessage: 'Sidebar Header Text',\r\n    },\r\n    sidebarUnreadText: {\r\n        id: t('user.settings.custom_theme.sidebarUnreadText'),\r\n        defaultMessage: 'Sidebar Unread Text',\r\n    },\r\n    sidebarTextHoverBg: {\r\n        id: t('user.settings.custom_theme.sidebarTextHoverBg'),\r\n        defaultMessage: 'Sidebar Text Hover BG',\r\n    },\r\n    sidebarTextActiveBorder: {\r\n        id: t('user.settings.custom_theme.sidebarTextActiveBorder'),\r\n        defaultMessage: 'Sidebar Text Active Border',\r\n    },\r\n    sidebarTextActiveColor: {\r\n        id: t('user.settings.custom_theme.sidebarTextActiveColor'),\r\n        defaultMessage: 'Sidebar Text Active Color',\r\n    },\r\n    onlineIndicator: {\r\n        id: t('user.settings.custom_theme.onlineIndicator'),\r\n        defaultMessage: 'Online Indicator',\r\n    },\r\n    awayIndicator: {\r\n        id: t('user.settings.custom_theme.awayIndicator'),\r\n        defaultMessage: 'Away Indicator',\r\n    },\r\n    dndIndicator: {\r\n        id: t('user.settings.custom_theme.dndIndicator'),\r\n        defaultMessage: 'Do Not Disturb Indicator',\r\n    },\r\n    mentionBg: {\r\n        id: t('user.settings.custom_theme.mentionBg'),\r\n        defaultMessage: 'Mention Jewel BG',\r\n    },\r\n    mentionColor: {\r\n        id: t('user.settings.custom_theme.mentionColor'),\r\n        defaultMessage: 'Mention Jewel Text',\r\n    },\r\n    centerChannelBg: {\r\n        id: t('user.settings.custom_theme.centerChannelBg'),\r\n        defaultMessage: 'Center Channel BG',\r\n    },\r\n    centerChannelColor: {\r\n        id: t('user.settings.custom_theme.centerChannelColor'),\r\n        defaultMessage: 'Center Channel Text',\r\n    },\r\n    newMessageSeparator: {\r\n        id: t('user.settings.custom_theme.newMessageSeparator'),\r\n        defaultMessage: 'New Message Separator',\r\n    },\r\n    linkColor: {\r\n        id: t('user.settings.custom_theme.linkColor'),\r\n        defaultMessage: 'Link Color',\r\n    },\r\n    buttonBg: {\r\n        id: t('user.settings.custom_theme.buttonBg'),\r\n        defaultMessage: 'Button BG',\r\n    },\r\n    buttonColor: {\r\n        id: t('user.settings.custom_theme.buttonColor'),\r\n        defaultMessage: 'Button Text',\r\n    },\r\n    errorTextColor: {\r\n        id: t('user.settings.custom_theme.errorTextColor'),\r\n        defaultMessage: 'Error Text Color',\r\n    },\r\n    mentionHighlightBg: {\r\n        id: t('user.settings.custom_theme.mentionHighlightBg'),\r\n        defaultMessage: 'Mention Highlight BG',\r\n    },\r\n    mentionHighlightLink: {\r\n        id: t('user.settings.custom_theme.mentionHighlightLink'),\r\n        defaultMessage: 'Mention Highlight Link',\r\n    },\r\n    codeTheme: {\r\n        id: t('user.settings.custom_theme.codeTheme'),\r\n        defaultMessage: 'Code Theme',\r\n    },\r\n});\r\n\r\nexport default class CustomThemeChooser extends React.Component {\r\n    static propTypes = {\r\n        theme: PropTypes.object.isRequired,\r\n        updateTheme: PropTypes.func.isRequired,\r\n    };\r\n\r\n    static contextTypes = {\r\n        intl: intlShape.isRequired,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const copyTheme = this.setCopyTheme(this.props.theme);\r\n\r\n        this.state = {\r\n            copyTheme,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        $('.group--code').on('change', this.onCodeThemeChange);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        $('.group--code').off('change', this.onCodeThemeChange);\r\n    }\r\n\r\n    handleColorChange = (settingId, color) => {\r\n        const {updateTheme, theme} = this.props;\r\n        if (theme[settingId] !== color) {\r\n            const newTheme = {\r\n                ...theme,\r\n                type: 'custom',\r\n                [settingId]: color,\r\n            };\r\n\r\n            // For backwards compatability\r\n            if (settingId === 'mentionBg') {\r\n                newTheme.mentionBj = color;\r\n            }\r\n\r\n            updateTheme(newTheme);\r\n\r\n            const copyTheme = this.setCopyTheme(newTheme);\r\n\r\n            this.setState({\r\n                copyTheme,\r\n            });\r\n        }\r\n    }\r\n\r\n    setCopyTheme(theme) {\r\n        const copyTheme = Object.assign({}, theme);\r\n        delete copyTheme.type;\r\n        delete copyTheme.image;\r\n\r\n        return JSON.stringify(copyTheme);\r\n    }\r\n\r\n    pasteBoxChange = (e) => {\r\n        let text = '';\r\n\r\n        if (window.clipboardData && window.clipboardData.getData) { // IE\r\n            text = window.clipboardData.getData('Text');\r\n        } else {\r\n            text = e.clipboardData.getData('Text');//e.clipboardData.getData('text/plain');\r\n        }\r\n\r\n        if (text.length === 0) {\r\n            return;\r\n        }\r\n\r\n        let theme;\r\n        try {\r\n            theme = JSON.parse(text);\r\n        } catch (err) {\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            copyTheme: JSON.stringify(theme),\r\n        });\r\n\r\n        theme.type = 'custom';\r\n        this.props.updateTheme(theme);\r\n    }\r\n\r\n    onChangeHandle = (e) => {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    selectTheme = () => {\r\n        const textarea = this.refs.textarea;\r\n        textarea.focus();\r\n        textarea.setSelectionRange(0, this.state.copyTheme.length);\r\n    }\r\n\r\n    toggleSidebarStyles = (e) => {\r\n        e.preventDefault();\r\n\r\n        $(this.refs.sidebarStylesHeader).toggleClass('open');\r\n        this.toggleSection(this.refs.sidebarStyles);\r\n    }\r\n\r\n    toggleCenterChannelStyles = (e) => {\r\n        e.preventDefault();\r\n\r\n        $(this.refs.centerChannelStylesHeader).toggleClass('open');\r\n        this.toggleSection(this.refs.centerChannelStyles);\r\n    }\r\n\r\n    toggleLinkAndButtonStyles = (e) => {\r\n        e.preventDefault();\r\n\r\n        $(this.refs.linkAndButtonStylesHeader).toggleClass('open');\r\n        this.toggleSection(this.refs.linkAndButtonStyles);\r\n    }\r\n\r\n    toggleSection(node) {\r\n        if (UserAgent.isIos()) {\r\n            // iOS doesn't support jQuery animations\r\n            $(node).toggleClass('open');\r\n        } else {\r\n            $(node).slideToggle();\r\n        }\r\n    }\r\n\r\n    onCodeThemeChange = (e) => {\r\n        const theme = {\r\n            ...this.props.theme,\r\n            type: 'custom',\r\n            codeTheme: e.target.value,\r\n        };\r\n\r\n        this.props.updateTheme(theme);\r\n    }\r\n\r\n    render() {\r\n        const {formatMessage} = this.context.intl;\r\n        const theme = this.props.theme;\r\n\r\n        const sidebarElements = [];\r\n        const centerChannelElements = [];\r\n        const linkAndButtonElements = [];\r\n        Constants.THEME_ELEMENTS.forEach((element, index) => {\r\n            if (element.id === 'codeTheme') {\r\n                const codeThemeOptions = [];\r\n                let codeThemeURL = '';\r\n\r\n                element.themes.forEach((codeTheme, codeThemeIndex) => {\r\n                    if (codeTheme.id === theme[element.id]) {\r\n                        codeThemeURL = codeTheme.iconURL;\r\n                    }\r\n                    codeThemeOptions.push(\r\n                        <option\r\n                            key={'code-theme-key' + codeThemeIndex}\r\n                            value={codeTheme.id}\r\n                        >\r\n                            {codeTheme.uiName}\r\n                        </option>\r\n                    );\r\n                });\r\n\r\n                var popoverContent = (\r\n                    <Popover\r\n                        bsStyle='info'\r\n                        id='code-popover'\r\n                        className='code-popover'\r\n                    >\r\n                        <img\r\n                            width='200'\r\n                            alt={'code theme image'}\r\n                            src={codeThemeURL}\r\n                        />\r\n                    </Popover>\r\n                );\r\n\r\n                centerChannelElements.push(\r\n                    <div\r\n                        className='col-sm-6 form-group'\r\n                        key={'custom-theme-key' + index}\r\n                    >\r\n                        <label className='custom-label'>{formatMessage(messages[element.id])}</label>\r\n                        <div\r\n                            className='input-group theme-group group--code dropdown'\r\n                            id={element.id}\r\n                        >\r\n                            <select\r\n                                id='codeThemeSelect'\r\n                                className='form-control'\r\n                                type='text'\r\n                                defaultValue={theme[element.id]}\r\n                            >\r\n                                {codeThemeOptions}\r\n                            </select>\r\n                            <OverlayTrigger\r\n                                trigger={['hover', 'focus']}\r\n                                placement='top'\r\n                                overlay={popoverContent}\r\n                                ref='headerOverlay'\r\n                            >\r\n                                <span className='input-group-addon'>\r\n                                    <img\r\n                                        alt={'code theme image'}\r\n                                        src={codeThemeURL}\r\n                                    />\r\n                                </span>\r\n                            </OverlayTrigger>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else if (element.group === 'centerChannelElements') {\r\n                centerChannelElements.push(\r\n                    <div\r\n                        className='col-sm-6 form-group element'\r\n                        key={'custom-theme-key' + index}\r\n                    >\r\n                        <ColorChooser\r\n                            id={element.id}\r\n                            label={formatMessage(messages[element.id])}\r\n                            color={theme[element.id]}\r\n                            onChange={this.handleColorChange}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else if (element.group === 'sidebarElements') {\r\n                // Need to support old typo mentionBj element for mentionBg\r\n                let color = theme[element.id];\r\n                if (!color && element.id === 'mentionBg') {\r\n                    color = theme.mentionBj;\r\n                }\r\n\r\n                sidebarElements.push(\r\n                    <div\r\n                        className='col-sm-6 form-group element'\r\n                        key={'custom-theme-key' + index}\r\n                    >\r\n                        <ColorChooser\r\n                            id={element.id}\r\n                            label={formatMessage(messages[element.id])}\r\n                            color={color}\r\n                            onChange={this.handleColorChange}\r\n                        />\r\n                    </div>\r\n                );\r\n            } else {\r\n                linkAndButtonElements.push(\r\n                    <div\r\n                        className='col-sm-6 form-group element'\r\n                        key={'custom-theme-key' + index}\r\n                    >\r\n                        <ColorChooser\r\n                            id={element.id}\r\n                            label={formatMessage(messages[element.id])}\r\n                            color={theme[element.id]}\r\n                            onChange={this.handleColorChange}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n        });\r\n\r\n        const pasteBox = (\r\n            <div className='col-sm-12'>\r\n                <label className='custom-label'>\r\n                    <FormattedMessage\r\n                        id='user.settings.custom_theme.copyPaste'\r\n                        defaultMessage='Copy and paste to share theme colors:'\r\n                    />\r\n                </label>\r\n                <textarea\r\n                    ref='textarea'\r\n                    className='form-control'\r\n                    id='pasteBox'\r\n                    value={this.state.copyTheme}\r\n                    onPaste={this.pasteBoxChange}\r\n                    onChange={this.onChangeHandle}\r\n                    onClick={this.selectTheme}\r\n                />\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div className='appearance-section padding-top'>\r\n                <div className='theme-elements row'>\r\n                    <div\r\n                        ref='sidebarStylesHeader'\r\n                        className='theme-elements__header'\r\n                        onClick={this.toggleSidebarStyles}\r\n                    >\r\n                        <FormattedMessage\r\n                            id='user.settings.custom_theme.sidebarTitle'\r\n                            defaultMessage='Sidebar Styles'\r\n                        />\r\n                        <div className='header__icon'>\r\n                            <i\r\n                                className='fa fa-plus'\r\n                                title={formatMessage({id: 'generic_icons.expand', defaultMessage: 'Expand Icon'})}\r\n                            />\r\n                            <i\r\n                                className='fa fa-minus'\r\n                                title={formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div\r\n                        ref='sidebarStyles'\r\n                        className='theme-elements__body'\r\n                    >\r\n                        {sidebarElements}\r\n                    </div>\r\n                </div>\r\n                <div\r\n                    id='centerChannelStyles'\r\n                    className='theme-elements row'\r\n                >\r\n                    <div\r\n                        ref='centerChannelStylesHeader'\r\n                        className='theme-elements__header'\r\n                        onClick={this.toggleCenterChannelStyles}\r\n                    >\r\n                        <FormattedMessage\r\n                            id='user.settings.custom_theme.centerChannelTitle'\r\n                            defaultMessage='Center Channel Styles'\r\n                        />\r\n                        <div className='header__icon'>\r\n                            <i\r\n                                className='fa fa-plus'\r\n                                title={formatMessage({id: 'generic_icons.expand', defaultMessage: 'Expand Icon'})}\r\n                            />\r\n                            <i\r\n                                className='fa fa-minus'\r\n                                title={formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div\r\n                        ref='centerChannelStyles'\r\n                        className='theme-elements__body'\r\n                    >\r\n                        {centerChannelElements}\r\n                    </div>\r\n                </div>\r\n                <div className='theme-elements row form-group'>\r\n                    <div\r\n                        ref='linkAndButtonStylesHeader'\r\n                        className='theme-elements__header'\r\n                        onClick={this.toggleLinkAndButtonStyles}\r\n                    >\r\n                        <FormattedMessage\r\n                            id='user.settings.custom_theme.linkButtonTitle'\r\n                            defaultMessage='Link and Button Styles'\r\n                        />\r\n                        <div className='header__icon'>\r\n                            <i\r\n                                className='fa fa-plus'\r\n                                title={formatMessage({id: 'generic_icons.expand', defaultMessage: 'Expand Icon'})}\r\n                            />\r\n                            <i\r\n                                className='fa fa-minus'\r\n                                title={formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div\r\n                        ref='linkAndButtonStyles'\r\n                        className='theme-elements__body'\r\n                    >\r\n                        {linkAndButtonElements}\r\n                    </div>\r\n                </div>\r\n                <div className='row'>\r\n                    {pasteBox}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport $ from 'jquery';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nimport Constants from 'utils/constants.jsx';\r\nimport * as Utils from 'utils/utils.jsx';\r\n\r\nexport default class PremadeThemeChooser extends React.Component {\r\n    render() {\r\n        const theme = this.props.theme;\r\n\r\n        const premadeThemes = [];\r\n        const allowedThemes = this.props.allowedThemes;\r\n        const hasAllowedThemes = allowedThemes.length > 1 || (allowedThemes[0] && allowedThemes[0].trim().length > 0);\r\n\r\n        for (const k in Constants.THEMES) {\r\n            if (Constants.THEMES.hasOwnProperty(k)) {\r\n                if (hasAllowedThemes && allowedThemes.indexOf(k) < 0) {\r\n                    continue;\r\n                }\r\n\r\n                const premadeTheme = $.extend(true, {}, Constants.THEMES[k]);\r\n\r\n                let activeClass = '';\r\n                if (premadeTheme.type === theme.type) {\r\n                    activeClass = 'active';\r\n                }\r\n\r\n                premadeThemes.push(\r\n                    <div\r\n                        className='col-xs-6 col-sm-3 premade-themes'\r\n                        key={'premade-theme-key' + k}\r\n                    >\r\n                        <div\r\n                            id={`premadeTheme${premadeTheme.type.replace(' ', '')}`}\r\n                            className={activeClass}\r\n                            onClick={() => this.props.updateTheme(premadeTheme)}\r\n                        >\r\n                            <label>\r\n                                <img\r\n                                    alt={'premade theme ' + k}\r\n                                    className='img-responsive'\r\n                                    src={premadeTheme.image}\r\n                                />\r\n                                <div className='theme-label'>{Utils.toTitleCase(premadeTheme.type)}</div>\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className='row appearance-section'>\r\n                <div className='clearfix'>\r\n                    {premadeThemes}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nPremadeThemeChooser.propTypes = {\r\n    theme: PropTypes.object.isRequired,\r\n    updateTheme: PropTypes.func.isRequired,\r\n    allowedThemes: PropTypes.arrayOf(PropTypes.string),\r\n};\r\n\r\nPremadeThemeChooser.defaultProps = {\r\n    allowedThemes: [],\r\n};\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport {connect} from 'react-redux';\r\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\r\n\r\nimport PremadeThemeChooser from './premade_theme_chooser.jsx';\r\n\r\nfunction mapStateToProps(state) {\r\n    const config = getConfig(state);\r\n\r\n    const allowedThemes = (config.AllowedThemes && config.AllowedThemes.split(',')) || [];\r\n\r\n    return {\r\n        allowedThemes,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(PremadeThemeChooser);\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport $ from 'jquery';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {FormattedMessage} from 'react-intl';\r\n\r\nimport {ActionTypes, Constants} from 'utils/constants.jsx';\r\nimport * as Utils from 'utils/utils.jsx';\r\nimport AppDispatcher from 'dispatcher/app_dispatcher.jsx';\r\nimport SettingItemMax from 'components/setting_item_max.jsx';\r\nimport SettingItemMin from 'components/setting_item_min.jsx';\r\n\r\nimport CustomThemeChooser from './custom_theme_chooser.jsx';\r\nimport PremadeThemeChooser from './premade_theme_chooser';\r\n\r\nexport default class ThemeSetting extends React.Component {\r\n    static propTypes = {\r\n        actions: PropTypes.shape({\r\n            saveTheme: PropTypes.func.isRequired,\r\n            deleteTeamSpecificThemes: PropTypes.func.isRequired,\r\n        }).isRequired,\r\n        currentTeamId: PropTypes.string.isRequired,\r\n        theme: PropTypes.object,\r\n        selected: PropTypes.bool.isRequired,\r\n        updateSection: PropTypes.func.isRequired,\r\n        setRequireConfirm: PropTypes.func.isRequired,\r\n        setEnforceFocus: PropTypes.func.isRequired,\r\n        allowCustomThemes: PropTypes.bool,\r\n        focused: PropTypes.bool.isRequired,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ...this.getStateFromProps(props),\r\n            isSaving: false,\r\n        };\r\n\r\n        // console.log(props, '---props')\r\n\r\n        this.originalTheme = Object.assign({}, this.state.theme);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.selected) {\r\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.selected) {\r\n            $('.color-btn').removeClass('active-border');\r\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\r\n        }\r\n    }\r\n\r\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\r\n        if (this.props.selected && !nextProps.selected) {\r\n            this.resetFields();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.selected) {\r\n            Utils.applyTheme(this.props.theme);\r\n        }\r\n    }\r\n\r\n    getStateFromProps(props = this.props) {\r\n        const theme = {...props.theme};\r\n        if (!theme.codeTheme) {\r\n            theme.codeTheme = Constants.DEFAULT_CODE_THEME;\r\n        }\r\n\r\n        return {\r\n            theme,\r\n            type: theme.type || 'premade',\r\n            showAllTeamsCheckbox: props.showAllTeamsCheckbox,\r\n            applyToAllTeams: props.applyToAllTeams,\r\n        };\r\n    }\r\n\r\n    scrollToTop() {\r\n        $('.ps-container.modal-body').scrollTop(0);\r\n    }\r\n\r\n    submitTheme = async () => {\r\n        const teamId = this.state.applyToAllTeams ? '' : this.props.currentTeamId;\r\n\r\n        this.setState({isSaving: true});\r\n\r\n        // console.log(teamId, this.props, this.state.theme, '------set theme');\r\n        await this.props.actions.saveTheme(teamId, this.state.theme);\r\n\r\n        if (this.state.applyToAllTeams) {\r\n            await this.props.actions.deleteTeamSpecificThemes();\r\n        }\r\n\r\n        this.props.setRequireConfirm(false);\r\n        this.originalTheme = Object.assign({}, this.state.theme);\r\n        this.scrollToTop();\r\n        this.props.updateSection('');\r\n        this.setState({isSaving: false});\r\n    };\r\n\r\n    updateTheme = (theme) => {\r\n        let themeChanged = this.state.theme.length === theme.length;\r\n        if (!themeChanged) {\r\n            for (const field in theme) {\r\n                if (theme.hasOwnProperty(field)) {\r\n                    if (this.state.theme[field] !== theme[field]) {\r\n                        themeChanged = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.props.setRequireConfirm(themeChanged);\r\n\r\n        this.setState({theme});\r\n        Utils.applyTheme(theme);\r\n    };\r\n\r\n    updateType(type) {\r\n        this.setState({type});\r\n    }\r\n\r\n    resetFields = () => {\r\n        const state = this.getStateFromProps();\r\n        state.serverError = null;\r\n        this.setState(state);\r\n        this.scrollToTop();\r\n\r\n        Utils.applyTheme(state.theme);\r\n\r\n        this.props.setRequireConfirm(false);\r\n    };\r\n\r\n    handleImportModal = () => {\r\n        AppDispatcher.handleViewAction({\r\n            type: ActionTypes.TOGGLE_IMPORT_THEME_MODAL,\r\n            value: true,\r\n            callback: this.updateTheme,\r\n        });\r\n\r\n        this.props.setEnforceFocus(false);\r\n    };\r\n\r\n    handleUpdateSection = (section) => {\r\n        this.props.updateSection(section);\r\n    };\r\n\r\n    render() {\r\n        let serverError;\r\n        if (this.state.serverError) {\r\n            serverError = this.state.serverError;\r\n        }\r\n\r\n        const displayCustom = this.state.type === 'custom';\r\n\r\n        let custom;\r\n        let premade;\r\n        if (displayCustom && this.props.allowCustomThemes) {\r\n            custom = (\r\n                <div key='customThemeChooser'>\r\n                    <CustomThemeChooser\r\n                        theme={this.state.theme}\r\n                        updateTheme={this.updateTheme}\r\n                    />\r\n                </div>\r\n            );\r\n        } else {\r\n            premade = (\r\n                <div key='premadeThemeChooser'>\r\n                    <br/>\r\n                    <PremadeThemeChooser\r\n                        theme={this.state.theme}\r\n                        updateTheme={this.updateTheme}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        let themeUI;\r\n        if (this.props.selected) {\r\n            const inputs = [];\r\n\r\n            if (this.props.allowCustomThemes) {\r\n                inputs.push(\r\n                    <div\r\n                        className='radio'\r\n                        key='premadeThemeColorLabel'\r\n                    >\r\n                        <label>\r\n                            <input\r\n                                id='standardThemes'\r\n                                type='radio'\r\n                                name='theme'\r\n                                checked={!displayCustom}\r\n                                onChange={this.updateType.bind(this, 'premade')}\r\n                            />\r\n                            <FormattedMessage\r\n                                id='user.settings.display.theme.themeColors'\r\n                                defaultMessage='Theme Colors'\r\n                            />\r\n                        </label>\r\n                        <br/>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            inputs.push(premade);\r\n\r\n            if (this.props.allowCustomThemes) {\r\n                inputs.push(\r\n                    <div\r\n                        className='radio'\r\n                        key='customThemeColorLabel'\r\n                    >\r\n                        <label>\r\n                            <input\r\n                                id='customThemes'\r\n                                type='radio'\r\n                                name='theme'\r\n                                checked={displayCustom}\r\n                                onChange={this.updateType.bind(this, 'custom')}\r\n                            />\r\n                            <FormattedMessage\r\n                                id='user.settings.display.theme.customTheme'\r\n                                defaultMessage='Custom Theme'\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                );\r\n\r\n                inputs.push(custom);\r\n\r\n                inputs.push(\r\n                    <div key='otherThemes'>\r\n                        <br/>\r\n                        <a\r\n                            id='otherThemes'\r\n                            href='http://docs.mattermost.com/help/settings/theme-colors.html#custom-theme-examples'\r\n                            target='_blank'\r\n                            rel='noopener noreferrer'\r\n                        >\r\n                            <FormattedMessage\r\n                                id='user.settings.display.theme.otherThemes'\r\n                                defaultMessage='See other themes'\r\n                            />\r\n                        </a>\r\n                    </div>\r\n                );\r\n\r\n                inputs.push(\r\n                    <div\r\n                        key='importSlackThemeButton'\r\n                        className='padding-top'\r\n                    >\r\n                        <a\r\n                            id='slackImportTheme'\r\n                            className='theme'\r\n                            onClick={this.handleImportModal}\r\n                        >\r\n                            <FormattedMessage\r\n                                id='user.settings.display.theme.import'\r\n                                defaultMessage='Import theme colors from Slack'\r\n                            />\r\n                        </a>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            let allTeamsCheckbox = null;\r\n            if (this.state.showAllTeamsCheckbox) {\r\n                allTeamsCheckbox = (\r\n                    <div className='checkbox user-settings__submit-checkbox'>\r\n                        <label>\r\n                            <input\r\n                                id='applyThemeToAllTeams'\r\n                                type='checkbox'\r\n                                checked={this.state.applyToAllTeams}\r\n                                onChange={(e) => this.setState({applyToAllTeams: e.target.checked})}\r\n                            />\r\n                            <FormattedMessage\r\n                                id='user.settings.display.theme.applyToAllTeams'\r\n                                defaultMessage='Apply new theme to all my teams'\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            themeUI = (\r\n                <SettingItemMax\r\n                    inputs={inputs}\r\n                    submitExtra={allTeamsCheckbox}\r\n                    submit={this.submitTheme}\r\n                    saving={this.state.isSaving}\r\n                    server_error={serverError}\r\n                    width='full'\r\n                    updateSection={this.handleUpdateSection}\r\n                />\r\n            );\r\n        } else {\r\n            themeUI = (\r\n                <SettingItemMin\r\n                    title={\r\n                        <FormattedMessage\r\n                            id='user.settings.display.theme.title'\r\n                            defaultMessage='Theme'\r\n                        />\r\n                    }\r\n                    describe={\r\n                        <FormattedMessage\r\n                            id='user.settings.display.theme.describe'\r\n                            defaultMessage='Open to manage your theme'\r\n                        />\r\n                    }\r\n                    section={'theme'}\r\n                    updateSection={this.handleUpdateSection}\r\n                    focused={this.props.focused}\r\n                />\r\n            );\r\n        }\r\n\r\n        return themeUI;\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\n\r\nimport {getTheme, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\r\nimport {getCurrentTeamId, getMyTeamsCount} from 'mattermost-redux/selectors/entities/teams';\r\n\r\nimport {saveTheme, deleteTeamSpecificThemes} from 'mattermost-redux/actions/preferences';\r\n\r\nimport {Preferences} from 'utils/constants.jsx';\r\n\r\nimport UserSettingsTheme from './user_settings_theme.jsx';\r\n\r\nfunction makeMapStateToProps() {\r\n    const getThemeCategory = makeGetCategory();\r\n\r\n    return (state) => {\r\n        return {\r\n            currentTeamId: getCurrentTeamId(state),\r\n            theme: getTheme(state),\r\n            applyToAllTeams: getThemeCategory(state, Preferences.CATEGORY_THEME).length <= 1,\r\n            showAllTeamsCheckbox: getMyTeamsCount(state) > 1,\r\n        };\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators({\r\n            saveTheme,\r\n            deleteTeamSpecificThemes,\r\n        }, dispatch),\r\n    };\r\n}\r\n\r\nexport default connect(makeMapStateToProps, mapDispatchToProps)(UserSettingsTheme);\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport React from 'react';\r\n\r\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\r\n\r\nimport {getSupportedTimezones} from 'utils/timezone';\r\n\r\nimport Provider from './provider.jsx';\r\nimport Suggestion from './suggestion.jsx';\r\n\r\nclass TimezoneSuggestion extends Suggestion {\r\n    render() {\r\n        const {item, isSelection} = this.props;\r\n        const timezone = item;\r\n\r\n        let className = 'mentions__name';\r\n        if (isSelection) {\r\n            className += ' suggestion--selected';\r\n        }\r\n\r\n        return (\r\n            <div\r\n                onClick={this.handleClick}\r\n                className={className}\r\n                {...Suggestion.baseProps}\r\n            >\r\n                {timezone}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default class TimezoneProvider extends Provider {\r\n    handlePretextChanged(timezonePrefix, resultsCallback) {\r\n        if (timezonePrefix.length === 0) {\r\n            this.displayAllTimezones(resultsCallback, timezonePrefix);\r\n            return true;\r\n        }\r\n\r\n        if (timezonePrefix) {\r\n            this.filterTimezones(resultsCallback, timezonePrefix);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    async displayAllTimezones(resultsCallback) {\r\n        resultsCallback({\r\n            matchedPretext: '',\r\n            terms: getSupportedTimezones(),\r\n            items: getSupportedTimezones(),\r\n            component: TimezoneSuggestion,\r\n        });\r\n    }\r\n\r\n    async filterTimezones(resultsCallback, timezonePrefix) {\r\n        const filteredTimezones = getSupportedTimezones().filter((t) => (\r\n            getTimezoneRegion(t).toLowerCase().indexOf(timezonePrefix) >= 0 ||\r\n                t.toLowerCase().indexOf(timezonePrefix) >= 0\r\n        ));\r\n\r\n        resultsCallback({\r\n            matchedPretext: timezonePrefix,\r\n            terms: filteredTimezones,\r\n            items: filteredTimezones,\r\n            component: TimezoneSuggestion,\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\r\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\r\n\r\nimport SettingItemMax from 'components/setting_item_max.jsx';\r\nimport {getBrowserTimezone} from 'utils/timezone';\r\n\r\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\r\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\r\nimport TimezoneProvider from 'components/suggestion/timezone_provider.jsx';\r\n\r\nexport default class ManageTimezones extends React.PureComponent {\r\n    static propTypes = {\r\n        user: PropTypes.object.isRequired,\r\n        updateSection: PropTypes.func.isRequired,\r\n        useAutomaticTimezone: PropTypes.bool.isRequired,\r\n        automaticTimezone: PropTypes.string.isRequired,\r\n        manualTimezone: PropTypes.string.isRequired,\r\n        timezones: PropTypes.array.isRequired,\r\n        actions: PropTypes.shape({\r\n            updateMe: PropTypes.func.isRequired,\r\n        }).isRequired,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            useAutomaticTimezone: props.useAutomaticTimezone,\r\n            automaticTimezone: props.automaticTimezone,\r\n            manualTimezone: props.manualTimezone,\r\n            manualTimezoneInput: props.manualTimezone,\r\n            isSaving: false,\r\n        };\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({manualTimezoneInput: e.target.value});\r\n    };\r\n\r\n    handleTimezoneSelected = (selected) => {\r\n        if (!selected) {\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            manualTimezone: selected,\r\n            manualTimezoneInput: selected,\r\n        });\r\n    };\r\n\r\n    timezoneNotChanged = () => {\r\n        const {\r\n            useAutomaticTimezone,\r\n            automaticTimezone,\r\n            manualTimezone,\r\n        } = this.state;\r\n\r\n        const {\r\n            useAutomaticTimezone: oldUseAutomaticTimezone,\r\n            automaticTimezone: oldAutomaticTimezone,\r\n            manualTimezone: oldManualTimezone,\r\n        } = this.props;\r\n\r\n        return (\r\n            useAutomaticTimezone === oldUseAutomaticTimezone &&\r\n            automaticTimezone === oldAutomaticTimezone &&\r\n            manualTimezone === oldManualTimezone\r\n        );\r\n    };\r\n\r\n    changeTimezone = () => {\r\n        if (this.timezoneNotChanged()) {\r\n            this.props.updateSection('');\r\n            return;\r\n        }\r\n\r\n        this.submitUser();\r\n    };\r\n\r\n    submitUser = () => {\r\n        const {user, actions} = this.props;\r\n        const {\r\n            useAutomaticTimezone,\r\n            automaticTimezone,\r\n            manualTimezone,\r\n        } = this.state;\r\n\r\n        const timezone = {\r\n            useAutomaticTimezone: useAutomaticTimezone.toString(),\r\n            automaticTimezone,\r\n            manualTimezone,\r\n        };\r\n\r\n        const updatedUser = {\r\n            ...user,\r\n            timezone,\r\n        };\r\n\r\n        actions.updateMe(updatedUser).\r\n            then(({data, error: err}) => {\r\n                if (data) {\r\n                    this.props.updateSection('');\r\n                } else if (err) {\r\n                    let serverError;\r\n                    if (err.message) {\r\n                        serverError = err.message;\r\n                    } else {\r\n                        serverError = err;\r\n                    }\r\n                    this.setState({serverError, isSaving: false});\r\n                }\r\n            });\r\n    };\r\n\r\n    handleAutomaticTimezone = (e) => {\r\n        const useAutomaticTimezone = e.target.checked;\r\n        let automaticTimezone = '';\r\n\r\n        if (useAutomaticTimezone) {\r\n            automaticTimezone = getBrowserTimezone();\r\n        }\r\n\r\n        this.setState({\r\n            useAutomaticTimezone,\r\n            automaticTimezone,\r\n        });\r\n    };\r\n\r\n    handleManualTimezone = (e) => {\r\n        this.setState({manualTimezone: e.target.value});\r\n    };\r\n\r\n    render() {\r\n        const {timezones} = this.props;\r\n        const {\r\n            useAutomaticTimezone,\r\n            automaticTimezone,\r\n        } = this.state;\r\n\r\n        let serverError;\r\n        if (this.state.serverError) {\r\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\r\n        }\r\n\r\n        const inputs = [];\r\n\r\n        const timezoneRegion = (\r\n            <div\r\n                className='section-describe padding-top'\r\n            >\r\n                {useAutomaticTimezone && getTimezoneRegion(automaticTimezone)}\r\n            </div>\r\n        );\r\n\r\n        const noTimezonesFromServer = timezones.length === 0;\r\n        const automaticTimezoneInput = (\r\n            <div className='checkbox'>\r\n                <label>\r\n                    <input\r\n                        id='automaticTimezoneInput'\r\n                        type='checkbox'\r\n                        checked={useAutomaticTimezone}\r\n                        onChange={this.handleAutomaticTimezone}\r\n                        disabled={noTimezonesFromServer}\r\n                    />\r\n                    <FormattedMessage\r\n                        id='user.settings.timezones.automatic'\r\n                        defaultMessage='Set automatically'\r\n                    />\r\n                    {timezoneRegion}\r\n                </label>\r\n            </div>\r\n        );\r\n\r\n        const providers = [new TimezoneProvider()];\r\n        const manualTimezoneInput = (\r\n            <div key='changeTimezone'>\r\n                <label className='control-label'>\r\n                    <FormattedMessage\r\n                        id='user.settings.timezones.change'\r\n                        defaultMessage='Change timezone'\r\n                    />\r\n                </label>\r\n                <div className='padding-top'>\r\n                    <SuggestionBox\r\n                        ref={this.setSwitchBoxRef}\r\n                        className='form-control focused'\r\n                        type='search'\r\n                        onChange={this.onChange}\r\n                        value={this.state.manualTimezoneInput}\r\n                        onItemSelected={this.handleTimezoneSelected}\r\n                        listComponent={SuggestionList}\r\n                        maxLength='64'\r\n                        requiredCharacters={0}\r\n                        providers={providers}\r\n                        listStyle='bottom'\r\n                        completeOnTab={false}\r\n                        renderDividers={false}\r\n                        openOnFocus={true}\r\n                        disabled={noTimezonesFromServer}\r\n                    />\r\n                    {serverError}\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        inputs.push(automaticTimezoneInput);\r\n\r\n        if (!useAutomaticTimezone) {\r\n            inputs.push(manualTimezoneInput);\r\n        }\r\n\r\n        inputs.push(\r\n            <div>\r\n                <br/>\r\n                <FormattedHTMLMessage\r\n                    id='user.settings.timezones.promote'\r\n                    defaultMessage='Select the time zone used for timestamps in the user interface and email notifications.'\r\n                />\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <SettingItemMax\r\n                title={\r\n                    <FormattedMessage\r\n                        id='user.settings.display.timezone'\r\n                        defaultMessage='Timezone'\r\n                    />\r\n                }\r\n                containerStyle='timezone-container'\r\n                width='medium'\r\n                submit={this.changeTimezone}\r\n                saving={this.state.isSaving}\r\n                inputs={inputs}\r\n                updateSection={this.props.updateSection}\r\n            />\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {updateMe} from 'mattermost-redux/actions/users';\r\n\r\nimport ManageTimezones from './manage_timezones';\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {actions: bindActionCreators({updateMe}, dispatch)};\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(ManageTimezones);\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\n\r\nimport * as I18n from 'i18n/i18n.jsx';\r\nimport SettingItemMax from 'components/setting_item_max.jsx';\r\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\r\n\r\nexport default class ManageLanguage extends React.Component {\r\n    static propTypes = {\r\n        user: PropTypes.object.isRequired,\r\n        locale: PropTypes.string.isRequired,\r\n        updateSection: PropTypes.func.isRequired,\r\n        actions: PropTypes.shape({\r\n            updateMe: PropTypes.func.isRequired,\r\n        }).isRequired,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            locale: props.locale,\r\n            isSaving: false,\r\n        };\r\n    }\r\n\r\n    setLanguage = (e) => {\r\n        this.setState({locale: e.target.value});\r\n    }\r\n\r\n    changeLanguage = () => {\r\n        if (this.props.user.locale === this.state.locale) {\r\n            this.props.updateSection('');\r\n        } else {\r\n            this.submitUser({\r\n                ...this.props.user,\r\n                locale: this.state.locale,\r\n            });\r\n        }\r\n    }\r\n\r\n    submitUser = (user) => {\r\n        this.setState({isSaving: true});\r\n\r\n        this.props.actions.updateMe(user).\r\n            then(({data, error: err}) => {\r\n                if (data) {\r\n                    // Do nothing since changing the locale essentially refreshes the page\r\n                } else if (err) {\r\n                    let serverError;\r\n                    if (err.message) {\r\n                        serverError = err.message;\r\n                    } else {\r\n                        serverError = err;\r\n                    }\r\n                    this.setState({serverError, isSaving: false});\r\n                }\r\n            });\r\n    }\r\n\r\n    render() {\r\n        let serverError;\r\n        if (this.state.serverError) {\r\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\r\n        }\r\n\r\n        const options = [];\r\n        const locales = I18n.getLanguages();\r\n\r\n        const languages = Object.keys(locales).map((l) => {\r\n            return {\r\n                value: locales[l].value,\r\n                name: locales[l].name,\r\n                order: locales[l].order,\r\n            };\r\n        }).sort((a, b) => a.order - b.order);\r\n\r\n        languages.forEach((lang) => {\r\n            options.push(\r\n                <option\r\n                    key={lang.value}\r\n                    value={lang.value}\r\n                >\r\n                    {lang.name}\r\n                </option>\r\n            );\r\n        });\r\n\r\n        const input = (\r\n            <div key='changeLanguage'>\r\n                <br/>\r\n                <label className='control-label'>\r\n                    <FormattedMessage\r\n                        id='user.settings.languages.change'\r\n                        defaultMessage='Change interface language'\r\n                    />\r\n                </label>\r\n                <div className='padding-top'>\r\n                    <select\r\n                        id='displayLanguage'\r\n                        ref='language'\r\n                        className='form-control'\r\n                        value={this.state.locale}\r\n                        onChange={this.setLanguage}\r\n                    >\r\n                        {options}\r\n                    </select>\r\n                    {serverError}\r\n                </div>\r\n                <div>\r\n                    <br/>\r\n                    <FormattedMarkdownMessage\r\n                        id='user.settings.languages.promote'\r\n                        defaultMessage='Select which language Mattermost displays in the user interface.\\n \\nWould you like to help with translations? Join the [Mattermost Translation Server](!http://translate.mattermost.com/) to contribute.'\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <SettingItemMax\r\n                title={\r\n                    <FormattedMessage\r\n                        id='user.settings.display.language'\r\n                        defaultMessage='Language'\r\n                    />\r\n                }\r\n                width='medium'\r\n                submit={this.changeLanguage}\r\n                saving={this.state.isSaving}\r\n                inputs={[input]}\r\n                updateSection={this.props.updateSection}\r\n            />\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {updateMe} from 'mattermost-redux/actions/users';\r\n\r\nimport ManageLanguages from './manage_languages';\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {actions: bindActionCreators({updateMe}, dispatch)};\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(ManageLanguages);\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\r\nimport {FormattedMessage} from 'react-intl';\r\n\r\nimport Constants from 'utils/constants.jsx';\r\nimport * as Utils from 'utils/utils.jsx';\r\nimport {getBrowserTimezone} from 'utils/timezone.jsx';\r\n\r\nimport * as I18n from 'i18n/i18n.jsx';\r\nimport {t} from 'utils/i18n';\r\n\r\nimport SettingItemMax from 'components/setting_item_max.jsx';\r\nimport SettingItemMin from 'components/setting_item_min.jsx';\r\nimport ThemeSetting from 'components/user_settings/display/user_settings_theme';\r\nimport BackIcon from 'components/icon/back_icon';\r\n\r\nimport ManageTimezones from './manage_timezones';\r\nimport ManageLanguages from './manage_languages';\r\n\r\nconst Preferences = Constants.Preferences;\r\n\r\nfunction getDisplayStateFromProps(props) {\r\n    return {\r\n        militaryTime: props.militaryTime,\r\n        teammateNameDisplay: props.teammateNameDisplay,\r\n        channelDisplayMode: props.channelDisplayMode,\r\n        messageDisplay: props.messageDisplay,\r\n        collapseDisplay: props.collapseDisplay,\r\n        linkPreviewDisplay: props.linkPreviewDisplay,\r\n    };\r\n}\r\n\r\nexport default class UserSettingsDisplay extends React.Component {\r\n    static propTypes = {\r\n        user: PropTypes.object,\r\n        updateSection: PropTypes.func,\r\n        activeSection: PropTypes.string,\r\n        prevActiveSection: PropTypes.string,\r\n        closeModal: PropTypes.func.isRequired,\r\n        collapseModal: PropTypes.func.isRequired,\r\n        setRequireConfirm: PropTypes.func.isRequired,\r\n        setEnforceFocus: PropTypes.func.isRequired,\r\n        timezones: PropTypes.array.isRequired,\r\n        userTimezone: PropTypes.object.isRequired,\r\n        allowCustomThemes: PropTypes.bool,\r\n        enableLinkPreviews: PropTypes.bool,\r\n        defaultClientLocale: PropTypes.string,\r\n        enableThemeSelection: PropTypes.bool,\r\n        configTeammateNameDisplay: PropTypes.string,\r\n        currentUserTimezone: PropTypes.string,\r\n        enableTimezone: PropTypes.bool,\r\n        shouldAutoUpdateTimezone: PropTypes.bool,\r\n        militaryTime: PropTypes.string,\r\n        teammateNameDisplay: PropTypes.string,\r\n        channelDisplayMode: PropTypes.string,\r\n        messageDisplay: PropTypes.string,\r\n        collapseDisplay: PropTypes.string,\r\n        linkPreviewDisplay: PropTypes.string,\r\n        actions: PropTypes.shape({\r\n            getSupportedTimezones: PropTypes.func.isRequired,\r\n            autoUpdateTimezone: PropTypes.func.isRequired,\r\n            savePreferences: PropTypes.func.isRequired,\r\n        }).isRequired,\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ...getDisplayStateFromProps(props),\r\n            isSaving: false,\r\n        };\r\n\r\n        if (props.timezones.length === 0) {\r\n            props.actions.getSupportedTimezones();\r\n        }\r\n\r\n        this.prevSections = {\r\n            theme: 'dummySectionName', // dummy value that should never match any section name\r\n            clock: 'theme',\r\n            linkpreview: 'clock',\r\n            message_display: 'linkpreview',\r\n            channel_display_mode: 'message_display',\r\n            languages: 'channel_display_mode',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {actions, enableTimezone, shouldAutoUpdateTimezone} = this.props;\r\n\r\n        if (enableTimezone && shouldAutoUpdateTimezone) {\r\n            actions.autoUpdateTimezone(getBrowserTimezone());\r\n        }\r\n    }\r\n\r\n    handleSubmit = async () => {\r\n        const userId = this.props.user.id;\r\n\r\n        const timePreference = {\r\n            user_id: userId,\r\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\r\n            name: Preferences.USE_MILITARY_TIME,\r\n            value: this.state.militaryTime,\r\n        };\r\n        const teammateNameDisplayPreference = {\r\n            user_id: userId,\r\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\r\n            name: Preferences.NAME_NAME_FORMAT,\r\n            value: this.state.teammateNameDisplay,\r\n        };\r\n        const channelDisplayModePreference = {\r\n            user_id: userId,\r\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\r\n            name: Preferences.CHANNEL_DISPLAY_MODE,\r\n            value: this.state.channelDisplayMode,\r\n        };\r\n        const messageDisplayPreference = {\r\n            user_id: userId,\r\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\r\n            name: Preferences.MESSAGE_DISPLAY,\r\n            value: this.state.messageDisplay,\r\n        };\r\n        const collapseDisplayPreference = {\r\n            user_id: userId,\r\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\r\n            name: Preferences.COLLAPSE_DISPLAY,\r\n            value: this.state.collapseDisplay,\r\n        };\r\n        const linkPreviewDisplayPreference = {\r\n            user_id: userId,\r\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\r\n            name: Preferences.LINK_PREVIEW_DISPLAY,\r\n            value: this.state.linkPreviewDisplay,\r\n        };\r\n\r\n        this.setState({isSaving: true});\r\n\r\n        const preferences = [\r\n            timePreference,\r\n            channelDisplayModePreference,\r\n            messageDisplayPreference,\r\n            collapseDisplayPreference,\r\n            linkPreviewDisplayPreference,\r\n            teammateNameDisplayPreference,\r\n        ];\r\n\r\n        await this.props.actions.savePreferences(userId, preferences);\r\n\r\n        this.updateSection('');\r\n    }\r\n\r\n    handleClockRadio = (militaryTime) => {\r\n        this.setState({militaryTime});\r\n    }\r\n\r\n    handleTeammateNameDisplayRadio = (teammateNameDisplay) => {\r\n        this.setState({teammateNameDisplay});\r\n    }\r\n\r\n    handleChannelDisplayModeRadio(channelDisplayMode) {\r\n        this.setState({channelDisplayMode});\r\n    }\r\n\r\n    handlemessageDisplayRadio(messageDisplay) {\r\n        this.setState({messageDisplay});\r\n    }\r\n\r\n    handleCollapseRadio(collapseDisplay) {\r\n        this.setState({collapseDisplay});\r\n    }\r\n\r\n    handleLinkPreviewRadio(linkPreviewDisplay) {\r\n        this.setState({linkPreviewDisplay});\r\n    }\r\n\r\n    handleOnChange(display) {\r\n        this.setState({...display});\r\n    }\r\n\r\n    updateSection = (section) => {\r\n        this.updateState();\r\n        this.props.updateSection(section);\r\n    }\r\n\r\n    updateState = () => {\r\n        const newState = getDisplayStateFromProps(this.props);\r\n        if (!Utils.areObjectsEqual(newState, this.state)) {\r\n            this.setState(newState);\r\n        }\r\n\r\n        this.setState({isSaving: false});\r\n    }\r\n\r\n    createSection(props) {\r\n        const {\r\n            section,\r\n            display,\r\n            value,\r\n            title,\r\n            firstOption,\r\n            secondOption,\r\n            thirdOption,\r\n            description,\r\n        } = props;\r\n\r\n        const firstMessage = (\r\n            <FormattedMessage\r\n                id={firstOption.radionButtonText.id}\r\n                defaultMessage={firstOption.radionButtonText.message}\r\n            />\r\n        );\r\n\r\n        let moreColon;\r\n        let firstMessageMore;\r\n        if (firstOption.radionButtonText.moreId) {\r\n            moreColon = ': ';\r\n            firstMessageMore = (\r\n                <span className='font-weight--normal'>\r\n                    <FormattedMessage\r\n                        id={firstOption.radionButtonText.moreId}\r\n                        defaultMessage={firstOption.radionButtonText.moreMessage}\r\n                    />\r\n                </span>\r\n            );\r\n        }\r\n\r\n        const secondMessage = (\r\n            <FormattedMessage\r\n                id={secondOption.radionButtonText.id}\r\n                defaultMessage={secondOption.radionButtonText.message}\r\n            />\r\n        );\r\n\r\n        let secondMessageMore;\r\n        if (secondOption.radionButtonText.moreId) {\r\n            secondMessageMore = (\r\n                <span className='font-weight--normal'>\r\n                    <FormattedMessage\r\n                        id={secondOption.radionButtonText.moreId}\r\n                        defaultMessage={secondOption.radionButtonText.moreMessage}\r\n                    />\r\n                </span>\r\n            );\r\n        }\r\n\r\n        let thirdMessage;\r\n        if (thirdOption) {\r\n            thirdMessage = (\r\n                <FormattedMessage\r\n                    id={thirdOption.radionButtonText.id}\r\n                    defaultMessage={thirdOption.radionButtonText.message}\r\n                />\r\n            );\r\n        }\r\n\r\n        const messageTitle = (\r\n            <FormattedMessage\r\n                id={title.id}\r\n                defaultMessage={title.message}\r\n            />\r\n        );\r\n\r\n        const messageDesc = (\r\n            <FormattedMessage\r\n                id={description.id}\r\n                defaultMessage={description.message}\r\n            />\r\n        );\r\n\r\n        if (this.props.activeSection === section) {\r\n            const format = [false, false, false];\r\n            if (value === firstOption.value) {\r\n                format[0] = true;\r\n            } else if (value === secondOption.value) {\r\n                format[1] = true;\r\n            } else {\r\n                format[2] = true;\r\n            }\r\n\r\n            const name = section + 'Format';\r\n            const key = section + 'UserDisplay';\r\n\r\n            const firstDisplay = {};\r\n            firstDisplay[display] = firstOption.value;\r\n\r\n            const secondDisplay = {};\r\n            secondDisplay[display] = secondOption.value;\r\n\r\n            const thirdDisplay = {};\r\n            if (thirdOption) {\r\n                thirdDisplay[display] = thirdOption.value;\r\n            }\r\n\r\n            let thirdSection;\r\n            if (thirdMessage) {\r\n                thirdSection = (\r\n                    <div className='radio'>\r\n                        <label>\r\n                            <input\r\n                                id={name + 'C'}\r\n                                type='radio'\r\n                                name={name}\r\n                                checked={format[2]}\r\n                                onChange={() => this.handleOnChange(thirdDisplay)}\r\n                            />\r\n                            {thirdMessage}\r\n                        </label>\r\n                        <br/>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const inputs = [\r\n                <div key={key}>\r\n                    <div className='radio'>\r\n                        <label>\r\n                            <input\r\n                                id={name + 'A'}\r\n                                type='radio'\r\n                                name={name}\r\n                                checked={format[0]}\r\n                                onChange={() => this.handleOnChange(firstDisplay)}\r\n                            />\r\n                            {firstMessage}\r\n                            {moreColon}\r\n                            {firstMessageMore}\r\n                        </label>\r\n                        <br/>\r\n                    </div>\r\n                    <div className='radio'>\r\n                        <label>\r\n                            <input\r\n                                id={name + 'B'}\r\n                                type='radio'\r\n                                name={name}\r\n                                checked={format[1]}\r\n                                onChange={() => this.handleOnChange(secondDisplay)}\r\n                            />\r\n                            {secondMessage}\r\n                            {moreColon}\r\n                            {secondMessageMore}\r\n                        </label>\r\n                        <br/>\r\n                    </div>\r\n                    {thirdSection}\r\n                    <div>\r\n                        <br/>\r\n                        {messageDesc}\r\n                    </div>\r\n                </div>,\r\n            ];\r\n\r\n            return (\r\n                <div>\r\n                    <SettingItemMax\r\n                        title={messageTitle}\r\n                        inputs={inputs}\r\n                        submit={this.handleSubmit}\r\n                        saving={this.state.isSaving}\r\n                        server_error={this.state.serverError}\r\n                        updateSection={this.updateSection}\r\n                    />\r\n                    <div className='divider-dark'/>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        let describe;\r\n        if (value === firstOption.value) {\r\n            describe = firstMessage;\r\n        } else if (value === secondOption.value) {\r\n            describe = secondMessage;\r\n        } else {\r\n            describe = thirdMessage;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <SettingItemMin\r\n                    title={messageTitle}\r\n                    describe={describe}\r\n                    focused={this.props.prevActiveSection === this.prevSections[section]}\r\n                    section={section}\r\n                    updateSection={this.updateSection}\r\n                />\r\n                <div className='divider-dark'/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.props, '--------display props');\r\n        const collapseSection = this.createSection({\r\n            section: 'collapse',\r\n            display: 'collapseDisplay',\r\n            value: this.state.collapseDisplay,\r\n            defaultDisplay: 'false',\r\n            title: {\r\n                id: t('user.settings.display.collapseDisplay'),\r\n                message: 'Default appearance of image previews',\r\n            },\r\n            firstOption: {\r\n                value: 'false',\r\n                radionButtonText: {\r\n                    id: t('user.settings.display.collapseOn'),\r\n                    message: 'On',\r\n                },\r\n            },\r\n            secondOption: {\r\n                value: 'true',\r\n                radionButtonText: {\r\n                    id: t('user.settings.display.collapseOff'),\r\n                    message: 'Off',\r\n                },\r\n            },\r\n            description: {\r\n                id: t('user.settings.display.collapseDesc'),\r\n                message: 'Set whether previews of image links and image attachment thumbnails show as expanded or collapsed by default. This setting can also be controlled using the slash commands /expand and /collapse.',\r\n            },\r\n        });\r\n\r\n        let linkPreviewSection = null;\r\n\r\n        if (this.props.enableLinkPreviews) {\r\n            linkPreviewSection = this.createSection({\r\n                section: 'linkpreview',\r\n                display: 'linkPreviewDisplay',\r\n                value: this.state.linkPreviewDisplay,\r\n                defaultDisplay: 'true',\r\n                title: {\r\n                    id: t('user.settings.display.linkPreviewDisplay'),\r\n                    message: 'Website Link Previews',\r\n                },\r\n                firstOption: {\r\n                    value: 'true',\r\n                    radionButtonText: {\r\n                        id: t('user.settings.display.linkPreviewOn'),\r\n                        message: 'On',\r\n                    },\r\n                },\r\n                secondOption: {\r\n                    value: 'false',\r\n                    radionButtonText: {\r\n                        id: t('user.settings.display.linkPreviewOff'),\r\n                        message: 'Off',\r\n                    },\r\n                },\r\n                description: {\r\n                    id: t('user.settings.display.linkPreviewDesc'),\r\n                    message: 'When available, the first web link in a message will show a preview of the website content below the message.',\r\n                },\r\n            });\r\n            this.prevSections.message_display = 'linkpreview';\r\n        } else {\r\n            this.prevSections.message_display = this.prevSections.linkpreview;\r\n        }\r\n\r\n        const clockSection = this.createSection({\r\n            section: 'clock',\r\n            display: 'militaryTime',\r\n            value: this.state.militaryTime,\r\n            defaultDisplay: 'false',\r\n            title: {\r\n                id: t('user.settings.display.clockDisplay'),\r\n                message: 'Clock Display',\r\n            },\r\n            firstOption: {\r\n                value: 'false',\r\n                radionButtonText: {\r\n                    id: t('user.settings.display.normalClock'),\r\n                    message: '12-hour clock (example: 4:00 PM)',\r\n                },\r\n            },\r\n            secondOption: {\r\n                value: 'true',\r\n                radionButtonText: {\r\n                    id: t('user.settings.display.militaryClock'),\r\n                    message: '24-hour clock (example: 16:00)',\r\n                },\r\n            },\r\n            description: {\r\n                id: t('user.settings.display.preferTime'),\r\n                message: 'Select how you prefer time displayed.',\r\n            },\r\n        });\r\n\r\n        const teammateNameDisplaySection = this.createSection({\r\n            section: Preferences.NAME_NAME_FORMAT,\r\n            display: 'teammateNameDisplay',\r\n            value: this.state.teammateNameDisplay,\r\n            defaultDisplay: this.props.configTeammateNameDisplay,\r\n            title: {\r\n                id: t('user.settings.display.teammateNameDisplayTitle'),\r\n                message: 'Teammate Name Display',\r\n            },\r\n            firstOption: {\r\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\r\n                radionButtonText: {\r\n                    id: t('user.settings.display.teammateNameDisplayUsername'),\r\n                    message: 'Show username',\r\n                },\r\n            },\r\n            secondOption: {\r\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\r\n                radionButtonText: {\r\n                    id: t('user.settings.display.teammateNameDisplayNicknameFullname'),\r\n                    message: 'Show nickname if one exists, otherwise show first and last name',\r\n                },\r\n            },\r\n            thirdOption: {\r\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\r\n                radionButtonText: {\r\n                    id: t('user.settings.display.teammateNameDisplayFullname'),\r\n                    message: 'Show first and last name',\r\n                },\r\n            },\r\n            description: {\r\n                id: t('user.settings.display.teammateNameDisplayDescription'),\r\n                message: 'Set how to display other user\\'s names in posts and the Direct Messages list.',\r\n            },\r\n        });\r\n\r\n        let timezoneSelection;\r\n        if (this.props.enableTimezone && !this.props.shouldAutoUpdateTimezone) {\r\n            const userTimezone = this.props.userTimezone;\r\n            if (this.props.activeSection === 'timezone') {\r\n                timezoneSelection = (\r\n                    <div>\r\n                        <ManageTimezones\r\n                            user={this.props.user}\r\n                            timezones={this.props.timezones}\r\n                            useAutomaticTimezone={userTimezone.useAutomaticTimezone}\r\n                            automaticTimezone={userTimezone.automaticTimezone}\r\n                            manualTimezone={userTimezone.manualTimezone}\r\n                            updateSection={this.updateSection}\r\n                        />\r\n                        <div className='divider-dark'/>\r\n                    </div>\r\n                );\r\n            } else {\r\n                timezoneSelection = (\r\n                    <div>\r\n                        <SettingItemMin\r\n                            title={\r\n                                <FormattedMessage\r\n                                    id='user.settings.display.timezone'\r\n                                    defaultMessage='Timezone'\r\n                                />\r\n                            }\r\n                            width='medium'\r\n                            describe={getTimezoneRegion(this.props.currentUserTimezone)}\r\n                            section={'timezone'}\r\n                            updateSection={this.updateSection}\r\n                        />\r\n                        <div className='divider-dark'/>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        const messageDisplaySection = this.createSection({\r\n            section: Preferences.MESSAGE_DISPLAY,\r\n            display: 'messageDisplay',\r\n            value: this.state.messageDisplay,\r\n            defaultDisplay: Preferences.MESSAGE_DISPLAY_CLEAN,\r\n            title: {\r\n                id: t('user.settings.display.messageDisplayTitle'),\r\n                message: 'Message Display',\r\n            },\r\n            firstOption: {\r\n                value: Preferences.MESSAGE_DISPLAY_CLEAN,\r\n                radionButtonText: {\r\n                    id: t('user.settings.display.messageDisplayClean'),\r\n                    message: 'Standard',\r\n                    moreId: t('user.settings.display.messageDisplayCleanDes'),\r\n                    moreMessage: 'Easy to scan and read.',\r\n                },\r\n            },\r\n            secondOption: {\r\n                value: Preferences.MESSAGE_DISPLAY_COMPACT,\r\n                radionButtonText: {\r\n                    id: t('user.settings.display.messageDisplayCompact'),\r\n                    message: 'Compact',\r\n                    moreId: t('user.settings.display.messageDisplayCompactDes'),\r\n                    moreMessage: 'Fit as many messages on the screen as we can.',\r\n                },\r\n            },\r\n            description: {\r\n                id: t('user.settings.display.messageDisplayDescription'),\r\n                message: 'Select how messages in a channel should be displayed.',\r\n            },\r\n        });\r\n\r\n        const channelDisplayModeSection = this.createSection({\r\n            section: Preferences.CHANNEL_DISPLAY_MODE,\r\n            display: 'channelDisplayMode',\r\n            value: this.state.channelDisplayMode,\r\n            defaultDisplay: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\r\n            title: {\r\n                id: t('user.settings.display.channelDisplayTitle'),\r\n                message: 'Channel Display',\r\n            },\r\n            firstOption: {\r\n                value: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\r\n                radionButtonText: {\r\n                    id: t('user.settings.display.fullScreen'),\r\n                    message: 'Full width',\r\n                },\r\n            },\r\n            secondOption: {\r\n                value: Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\r\n                radionButtonText: {\r\n                    id: t('user.settings.display.fixedWidthCentered'),\r\n                    message: 'Fixed width, centered',\r\n                },\r\n            },\r\n            description: {\r\n                id: t('user.settings.display.channeldisplaymode'),\r\n                message: 'Select the width of the center channel.',\r\n            },\r\n        });\r\n\r\n        let languagesSection;\r\n        let userLocale = this.props.user.locale;\r\n        if (this.props.activeSection === 'languages') {\r\n            if (!I18n.isLanguageAvailable(userLocale)) {\r\n                userLocale = this.props.defaultClientLocale;\r\n            }\r\n            languagesSection = (\r\n                <div>\r\n                    <ManageLanguages\r\n                        user={this.props.user}\r\n                        locale={userLocale}\r\n                        updateSection={this.updateSection}\r\n                    />\r\n                    <div className='divider-dark'/>\r\n                </div>\r\n            );\r\n        } else {\r\n            let locale;\r\n            if (I18n.isLanguageAvailable(userLocale)) {\r\n                locale = I18n.getLanguageInfo(userLocale).name;\r\n            } else {\r\n                locale = I18n.getLanguageInfo(this.props.defaultClientLocale).name;\r\n            }\r\n\r\n            languagesSection = (\r\n                <div>\r\n                    <SettingItemMin\r\n                        title={\r\n                            <FormattedMessage\r\n                                id='user.settings.display.language'\r\n                                defaultMessage='Language'\r\n                            />\r\n                        }\r\n                        width='medium'\r\n                        describe={locale}\r\n                        focused={this.props.prevActiveSection === this.prevSections.languages}\r\n                        section={'languages'}\r\n                        updateSection={this.updateSection}\r\n                    />\r\n                    <div className='divider-dark'/>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (Object.keys(I18n.getLanguages()).length === 1) {\r\n            languagesSection = null;\r\n        }\r\n\r\n        let themeSection;\r\n        if (this.props.enableThemeSelection) {\r\n            themeSection = (\r\n                <div>\r\n                    <ThemeSetting\r\n                        selected={this.props.activeSection === 'theme'}\r\n                        updateSection={this.updateSection}\r\n                        setRequireConfirm={this.props.setRequireConfirm}\r\n                        setEnforceFocus={this.props.setEnforceFocus}\r\n                        allowCustomThemes={this.props.allowCustomThemes}\r\n                        focused={this.props.prevActiveSection === this.prevSections.theme}\r\n                    />\r\n                    <div className='divider-dark'/>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div id='displaySettings'>\r\n                <div className='modal-header'>\r\n                    <button\r\n                        id='closeButton'\r\n                        type='button'\r\n                        className='close'\r\n                        data-dismiss='modal'\r\n                        aria-label='Close'\r\n                        onClick={this.props.closeModal}\r\n                    >\r\n                        <span aria-hidden='true'>{'×'}</span>\r\n                    </button>\r\n                    <h4\r\n                        className='modal-title'\r\n                        ref='title'\r\n                    >\r\n                        <div className='modal-back'>\r\n                            <span onClick={this.props.collapseModal}>\r\n                                <BackIcon/>\r\n                            </span>\r\n                        </div>\r\n                        <FormattedMessage\r\n                            id='user.settings.display.title'\r\n                            defaultMessage='Display Settings'\r\n                        />\r\n                    </h4>\r\n                </div>\r\n                <div className='user-settings'>\r\n                    <h3\r\n                        id='displaySettingsTitle'\r\n                        className='tab-header'\r\n                    >\r\n                        <FormattedMessage\r\n                            id='user.settings.display.title'\r\n                            defaultMessage='Display Settings'\r\n                        />\r\n                    </h3>\r\n                    <div className='divider-dark first'/>\r\n                    {themeSection}\r\n                    {clockSection}\r\n                    {teammateNameDisplaySection}\r\n                    {timezoneSelection}\r\n                    {linkPreviewSection}\r\n                    {collapseSection}\r\n                    {messageDisplaySection}\r\n                    {channelDisplayModeSection}\r\n                    {languagesSection}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\n\r\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\r\nimport {getSupportedTimezones} from 'mattermost-redux/actions/general';\r\nimport {autoUpdateTimezone} from 'mattermost-redux/actions/timezone';\r\nimport {getConfig, getSupportedTimezones as getTimezones} from 'mattermost-redux/selectors/entities/general';\r\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\r\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\r\nimport {getUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\r\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\r\n\r\nimport {Preferences} from 'utils/constants.jsx';\r\n\r\nimport UserSettingsDisplay from './user_settings_display.jsx';\r\n\r\nfunction mapStateToProps(state) {\r\n    const config = getConfig(state);\r\n    const timezones = getTimezones(state);\r\n    const currentUserId = getCurrentUserId(state);\r\n    const userTimezone = getUserTimezone(state, currentUserId);\r\n    const automaticTimezoneNotSet = userTimezone && userTimezone.useAutomaticTimezone && !userTimezone.automaticTimezone;\r\n    const shouldAutoUpdateTimezone = !userTimezone || automaticTimezoneNotSet;\r\n\r\n    const allowCustomThemes = config.AllowCustomThemes === 'true';\r\n    const enableLinkPreviews = config.EnableLinkPreviews === 'true';\r\n    const defaultClientLocale = config.DefaultClientLocale;\r\n    const enableThemeSelection = config.EnableThemeSelection === 'true';\r\n    const enableTimezone = config.ExperimentalTimezone === 'true';\r\n    const configTeammateNameDisplay = config.TeammateNameDisplay;\r\n\r\n    return {\r\n        allowCustomThemes,\r\n        configTeammateNameDisplay,\r\n        enableLinkPreviews,\r\n        defaultClientLocale,\r\n        enableThemeSelection,\r\n        enableTimezone,\r\n        timezones,\r\n        userTimezone,\r\n        shouldAutoUpdateTimezone,\r\n        currentUserTimezone: getUserCurrentTimezone(userTimezone),\r\n        militaryTime: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, Preferences.USE_MILITARY_TIME_DEFAULT),\r\n        teammateNameDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.NAME_NAME_FORMAT, configTeammateNameDisplay),\r\n        channelDisplayMode: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT),\r\n        messageDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT),\r\n        collapseDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, Preferences.COLLAPSE_DISPLAY_DEFAULT),\r\n        linkPreviewDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, Preferences.LINK_PREVIEW_DISPLAY_DEFAULT),\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators({\r\n            getSupportedTimezones,\r\n            autoUpdateTimezone,\r\n            savePreferences,\r\n        }, dispatch),\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsDisplay);\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {defineMessages, FormattedDate, FormattedMessage, injectIntl, intlShape} from 'react-intl';\r\n\r\nimport {isEmail} from 'mattermost-redux/utils/helpers';\r\n\r\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\r\nimport {AcceptedProfileImageTypes, Constants} from 'utils/constants.jsx';\r\nimport * as Utils from 'utils/utils.jsx';\r\nimport {t} from 'utils/i18n';\r\n\r\nimport SettingItemMax from 'components/setting_item_max.jsx';\r\nimport SettingItemMin from 'components/setting_item_min.jsx';\r\nimport SettingPicture from 'components/setting_picture.jsx';\r\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper.jsx';\r\nimport {AnnouncementBarMessages, AnnouncementBarTypes} from 'utils/constants';\r\n\r\nconst holders = defineMessages({\r\n    usernameReserved: {\r\n        id: t('user.settings.general.usernameReserved'),\r\n        defaultMessage: 'This username is reserved, please choose a new one.',\r\n    },\r\n    usernameRestrictions: {\r\n        id: t('user.settings.general.usernameRestrictions'),\r\n        defaultMessage: \"Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols '.', '-', and '_'.\",\r\n    },\r\n    validEmail: {\r\n        id: t('user.settings.general.validEmail'),\r\n        defaultMessage: 'Please enter a valid email address.',\r\n    },\r\n    emailMatch: {\r\n        id: t('user.settings.general.emailMatch'),\r\n        defaultMessage: 'The new emails you entered do not match.',\r\n    },\r\n    incorrectPassword: {\r\n        id: t('user.settings.general.incorrectPassword'),\r\n        defaultMessage: 'Your password is incorrect.',\r\n    },\r\n    emptyPassword: {\r\n        id: t('user.settings.general.emptyPassword'),\r\n        defaultMessage: 'Please enter your current password.',\r\n    },\r\n    validImage: {\r\n        id: t('user.settings.general.validImage'),\r\n        defaultMessage: 'Only BMP, JPG or PNG images may be used for profile pictures',\r\n    },\r\n    imageTooLarge: {\r\n        id: t('user.settings.general.imageTooLarge'),\r\n        defaultMessage: 'Unable to upload profile image. File is too large.',\r\n    },\r\n    uploadImage: {\r\n        id: t('user.settings.general.uploadImage'),\r\n        defaultMessage: \"Click 'Edit' to upload an image.\",\r\n    },\r\n    uploadImageMobile: {\r\n        id: t('user.settings.general.mobile.uploadImage'),\r\n        defaultMessage: 'Click to upload an image.',\r\n    },\r\n    fullName: {\r\n        id: t('user.settings.general.fullName'),\r\n        defaultMessage: 'Full Name',\r\n    },\r\n    nickname: {\r\n        id: t('user.settings.general.nickname'),\r\n        defaultMessage: 'Nickname',\r\n    },\r\n    username: {\r\n        id: t('user.settings.general.username'),\r\n        defaultMessage: 'Username',\r\n    },\r\n    profilePicture: {\r\n        id: t('user.settings.general.profilePicture'),\r\n        defaultMessage: 'Profile Picture',\r\n    },\r\n    close: {\r\n        id: t('user.settings.general.close'),\r\n        defaultMessage: 'Close',\r\n    },\r\n    position: {\r\n        id: t('user.settings.general.position'),\r\n        defaultMessage: 'Position',\r\n    },\r\n});\r\n\r\nconst prevSections = {\r\n    name: 'dummySectionName', // dummy value that should never match any section name\r\n    username: 'name',\r\n    nickname: 'username',\r\n    position: 'nickname',\r\n    email: 'position',\r\n    picture: 'email',\r\n};\r\n\r\nclass UserSettingsGeneralTab extends React.Component {\r\n    static propTypes = {\r\n        intl: intlShape.isRequired,\r\n        user: PropTypes.object.isRequired,\r\n        updateSection: PropTypes.func.isRequired,\r\n        updateTab: PropTypes.func.isRequired,\r\n        activeSection: PropTypes.string.isRequired,\r\n        prevActiveSection: PropTypes.string.isRequired,\r\n        closeModal: PropTypes.func.isRequired,\r\n        collapseModal: PropTypes.func.isRequired,\r\n        actions: PropTypes.shape({\r\n            logError: PropTypes.func.isRequired,\r\n            clearErrors: PropTypes.func.isRequired,\r\n            getMe: PropTypes.func.isRequired,\r\n            updateMe: PropTypes.func.isRequired,\r\n            sendVerificationEmail: PropTypes.func.isRequired,\r\n            setDefaultProfileImage: PropTypes.func.isRequired,\r\n            uploadProfileImage: PropTypes.func.isRequired,\r\n        }).isRequired,\r\n        sendEmailNotifications: PropTypes.bool,\r\n        requireEmailVerification: PropTypes.bool,\r\n        maxFileSize: PropTypes.number,\r\n        ldapFirstNameAttributeSet: PropTypes.bool,\r\n        ldapLastNameAttributeSet: PropTypes.bool,\r\n        samlFirstNameAttributeSet: PropTypes.bool,\r\n        samlLastNameAttributeSet: PropTypes.bool,\r\n        ldapNicknameAttributeSet: PropTypes.bool,\r\n        samlNicknameAttributeSet: PropTypes.bool,\r\n        ldapPositionAttributeSet: PropTypes.bool,\r\n        samlPositionAttributeSet: PropTypes.bool,\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.submitActive = false;\r\n\r\n        this.state = this.setupInitialState(props);\r\n    }\r\n\r\n    handleEmailResend = (email) => {\r\n        this.setState({resendStatus: 'sending', showSpinner: true});\r\n        this.props.actions.sendVerificationEmail(email).then(({data, error: err}) => {\r\n            if (data) {\r\n                this.setState({resendStatus: 'success'});\r\n            } else if (err) {\r\n                this.setState({resendStatus: 'failure'});\r\n            }\r\n        });\r\n    }\r\n\r\n    createEmailResendLink = (email) => {\r\n        return (\r\n            <span className='resend-verification-wrapper'>\r\n                <LoadingWrapper\r\n                    loading={this.state.showSpinner}\r\n                    text={Utils.localizeMessage('user.settings.general.sending', 'Sending')}\r\n                >\r\n                    <a\r\n                        onClick={() => {\r\n                            this.handleEmailResend(email);\r\n                            setTimeout(() => {\r\n                                this.setState({\r\n                                    showSpinner: false,\r\n                                });\r\n                            }, 500);\r\n                        }}\r\n                    >\r\n                        <FormattedMessage\r\n                            id='user.settings.general.sendAgain'\r\n                            defaultMessage='Send again'\r\n                        />\r\n                    </a>\r\n                </LoadingWrapper>\r\n            </span>\r\n        );\r\n    }\r\n\r\n    submitUsername = () => {\r\n        const user = Object.assign({}, this.props.user);\r\n        const username = this.state.username.trim().toLowerCase();\r\n\r\n        const {formatMessage} = this.props.intl;\r\n        const usernameError = Utils.isValidUsername(username);\r\n        if (usernameError === 'Cannot use a reserved word as a username.') {\r\n            this.setState({clientError: formatMessage(holders.usernameReserved), serverError: ''});\r\n            return;\r\n        } else if (usernameError) {\r\n            this.setState({clientError: formatMessage(holders.usernameRestrictions, {min: Constants.MIN_USERNAME_LENGTH, max: Constants.MAX_USERNAME_LENGTH}), serverError: ''});\r\n            return;\r\n        }\r\n\r\n        if (user.username === username) {\r\n            this.updateSection('');\r\n            return;\r\n        }\r\n\r\n        user.username = username;\r\n\r\n        trackEvent('settings', 'user_settings_update', {field: 'username'});\r\n\r\n        this.submitUser(user, false);\r\n    }\r\n\r\n    submitNickname = () => {\r\n        const user = Object.assign({}, this.props.user);\r\n        const nickname = this.state.nickname.trim();\r\n\r\n        if (user.nickname === nickname) {\r\n            this.updateSection('');\r\n            return;\r\n        }\r\n\r\n        user.nickname = nickname;\r\n\r\n        trackEvent('settings', 'user_settings_update', {field: 'nickname'});\r\n\r\n        this.submitUser(user, false);\r\n    }\r\n\r\n    submitName = () => {\r\n        const user = Object.assign({}, this.props.user);\r\n        const firstName = this.state.firstName.trim();\r\n        const lastName = this.state.lastName.trim();\r\n\r\n        if (user.first_name === firstName && user.last_name === lastName) {\r\n            this.updateSection('');\r\n            return;\r\n        }\r\n\r\n        user.first_name = firstName;\r\n        user.last_name = lastName;\r\n\r\n        trackEvent('settings', 'user_settings_update', {field: 'fullname'});\r\n\r\n        this.submitUser(user, false);\r\n    }\r\n\r\n    submitEmail = () => {\r\n        const user = Object.assign({}, this.props.user);\r\n        const email = this.state.email.trim().toLowerCase();\r\n        const confirmEmail = this.state.confirmEmail.trim().toLowerCase();\r\n        const currentPassword = this.state.currentPassword;\r\n\r\n        const {formatMessage} = this.props.intl;\r\n\r\n        if (email === user.email && (confirmEmail === '' || confirmEmail === user.email)) {\r\n            this.updateSection('');\r\n            return;\r\n        }\r\n\r\n        if (email === '' || !isEmail(email)) {\r\n            this.setState({emailError: formatMessage(holders.validEmail), clientError: '', serverError: ''});\r\n            return;\r\n        }\r\n\r\n        if (email !== confirmEmail) {\r\n            this.setState({emailError: formatMessage(holders.emailMatch), clientError: '', serverError: ''});\r\n            return;\r\n        }\r\n\r\n        if (currentPassword === '') {\r\n            this.setState({emailError: formatMessage(holders.emptyPassword), clientError: '', serverError: ''});\r\n            return;\r\n        }\r\n\r\n        user.email = email;\r\n        user.password = currentPassword;\r\n        trackEvent('settings', 'user_settings_update', {field: 'email'});\r\n        this.submitUser(user, true);\r\n    }\r\n\r\n    submitUser = (user, emailUpdated) => {\r\n        const {formatMessage} = this.props.intl;\r\n        this.setState({sectionIsSaving: true});\r\n\r\n        this.props.actions.updateMe(user).\r\n            then(({data, error: err}) => {\r\n                if (data) {\r\n                    this.updateSection('');\r\n                    this.props.actions.getMe();\r\n                    const verificationEnabled = this.props.sendEmailNotifications && this.props.requireEmailVerification && emailUpdated;\r\n                    if (verificationEnabled) {\r\n                        this.props.actions.clearErrors();\r\n                        this.props.actions.logError({\r\n                            message: AnnouncementBarMessages.EMAIL_VERIFICATION_REQUIRED,\r\n                            type: AnnouncementBarTypes.SUCCESS,\r\n                        }, true);\r\n                    }\r\n                } else if (err) {\r\n                    let serverError;\r\n                    if (err.server_error_id &&\r\n                        err.server_error_id === 'api.user.check_user_password.invalid.app_error') {\r\n                        serverError = formatMessage(holders.incorrectPassword);\r\n                    } else if (err.message) {\r\n                        serverError = err.message;\r\n                    } else {\r\n                        serverError = err;\r\n                    }\r\n                    this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\r\n                }\r\n            });\r\n    }\r\n\r\n    setDefaultProfilePicture = async () => {\r\n        try {\r\n            await this.props.actions.setDefaultProfileImage(this.props.user.id);\r\n            this.updateSection('');\r\n            this.submitActive = false;\r\n        } catch (err) {\r\n            let serverError;\r\n            if (err.message) {\r\n                serverError = err.message;\r\n            } else {\r\n                serverError = err;\r\n            }\r\n            this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\r\n        }\r\n    }\r\n\r\n    submitPicture = () => {\r\n        if (!this.state.pictureFile) {\r\n            return;\r\n        }\r\n\r\n        if (!this.submitActive) {\r\n            return;\r\n        }\r\n\r\n        trackEvent('settings', 'user_settings_update', {field: 'picture'});\r\n\r\n        const {formatMessage} = this.props.intl;\r\n        const file = this.state.pictureFile;\r\n\r\n        if (!AcceptedProfileImageTypes.includes(file.type)) {\r\n            this.setState({clientError: formatMessage(holders.validImage), serverError: ''});\r\n            return;\r\n        } else if (file.size > this.props.maxFileSize) {\r\n            this.setState({clientError: formatMessage(holders.imageTooLarge), serverError: ''});\r\n            return;\r\n        }\r\n\r\n        this.setState({loadingPicture: true});\r\n\r\n        this.props.actions.uploadProfileImage(this.props.user.id, file).\r\n            then(({data, error: err}) => {\r\n                if (data) {\r\n                    this.updateSection('');\r\n                    this.submitActive = false;\r\n                } else if (err) {\r\n                    var state = this.setupInitialState(this.props);\r\n                    state.serverError = err.message;\r\n                    this.setState(state);\r\n                }\r\n            });\r\n    }\r\n\r\n    submitPosition = () => {\r\n        const user = Object.assign({}, this.props.user);\r\n        const position = this.state.position.trim();\r\n\r\n        if (user.position === position) {\r\n            this.updateSection('');\r\n            return;\r\n        }\r\n\r\n        user.position = position;\r\n\r\n        trackEvent('settings', 'user_settings_update', {field: 'position'});\r\n\r\n        this.submitUser(user, false);\r\n    }\r\n\r\n    updateUsername = (e) => {\r\n        this.setState({username: e.target.value});\r\n    }\r\n\r\n    updateFirstName = (e) => {\r\n        this.setState({firstName: e.target.value});\r\n    }\r\n\r\n    updateLastName = (e) => {\r\n        this.setState({lastName: e.target.value});\r\n    }\r\n\r\n    updateNickname = (e) => {\r\n        this.setState({nickname: e.target.value});\r\n    }\r\n\r\n    updatePosition = (e) => {\r\n        this.setState({position: e.target.value});\r\n    }\r\n\r\n    updateEmail = (e) => {\r\n        this.setState({email: e.target.value});\r\n    }\r\n\r\n    updateConfirmEmail = (e) => {\r\n        this.setState({confirmEmail: e.target.value});\r\n    }\r\n\r\n    updateCurrentPassword = (e) => {\r\n        this.setState({currentPassword: e.target.value});\r\n    }\r\n\r\n    updatePicture = (e) => {\r\n        if (e.target.files && e.target.files[0]) {\r\n            this.setState({pictureFile: e.target.files[0]});\r\n\r\n            this.submitActive = true;\r\n            this.setState({clientError: null});\r\n        } else {\r\n            this.setState({pictureFile: null});\r\n        }\r\n    }\r\n\r\n    updateSection = (section) => {\r\n        this.setState(Object.assign({}, this.setupInitialState(this.props), {clientError: '', serverError: '', emailError: '', sectionIsSaving: false}));\r\n        this.submitActive = false;\r\n        this.props.updateSection(section);\r\n    }\r\n\r\n    setupInitialState(props) {\r\n        const user = props.user;\r\n\r\n        return {\r\n            username: user.username,\r\n            firstName: user.first_name,\r\n            lastName: user.last_name,\r\n            nickname: user.nickname,\r\n            position: user.position,\r\n            originalEmail: user.email,\r\n            email: '',\r\n            confirmEmail: '',\r\n            currentPassword: '',\r\n            pictureFile: null,\r\n            loadingPicture: false,\r\n            sectionIsSaving: false,\r\n            showSpinner: false,\r\n        };\r\n    }\r\n\r\n    createEmailSection() {\r\n        let emailSection;\r\n        if (this.props.activeSection === 'email') {\r\n            const emailEnabled = this.props.sendEmailNotifications;\r\n            const emailVerificationEnabled = this.props.requireEmailVerification;\r\n            const inputs = [];\r\n\r\n            let helpText = (\r\n                <FormattedMessage\r\n                    id='user.settings.general.emailHelp1'\r\n                    defaultMessage='Email is used for sign-in, notifications, and password reset. Email requires verification if changed.'\r\n                />\r\n            );\r\n\r\n            if (!emailEnabled) {\r\n                helpText = (\r\n                    <div className='setting-list__hint col-sm-12 text-danger'>\r\n                        <FormattedMessage\r\n                            id='user.settings.general.emailHelp2'\r\n                            defaultMessage='Email has been disabled by your System Administrator. No notification emails will be sent until it is enabled.'\r\n                        />\r\n                    </div>\r\n                );\r\n            } else if (!emailVerificationEnabled) {\r\n                helpText = (\r\n                    <FormattedMessage\r\n                        id='user.settings.general.emailHelp3'\r\n                        defaultMessage='Email is used for sign-in, notifications, and password reset.'\r\n                    />\r\n                );\r\n            }\r\n\r\n            let submit = null;\r\n\r\n            if (this.props.user.auth_service === '') {\r\n                inputs.push(\r\n                    <div key='currentEmailSetting'>\r\n                        <div className='form-group'>\r\n                            <label className='col-sm-5 control-label'>\r\n                                <FormattedMessage\r\n                                    id='user.settings.general.currentEmail'\r\n                                    defaultMessage='Current Email'\r\n                                />\r\n                            </label>\r\n                            <div className='col-sm-7'>\r\n                                <label className='control-label word-break--all text-left'>{this.state.originalEmail}</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n\r\n                inputs.push(\r\n                    <div key='emailSetting'>\r\n                        <div className='form-group'>\r\n                            <label className='col-sm-5 control-label'>\r\n                                <FormattedMessage\r\n                                    id='user.settings.general.newEmail'\r\n                                    defaultMessage='New Email'\r\n                                />\r\n                            </label>\r\n                            <div className='col-sm-7'>\r\n                                <input\r\n                                    autoFocus={true}\r\n                                    id='primaryEmail'\r\n                                    className='form-control'\r\n                                    type='email'\r\n                                    onChange={this.updateEmail}\r\n                                    value={this.state.email}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n\r\n                inputs.push(\r\n                    <div key='confirmEmailSetting'>\r\n                        <div className='form-group'>\r\n                            <label className='col-sm-5 control-label'>\r\n                                <FormattedMessage\r\n                                    id='user.settings.general.confirmEmail'\r\n                                    defaultMessage='Confirm Email'\r\n                                />\r\n                            </label>\r\n                            <div className='col-sm-7'>\r\n                                <input\r\n                                    id='confirmEmail'\r\n                                    className='form-control'\r\n                                    type='email'\r\n                                    onChange={this.updateConfirmEmail}\r\n                                    value={this.state.confirmEmail}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n\r\n                inputs.push(\r\n                    <div key='currentPassword'>\r\n                        <div className='form-group'>\r\n                            <label className='col-sm-5 control-label'>\r\n                                <FormattedMessage\r\n                                    id='user.settings.general.currentPassword'\r\n                                    defaultMessage='Current Password'\r\n                                />\r\n                            </label>\r\n                            <div className='col-sm-7'>\r\n                                <input\r\n                                    id='currentPassword'\r\n                                    className='form-control'\r\n                                    type='password'\r\n                                    onChange={this.updateCurrentPassword}\r\n                                    value={this.state.currentPassword}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        {helpText}\r\n                    </div>\r\n                );\r\n\r\n                submit = this.submitEmail;\r\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\r\n                inputs.push(\r\n                    <div\r\n                        key='oauthEmailInfo'\r\n                        className='form-group'\r\n                    >\r\n                        <div className='setting-list__hint padding-bottom x2'>\r\n                            <FormattedMessage\r\n                                id='user.settings.general.emailGitlabCantUpdate'\r\n                                defaultMessage='Login occurs through GitLab. Email cannot be updated. Email address used for notifications is {email}.'\r\n                                values={{\r\n                                    email: this.state.originalEmail,\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        {helpText}\r\n                    </div>\r\n                );\r\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\r\n                inputs.push(\r\n                    <div\r\n                        key='oauthEmailInfo'\r\n                        className='form-group'\r\n                    >\r\n                        <div className='setting-list__hint padding-bottom x2'>\r\n                            <FormattedMessage\r\n                                id='user.settings.general.emailGoogleCantUpdate'\r\n                                defaultMessage='Login occurs through Google Apps. Email cannot be updated. Email address used for notifications is {email}.'\r\n                                values={{\r\n                                    email: this.state.originalEmail,\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        {helpText}\r\n                    </div>\r\n                );\r\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\r\n                inputs.push(\r\n                    <div\r\n                        key='oauthEmailInfo'\r\n                        className='form-group'\r\n                    >\r\n                        <div className='setting-list__hint padding-bottom x2'>\r\n                            <FormattedMessage\r\n                                id='user.settings.general.emailOffice365CantUpdate'\r\n                                defaultMessage='Login occurs through Office 365. Email cannot be updated. Email address used for notifications is {email}.'\r\n                                values={{\r\n                                    email: this.state.originalEmail,\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        {helpText}\r\n                    </div>\r\n                );\r\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\r\n                inputs.push(\r\n                    <div\r\n                        key='oauthEmailInfo'\r\n                        className='padding-bottom'\r\n                    >\r\n                        <div className='setting-list__hint padding-bottom x2'>\r\n                            <FormattedMessage\r\n                                id='user.settings.general.emailLdapCantUpdate'\r\n                                defaultMessage='Login occurs through AD/LDAP. Email cannot be updated. Email address used for notifications is {email}.'\r\n                                values={{\r\n                                    email: this.state.originalEmail,\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\r\n                inputs.push(\r\n                    <div\r\n                        key='oauthEmailInfo'\r\n                        className='padding-bottom'\r\n                    >\r\n                        <div className='setting-list__hint padding-bottom x2'>\r\n                            <FormattedMessage\r\n                                id='user.settings.general.emailSamlCantUpdate'\r\n                                defaultMessage='Login occurs through SAML. Email cannot be updated. Email address used for notifications is {email}.'\r\n                                values={{\r\n                                    email: this.state.originalEmail,\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        {helpText}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            emailSection = (\r\n                <SettingItemMax\r\n                    title={\r\n                        <FormattedMessage\r\n                            id='user.settings.general.email'\r\n                            defaultMessage='Email'\r\n                        />\r\n                    }\r\n                    inputs={inputs}\r\n                    submit={submit}\r\n                    saving={this.state.sectionIsSaving}\r\n                    serverError={this.state.serverError}\r\n                    clientError={this.state.emailError}\r\n                    updateSection={this.updateSection}\r\n                />\r\n            );\r\n        } else {\r\n            let describe = '';\r\n            if (this.props.user.auth_service === '') {\r\n                describe = this.props.user.email;\r\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\r\n                describe = (\r\n                    <FormattedMessage\r\n                        id='user.settings.general.loginGitlab'\r\n                        defaultMessage='Login done through GitLab ({email})'\r\n                        values={{\r\n                            email: this.state.originalEmail,\r\n                        }}\r\n                    />\r\n                );\r\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\r\n                describe = (\r\n                    <FormattedMessage\r\n                        id='user.settings.general.loginGoogle'\r\n                        defaultMessage='Login done through Google Apps ({email})'\r\n                        values={{\r\n                            email: this.state.originalEmail,\r\n                        }}\r\n                    />\r\n                );\r\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\r\n                describe = (\r\n                    <FormattedMessage\r\n                        id='user.settings.general.loginOffice365'\r\n                        defaultMessage='Login done through Office 365 ({email})'\r\n                        values={{\r\n                            email: this.state.originalEmail,\r\n                        }}\r\n                    />\r\n                );\r\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\r\n                describe = (\r\n                    <FormattedMessage\r\n                        id='user.settings.general.loginLdap'\r\n                        defaultMessage='Login done through AD/LDAP ({email})'\r\n                        values={{\r\n                            email: this.state.originalEmail,\r\n                        }}\r\n                    />\r\n                );\r\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\r\n                describe = (\r\n                    <FormattedMessage\r\n                        id='user.settings.general.loginSaml'\r\n                        defaultMessage='Login done through SAML ({email})'\r\n                        values={{\r\n                            email: this.state.originalEmail,\r\n                        }}\r\n                    />\r\n                );\r\n            }\r\n\r\n            emailSection = (\r\n                <SettingItemMin\r\n                    title={\r\n                        <FormattedMessage\r\n                            id='user.settings.general.email'\r\n                            defaultMessage='Email'\r\n                        />\r\n                    }\r\n                    describe={describe}\r\n                    focused={this.props.prevActiveSection === prevSections.email}\r\n                    section={'email'}\r\n                    updateSection={this.updateSection}\r\n                />\r\n            );\r\n        }\r\n\r\n        return emailSection;\r\n    }\r\n\r\n    render() {\r\n        const user = this.props.user;\r\n        const {formatMessage} = this.props.intl;\r\n\r\n        let clientError = null;\r\n        if (this.state.clientError) {\r\n            clientError = this.state.clientError;\r\n        }\r\n        let serverError = null;\r\n        if (this.state.serverError) {\r\n            serverError = this.state.serverError;\r\n        }\r\n\r\n        let nameSection;\r\n        const inputs = [];\r\n\r\n        if (this.props.activeSection === 'name') {\r\n            let extraInfo;\r\n            let submit = null;\r\n            if (\r\n                (this.props.user.auth_service === 'ldap' &&\r\n                    (this.props.ldapFirstNameAttributeSet || this.props.ldapLastNameAttributeSet)) ||\r\n                (this.props.user.auth_service === Constants.SAML_SERVICE &&\r\n                    (this.props.samlFirstNameAttributeSet || this.props.samlLastNameAttributeSet))\r\n            ) {\r\n                extraInfo = (\r\n                    <span>\r\n                        <FormattedMessage\r\n                            id='user.settings.general.field_handled_externally'\r\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\r\n                        />\r\n                    </span>\r\n                );\r\n            } else {\r\n                inputs.push(\r\n                    <div\r\n                        key='firstNameSetting'\r\n                        className='form-group'\r\n                    >\r\n                        <label className='col-sm-5 control-label'>\r\n                            <FormattedMessage\r\n                                id='user.settings.general.firstName'\r\n                                defaultMessage='First Name'\r\n                            />\r\n                        </label>\r\n                        <div className='col-sm-7'>\r\n                            <input\r\n                                id='firstName'\r\n                                autoFocus={true}\r\n                                className='form-control'\r\n                                type='text'\r\n                                onChange={this.updateFirstName}\r\n                                value={this.state.firstName}\r\n                                onFocus={Utils.moveCursorToEnd}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n\r\n                inputs.push(\r\n                    <div\r\n                        key='lastNameSetting'\r\n                        className='form-group'\r\n                    >\r\n                        <label className='col-sm-5 control-label'>\r\n                            <FormattedMessage\r\n                                id='user.settings.general.lastName'\r\n                                defaultMessage='Last Name'\r\n                            />\r\n                        </label>\r\n                        <div className='col-sm-7'>\r\n                            <input\r\n                                id='lastName'\r\n                                className='form-control'\r\n                                type='text'\r\n                                onChange={this.updateLastName}\r\n                                value={this.state.lastName}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n\r\n                function notifClick(e) {\r\n                    e.preventDefault();\r\n                    this.updateSection('');\r\n                    this.props.updateTab('notifications');\r\n                }\r\n\r\n                const notifLink = (\r\n                    <a\r\n                        href='#'\r\n                        onClick={notifClick.bind(this)}\r\n                    >\r\n                        <FormattedMessage\r\n                            id='user.settings.general.notificationsLink'\r\n                            defaultMessage='Notifications'\r\n                        />\r\n                    </a>\r\n                );\r\n\r\n                extraInfo = (\r\n                    <span>\r\n                        <FormattedMessage\r\n                            id='user.settings.general.notificationsExtra'\r\n                            defaultMessage='By default, you will receive mention notifications when someone types your first name. Go to {notify} settings to change this default.'\r\n                            values={{\r\n                                notify: (notifLink),\r\n                            }}\r\n                        />\r\n                    </span>\r\n                );\r\n\r\n                submit = this.submitName;\r\n            }\r\n\r\n            nameSection = (\r\n                <SettingItemMax\r\n                    title={formatMessage(holders.fullName)}\r\n                    inputs={inputs}\r\n                    submit={submit}\r\n                    saving={this.state.sectionIsSaving}\r\n                    serverError={serverError}\r\n                    clientError={clientError}\r\n                    updateSection={this.updateSection}\r\n                    extraInfo={extraInfo}\r\n                />\r\n            );\r\n        } else {\r\n            let describe = '';\r\n\r\n            if (user.first_name && user.last_name) {\r\n                describe = user.first_name + ' ' + user.last_name;\r\n            } else if (user.first_name) {\r\n                describe = user.first_name;\r\n            } else if (user.last_name) {\r\n                describe = user.last_name;\r\n            } else {\r\n                describe = (\r\n                    <FormattedMessage\r\n                        id='user.settings.general.emptyName'\r\n                        defaultMessage=\"Click 'Edit' to add your full name\"\r\n                    />\r\n                );\r\n                if (Utils.isMobile()) {\r\n                    describe = (\r\n                        <FormattedMessage\r\n                            id='user.settings.general.mobile.emptyName'\r\n                            defaultMessage='Click to add your full name'\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            nameSection = (\r\n                <SettingItemMin\r\n                    title={formatMessage(holders.fullName)}\r\n                    describe={describe}\r\n                    focused={this.props.prevActiveSection === prevSections.name}\r\n                    section={'name'}\r\n                    updateSection={this.updateSection}\r\n                />\r\n            );\r\n        }\r\n\r\n        let nicknameSection;\r\n        if (this.props.activeSection === 'nickname') {\r\n            let extraInfo;\r\n            let submit = null;\r\n            if ((this.props.user.auth_service === 'ldap' && this.props.ldapNicknameAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlNicknameAttributeSet)) {\r\n                extraInfo = (\r\n                    <span>\r\n                        <FormattedMessage\r\n                            id='user.settings.general.field_handled_externally'\r\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\r\n                        />\r\n                    </span>\r\n                );\r\n            } else {\r\n                let nicknameLabel = (\r\n                    <FormattedMessage\r\n                        id='user.settings.general.nickname'\r\n                        defaultMessage='Nickname'\r\n                    />\r\n                );\r\n                if (Utils.isMobile()) {\r\n                    nicknameLabel = '';\r\n                }\r\n\r\n                inputs.push(\r\n                    <div\r\n                        key='nicknameSetting'\r\n                        className='form-group'\r\n                    >\r\n                        <label className='col-sm-5 control-label'>{nicknameLabel}</label>\r\n                        <div className='col-sm-7'>\r\n                            <input\r\n                                id='nickname'\r\n                                autoFocus={true}\r\n                                className='form-control'\r\n                                type='text'\r\n                                onChange={this.updateNickname}\r\n                                value={this.state.nickname}\r\n                                maxLength={Constants.MAX_NICKNAME_LENGTH}\r\n                                autoCapitalize='off'\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n\r\n                extraInfo = (\r\n                    <span>\r\n                        <FormattedMessage\r\n                            id='user.settings.general.nicknameExtra'\r\n                            defaultMessage='Use Nickname for a name you might be called that is different from your first name and username. This is most often used when two or more people have similar sounding names and usernames.'\r\n                        />\r\n                    </span>\r\n                );\r\n\r\n                submit = this.submitNickname;\r\n            }\r\n\r\n            nicknameSection = (\r\n                <SettingItemMax\r\n                    title={formatMessage(holders.nickname)}\r\n                    inputs={inputs}\r\n                    submit={submit}\r\n                    saving={this.state.sectionIsSaving}\r\n                    serverError={serverError}\r\n                    clientError={clientError}\r\n                    updateSection={this.updateSection}\r\n                    extraInfo={extraInfo}\r\n                />\r\n            );\r\n        } else {\r\n            let describe = '';\r\n            if (user.nickname) {\r\n                describe = user.nickname;\r\n            } else {\r\n                describe = (\r\n                    <FormattedMessage\r\n                        id='user.settings.general.emptyNickname'\r\n                        defaultMessage=\"Click 'Edit' to add a nickname\"\r\n                    />\r\n                );\r\n                if (Utils.isMobile()) {\r\n                    describe = (\r\n                        <FormattedMessage\r\n                            id='user.settings.general.mobile.emptyNickname'\r\n                            defaultMessage='Click to add a nickname'\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            nicknameSection = (\r\n                <SettingItemMin\r\n                    title={formatMessage(holders.nickname)}\r\n                    describe={describe}\r\n                    focused={this.props.prevActiveSection === prevSections.nickname}\r\n                    section={'nickname'}\r\n                    updateSection={this.updateSection}\r\n                />\r\n            );\r\n        }\r\n\r\n        let usernameSection;\r\n        if (this.props.activeSection === 'username') {\r\n            let extraInfo;\r\n            let submit = null;\r\n            if (this.props.user.auth_service === '') {\r\n                let usernameLabel = (\r\n                    <FormattedMessage\r\n                        id='user.settings.general.username'\r\n                        defaultMessage='Username'\r\n                    />\r\n                );\r\n                if (Utils.isMobile()) {\r\n                    usernameLabel = '';\r\n                }\r\n\r\n                inputs.push(\r\n                    <div\r\n                        key='usernameSetting'\r\n                        className='form-group'\r\n                    >\r\n                        <label className='col-sm-5 control-label'>{usernameLabel}</label>\r\n                        <div className='col-sm-7'>\r\n                            <input\r\n                                id='username'\r\n                                autoFocus={true}\r\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\r\n                                className='form-control'\r\n                                type='text'\r\n                                onChange={this.updateUsername}\r\n                                value={this.state.username}\r\n                                autoCapitalize='off'\r\n                                onFocus={Utils.moveCursorToEnd}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n\r\n                extraInfo = (\r\n                    <span>\r\n                        <FormattedMessage\r\n                            id='user.settings.general.usernameInfo'\r\n                            defaultMessage='Pick something easy for teammates to recognize and recall.'\r\n                        />\r\n                    </span>\r\n                );\r\n\r\n                submit = this.submitUsername;\r\n            } else {\r\n                extraInfo = (\r\n                    <span>\r\n                        <FormattedMessage\r\n                            id='user.settings.general.field_handled_externally'\r\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\r\n                        />\r\n                    </span>\r\n                );\r\n            }\r\n\r\n            usernameSection = (\r\n                <SettingItemMax\r\n                    title={formatMessage(holders.username)}\r\n                    inputs={inputs}\r\n                    submit={submit}\r\n                    saving={this.state.sectionIsSaving}\r\n                    serverError={serverError}\r\n                    clientError={clientError}\r\n                    updateSection={this.updateSection}\r\n                    extraInfo={extraInfo}\r\n                />\r\n            );\r\n        } else {\r\n            usernameSection = (\r\n                <SettingItemMin\r\n                    title={formatMessage(holders.username)}\r\n                    describe={this.props.user.username}\r\n                    focused={this.props.prevActiveSection === prevSections.username}\r\n                    section={'username'}\r\n                    updateSection={this.updateSection}\r\n                />\r\n            );\r\n        }\r\n\r\n        let positionSection;\r\n        if (this.props.activeSection === 'position') {\r\n            let extraInfo;\r\n            let submit = null;\r\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE && this.props.ldapPositionAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlPositionAttributeSet)) {\r\n                extraInfo = (\r\n                    <span>\r\n                        <FormattedMessage\r\n                            id='user.settings.general.field_handled_externally'\r\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\r\n                        />\r\n                    </span>\r\n                );\r\n            } else {\r\n                let positionLabel = (\r\n                    <FormattedMessage\r\n                        id='user.settings.general.position'\r\n                        defaultMessage='Position'\r\n                    />\r\n                );\r\n                if (Utils.isMobile()) {\r\n                    positionLabel = '';\r\n                }\r\n\r\n                inputs.push(\r\n                    <div\r\n                        key='positionSetting'\r\n                        className='form-group'\r\n                    >\r\n                        <label className='col-sm-5 control-label'>{positionLabel}</label>\r\n                        <div className='col-sm-7'>\r\n                            <input\r\n                                id='position'\r\n                                autoFocus={true}\r\n                                className='form-control'\r\n                                type='text'\r\n                                onChange={this.updatePosition}\r\n                                value={this.state.position}\r\n                                maxLength={Constants.MAX_POSITION_LENGTH}\r\n                                autoCapitalize='off'\r\n                                onFocus={Utils.moveCursorToEnd}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n\r\n                extraInfo = (\r\n                    <span>\r\n                        <FormattedMessage\r\n                            id='user.settings.general.positionExtra'\r\n                            defaultMessage='Use Position for your role or job title. This will be shown in your profile popover.'\r\n                        />\r\n                    </span>\r\n                );\r\n\r\n                submit = this.submitPosition;\r\n            }\r\n\r\n            positionSection = (\r\n                <SettingItemMax\r\n                    title={formatMessage(holders.position)}\r\n                    inputs={inputs}\r\n                    submit={submit}\r\n                    saving={this.state.sectionIsSaving}\r\n                    serverError={serverError}\r\n                    clientError={clientError}\r\n                    updateSection={this.updateSection}\r\n                    extraInfo={extraInfo}\r\n                />\r\n            );\r\n        } else {\r\n            let describe = '';\r\n            if (user.position) {\r\n                describe = user.position;\r\n            } else {\r\n                describe = (\r\n                    <FormattedMessage\r\n                        id='user.settings.general.emptyPosition'\r\n                        defaultMessage=\"Click 'Edit' to add your job title / position\"\r\n                    />\r\n                );\r\n                if (Utils.isMobile()) {\r\n                    describe = (\r\n                        <FormattedMessage\r\n                            id='user.settings.general.mobile.emptyPosition'\r\n                            defaultMessage='Click to add your job title / position'\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n\r\n            positionSection = (\r\n                <SettingItemMin\r\n                    title={formatMessage(holders.position)}\r\n                    describe={describe}\r\n                    focused={this.props.prevActiveSection === prevSections.position}\r\n                    section={'position'}\r\n                    updateSection={this.updateSection}\r\n                />\r\n            );\r\n        }\r\n\r\n        const emailSection = this.createEmailSection();\r\n\r\n        let pictureSection;\r\n        if (this.props.activeSection === 'picture') {\r\n            pictureSection = (\r\n                <SettingPicture\r\n                    title={formatMessage(holders.profilePicture)}\r\n                    onSubmit={this.submitPicture}\r\n                    onSetDefault={user.last_picture_update > 0 ? this.setDefaultProfilePicture : null}\r\n                    src={Utils.imageURLForUser(user)}\r\n                    defaultImageSrc={Utils.defaultImageURLForUser(user.id)}\r\n                    serverError={serverError}\r\n                    clientError={clientError}\r\n                    updateSection={(e) => {\r\n                        this.updateSection('');\r\n                        e.preventDefault();\r\n                    }}\r\n                    file={this.state.pictureFile}\r\n                    onFileChange={this.updatePicture}\r\n                    submitActive={this.submitActive}\r\n                    loadingPicture={this.state.loadingPicture}\r\n                    maxFileSize={this.props.maxFileSize}\r\n                />\r\n            );\r\n        } else {\r\n            let minMessage = formatMessage(holders.uploadImage);\r\n            if (Utils.isMobile()) {\r\n                minMessage = formatMessage(holders.uploadImageMobile);\r\n            }\r\n            if (user.last_picture_update) {\r\n                minMessage = (\r\n                    <FormattedMessage\r\n                        id='user.settings.general.imageUpdated'\r\n                        defaultMessage='Image last updated {date}'\r\n                        values={{\r\n                            date: (\r\n                                <FormattedDate\r\n                                    value={new Date(user.last_picture_update)}\r\n                                    day='2-digit'\r\n                                    month='short'\r\n                                    year='numeric'\r\n                                />\r\n                            ),\r\n                        }}\r\n                    />\r\n                );\r\n            }\r\n            pictureSection = (\r\n                <SettingItemMin\r\n                    title={formatMessage(holders.profilePicture)}\r\n                    describe={minMessage}\r\n                    focused={this.props.prevActiveSection === prevSections.picture}\r\n                    section={'picture'}\r\n                    updateSection={this.updateSection}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div id='generalSettings'>\r\n                <div className='modal-header'>\r\n                    <button\r\n                        id='closeUserSettings'\r\n                        type='button'\r\n                        className='close'\r\n                        data-dismiss='modal'\r\n                        aria-label={formatMessage(holders.close)}\r\n                        onClick={this.props.closeModal}\r\n                    >\r\n                        <span aria-hidden='true'>{'×'}</span>\r\n                    </button>\r\n                    <h4\r\n                        className='modal-title'\r\n                        ref='title'\r\n                    >\r\n                        <div className='modal-back'>\r\n                            <FormattedMessage\r\n                                id='generic_icons.collapse'\r\n                                defaultMessage='Collapse Icon'\r\n                            >\r\n                                {(title) => (\r\n                                    <i\r\n                                        className='fa fa-angle-left'\r\n                                        title={title}\r\n                                        onClick={this.props.collapseModal}\r\n                                    />\r\n                                )}\r\n                            </FormattedMessage>\r\n                        </div>\r\n                        <FormattedMessage\r\n                            id='user.settings.general.title'\r\n                            defaultMessage='General Settings'\r\n                        />\r\n                    </h4>\r\n                </div>\r\n                <div className='user-settings'>\r\n                    <h3\r\n                        id='generalSettingsTitle'\r\n                        className='tab-header'\r\n                    >\r\n                        <FormattedMessage\r\n                            id='user.settings.general.title'\r\n                            defaultMessage='General Settings'\r\n                        />\r\n                    </h3>\r\n                    <div className='divider-dark first'/>\r\n                    {nameSection}\r\n                    <div className='divider-light'/>\r\n                    {usernameSection}\r\n                    <div className='divider-light'/>\r\n                    {nicknameSection}\r\n                    <div className='divider-light'/>\r\n                    {positionSection}\r\n                    <div className='divider-light'/>\r\n                    {emailSection}\r\n                    <div className='divider-light'/>\r\n                    {pictureSection}\r\n                    <div className='divider-dark'/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default injectIntl(UserSettingsGeneralTab);\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {\r\n    getMe,\r\n    updateMe,\r\n    sendVerificationEmail,\r\n    setDefaultProfileImage,\r\n    uploadProfileImage,\r\n} from 'mattermost-redux/actions/users';\r\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\r\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\r\n\r\nimport UserSettingsGeneralTab from './user_settings_general.jsx';\r\n\r\nfunction mapStateToProps(state) {\r\n    const config = getConfig(state);\r\n\r\n    const sendEmailNotifications = config.SendEmailNotifications === 'true';\r\n    const requireEmailVerification = config.RequireEmailVerification === 'true';\r\n    const maxFileSize = parseInt(config.MaxFileSize, 10);\r\n    const ldapFirstNameAttributeSet = config.LdapFirstNameAttributeSet === 'true';\r\n    const ldapLastNameAttributeSet = config.LdapLastNameAttributeSet === 'true';\r\n    const samlFirstNameAttributeSet = config.SamlFirstNameAttributeSet === 'true';\r\n    const samlLastNameAttributeSet = config.SamlLastNameAttributeSet === 'true';\r\n    const ldapNicknameAttributeSet = config.LdapNicknameAttributeSet === 'true';\r\n    const samlNicknameAttributeSet = config.SamlNicknameAttributeSet === 'true';\r\n    const samlPositionAttributeSet = config.SamlPositionAttributeSet === 'true';\r\n    const ldapPositionAttributeSet = config.LdapPositionAttributeSet === 'true';\r\n\r\n    return {\r\n        sendEmailNotifications,\r\n        requireEmailVerification,\r\n        maxFileSize,\r\n        ldapFirstNameAttributeSet,\r\n        ldapLastNameAttributeSet,\r\n        samlFirstNameAttributeSet,\r\n        samlLastNameAttributeSet,\r\n        ldapNicknameAttributeSet,\r\n        samlNicknameAttributeSet,\r\n        samlPositionAttributeSet,\r\n        ldapPositionAttributeSet,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators({\r\n            logError,\r\n            clearErrors,\r\n            getMe,\r\n            updateMe,\r\n            sendVerificationEmail,\r\n            setDefaultProfileImage,\r\n            uploadProfileImage,\r\n        }, dispatch),\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsGeneralTab);\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\n\r\nimport {NotificationLevels} from 'utils/constants.jsx';\r\nimport * as Utils from 'utils/utils.jsx';\r\nimport {t} from 'utils/i18n.jsx';\r\nimport SettingItemMax from 'components/setting_item_max.jsx';\r\nimport SettingItemMin from 'components/setting_item_min.jsx';\r\n\r\nexport default class DesktopNotificationSettings extends React.Component {\r\n    handleMinUpdateSection = (section) => {\r\n        this.props.updateSection(section);\r\n\r\n        this.props.cancel();\r\n    }\r\n\r\n    handleMaxUpdateSection = (section) => {\r\n        this.props.updateSection(section);\r\n    }\r\n\r\n    handleOnChange = (e) => {\r\n        const key = e.currentTarget.getAttribute('data-key');\r\n        const value = e.currentTarget.getAttribute('data-value');\r\n        this.props.setParentState(key, value);\r\n    }\r\n\r\n    buildMaximizedSetting = () => {\r\n        const inputs = [];\r\n\r\n        const activityRadio = [false, false, false];\r\n        if (this.props.activity === NotificationLevels.MENTION) {\r\n            activityRadio[1] = true;\r\n        } else if (this.props.activity === NotificationLevels.NONE) {\r\n            activityRadio[2] = true;\r\n        } else {\r\n            activityRadio[0] = true;\r\n        }\r\n\r\n        let soundSection;\r\n        if (this.props.activity !== NotificationLevels.NONE) {\r\n            const soundRadio = [false, false];\r\n            if (this.props.sound === 'false') {\r\n                soundRadio[1] = true;\r\n            } else {\r\n                soundRadio[0] = true;\r\n            }\r\n\r\n            if (Utils.hasSoundOptions()&&false) {\r\n                soundSection = (\r\n                    <div>\r\n                        <hr/>\r\n                        <label>\r\n                            <FormattedMessage\r\n                                id='user.settings.notifications.desktop.sound'\r\n                                defaultMessage='Notification sound'\r\n                            />\r\n                        </label>\r\n                        <br/>\r\n                        <div className='radio'>\r\n                            <label>\r\n                                <input\r\n                                    id='soundOn'\r\n                                    type='radio'\r\n                                    name='notificationSounds'\r\n                                    checked={soundRadio[0]}\r\n                                    data-key={'desktopSound'}\r\n                                    data-value={'true'}\r\n                                    onChange={this.handleOnChange}\r\n                                />\r\n                                <FormattedMessage\r\n                                    id='user.settings.notifications.on'\r\n                                    defaultMessage='On'\r\n                                />\r\n                            </label>\r\n                            <br/>\r\n                        </div>\r\n                        <div className='radio'>\r\n                            <label>\r\n                                <input\r\n                                    id='soundOff'\r\n                                    type='radio'\r\n                                    name='notificationSounds'\r\n                                    checked={soundRadio[1]}\r\n                                    data-key={'desktopSound'}\r\n                                    data-value={'false'}\r\n                                    onChange={this.handleOnChange}\r\n                                />\r\n                                <FormattedMessage\r\n                                    id='user.settings.notifications.off'\r\n                                    defaultMessage='Off'\r\n                                />\r\n                            </label>\r\n                            <br/>\r\n                        </div>\r\n                        <br/>\r\n                        <span>\r\n                            <FormattedMessage\r\n                                id='user.settings.notifications.sounds_info'\r\n                                defaultMessage='Notification sounds are available on IE11, Safari, Chrome and Mattermost Desktop Apps.'\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                );\r\n            } else {\r\n                soundSection = (\r\n                    <div>\r\n                        <hr/>\r\n                        <label>\r\n                            <FormattedMessage\r\n                                id='user.settings.notifications.desktop.sound'\r\n                                defaultMessage='Notification sound'\r\n                            />\r\n                        </label>\r\n                        <br/>\r\n                        <FormattedMessage\r\n                            id='user.settings.notifications.soundConfig'\r\n                            defaultMessage='Please configure notification sounds in your browser settings'\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        inputs.push(\r\n            <div key='userNotificationLevelOption'>\r\n                <label>\r\n                    <FormattedMessage\r\n                        id='user.settings.notifications.desktop'\r\n                        defaultMessage='Send desktop notifications'\r\n                    />\r\n                </label>\r\n                <br/>\r\n                <div className='radio'>\r\n                    <label>\r\n                        <input\r\n                            id='desktopNotificationAllActivity'\r\n                            type='radio'\r\n                            name='desktopNotificationLevel'\r\n                            checked={activityRadio[0]}\r\n                            data-key={'desktopActivity'}\r\n                            data-value={NotificationLevels.ALL}\r\n                            onChange={this.handleOnChange}\r\n                        />\r\n                        <FormattedMessage\r\n                            id='user.settings.notifications.allActivity'\r\n                            defaultMessage='For all activity'\r\n                        />\r\n                    </label>\r\n                    <br/>\r\n                </div>\r\n                <div className='radio'>\r\n                    <label>\r\n                        <input\r\n                            id='desktopNotificationMentions'\r\n                            type='radio'\r\n                            name='desktopNotificationLevel'\r\n                            checked={activityRadio[1]}\r\n                            data-key={'desktopActivity'}\r\n                            data-value={NotificationLevels.MENTION}\r\n                            onChange={this.handleOnChange}\r\n                        />\r\n                        <FormattedMessage\r\n                            id='user.settings.notifications.onlyMentions'\r\n                            defaultMessage='Only for mentions and direct messages'\r\n                        />\r\n                    </label>\r\n                    <br/>\r\n                </div>\r\n                <div className='radio'>\r\n                    <label>\r\n                        <input\r\n                            id='desktopNotificationNever'\r\n                            type='radio'\r\n                            name='desktopNotificationLevel'\r\n                            checked={activityRadio[2]}\r\n                            data-key={'desktopActivity'}\r\n                            data-value={NotificationLevels.NONE}\r\n                            onChange={this.handleOnChange}\r\n                        />\r\n                        <FormattedMessage\r\n                            id='user.settings.notifications.never'\r\n                            defaultMessage='Never'\r\n                        />\r\n                    </label>\r\n                </div>\r\n                <br/>\r\n                <span>\r\n                    <FormattedMessage\r\n                        id='user.settings.notifications.info'\r\n                        defaultMessage='Desktop notifications are available on Edge, Firefox, Safari, Chrome and Mattermost Desktop Apps.'\r\n                    />\r\n                </span>\r\n                {soundSection}\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <SettingItemMax\r\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop notifications')}\r\n                inputs={inputs}\r\n                submit={this.props.submit}\r\n                saving={this.props.saving}\r\n                server_error={this.props.error}\r\n                updateSection={this.handleMaxUpdateSection}\r\n            />\r\n        );\r\n    }\r\n\r\n    buildMinimizedSetting = () => {\r\n        let formattedMessageProps;\r\n        const hasSoundOption = Utils.hasSoundOptions();\r\n        if (this.props.activity === NotificationLevels.MENTION) {\r\n            if (hasSoundOption && this.props.sound !== 'false') {\r\n                formattedMessageProps = {\r\n                    id: t('user.settings.notifications.desktop.mentionsSound'),\r\n                    defaultMessage: 'For mentions and direct messages, with sound',\r\n                };\r\n            } else if (hasSoundOption && this.props.sound === 'false') {\r\n                formattedMessageProps = {\r\n                    id: t('user.settings.notifications.desktop.mentionsNoSound'),\r\n                    defaultMessage: 'For mentions and direct messages, without sound',\r\n                };\r\n            } else {\r\n                formattedMessageProps = {\r\n                    id: t('user.settings.notifications.desktop.mentionsSoundHidden'),\r\n                    defaultMessage: 'For mentions and direct messages',\r\n                };\r\n            }\r\n        } else if (this.props.activity === NotificationLevels.NONE) {\r\n            formattedMessageProps = {\r\n                id: t('user.settings.notifications.off'),\r\n                defaultMessage: 'Off',\r\n            };\r\n        } else {\r\n            if (hasSoundOption && this.props.sound !== 'false') { //eslint-disable-line no-lonely-if\r\n                formattedMessageProps = {\r\n                    id: t('user.settings.notifications.desktop.allSound'),\r\n                    defaultMessage: 'For all activity, with sound',\r\n                };\r\n            } else if (hasSoundOption && this.props.sound === 'false') {\r\n                formattedMessageProps = {\r\n                    id: t('user.settings.notifications.desktop.allNoSound'),\r\n                    defaultMessage: 'For all activity, without sound',\r\n                };\r\n            } else {\r\n                formattedMessageProps = {\r\n                    id: t('user.settings.notifications.desktop.allSoundHidden'),\r\n                    defaultMessage: 'For all activity',\r\n                };\r\n            }\r\n        }\r\n\r\n        return (\r\n            <SettingItemMin\r\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop notifications')}\r\n                describe={<FormattedMessage {...formattedMessageProps}/>}\r\n                focused={this.props.focused}\r\n                section={'desktop'}\r\n                updateSection={this.handleMinUpdateSection}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if (this.props.active) {\r\n            return this.buildMaximizedSetting();\r\n        }\r\n\r\n        return this.buildMinimizedSetting();\r\n    }\r\n}\r\n\r\nDesktopNotificationSettings.propTypes = {\r\n    activity: PropTypes.string.isRequired,\r\n    sound: PropTypes.string.isRequired,\r\n    updateSection: PropTypes.func,\r\n    setParentState: PropTypes.func,\r\n    submit: PropTypes.func,\r\n    cancel: PropTypes.func,\r\n    error: PropTypes.string,\r\n    active: PropTypes.bool,\r\n    saving: PropTypes.bool,\r\n    focused: PropTypes.bool,\r\n};\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\n\r\nimport {getEmailInterval} from 'mattermost-redux/utils/notify_props';\r\n\r\nimport {Preferences} from 'utils/constants.jsx';\r\nimport {localizeMessage} from 'utils/utils.jsx';\r\nimport SettingItemMax from 'components/setting_item_max.jsx';\r\nimport SettingItemMin from 'components/setting_item_min.jsx';\r\n\r\nconst SECONDS_PER_MINUTE = 60;\r\n\r\nexport default class EmailNotificationSetting extends React.Component {\r\n    static propTypes = {\r\n        currentUserId: PropTypes.string.isRequired,\r\n        activeSection: PropTypes.string.isRequired,\r\n        updateSection: PropTypes.func.isRequired,\r\n        enableEmail: PropTypes.bool.isRequired,\r\n        emailInterval: PropTypes.number.isRequired,\r\n        onSubmit: PropTypes.func.isRequired,\r\n        onCancel: PropTypes.func.isRequired,\r\n        onChange: PropTypes.func.isRequired,\r\n        serverError: PropTypes.string,\r\n        saving: PropTypes.bool,\r\n        focused: PropTypes.bool,\r\n        sendEmailNotifications: PropTypes.bool,\r\n        enableEmailBatching: PropTypes.bool,\r\n        siteName: PropTypes.string,\r\n        actions: PropTypes.shape({\r\n            savePreferences: PropTypes.func.isRequired,\r\n        }).isRequired,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const {\r\n            emailInterval,\r\n            enableEmail,\r\n            enableEmailBatching,\r\n            sendEmailNotifications,\r\n        } = props;\r\n\r\n        this.state = {\r\n            emailInterval,\r\n            enableEmailBatching,\r\n            sendEmailNotifications,\r\n            newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        const {\r\n            emailInterval,\r\n            enableEmail,\r\n            enableEmailBatching,\r\n            sendEmailNotifications,\r\n        } = nextProps;\r\n\r\n        if (sendEmailNotifications !== prevState.sendEmailNotifications ||\r\n            enableEmailBatching !== prevState.enableEmailBatching ||\r\n            emailInterval !== prevState.emailInterval\r\n        ) {\r\n            return {\r\n                emailInterval,\r\n                enableEmailBatching,\r\n                sendEmailNotifications,\r\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const enableEmail = e.currentTarget.getAttribute('data-enable-email');\r\n\r\n        this.setState({\r\n            enableEmail,\r\n            newInterval: parseInt(e.currentTarget.getAttribute('data-email-interval'), 10),\r\n        });\r\n\r\n        this.props.onChange(enableEmail);\r\n    }\r\n\r\n    handleSubmit = async () => {\r\n        const {newInterval} = this.state;\r\n        if (this.props.emailInterval === newInterval) {\r\n            this.props.updateSection('');\r\n        } else {\r\n            // until the rest of the notification settings are moved to preferences, we have to do this separately\r\n            const {currentUserId, actions} = this.props;\r\n            const emailIntervalPreference = {\r\n                user_id: currentUserId,\r\n                category: Preferences.CATEGORY_NOTIFICATIONS,\r\n                name: Preferences.EMAIL_INTERVAL,\r\n                value: newInterval.toString(),\r\n            };\r\n\r\n            await actions.savePreferences(currentUserId, [emailIntervalPreference]);\r\n\r\n            this.props.onSubmit();\r\n        }\r\n    }\r\n\r\n    handleUpdateSection = (section) => {\r\n        if (section) {\r\n            this.props.updateSection(section);\r\n        } else {\r\n            this.props.updateSection('');\r\n\r\n            this.setState({\r\n                enableEmail: this.props.enableEmail,\r\n                newInterval: this.props.emailInterval,\r\n            });\r\n            this.props.onCancel();\r\n        }\r\n    }\r\n\r\n    renderMinSettingView = () => {\r\n        const {\r\n            enableEmail,\r\n            focused,\r\n            sendEmailNotifications,\r\n        } = this.props;\r\n\r\n        const {newInterval} = this.state;\r\n\r\n        let description;\r\n        if (!sendEmailNotifications) {\r\n            description = (\r\n                <FormattedMessage\r\n                    id='user.settings.notifications.email.disabled'\r\n                    defaultMessage='Email notifications are not enabled'\r\n                />\r\n            );\r\n        } else if (enableEmail) {\r\n            switch (newInterval) {\r\n            case Preferences.INTERVAL_IMMEDIATE:\r\n                description = (\r\n                    <FormattedMessage\r\n                        id='user.settings.notifications.email.immediately'\r\n                        defaultMessage='Immediately'\r\n                    />\r\n                );\r\n                break;\r\n            case Preferences.INTERVAL_HOUR:\r\n                description = (\r\n                    <FormattedMessage\r\n                        id='user.settings.notifications.email.everyHour'\r\n                        defaultMessage='Every hour'\r\n                    />\r\n                );\r\n                break;\r\n            case Preferences.INTERVAL_FIFTEEN_MINUTES:\r\n                description = (\r\n                    <FormattedMessage\r\n                        id='user.settings.notifications.email.everyXMinutes'\r\n                        defaultMessage='Every {count, plural, one {minute} other {{count, number} minutes}}'\r\n                        values={{count: newInterval / SECONDS_PER_MINUTE}}\r\n                    />\r\n                );\r\n                break;\r\n            default:\r\n                description = (\r\n                    <FormattedMessage\r\n                        id='user.settings.notifications.email.never'\r\n                        defaultMessage='Never'\r\n                    />\r\n                );\r\n            }\r\n        } else {\r\n            description = (\r\n                <FormattedMessage\r\n                    id='user.settings.notifications.email.never'\r\n                    defaultMessage='Never'\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <SettingItemMin\r\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\r\n                describe={description}\r\n                focused={focused}\r\n                section={'email'}\r\n                updateSection={this.handleUpdateSection}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderMaxSettingView = () => {\r\n        if (!this.props.sendEmailNotifications) {\r\n            return (\r\n                <SettingItemMax\r\n                    title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\r\n                    inputs={[\r\n                        <div\r\n                            key='oauthEmailInfo'\r\n                            className='padding-top'\r\n                        >\r\n                            <FormattedMessage\r\n                                id='user.settings.notifications.email.disabled_long'\r\n                                defaultMessage='Email notifications have not been enabled by your System Administrator.'\r\n                            />\r\n                        </div>,\r\n                    ]}\r\n                    server_error={this.props.serverError}\r\n                    section={'email'}\r\n                    updateSection={this.handleUpdateSection}\r\n                />\r\n            );\r\n        }\r\n\r\n        const {newInterval} = this.state;\r\n        let batchingOptions = null;\r\n        let batchingInfo = null;\r\n        if (this.props.enableEmailBatching) {\r\n            batchingOptions = (\r\n                <div>\r\n                    <div className='radio'>\r\n                        <label>\r\n                            <input\r\n                                id='emailNotificationMinutes'\r\n                                type='radio'\r\n                                name='emailNotifications'\r\n                                checked={newInterval === Preferences.INTERVAL_FIFTEEN_MINUTES}\r\n                                data-enable-email={'true'}\r\n                                data-email-interval={Preferences.INTERVAL_FIFTEEN_MINUTES}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                            <FormattedMessage\r\n                                id='user.settings.notifications.email.everyXMinutes'\r\n                                defaultMessage='Every {count} minutes'\r\n                                values={{count: Preferences.INTERVAL_FIFTEEN_MINUTES / SECONDS_PER_MINUTE}}\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                    <div className='radio'>\r\n                        <label>\r\n                            <input\r\n                                id='emailNotificationHour'\r\n                                type='radio'\r\n                                name='emailNotifications'\r\n                                checked={newInterval === Preferences.INTERVAL_HOUR}\r\n                                data-enable-email={'true'}\r\n                                data-email-interval={Preferences.INTERVAL_HOUR}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                            <FormattedMessage\r\n                                id='user.settings.notifications.email.everyHour'\r\n                                defaultMessage='Every hour'\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            batchingInfo = (\r\n                <FormattedMessage\r\n                    id='user.settings.notifications.emailBatchingInfo'\r\n                    defaultMessage='Notifications received over the time period selected are combined and sent in a single email.'\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <SettingItemMax\r\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\r\n                inputs={[\r\n                    <div key='userNotificationEmailOptions'>\r\n                        <label>\r\n                            <FormattedMessage\r\n                                id='user.settings.notifications.email.send'\r\n                                defaultMessage='Send email notifications'\r\n                            />\r\n                        </label>\r\n                        <div className='radio'>\r\n                            <label>\r\n                                <input\r\n                                    id='emailNotificationImmediately'\r\n                                    type='radio'\r\n                                    name='emailNotifications'\r\n                                    checked={newInterval === Preferences.INTERVAL_IMMEDIATE}\r\n                                    data-enable-email={'true'}\r\n                                    data-email-interval={Preferences.INTERVAL_IMMEDIATE}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                                <FormattedMessage\r\n                                    id='user.settings.notifications.email.immediately'\r\n                                    defaultMessage='Immediately'\r\n                                />\r\n                            </label>\r\n                        </div>\r\n                        {batchingOptions}\r\n                        <div className='radio'>\r\n                            <label>\r\n                                <input\r\n                                    id='emailNotificationNever'\r\n                                    type='radio'\r\n                                    name='emailNotifications'\r\n                                    checked={newInterval === Preferences.INTERVAL_NEVER}\r\n                                    data-enable-email={'false'}\r\n                                    data-email-interval={Preferences.INTERVAL_NEVER}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                                <FormattedMessage\r\n                                    id='user.settings.notifications.email.never'\r\n                                    defaultMessage='Never'\r\n                                />\r\n                            </label>\r\n                        </div>\r\n                        <br/>\r\n                        <div>\r\n                            <FormattedMessage\r\n                                id='user.settings.notifications.emailInfo'\r\n                                defaultMessage='Email notifications are sent for mentions and direct messages when you are offline or away from {siteName} for more than 5 minutes.'\r\n                                values={{\r\n                                    siteName: this.props.siteName,\r\n                                }}\r\n                            />\r\n                            {' '}\r\n                            {batchingInfo}\r\n                        </div>\r\n                    </div>,\r\n                ]}\r\n                submit={this.handleSubmit}\r\n                saving={this.props.saving}\r\n                server_error={this.props.serverError}\r\n                updateSection={this.handleUpdateSection}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if (this.props.activeSection !== 'email') {\r\n            return this.renderMinSettingView();\r\n        }\r\n\r\n        return this.renderMaxSettingView();\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\n\r\nimport {Preferences} from 'mattermost-redux/constants';\r\n\r\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\r\n\r\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\r\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\r\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\r\n\r\nimport EmailNotificationSetting from './email_notification_setting';\r\n\r\nfunction mapStateToProps(state) {\r\n    const config = getConfig(state);\r\n    const emailInterval = parseInt(getPreference(\r\n        state,\r\n        Preferences.CATEGORY_NOTIFICATIONS,\r\n        Preferences.EMAIL_INTERVAL,\r\n        Preferences.INTERVAL_NOT_SET.toString(),\r\n    ), 10);\r\n\r\n    return {\r\n        currentUserId: getCurrentUserId(state),\r\n        emailInterval,\r\n        enableEmailBatching: config.EnableEmailBatching === 'true',\r\n        sendEmailNotifications: config.SendEmailNotifications === 'true',\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators({\r\n            savePreferences,\r\n        }, dispatch),\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmailNotificationSetting);\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\r\n\r\nimport AutosizeTextarea from 'components/autosize_textarea.jsx';\r\nimport SettingItemMax from 'components/setting_item_max.jsx';\r\nimport {localizeMessage} from 'utils/utils.jsx';\r\n\r\nconst MESSAGE_MAX_LENGTH = 200;\r\n\r\nexport default class ManageAutoResponder extends React.PureComponent {\r\n    static propTypes = {\r\n        autoResponderActive: PropTypes.bool.isRequired,\r\n        autoResponderMessage: PropTypes.string.isRequired,\r\n        updateSection: PropTypes.func.isRequired,\r\n        setParentState: PropTypes.func.isRequired,\r\n        submit: PropTypes.func.isRequired,\r\n        saving: PropTypes.bool.isRequired,\r\n        error: PropTypes.string,\r\n    };\r\n\r\n    handleAutoResponderChecked = (e) => {\r\n        this.props.setParentState('autoResponderActive', e.target.checked);\r\n    };\r\n\r\n    onMessageChanged = (e) => {\r\n        this.props.setParentState('autoResponderMessage', e.target.value);\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            autoResponderActive,\r\n            autoResponderMessage,\r\n        } = this.props;\r\n\r\n        let serverError;\r\n        if (this.props.error) {\r\n            serverError = <label className='has-error'>{this.props.error}</label>;\r\n        }\r\n\r\n        const inputs = [];\r\n\r\n        const activeToggle = (\r\n            <div\r\n                id='autoResponderCheckbox'\r\n                key='autoResponderCheckbox'\r\n                className='checkbox'\r\n            >\r\n                <label>\r\n                    <input\r\n                        id='autoResponderActive'\r\n                        type='checkbox'\r\n                        checked={autoResponderActive}\r\n                        onChange={this.handleAutoResponderChecked}\r\n                    />\r\n                    <FormattedMessage\r\n                        id='user.settings.notifications.autoResponderEnabled'\r\n                        defaultMessage='Enabled'\r\n                    />\r\n                </label>\r\n            </div>\r\n        );\r\n\r\n        const message = (\r\n            <div\r\n                id='autoResponderMessage'\r\n                key='autoResponderMessage'\r\n            >\r\n                <div className='padding-top'>\r\n                    <AutosizeTextarea\r\n                        style={{resize: 'none'}}\r\n                        id='autoResponderMessageInput'\r\n                        className='form-control'\r\n                        rows='5'\r\n                        placeholder={localizeMessage('user.settings.notifications.autoResponderPlaceholder', 'Message')}\r\n                        value={autoResponderMessage}\r\n                        maxLength={MESSAGE_MAX_LENGTH}\r\n                        onChange={this.onMessageChanged}\r\n                    />\r\n                    {serverError}\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        inputs.push(activeToggle);\r\n        if (autoResponderActive) {\r\n            inputs.push(message);\r\n        }\r\n        inputs.push((\r\n            <div key='autoResponderHint'>\r\n                <br/>\r\n                <FormattedHTMLMessage\r\n                    id='user.settings.notifications.autoResponderHint'\r\n                    defaultMessage='Set a custom message that will be automatically sent in response to Direct Messages. Mentions in Public and Private Channels will not trigger the automated reply. Enabling Automatic Replies sets your status to Out of Office and disables email and push notifications.'\r\n                />\r\n            </div>\r\n        ));\r\n\r\n        return (\r\n            <SettingItemMax\r\n                title={\r\n                    <FormattedMessage\r\n                        id='user.settings.notifications.autoResponder'\r\n                        defaultMessage='Automatic Direct Message Replies'\r\n                    />\r\n                }\r\n                width='medium'\r\n                shiftEnter={true}\r\n                submit={this.props.submit}\r\n                saving={this.props.saving}\r\n                inputs={inputs}\r\n                updateSection={this.props.updateSection}\r\n            />\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\n\r\nimport Constants, {NotificationLevels} from 'utils/constants.jsx';\r\nimport * as Utils from 'utils/utils.jsx';\r\nimport SettingItemMax from 'components/setting_item_max.jsx';\r\nimport SettingItemMin from 'components/setting_item_min.jsx';\r\n\r\nimport DesktopNotificationSettings from './desktop_notification_settings.jsx';\r\nimport EmailNotificationSetting from './email_notification_setting';\r\nimport ManageAutoResponder from './manage_auto_responder.jsx';\r\n\r\nfunction getNotificationsStateFromProps(props) {\r\n    const user = props.user;\r\n\r\n    let desktop = NotificationLevels.MENTION;\r\n    let sound = 'true';\r\n    let comments = 'never';\r\n    let enableEmail = 'true';\r\n    let pushActivity = NotificationLevels.MENTION;\r\n    let pushStatus = Constants.UserStatuses.AWAY;\r\n    let autoResponderActive = false;\r\n    let autoResponderMessage = Utils.localizeMessage(\r\n        'user.settings.notifications.autoResponderDefault',\r\n        'Hello, I am out of office and unable to respond to messages.'\r\n    );\r\n\r\n    if (user.notify_props) {\r\n        if (user.notify_props.desktop) {\r\n            desktop = user.notify_props.desktop;\r\n        }\r\n        if (user.notify_props.desktop_sound) {\r\n            sound = user.notify_props.desktop_sound;\r\n        }\r\n        if (user.notify_props.comments) {\r\n            comments = user.notify_props.comments;\r\n        }\r\n        if (user.notify_props.email) {\r\n            enableEmail = user.notify_props.email;\r\n        }\r\n        if (user.notify_props.push) {\r\n            pushActivity = user.notify_props.push;\r\n        }\r\n        if (user.notify_props.push_status) {\r\n            pushStatus = user.notify_props.push_status;\r\n        }\r\n\r\n        if (user.notify_props.auto_responder_active) {\r\n            autoResponderActive = user.notify_props.auto_responder_active === 'true';\r\n        }\r\n\r\n        if (user.notify_props.auto_responder_message) {\r\n            autoResponderMessage = user.notify_props.auto_responder_message;\r\n        }\r\n    }\r\n\r\n    let usernameKey = false;\r\n    let customKeys = '';\r\n    let firstNameKey = false;\r\n    let channelKey = false;\r\n\r\n    if (user.notify_props) {\r\n        if (user.notify_props.mention_keys) {\r\n            const keys = user.notify_props.mention_keys.split(',');\r\n\r\n            if (keys.indexOf(user.username) === -1) {\r\n                usernameKey = false;\r\n            } else {\r\n                usernameKey = true;\r\n                keys.splice(keys.indexOf(user.username), 1);\r\n                if (keys.indexOf(`@${user.username}`) !== -1) {\r\n                    keys.splice(keys.indexOf(`@${user.username}`), 1);\r\n                }\r\n            }\r\n\r\n            customKeys = keys.join(',');\r\n        }\r\n\r\n        if (user.notify_props.first_name) {\r\n            firstNameKey = user.notify_props.first_name === 'true';\r\n        }\r\n\r\n        if (user.notify_props.channel) {\r\n            channelKey = user.notify_props.channel === 'true';\r\n        }\r\n    }\r\n\r\n    return {\r\n        desktopActivity: desktop,\r\n        enableEmail,\r\n        pushActivity,\r\n        pushStatus,\r\n        desktopSound: sound,\r\n        usernameKey,\r\n        customKeys,\r\n        customKeysChecked: customKeys.length > 0,\r\n        firstNameKey,\r\n        channelKey,\r\n        autoResponderActive,\r\n        autoResponderMessage,\r\n        notifyCommentsLevel: comments,\r\n        isSaving: false,\r\n    };\r\n}\r\n\r\nconst prevSections = {\r\n    desktop: 'dummySectionName', // dummy value that should never match any section name\r\n    email: 'desktop',\r\n    push: 'email',\r\n    keys: 'push',\r\n    comments: 'keys',\r\n};\r\n\r\nexport default class NotificationsTab extends React.Component {\r\n    static propTypes = {\r\n        user: PropTypes.object,\r\n        updateSection: PropTypes.func,\r\n        activeSection: PropTypes.string,\r\n        prevActiveSection: PropTypes.string,\r\n        closeModal: PropTypes.func.isRequired,\r\n        collapseModal: PropTypes.func.isRequired,\r\n        siteName: PropTypes.string,\r\n        sendPushNotifications: PropTypes.bool,\r\n        enableAutoResponder: PropTypes.bool,\r\n        actions: PropTypes.shape({\r\n            updateMe: PropTypes.func.isRequired,\r\n        }).isRequired,\r\n    }\r\n\r\n    static defaultProps = {\r\n        user: null,\r\n        activeSection: '',\r\n        prevActiveSection: '',\r\n        activeTab: '',\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = getNotificationsStateFromProps(props);\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        const data = {};\r\n        data.email = this.state.enableEmail;\r\n        data.desktop_sound = this.state.desktopSound;\r\n        data.desktop = this.state.desktopActivity;\r\n        data.push = this.state.pushActivity;\r\n        data.push_status = this.state.pushStatus;\r\n        data.comments = this.state.notifyCommentsLevel;\r\n        data.auto_responder_active = this.state.autoResponderActive.toString();\r\n        data.auto_responder_message = this.state.autoResponderMessage;\r\n\r\n        if (!data.auto_responder_message || data.auto_responder_message === '') {\r\n            data.auto_responder_message = Utils.localizeMessage(\r\n                'user.settings.notifications.autoResponderDefault',\r\n                'Hello, I am out of office and unable to respond to messages.'\r\n            );\r\n        }\r\n\r\n        const mentionKeys = [];\r\n        if (this.state.usernameKey) {\r\n            mentionKeys.push(this.props.user.username);\r\n        }\r\n\r\n        let stringKeys = mentionKeys.join(',');\r\n        if (this.state.customKeys.length > 0 && this.state.customKeysChecked) {\r\n            stringKeys += ',' + this.state.customKeys;\r\n        }\r\n\r\n        data.mention_keys = stringKeys;\r\n        data.first_name = this.state.firstNameKey.toString();\r\n        data.channel = this.state.channelKey.toString();\r\n\r\n        this.setState({isSaving: true});\r\n        console.log('----notific', {notify_props: data})\r\n        this.props.actions.updateMe({notify_props: data}).\r\n            then(({data: result, error: err}) => {\r\n                if (result) {\r\n                    this.updateSection('');\r\n                    this.setState(getNotificationsStateFromProps(this.props));\r\n                } else if (err) {\r\n                    this.setState({serverError: err.message, isSaving: false});\r\n                }\r\n            });\r\n    }\r\n\r\n    handleCancel = (e) => {\r\n        if (e) {\r\n            e.preventDefault();\r\n        }\r\n        this.setState(getNotificationsStateFromProps(this.props));\r\n    }\r\n\r\n    handleUpdateSection = (section) => {\r\n        if (section) {\r\n            this.props.updateSection(section);\r\n        } else {\r\n            this.props.updateSection('');\r\n            this.handleCancel();\r\n        }\r\n    };\r\n\r\n    setStateValue = (key, value) => {\r\n        const data = {};\r\n        data[key] = value;\r\n        this.setState(data);\r\n    }\r\n\r\n    updateSection = (section) => {\r\n        this.setState({isSaving: false});\r\n        this.props.updateSection(section);\r\n    }\r\n\r\n    handleNotifyCommentsRadio(notifyCommentsLevel) {\r\n        this.setState({notifyCommentsLevel});\r\n    }\r\n\r\n    handlePushRadio(pushActivity) {\r\n        this.setState({pushActivity});\r\n    }\r\n\r\n    handlePushStatusRadio(pushStatus) {\r\n        this.setState({pushStatus});\r\n    }\r\n\r\n    handleEmailRadio = (enableEmail) => {\r\n        this.setState({enableEmail});\r\n    }\r\n\r\n    updateUsernameKey = (val) => {\r\n        this.setState({usernameKey: val});\r\n    }\r\n\r\n    updateFirstNameKey = (val) => {\r\n        this.setState({firstNameKey: val});\r\n    }\r\n\r\n    updateChannelKey = (val) => {\r\n        this.setState({channelKey: val});\r\n    }\r\n\r\n    updateCustomMentionKeys = () => {\r\n        const checked = this.refs.customcheck.checked;\r\n\r\n        if (checked) {\r\n            const text = this.refs.custommentions.value;\r\n\r\n            // remove all spaces and split string into individual keys\r\n            this.setState({customKeys: text.replace(/ /g, ''), customKeysChecked: true});\r\n        } else {\r\n            this.setState({customKeys: '', customKeysChecked: false});\r\n        }\r\n    }\r\n\r\n    onCustomChange = () => {\r\n        this.refs.customcheck.checked = true;\r\n        this.updateCustomMentionKeys();\r\n    }\r\n\r\n    createPushNotificationSection = () => {\r\n        if (this.props.activeSection === 'push') {\r\n            const inputs = [];\r\n            let extraInfo = null;\r\n            let submit = null;\r\n\r\n            if (this.props.sendPushNotifications) {\r\n                const pushActivityRadio = [false, false, false];\r\n                if (this.state.pushActivity === NotificationLevels.ALL) {\r\n                    pushActivityRadio[0] = true;\r\n                } else if (this.state.pushActivity === NotificationLevels.NONE) {\r\n                    pushActivityRadio[2] = true;\r\n                } else {\r\n                    pushActivityRadio[1] = true;\r\n                }\r\n\r\n                const pushStatusRadio = [false, false, false];\r\n                if (this.state.pushStatus === Constants.UserStatuses.ONLINE) {\r\n                    pushStatusRadio[0] = true;\r\n                } else if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\r\n                    pushStatusRadio[1] = true;\r\n                } else {\r\n                    pushStatusRadio[2] = true;\r\n                }\r\n\r\n                let pushStatusSettings;\r\n                if (this.state.pushActivity !== NotificationLevels.NONE) {\r\n                    pushStatusSettings = (\r\n                        <div>\r\n                            <hr/>\r\n                            <label>\r\n                                <FormattedMessage\r\n                                    id='user.settings.notifications.push_notification.status'\r\n                                    defaultMessage='Trigger push notifications when'\r\n                                />\r\n                            </label>\r\n                            <br/>\r\n                            <div className='radio'>\r\n                                <label>\r\n                                    <input\r\n                                        id='pushNotificationOnline'\r\n                                        type='radio'\r\n                                        name='pushNotificationStatus'\r\n                                        checked={pushStatusRadio[0]}\r\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.ONLINE)}\r\n                                    />\r\n                                    <FormattedMessage\r\n                                        id='user.settings.push_notification.online'\r\n                                        defaultMessage='Online, away or offline'\r\n                                    />\r\n                                </label>\r\n                                <br/>\r\n                            </div>\r\n                            <div className='radio'>\r\n                                <label>\r\n                                    <input\r\n                                        id='pushNotificationAway'\r\n                                        type='radio'\r\n                                        name='pushNotificationStatus'\r\n                                        checked={pushStatusRadio[1]}\r\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.AWAY)}\r\n                                    />\r\n                                    <FormattedMessage\r\n                                        id='user.settings.push_notification.away'\r\n                                        defaultMessage='Away or offline'\r\n                                    />\r\n                                </label>\r\n                                <br/>\r\n                            </div>\r\n                            <div className='radio'>\r\n                                <label>\r\n                                    <input\r\n                                        id='pushNotificationOffline'\r\n                                        type='radio'\r\n                                        name='pushNotificationStatus'\r\n                                        checked={pushStatusRadio[2]}\r\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.OFFLINE)}\r\n                                    />\r\n                                    <FormattedMessage\r\n                                        id='user.settings.push_notification.offline'\r\n                                        defaultMessage='Offline'\r\n                                    />\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n\r\n                    extraInfo = (\r\n                        <span>\r\n                            <FormattedMessage\r\n                                id='user.settings.push_notification.status_info'\r\n                                defaultMessage='Notification alerts are only pushed to your mobile device when your online status matches the selection above.'\r\n                            />\r\n                        </span>\r\n                    );\r\n                }\r\n\r\n                inputs.push(\r\n                    <div key='userNotificationLevelOption'>\r\n                        <label>\r\n                            <FormattedMessage\r\n                                id='user.settings.push_notification.send'\r\n                                defaultMessage='Send mobile push notifications'\r\n                            />\r\n                        </label>\r\n                        <br/>\r\n                        <div className='radio'>\r\n                            <label>\r\n                                <input\r\n                                    id='pushNotificationAllActivity'\r\n                                    type='radio'\r\n                                    name='pushNotificationLevel'\r\n                                    checked={pushActivityRadio[0]}\r\n                                    onChange={this.handlePushRadio.bind(this, NotificationLevels.ALL)}\r\n                                />\r\n                                <FormattedMessage\r\n                                    id='user.settings.push_notification.allActivity'\r\n                                    defaultMessage='For all activity'\r\n                                />\r\n                            </label>\r\n                            <br/>\r\n                        </div>\r\n                        <div className='radio'>\r\n                            <label>\r\n                                <input\r\n                                    id='pushNotificationMentions'\r\n                                    type='radio'\r\n                                    name='pushNotificationLevel'\r\n                                    checked={pushActivityRadio[1]}\r\n                                    onChange={this.handlePushRadio.bind(this, NotificationLevels.MENTION)}\r\n                                />\r\n                                <FormattedMessage\r\n                                    id='user.settings.push_notification.onlyMentions'\r\n                                    defaultMessage='For mentions and direct messages'\r\n                                />\r\n                            </label>\r\n                            <br/>\r\n                        </div>\r\n                        <div className='radio'>\r\n                            <label>\r\n                                <input\r\n                                    id='pushNotificationNever'\r\n                                    type='radio'\r\n                                    name='pushNotificationLevel'\r\n                                    checked={pushActivityRadio[2]}\r\n                                    onChange={this.handlePushRadio.bind(this, NotificationLevels.NONE)}\r\n                                />\r\n                                <FormattedMessage\r\n                                    id='user.settings.notifications.never'\r\n                                    defaultMessage='Never'\r\n                                />\r\n                            </label>\r\n                        </div>\r\n                        <br/>\r\n                        <span>\r\n                            <FormattedMessage\r\n                                id='user.settings.push_notification.info'\r\n                                defaultMessage='Notification alerts are pushed to your mobile device when there is activity in Mattermost.'\r\n                            />\r\n                        </span>\r\n                        {pushStatusSettings}\r\n                    </div>\r\n                );\r\n\r\n                submit = this.handleSubmit;\r\n            } else {\r\n                inputs.push(\r\n                    <div\r\n                        key='oauthEmailInfo'\r\n                        className='padding-top'\r\n                    >\r\n                        <FormattedMessage\r\n                            id='user.settings.push_notification.disabled_long'\r\n                            defaultMessage='Push notifications have not been enabled by your System Administrator.'\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <SettingItemMax\r\n                    title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile push notifications')}\r\n                    extraInfo={extraInfo}\r\n                    inputs={inputs}\r\n                    submit={submit}\r\n                    server_error={this.state.serverError}\r\n                    updateSection={this.handleUpdateSection}\r\n                />\r\n            );\r\n        }\r\n\r\n        let describe = '';\r\n        if (this.state.pushActivity === NotificationLevels.ALL) {\r\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\r\n                describe = (\r\n                    <FormattedMessage\r\n                        id='user.settings.push_notification.allActivityAway'\r\n                        defaultMessage='For all activity when away or offline'\r\n                    />\r\n                );\r\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\r\n                describe = (\r\n                    <FormattedMessage\r\n                        id='user.settings.push_notification.allActivityOffline'\r\n                        defaultMessage='For all activity when offline'\r\n                    />\r\n                );\r\n            } else {\r\n                describe = (\r\n                    <FormattedMessage\r\n                        id='user.settings.push_notification.allActivityOnline'\r\n                        defaultMessage='For all activity when online, away or offline'\r\n                    />\r\n                );\r\n            }\r\n        } else if (this.state.pushActivity === NotificationLevels.NONE) {\r\n            describe = (\r\n                <FormattedMessage\r\n                    id='user.settings.notifications.never'\r\n                    defaultMessage='Never'\r\n                />\r\n            );\r\n        } else if (this.props.sendPushNotifications) {\r\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) { //eslint-disable-line no-lonely-if\r\n                describe = (\r\n                    <FormattedMessage\r\n                        id='user.settings.push_notification.onlyMentionsAway'\r\n                        defaultMessage='For mentions and direct messages when away or offline'\r\n                    />\r\n                );\r\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\r\n                describe = (\r\n                    <FormattedMessage\r\n                        id='user.settings.push_notification.onlyMentionsOffline'\r\n                        defaultMessage='For mentions and direct messages when offline'\r\n                    />\r\n                );\r\n            } else {\r\n                describe = (\r\n                    <FormattedMessage\r\n                        id='user.settings.push_notification.onlyMentionsOnline'\r\n                        defaultMessage='For mentions and direct messages when online, away or offline'\r\n                    />\r\n                );\r\n            }\r\n        } else {\r\n            describe = (\r\n                <FormattedMessage\r\n                    id='user.settings.push_notification.disabled'\r\n                    defaultMessage='Push notifications are not enabled'\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <SettingItemMin\r\n                title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile push notifications')}\r\n                describe={describe}\r\n                focused={this.props.prevActiveSection === prevSections.push}\r\n                section={'push'}\r\n                updateSection={this.handleUpdateSection}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const serverError = this.state.serverError;\r\n        const user = this.props.user;\r\n\r\n        let keysSection;\r\n        if (this.props.activeSection === 'keys') {\r\n            const inputs = [];\r\n\r\n            if (user.first_name) {\r\n                const handleUpdateFirstNameKey = (e) => {\r\n                    this.updateFirstNameKey(e.target.checked);\r\n                };\r\n                inputs.push(\r\n                    <div key='userNotificationFirstNameOption'>\r\n                        <div className='checkbox'>\r\n                            <label>\r\n                                <input\r\n                                    id='notificationTriggerFirst'\r\n                                    type='checkbox'\r\n                                    checked={this.state.firstNameKey}\r\n                                    onChange={handleUpdateFirstNameKey}\r\n                                />\r\n                                <FormattedMessage\r\n                                    id='user.settings.notifications.sensitiveName'\r\n                                    defaultMessage='Your case sensitive first name \"{first_name}\"'\r\n                                    values={{\r\n                                        first_name: user.first_name,\r\n                                    }}\r\n                                />\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const handleUpdateUsernameKey = (e) => {\r\n                this.updateUsernameKey(e.target.checked);\r\n            };\r\n            inputs.push(\r\n                <div key='userNotificationUsernameOption'>\r\n                    <div className='checkbox'>\r\n                        <label>\r\n                            <input\r\n                                id='notificationTriggerUsername'\r\n                                type='checkbox'\r\n                                checked={this.state.usernameKey}\r\n                                onChange={handleUpdateUsernameKey}\r\n                            />\r\n                            <FormattedMessage\r\n                                id='user.settings.notifications.sensitiveUsername'\r\n                                defaultMessage='Your non-case sensitive username \"{username}\"'\r\n                                values={{\r\n                                    username: user.username,\r\n                                }}\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            const handleUpdateChannelKey = (e) => {\r\n                this.updateChannelKey(e.target.checked);\r\n            };\r\n            inputs.push(\r\n                <div key='userNotificationChannelOption'>\r\n                    <div className='checkbox'>\r\n                        <label>\r\n                            <input\r\n                                id='notificationTriggerShouts'\r\n                                type='checkbox'\r\n                                checked={this.state.channelKey}\r\n                                onChange={handleUpdateChannelKey}\r\n                            />\r\n                            <FormattedMessage\r\n                                id='user.settings.notifications.channelWide'\r\n                                defaultMessage='Channel-wide mentions \"@channel\", \"@all\", \"@here\"'\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            inputs.push(\r\n                <div key='userNotificationCustomOption'>\r\n                    <div className='checkbox'>\r\n                        <label>\r\n                            <input\r\n                                id='notificationTriggerCustom'\r\n                                ref='customcheck'\r\n                                type='checkbox'\r\n                                checked={this.state.customKeysChecked}\r\n                                onChange={this.updateCustomMentionKeys}\r\n                            />\r\n                            <FormattedMessage\r\n                                id='user.settings.notifications.sensitiveWords'\r\n                                defaultMessage='Other non-case sensitive words, separated by commas:'\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                    <input\r\n                        id='notificationTriggerCustomText'\r\n                        autoFocus={this.state.customKeysChecked}\r\n                        ref='custommentions'\r\n                        className='form-control mentions-input'\r\n                        type='text'\r\n                        defaultValue={this.state.customKeys}\r\n                        onChange={this.onCustomChange}\r\n                        onFocus={Utils.moveCursorToEnd}\r\n                    />\r\n                </div>\r\n            );\r\n\r\n            const extraInfo = (\r\n                <span>\r\n                    <FormattedMessage\r\n                        id='user.settings.notifications.mentionsInfo'\r\n                        defaultMessage='Mentions trigger when someone sends a message that includes your username (@{username}) or any of the options selected above.'\r\n                        values={{\r\n                            username: user.username,\r\n                        }}\r\n                    />\r\n                </span>\r\n            );\r\n\r\n            keysSection = (\r\n                <SettingItemMax\r\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words that trigger mentions')}\r\n                    inputs={inputs}\r\n                    submit={this.handleSubmit}\r\n                    saving={this.state.isSaving}\r\n                    server_error={serverError}\r\n                    updateSection={this.handleUpdateSection}\r\n                    extraInfo={extraInfo}\r\n                />\r\n            );\r\n        } else {\r\n            let keys = ['@' + user.username];\r\n            if (this.state.firstNameKey) {\r\n                keys.push(user.first_name);\r\n            }\r\n            if (this.state.usernameKey) {\r\n                keys.push(user.username);\r\n            }\r\n\r\n            if (this.state.channelKey) {\r\n                keys.push('@channel');\r\n                keys.push('@all');\r\n                keys.push('@here');\r\n            }\r\n            if (this.state.customKeys.length > 0) {\r\n                keys = keys.concat(this.state.customKeys.split(','));\r\n            }\r\n\r\n            let describe = '';\r\n            for (let i = 0; i < keys.length; i++) {\r\n                if (keys[i] !== '') {\r\n                    describe += '\"' + keys[i] + '\", ';\r\n                }\r\n            }\r\n\r\n            if (describe.length > 0) {\r\n                describe = describe.substring(0, describe.length - 2);\r\n            } else {\r\n                describe = (\r\n                    <FormattedMessage\r\n                        id='user.settings.notifications.noWords'\r\n                        defaultMessage='No words configured'\r\n                    />\r\n                );\r\n            }\r\n\r\n            keysSection = (\r\n                <SettingItemMin\r\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words that trigger mentions')}\r\n                    describe={describe}\r\n                    focused={this.props.prevActiveSection === prevSections.keys}\r\n                    section={'keys'}\r\n                    updateSection={this.handleUpdateSection}\r\n                />\r\n            );\r\n        }\r\n\r\n        let commentsSection;\r\n        if (this.props.activeSection === 'comments') {\r\n            const commentsActive = [false, false, false];\r\n            if (this.state.notifyCommentsLevel === 'never') {\r\n                commentsActive[2] = true;\r\n            } else if (this.state.notifyCommentsLevel === 'root') {\r\n                commentsActive[1] = true;\r\n            } else {\r\n                commentsActive[0] = true;\r\n            }\r\n\r\n            const inputs = [];\r\n\r\n            inputs.push(\r\n                <div key='userNotificationLevelOption'>\r\n                    <div className='radio'>\r\n                        <label>\r\n                            <input\r\n                                id='notificationCommentsAny'\r\n                                type='radio'\r\n                                name='commentsNotificationLevel'\r\n                                checked={commentsActive[0]}\r\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'any')}\r\n                            />\r\n                            <FormattedMessage\r\n                                id='user.settings.notifications.commentsAny'\r\n                                defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\r\n                            />\r\n                        </label>\r\n                        <br/>\r\n                    </div>\r\n                    <div className='radio'>\r\n                        <label>\r\n                            <input\r\n                                id='notificationCommentsRoot'\r\n                                type='radio'\r\n                                name='commentsNotificationLevel'\r\n                                checked={commentsActive[1]}\r\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'root')}\r\n                            />\r\n                            <FormattedMessage\r\n                                id='user.settings.notifications.commentsRoot'\r\n                                defaultMessage='Trigger notifications on messages in threads that I start'\r\n                            />\r\n                        </label>\r\n                        <br/>\r\n                    </div>\r\n                    <div className='radio'>\r\n                        <label>\r\n                            <input\r\n                                id='notificationCommentsNever'\r\n                                type='radio'\r\n                                name='commentsNotificationLevel'\r\n                                checked={commentsActive[2]}\r\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'never')}\r\n                            />\r\n                            <FormattedMessage\r\n                                id='user.settings.notifications.commentsNever'\r\n                                defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            const extraInfo = (\r\n                <span>\r\n                    <FormattedMessage\r\n                        id='user.settings.notifications.commentsInfo'\r\n                        defaultMessage=\"In addition to notifications for when you're mentioned, select if you would like to receive notifications on reply threads.\"\r\n                    />\r\n                </span>\r\n            );\r\n\r\n            commentsSection = (\r\n                <SettingItemMax\r\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\r\n                    extraInfo={extraInfo}\r\n                    inputs={inputs}\r\n                    submit={this.handleSubmit}\r\n                    saving={this.state.isSaving}\r\n                    server_error={serverError}\r\n                    updateSection={this.handleUpdateSection}\r\n                />\r\n            );\r\n        } else {\r\n            let describe = '';\r\n            if (this.state.notifyCommentsLevel === 'never') {\r\n                describe = (\r\n                    <FormattedMessage\r\n                        id='user.settings.notifications.commentsNever'\r\n                        defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\r\n                    />\r\n                );\r\n            } else if (this.state.notifyCommentsLevel === 'root') {\r\n                describe = (\r\n                    <FormattedMessage\r\n                        id='user.settings.notifications.commentsRoot'\r\n                        defaultMessage='Trigger notifications on messages in threads that I start'\r\n                    />\r\n                );\r\n            } else {\r\n                describe = (\r\n                    <FormattedMessage\r\n                        id='user.settings.notifications.commentsAny'\r\n                        defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\r\n                    />\r\n                );\r\n            }\r\n\r\n            commentsSection = (\r\n                <SettingItemMin\r\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\r\n                    describe={describe}\r\n                    focused={this.props.prevActiveSection === prevSections.comments}\r\n                    section={'comments'}\r\n                    updateSection={this.handleUpdateSection}\r\n                />\r\n            );\r\n        }\r\n\r\n        let autoResponderSection;\r\n        if (this.props.enableAutoResponder) {\r\n            if (this.props.activeSection === 'auto-responder') {\r\n                autoResponderSection = (\r\n                    <div>\r\n                        <ManageAutoResponder\r\n                            autoResponderActive={this.state.autoResponderActive}\r\n                            autoResponderMessage={this.state.autoResponderMessage}\r\n                            updateSection={this.updateSection}\r\n                            setParentState={this.setStateValue}\r\n                            submit={this.handleSubmit}\r\n                            error={this.state.serverError}\r\n                            saving={this.state.isSaving}\r\n                        />\r\n                        <div className='divider-dark'/>\r\n                    </div>\r\n                );\r\n            } else {\r\n                const describe = this.state.autoResponderActive ? (\r\n                    <FormattedMessage\r\n                        id='user.settings.notifications.autoResponderEnabled'\r\n                        defaultMessage='Enabled'\r\n                    />\r\n                ) : (\r\n                    <FormattedMessage\r\n                        id='user.settings.notifications.autoResponderDisabled'\r\n                        defaultMessage='Disabled'\r\n                    />\r\n                );\r\n\r\n                autoResponderSection = (\r\n\r\n                    <SettingItemMin\r\n                        title={\r\n                            <FormattedMessage\r\n                                id='user.settings.notifications.autoResponder'\r\n                                defaultMessage='Automatic Direct Message Replies'\r\n                            />\r\n                        }\r\n                        width='medium'\r\n                        describe={describe}\r\n                        section={'auto-responder'}\r\n                        updateSection={this.updateSection}\r\n                    />\r\n                );\r\n            }\r\n        }\r\n\r\n        const pushNotificationSection = this.createPushNotificationSection();\r\n\r\n        return (\r\n            <div id='notificationSettings'>\r\n                <div className='modal-header'>\r\n                    <button\r\n                        id='closeButton'\r\n                        type='button'\r\n                        className='close'\r\n                        data-dismiss='modal'\r\n                        onClick={this.props.closeModal}\r\n                    >\r\n                        <span aria-hidden='true'>{'×'}</span>\r\n                    </button>\r\n                    <h4\r\n                        className='modal-title'\r\n                        ref='title'\r\n                    >\r\n                        <div className='modal-back'>\r\n                            <FormattedMessage\r\n                                id='generic_icons.collapse'\r\n                                defaultMessage='Collapse Icon'\r\n                            >\r\n                                {(title) => (\r\n                                    <i\r\n                                        className='fa fa-angle-left'\r\n                                        title={title}\r\n                                        onClick={this.props.collapseModal}\r\n                                    />\r\n                                )}\r\n                            </FormattedMessage>\r\n                        </div>\r\n                        <FormattedMessage\r\n                            id='user.settings.notifications.title'\r\n                            defaultMessage='Notification Settings'\r\n                        />\r\n                    </h4>\r\n                </div>\r\n                <div\r\n                    ref='wrapper'\r\n                    className='user-settings'\r\n                >\r\n                    <h3\r\n                        id='notificationSettingsTitle'\r\n                        className='tab-header'\r\n                    >\r\n                        <FormattedMessage\r\n                            id='user.settings.notifications.header'\r\n                            defaultMessage='Notifications'\r\n                        />\r\n                    </h3>\r\n                    <div className='divider-dark first'/>\r\n                    <DesktopNotificationSettings\r\n                        activity={this.state.desktopActivity}\r\n                        sound={this.state.desktopSound}\r\n                        updateSection={this.handleUpdateSection}\r\n                        setParentState={this.setStateValue}\r\n                        submit={this.handleSubmit}\r\n                        saving={this.state.isSaving}\r\n                        cancel={this.handleCancel}\r\n                        error={this.state.serverError}\r\n                        active={this.props.activeSection === 'desktop'}\r\n                        focused={this.props.prevActiveSection === prevSections.desktop}\r\n                    />\r\n                    <div className='divider-light'/>\r\n                    <EmailNotificationSetting\r\n                        activeSection={this.props.activeSection}\r\n                        updateSection={this.props.updateSection}\r\n                        enableEmail={this.state.enableEmail === 'true'}\r\n                        onSubmit={this.handleSubmit}\r\n                        onCancel={this.handleCancel}\r\n                        onChange={this.handleEmailRadio}\r\n                        saving={this.state.isSaving}\r\n                        serverError={this.state.serverError}\r\n                        focused={this.props.prevActiveSection === prevSections.email}\r\n                        siteName={this.props.siteName}\r\n                    />\r\n                    <div className='divider-light'/>\r\n                    {pushNotificationSection}\r\n                    <div className='divider-light'/>\r\n                    {keysSection}\r\n                    <div className='divider-light'/>\r\n                    {commentsSection}\r\n                    <div className='divider-light'/>\r\n                    {autoResponderSection}\r\n                    <div className='divider-dark'/>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {updateMe} from 'mattermost-redux/actions/users';\r\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\r\n\r\nimport UserSettingsNotifications from './user_settings_notifications.jsx';\r\n\r\nfunction mapStateToProps(state) {\r\n    const config = getConfig(state);\r\n\r\n    const siteName = config.SiteName;\r\n    const sendPushNotifications = config.SendPushNotifications === 'true';\r\n    const enableAutoResponder = config.ExperimentalEnableAutomaticReplies === 'true';\r\n\r\n    return {\r\n        siteName,\r\n        sendPushNotifications,\r\n        enableAutoResponder,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators({updateMe}, dispatch),\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsNotifications);\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\n\r\nimport SettingItemMax from 'components/setting_item_max.jsx';\r\nimport SettingItemMin from 'components/setting_item_min.jsx';\r\nimport {browserHistory} from 'utils/browser_history';\r\n\r\nconst SECTION_MFA = 'mfa';\r\n\r\nexport default class MfaSection extends React.PureComponent {\r\n    static propTypes = {\r\n        active: PropTypes.bool.isRequired,\r\n\r\n        // Whether or not the current user has MFA enabled\r\n        mfaActive: PropTypes.bool.isRequired,\r\n\r\n        // Whether or not the current user can enable MFA based on their authentication type and the server's settings\r\n        mfaAvailable: PropTypes.bool.isRequired,\r\n\r\n        // Whether or not this server enforces that all users have MFA\r\n        mfaEnforced: PropTypes.bool.isRequired,\r\n\r\n        updateSection: PropTypes.func.isRequired,\r\n        actions: PropTypes.shape({\r\n            deactivateMfa: PropTypes.func.isRequired,\r\n        }),\r\n    };\r\n\r\n    state = {\r\n        serverError: null,\r\n    };\r\n\r\n    setupMfa = (e) => {\r\n        e.preventDefault();\r\n\r\n        browserHistory.push('/mfa/setup');\r\n    };\r\n\r\n    removeMfa = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const {error} = await this.props.actions.deactivateMfa();\r\n\r\n        if (error) {\r\n            this.setState({\r\n                serverError: error.message,\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (this.props.mfaEnforced) {\r\n            browserHistory.push('/mfa/setup');\r\n            return;\r\n        }\r\n\r\n        this.props.updateSection('');\r\n        this.setState({\r\n            serverError: null,\r\n        });\r\n    };\r\n\r\n    renderTitle = () => {\r\n        return (\r\n            <FormattedMessage\r\n                id='user.settings.mfa.title'\r\n                defaultMessage='Multi-factor Authentication'\r\n            />\r\n        );\r\n    };\r\n\r\n    renderDescription = () => {\r\n        if (this.props.mfaActive) {\r\n            return (\r\n                <FormattedMessage\r\n                    id='user.settings.security.active'\r\n                    defaultMessage='Active'\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <FormattedMessage\r\n                id='user.settings.security.inactive'\r\n                defaultMessage='Inactive'\r\n            />\r\n        );\r\n    };\r\n\r\n    renderContent = () => {\r\n        let content;\r\n\r\n        if (this.props.mfaActive) {\r\n            let buttonText;\r\n\r\n            if (this.props.mfaEnforced) {\r\n                buttonText = (\r\n                    <FormattedMessage\r\n                        id='user.settings.mfa.reset'\r\n                        defaultMessage='Reset MFA on your account'\r\n                    />\r\n                );\r\n            } else {\r\n                buttonText = (\r\n                    <FormattedMessage\r\n                        id='user.settings.mfa.remove'\r\n                        defaultMessage='Remove MFA from your account'\r\n                    />\r\n                );\r\n            }\r\n\r\n            content = (\r\n                <a\r\n                    className='btn btn-primary'\r\n                    href='#'\r\n                    onClick={this.removeMfa}\r\n                >\r\n                    {buttonText}\r\n                </a>\r\n            );\r\n        } else {\r\n            content = (\r\n                <a\r\n                    className='btn btn-primary'\r\n                    href='#'\r\n                    onClick={this.setupMfa}\r\n                >\r\n                    <FormattedMessage\r\n                        id='user.settings.mfa.add'\r\n                        defaultMessage='Add MFA to your account'\r\n                    />\r\n                </a>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className='padding-top'>\r\n                {content}\r\n                <br/>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    renderHelpText = () => {\r\n        if (this.props.mfaActive) {\r\n            if (this.props.mfaEnforced) {\r\n                return (\r\n                    <FormattedMessage\r\n                        id='user.settings.mfa.requiredHelp'\r\n                        defaultMessage='Multi-factor authentication is required on this server. Resetting is only recommended when you need to switch code generation to a new mobile device. You will be required to set it up again immediately.'\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (\r\n                <FormattedMessage\r\n                    id='user.settings.mfa.removeHelp'\r\n                    defaultMessage='Removing multi-factor authentication means you will no longer require a phone-based passcode to sign-in to your account.'\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <FormattedMessage\r\n                id='user.settings.mfa.addHelp'\r\n                defaultMessage='Adding multi-factor authentication will make your account more secure by requiring a code from your mobile phone each time you sign in.'\r\n            />\r\n        );\r\n    };\r\n\r\n    render() {\r\n        const title = this.renderTitle();\r\n\r\n        if (!this.props.mfaAvailable) {\r\n            return null;\r\n        }\r\n\r\n        if (!this.props.active) {\r\n            return (\r\n                <SettingItemMin\r\n                    title={title}\r\n                    describe={this.renderDescription()}\r\n                    section={SECTION_MFA}\r\n                    updateSection={this.props.updateSection}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <SettingItemMax\r\n                title={title}\r\n                inputs={this.renderContent()}\r\n                extraInfo={this.renderHelpText()}\r\n                serverError={this.state.serverError}\r\n                updateSection={this.props.updateSection}\r\n                width='medium'\r\n            />\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\n\r\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\r\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\r\n\r\nimport {deactivateMfa} from 'actions/views/mfa';\r\nimport Constants from 'utils/constants';\r\n\r\nimport MfaSection from './mfa_section';\r\n\r\nfunction mapStateToProps(state) {\r\n    const license = getLicense(state);\r\n    const config = getConfig(state);\r\n\r\n    const mfaLicensed = license && license.IsLicensed === 'true' && license.MFA === 'true';\r\n\r\n    const mfaEnabled = config.EnableMultifactorAuthentication === 'true';\r\n    const mfaEnforced = mfaLicensed && config.EnforceMultifactorAuthentication === 'true';\r\n\r\n    const user = getCurrentUser(state);\r\n\r\n    let mfaActive = false;\r\n    let mfaAvailable = false;\r\n    if (user) {\r\n        mfaActive = user.mfa_active;\r\n        mfaAvailable = mfaEnabled && (user.auth_service === '' || user.auth_service === Constants.LDAP_SERVICE);\r\n    }\r\n\r\n    return {\r\n        mfaActive,\r\n        mfaAvailable,\r\n        mfaEnforced,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators({\r\n            deactivateMfa,\r\n        }, dispatch),\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MfaSection);\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\r\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\r\n\r\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\r\nimport Constants from 'utils/constants.jsx';\r\nimport {isMobile} from 'utils/user_agent.jsx';\r\nimport * as Utils from 'utils/utils.jsx';\r\nimport ConfirmModal from 'components/confirm_modal.jsx';\r\nimport SettingItemMax from 'components/setting_item_max.jsx';\r\nimport SettingItemMin from 'components/setting_item_min.jsx';\r\nimport SaveButton from 'components/save_button.jsx';\r\n\r\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\r\nimport WarningIcon from 'components/icon/warning_icon';\r\n\r\nconst SECTION_TOKENS = 'tokens';\r\nconst TOKEN_CREATING = 'creating';\r\nconst TOKEN_CREATED = 'created';\r\nconst TOKEN_NOT_CREATING = 'not_creating';\r\n\r\nexport default class UserAccessTokenSection extends React.Component {\r\n    static propTypes = {\r\n        user: PropTypes.object,\r\n        active: PropTypes.bool,\r\n        updateSection: PropTypes.func,\r\n        userAccessTokens: PropTypes.object,\r\n        setRequireConfirm: PropTypes.func.isRequired,\r\n        actions: PropTypes.shape({\r\n            getUserAccessTokensForUser: PropTypes.func.isRequired,\r\n            createUserAccessToken: PropTypes.func.isRequired,\r\n            revokeUserAccessToken: PropTypes.func.isRequired,\r\n            enableUserAccessToken: PropTypes.func.isRequired,\r\n            disableUserAccessToken: PropTypes.func.isRequired,\r\n            clearUserAccessTokens: PropTypes.func.isRequired,\r\n        }).isRequired,\r\n    }\r\n\r\n    static defaultProps = {\r\n        user: {},\r\n        active: false,\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showConfirmModal: false,\r\n            newToken: null,\r\n            tokenCreationState: TOKEN_NOT_CREATING,\r\n            tokenError: '',\r\n            serverError: null,\r\n            saving: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.actions.clearUserAccessTokens();\r\n        const userId = this.props.user ? this.props.user.id : '';\r\n        this.props.actions.getUserAccessTokensForUser(userId, 0, 200);\r\n    }\r\n\r\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\r\n        if (!nextProps.active && this.props.active) {\r\n            this.setState({\r\n                showConfirmModal: false,\r\n                newToken: null,\r\n                tokenCreationState: TOKEN_NOT_CREATING,\r\n                tokenError: '',\r\n                serverError: null,\r\n                saving: false,\r\n            });\r\n        }\r\n    }\r\n\r\n    startCreatingToken = () => {\r\n        this.setState({tokenCreationState: TOKEN_CREATING});\r\n    }\r\n\r\n    stopCreatingToken = () => {\r\n        this.setState({tokenCreationState: TOKEN_NOT_CREATING, saving: false});\r\n    }\r\n\r\n    handleCreateToken = async () => {\r\n        this.handleCancelConfirm();\r\n\r\n        const description = this.refs.newtokendescription ? this.refs.newtokendescription.value : '';\r\n\r\n        if (description === '') {\r\n            this.setState({tokenError: Utils.localizeMessage('user.settings.tokens.nameRequired', 'Please enter a description.')});\r\n            return;\r\n        }\r\n\r\n        this.setState({tokenError: '', saving: true});\r\n        this.props.setRequireConfirm(true, this.confirmCopyToken);\r\n\r\n        const userId = this.props.user ? this.props.user.id : '';\r\n        const {data, error} = await this.props.actions.createUserAccessToken(userId, description);\r\n\r\n        if (data && this.state.tokenCreationState === TOKEN_CREATING) {\r\n            this.setState({tokenCreationState: TOKEN_CREATED, newToken: data, saving: false});\r\n        } else if (error) {\r\n            this.setState({serverError: error.message, saving: false});\r\n        }\r\n    }\r\n\r\n    confirmCopyToken = (confirmAction) => {\r\n        this.setState({\r\n            showConfirmModal: true,\r\n            confirmTitle: (\r\n                <FormattedMessage\r\n                    id='user.settings.tokens.confirmCopyTitle'\r\n                    defaultMessage='Have you copied your token?'\r\n                />\r\n            ),\r\n            confirmMessage: (state) => (\r\n                <div>\r\n                    <FormattedHTMLMessage\r\n                        id='user.settings.tokens.confirmCopyMessage'\r\n                        defaultMessage=\"Make sure you have copied and saved the access token below. You won't be able to see it again!\"\r\n                    />\r\n                    <br/>\r\n                    <br/>\r\n                    {state.tokenCreationState === TOKEN_CREATING ? (\r\n                        <div>\r\n                            <strong className='word-break--all'>\r\n                                <FormattedMessage\r\n                                    id='user.settings.tokens.token'\r\n                                    defaultMessage='Access Token: '\r\n                                />\r\n                            </strong>\r\n                            <FormattedMessage\r\n                                id='user.settings.tokens.tokenLoading'\r\n                                defaultMessage='Loading...'\r\n                            />\r\n                        </div>\r\n                    ) : (\r\n                        <strong className='word-break--all'>\r\n                            <FormattedMessage\r\n                                id='user.settings.tokens.token'\r\n                                defaultMessage='Access Token: '\r\n                            />\r\n                            {state.newToken.token}\r\n                        </strong>\r\n                    )}\r\n                </div>\r\n            ),\r\n            confirmButton: (\r\n                <FormattedMessage\r\n                    id='user.settings.tokens.confirmCopyButton'\r\n                    defaultMessage='Yes, I have copied the token'\r\n                />\r\n            ),\r\n            confirmComplete: () => {\r\n                this.handleCancelConfirm();\r\n                confirmAction();\r\n            },\r\n            confirmHideCancel: true,\r\n        });\r\n    }\r\n\r\n    handleCancelConfirm = () => {\r\n        this.setState({\r\n            showConfirmModal: false,\r\n            confirmTitle: null,\r\n            confirmMessage: null,\r\n            confirmButton: null,\r\n            confirmComplete: null,\r\n            confirmHideCancel: false,\r\n        });\r\n    }\r\n\r\n    confirmCreateToken = () => {\r\n        if (!UserUtils.isSystemAdmin(this.props.user.roles)) {\r\n            this.handleCreateToken();\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            showConfirmModal: true,\r\n            confirmTitle: (\r\n                <FormattedMessage\r\n                    id='user.settings.tokens.confirmCreateTitle'\r\n                    defaultMessage='Create System Admin Personal Access Token'\r\n                />\r\n            ),\r\n            confirmMessage: () => (\r\n                <div className='alert alert-danger'>\r\n                    <FormattedHTMLMessage\r\n                        id='user.settings.tokens.confirmCreateMessage'\r\n                        defaultMessage='You are generating a personal access token with System Admin permissions. Are you sure want to create this token?'\r\n                    />\r\n                </div>\r\n            ),\r\n            confirmButton: (\r\n                <FormattedMessage\r\n                    id='user.settings.tokens.confirmCreateButton'\r\n                    defaultMessage='Yes, Create'\r\n                />\r\n            ),\r\n            confirmComplete: () => {\r\n                this.handleCreateToken();\r\n                trackEvent('settings', 'system_admin_create_user_access_token');\r\n            },\r\n        });\r\n    }\r\n\r\n    saveTokenKeyPress = (e) => {\r\n        if (Utils.isKeyPressed(e, Constants.KeyCodes.ENTER)) {\r\n            this.confirmCreateToken();\r\n        }\r\n    }\r\n\r\n    confirmRevokeToken = (tokenId) => {\r\n        const token = this.props.userAccessTokens[tokenId];\r\n\r\n        this.setState({\r\n            showConfirmModal: true,\r\n            confirmTitle: (\r\n                <FormattedMessage\r\n                    id='user.settings.tokens.confirmDeleteTitle'\r\n                    defaultMessage='Delete Token?'\r\n                />\r\n            ),\r\n            confirmMessage: () => (\r\n                <div className='alert alert-danger'>\r\n                    <FormattedMarkdownMessage\r\n                        id='user.settings.tokens.confirmDeleteMessage'\r\n                        defaultMessage='Any integrations using this token will no longer be able to access the Mattermost API. You cannot undo this action. \\n \\nAre you sure want to delete the **{description}** token?'\r\n                        values={{\r\n                            description: token.description,\r\n                        }}\r\n                    />\r\n                </div>\r\n            ),\r\n            confirmButton: (\r\n                <FormattedMessage\r\n                    id='user.settings.tokens.confirmDeleteButton'\r\n                    defaultMessage='Yes, Delete'\r\n                />\r\n            ),\r\n            confirmComplete: () => {\r\n                this.revokeToken(tokenId);\r\n                trackEvent('settings', 'revoke_user_access_token');\r\n            },\r\n        });\r\n    }\r\n\r\n    revokeToken = async (tokenId) => {\r\n        const {error} = await this.props.actions.revokeUserAccessToken(tokenId);\r\n        if (error) {\r\n            this.setState({serverError: error.message});\r\n        }\r\n        this.handleCancelConfirm();\r\n    }\r\n\r\n    activateToken = async (tokenId) => {\r\n        const {error} = await this.props.actions.enableUserAccessToken(tokenId);\r\n        if (error) {\r\n            this.setState({serverError: error.message});\r\n        } else {\r\n            trackEvent('settings', 'activate_user_access_token');\r\n        }\r\n    }\r\n\r\n    deactivateToken = async (tokenId) => {\r\n        const {error} = await this.props.actions.disableUserAccessToken(tokenId);\r\n        if (error) {\r\n            this.setState({serverError: error.message});\r\n        } else {\r\n            trackEvent('settings', 'deactivate_user_access_token');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let tokenListClass = '';\r\n\r\n        if (!this.props.active) {\r\n            const describe = Utils.localizeMessage('user.settings.tokens.clickToEdit', \"Click 'Edit' to manage your personal access tokens\");\r\n\r\n            return (\r\n                <SettingItemMin\r\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\r\n                    describe={describe}\r\n                    section={SECTION_TOKENS}\r\n                    updateSection={this.props.updateSection}\r\n                />\r\n            );\r\n        }\r\n\r\n        const tokenList = [];\r\n        Object.values(this.props.userAccessTokens).forEach((token) => {\r\n            if (this.state.newToken && this.state.newToken.id === token.id) {\r\n                return;\r\n            }\r\n\r\n            let activeLink;\r\n            let activeStatus;\r\n\r\n            if (token.is_active) {\r\n                activeLink = (\r\n                    <a\r\n                        name={token.id + '_deactivate'}\r\n                        href='#'\r\n                        onClick={(e) => {\r\n                            e.preventDefault();\r\n                            this.deactivateToken(token.id);\r\n                        }}\r\n                    >\r\n                        <FormattedMessage\r\n                            id='user.settings.tokens.deactivate'\r\n                            defaultMessage='Disable'\r\n                        />\r\n                    </a>);\r\n            } else {\r\n                activeStatus = (\r\n                    <span className='has-error setting-box__inline-error'>\r\n                        <FormattedMessage\r\n                            id='user.settings.tokens.deactivatedWarning'\r\n                            defaultMessage='(Disabled)'\r\n                        />\r\n                    </span>\r\n                );\r\n                activeLink = (\r\n                    <a\r\n                        name={token.id + '_activate'}\r\n                        href='#'\r\n                        onClick={(e) => {\r\n                            e.preventDefault();\r\n                            this.activateToken(token.id);\r\n                        }}\r\n                    >\r\n                        <FormattedMessage\r\n                            id='user.settings.tokens.activate'\r\n                            defaultMessage='Enable'\r\n                        />\r\n                    </a>\r\n                );\r\n            }\r\n\r\n            tokenList.push(\r\n                <div\r\n                    key={token.id}\r\n                    className='setting-box__item'\r\n                >\r\n                    <div className='whitespace--nowrap overflow--ellipsis'>\r\n                        <FormattedMessage\r\n                            id='user.settings.tokens.tokenDesc'\r\n                            defaultMessage='Token Description: '\r\n                        />\r\n                        {token.description}\r\n                        {activeStatus}\r\n                    </div>\r\n                    <div className='setting-box__token-id whitespace--nowrap overflow--ellipsis'>\r\n                        <FormattedMessage\r\n                            id='user.settings.tokens.tokenId'\r\n                            defaultMessage='Token ID: '\r\n                        />\r\n                        {token.id}\r\n                    </div>\r\n                    <div>\r\n                        {activeLink}\r\n                        {' - '}\r\n                        <a\r\n                            name={token.id + '_delete'}\r\n                            href='#'\r\n                            onClick={(e) => {\r\n                                e.preventDefault();\r\n                                this.confirmRevokeToken(token.id);\r\n                            }}\r\n                        >\r\n                            <FormattedMessage\r\n                                id='user.settings.tokens.delete'\r\n                                defaultMessage='Delete'\r\n                            />\r\n                        </a>\r\n                    </div>\r\n                    <hr className='margin-bottom margin-top x2'/>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        let noTokenText;\r\n        if (tokenList.length === 0) {\r\n            noTokenText = (\r\n                <FormattedMessage\r\n                    key='notokens'\r\n                    id='user.settings.tokens.userAccessTokensNone'\r\n                    defaultMessage='No personal access tokens.'\r\n                />\r\n            );\r\n        }\r\n\r\n        let extraInfo;\r\n        if (isMobile()) {\r\n            extraInfo = (\r\n                <span>\r\n                    <FormattedMarkdownMessage\r\n                        id='user.settings.tokens.description_mobile'\r\n                        defaultMessage='[Personal access tokens](!https://about.mattermost.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.mattermost.com/default-api-authentication). Create new tokens on your desktop.'\r\n                    />\r\n                </span>\r\n            );\r\n        } else {\r\n            extraInfo = (\r\n                <span>\r\n                    <FormattedMarkdownMessage\r\n                        id='user.settings.tokens.description'\r\n                        defaultMessage='[Personal access tokens](!https://about.mattermost.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.mattermost.com/default-api-authentication).'\r\n                    />\r\n                </span>\r\n            );\r\n        }\r\n\r\n        let newTokenSection;\r\n        if (this.state.tokenCreationState === TOKEN_CREATING) {\r\n            newTokenSection = (\r\n                <div className='padding-left x2'>\r\n                    <div className='row'>\r\n                        <label className='col-sm-auto control-label padding-right x2'>\r\n                            <FormattedMessage\r\n                                id='user.settings.tokens.name'\r\n                                defaultMessage='Token Description: '\r\n                            />\r\n                        </label>\r\n                        <div className='col-sm-5'>\r\n                            <input\r\n                                autoFocus={true}\r\n                                ref='newtokendescription'\r\n                                className='form-control'\r\n                                type='text'\r\n                                maxLength={64}\r\n                                onKeyPress={this.saveTokenKeyPress}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div className='padding-top x2'>\r\n                            <FormattedMessage\r\n                                id='user.settings.tokens.nameHelp'\r\n                                defaultMessage='Enter a description for your token to remember what it does.'\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label\r\n                                id='clientError'\r\n                                className='has-error margin-top margin-bottom'\r\n                            >\r\n                                {this.state.tokenError}\r\n                            </label>\r\n                        </div>\r\n                        <SaveButton\r\n                            btnClass='btn-primary'\r\n                            savingMessage={\r\n                                <FormattedMessage\r\n                                    id='user.settings.tokens.save'\r\n                                    defaultMessage='Save'\r\n                                />\r\n                            }\r\n                            saving={this.state.saving}\r\n                            onClick={this.confirmCreateToken}\r\n                        />\r\n                        <button\r\n                            className='btn btn-link'\r\n                            onClick={this.stopCreatingToken}\r\n                        >\r\n                            <FormattedMessage\r\n                                id='user.settings.tokens.cancel'\r\n                                defaultMessage='Cancel'\r\n                            />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else if (this.state.tokenCreationState === TOKEN_CREATED) {\r\n            if (tokenList.length === 0) {\r\n                tokenListClass = ' hidden';\r\n            }\r\n\r\n            newTokenSection = (\r\n                <div\r\n                    className='alert alert-warning'\r\n                >\r\n                    <WarningIcon additionalClassName='margin-right'/>\r\n                    <FormattedMessage\r\n                        id='user.settings.tokens.copy'\r\n                        defaultMessage=\"Please copy the access token below. You won't be able to see it again!\"\r\n                    />\r\n                    <br/>\r\n                    <br/>\r\n                    <div className='whitespace--nowrap overflow--ellipsis'>\r\n                        <FormattedMessage\r\n                            id='user.settings.tokens.name'\r\n                            defaultMessage='Token Description: '\r\n                        />\r\n                        {this.state.newToken.description}\r\n                    </div>\r\n                    <div className='whitespace--nowrap overflow--ellipsis'>\r\n                        <FormattedMessage\r\n                            id='user.settings.tokens.id'\r\n                            defaultMessage='Token ID: '\r\n                        />\r\n                        {this.state.newToken.id}\r\n                    </div>\r\n                    <strong className='word-break--all'>\r\n                        <FormattedMessage\r\n                            id='user.settings.tokens.token'\r\n                            defaultMessage='Access Token: '\r\n                        />\r\n                        {this.state.newToken.token}\r\n                    </strong>\r\n                </div>\r\n            );\r\n        } else {\r\n            newTokenSection = (\r\n                <a\r\n                    className='btn btn-primary'\r\n                    href='#'\r\n                    onClick={this.startCreatingToken}\r\n                >\r\n                    <FormattedMessage\r\n                        id='user.settings.tokens.create'\r\n                        defaultMessage='Create New Token'\r\n                    />\r\n                </a>\r\n            );\r\n        }\r\n\r\n        const inputs = [];\r\n        inputs.push(\r\n            <div\r\n                key='tokensSetting'\r\n                className='padding-top'\r\n            >\r\n                <div key='tokenList'>\r\n                    <div className={'alert alert-transparent' + tokenListClass}>\r\n                        {tokenList}\r\n                        {noTokenText}\r\n                    </div>\r\n                    {newTokenSection}\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <SettingItemMax\r\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\r\n                    inputs={inputs}\r\n                    extraInfo={extraInfo}\r\n                    infoPosition='top'\r\n                    serverError={this.state.serverError}\r\n                    updateSection={this.props.updateSection}\r\n                    width='full'\r\n                    saving={this.state.saving}\r\n                    cancelButtonText={\r\n                        <FormattedMessage\r\n                            id='user.settings.security.close'\r\n                            defaultMessage='Close'\r\n                        />\r\n                    }\r\n                />\r\n                <ConfirmModal\r\n                    title={this.state.confirmTitle}\r\n                    message={this.state.confirmMessage ? this.state.confirmMessage(this.state) : null}\r\n                    confirmButtonText={this.state.confirmButton}\r\n                    show={this.state.showConfirmModal}\r\n                    onConfirm={this.state.confirmComplete || (() => {})} //eslint-disable-line no-empty-function\r\n                    onCancel={this.handleCancelConfirm}\r\n                    hideCancel={this.state.confirmHideCancel}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {clearUserAccessTokens, createUserAccessToken, getUserAccessTokensForUser, revokeUserAccessToken, enableUserAccessToken, disableUserAccessToken} from 'mattermost-redux/actions/users';\r\n\r\nimport UserAccessTokenSection from './user_access_token_section.jsx';\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        userAccessTokens: state.entities.users.myUserAccessTokens,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators({\r\n            getUserAccessTokensForUser,\r\n            createUserAccessToken,\r\n            revokeUserAccessToken,\r\n            enableUserAccessToken,\r\n            disableUserAccessToken,\r\n            clearUserAccessTokens,\r\n        }, dispatch),\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAccessTokenSection);\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport Constants from 'utils/constants.jsx';\r\nimport * as Utils from 'utils/utils.jsx';\r\nimport icon50 from 'images/icon50x50.png';\r\nimport AccessHistoryModal from 'components/access_history_modal';\r\nimport ActivityLogModal from 'components/activity_log_modal';\r\nimport SettingItemMax from 'components/setting_item_max.jsx';\r\nimport SettingItemMin from 'components/setting_item_min.jsx';\r\nimport ToggleModalButton from 'components/toggle_modal_button.jsx';\r\n\r\nimport MfaSection from './mfa_section';\r\nimport UserAccessTokenSection from './user_access_token_section';\r\n\r\nconst SECTION_MFA = 'mfa';\r\nconst SECTION_PASSWORD = 'password';\r\nconst SECTION_SIGNIN = 'signin';\r\nconst SECTION_APPS = 'apps';\r\nconst SECTION_TOKENS = 'tokens';\r\n\r\nexport default class SecurityTab extends React.PureComponent {\r\n    static propTypes = {\r\n        user: PropTypes.object,\r\n        activeSection: PropTypes.string,\r\n        updateSection: PropTypes.func,\r\n        closeModal: PropTypes.func.isRequired,\r\n        collapseModal: PropTypes.func.isRequired,\r\n        setRequireConfirm: PropTypes.func.isRequired,\r\n\r\n        /*\r\n         * Set if access tokens are enabled and this user can use them\r\n         */\r\n        canUseAccessTokens: PropTypes.bool,\r\n\r\n        // Whether or not OAuth applications are enabled.\r\n        enableOAuthServiceProvider: PropTypes.bool,\r\n\r\n        // Whether or not sign-up with email is enabled.\r\n        enableSignUpWithEmail: PropTypes.bool,\r\n\r\n        // Whether or not sign-up with GitLab is enabled.\r\n        enableSignUpWithGitLab: PropTypes.bool,\r\n\r\n        // Whether or not sign-up with Google is enabled.\r\n        enableSignUpWithGoogle: PropTypes.bool,\r\n\r\n        // Whether or not sign-up with LDAP is enabled.\r\n        enableLdap: PropTypes.bool,\r\n\r\n        // Whether or not sign-up with SAML is enabled.\r\n        enableSaml: PropTypes.bool,\r\n\r\n        // Whether or not sign-up with Office 365 is enabled.\r\n        enableSignUpWithOffice365: PropTypes.bool,\r\n\r\n        // Whether or not the experimental authentication transfer is enabled.\r\n        experimentalEnableAuthenticationTransfer: PropTypes.bool,\r\n\r\n        passwordConfig: PropTypes.object,\r\n        militaryTime: PropTypes.bool,\r\n\r\n        actions: PropTypes.shape({\r\n            getMe: PropTypes.func.isRequired,\r\n            updateUserPassword: PropTypes.func.isRequired,\r\n            getAuthorizedOAuthApps: PropTypes.func.isRequired,\r\n            deauthorizeOAuthApp: PropTypes.func.isRequired,\r\n        }).isRequired,\r\n    }\r\n\r\n    static defaultProps = {\r\n        user: {},\r\n        activeSection: '',\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = this.getDefaultState();\r\n    }\r\n\r\n    getDefaultState() {\r\n        return {\r\n            currentPassword: '',\r\n            newPassword: '',\r\n            confirmPassword: '',\r\n            passwordError: '',\r\n            serverError: '',\r\n            tokenError: '',\r\n            authService: this.props.user.auth_service,\r\n            savingPassword: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.enableOAuthServiceProvider) {\r\n            this.loadAuthorizedOAuthApps();\r\n        }\r\n    }\r\n\r\n    loadAuthorizedOAuthApps = async () => {\r\n        const {data, error} = await this.props.actions.getAuthorizedOAuthApps();\r\n        if (data) {\r\n            this.setState({authorizedApps: data, serverError: null}); //eslint-disable-line react/no-did-mount-set-state\r\n        } else if (error) {\r\n            this.setState({serverError: error.message}); //eslint-disable-line react/no-did-mount-set-state\r\n        }\r\n    }\r\n\r\n    submitPassword = async () => {\r\n        const user = this.props.user;\r\n        const currentPassword = this.state.currentPassword;\r\n        const newPassword = this.state.newPassword;\r\n        const confirmPassword = this.state.confirmPassword;\r\n\r\n        if (currentPassword === '') {\r\n            this.setState({passwordError: Utils.localizeMessage('user.settings.security.currentPasswordError', 'Please enter your current password.'), serverError: ''});\r\n            return;\r\n        }\r\n\r\n        const {valid, error} = Utils.isValidPassword(newPassword, this.props.passwordConfig);\r\n        if (!valid && error) {\r\n            this.setState({\r\n                passwordError: error,\r\n                serverError: '',\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (newPassword !== confirmPassword) {\r\n            const defaultState = Object.assign(this.getDefaultState(), {passwordError: Utils.localizeMessage('user.settings.security.passwordMatchError', 'The new passwords you entered do not match.'), serverError: ''});\r\n            this.setState(defaultState);\r\n            return;\r\n        }\r\n\r\n        this.setState({savingPassword: true});\r\n\r\n        const {data, error: err} = await this.props.actions.updateUserPassword(\r\n            user.id,\r\n            currentPassword,\r\n            newPassword\r\n        );\r\n        if (data) {\r\n            this.props.updateSection('');\r\n            this.props.actions.getMe();\r\n            this.setState(this.getDefaultState());\r\n        } else if (err) {\r\n            const state = this.getDefaultState();\r\n            if (err.message) {\r\n                state.serverError = err.message;\r\n            } else {\r\n                state.serverError = err;\r\n            }\r\n            state.passwordError = '';\r\n            this.setState(state);\r\n        }\r\n    }\r\n\r\n    updateCurrentPassword = (e) => {\r\n        this.setState({currentPassword: e.target.value});\r\n    }\r\n\r\n    updateNewPassword = (e) => {\r\n        this.setState({newPassword: e.target.value});\r\n    }\r\n\r\n    updateConfirmPassword = (e) => {\r\n        this.setState({confirmPassword: e.target.value});\r\n    }\r\n\r\n    deauthorizeApp = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const appId = e.currentTarget.getAttribute('data-app');\r\n\r\n        const {data, error} = await this.props.actions.deauthorizeOAuthApp(appId);\r\n        if (data) {\r\n            const authorizedApps = this.state.authorizedApps.filter((app) => {\r\n                return app.id !== appId;\r\n            });\r\n            this.setState({authorizedApps, serverError: null});\r\n        } else if (error) {\r\n            this.setState({serverError: error.message});\r\n        }\r\n    }\r\n\r\n    handleUpdateSection = (section) => {\r\n        if (section) {\r\n            this.props.updateSection(section);\r\n        } else {\r\n            switch (this.props.activeSection) {\r\n            case SECTION_MFA:\r\n            case SECTION_SIGNIN:\r\n            case SECTION_TOKENS:\r\n            case SECTION_APPS:\r\n                this.setState({\r\n                    serverError: null,\r\n                });\r\n                break;\r\n            case SECTION_PASSWORD:\r\n                this.setState({\r\n                    currentPassword: '',\r\n                    newPassword: '',\r\n                    confirmPassword: '',\r\n                    serverError: null,\r\n                    passwordError: null,\r\n                });\r\n                break;\r\n            default:\r\n            }\r\n\r\n            this.props.updateSection('');\r\n        }\r\n    }\r\n\r\n    createPasswordSection = () => {\r\n        if (this.props.activeSection === SECTION_PASSWORD) {\r\n            const inputs = [];\r\n            let submit;\r\n\r\n            if (this.props.user.auth_service === '') {\r\n                submit = this.submitPassword;\r\n\r\n                inputs.push(\r\n                    <div\r\n                        key='currentPasswordUpdateForm'\r\n                        className='form-group'\r\n                    >\r\n                        <label className='col-sm-5 control-label'>\r\n                            <FormattedMessage\r\n                                id='user.settings.security.currentPassword'\r\n                                defaultMessage='Current Password'\r\n                            />\r\n                        </label>\r\n                        <div className='col-sm-7'>\r\n                            <input\r\n                                id='currentPassword'\r\n                                autoFocus={true}\r\n                                className='form-control'\r\n                                type='password'\r\n                                onChange={this.updateCurrentPassword}\r\n                                value={this.state.currentPassword}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n                inputs.push(\r\n                    <div\r\n                        key='newPasswordUpdateForm'\r\n                        className='form-group'\r\n                    >\r\n                        <label className='col-sm-5 control-label'>\r\n                            <FormattedMessage\r\n                                id='user.settings.security.newPassword'\r\n                                defaultMessage='New Password'\r\n                            />\r\n                        </label>\r\n                        <div className='col-sm-7'>\r\n                            <input\r\n                                id='newPassword'\r\n                                className='form-control'\r\n                                type='password'\r\n                                onChange={this.updateNewPassword}\r\n                                value={this.state.newPassword}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n                inputs.push(\r\n                    <div\r\n                        key='retypeNewPasswordUpdateForm'\r\n                        className='form-group'\r\n                    >\r\n                        <label className='col-sm-5 control-label'>\r\n                            <FormattedMessage\r\n                                id='user.settings.security.retypePassword'\r\n                                defaultMessage='Retype New Password'\r\n                            />\r\n                        </label>\r\n                        <div className='col-sm-7'>\r\n                            <input\r\n                                id='confirmPassword'\r\n                                className='form-control'\r\n                                type='password'\r\n                                onChange={this.updateConfirmPassword}\r\n                                value={this.state.confirmPassword}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\r\n                inputs.push(\r\n                    <div\r\n                        key='oauthEmailInfo'\r\n                        className='form-group'\r\n                    >\r\n                        <div className='padding-bottom x2'>\r\n                            <FormattedMessage\r\n                                id='user.settings.security.passwordGitlabCantUpdate'\r\n                                defaultMessage='Login occurs through GitLab. Password cannot be updated.'\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\r\n                inputs.push(\r\n                    <div\r\n                        key='oauthEmailInfo'\r\n                        className='form-group'\r\n                    >\r\n                        <div className='padding-bottom x2'>\r\n                            <FormattedMessage\r\n                                id='user.settings.security.passwordLdapCantUpdate'\r\n                                defaultMessage='Login occurs through AD/LDAP. Password cannot be updated.'\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\r\n                inputs.push(\r\n                    <div\r\n                        key='oauthEmailInfo'\r\n                        className='form-group'\r\n                    >\r\n                        <div className='padding-bottom x2'>\r\n                            <FormattedMessage\r\n                                id='user.settings.security.passwordSamlCantUpdate'\r\n                                defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\r\n                inputs.push(\r\n                    <div\r\n                        key='oauthEmailInfo'\r\n                        className='form-group'\r\n                    >\r\n                        <div className='padding-bottom x2'>\r\n                            <FormattedMessage\r\n                                id='user.settings.security.passwordGoogleCantUpdate'\r\n                                defaultMessage='Login occurs through Google Apps. Password cannot be updated.'\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\r\n                inputs.push(\r\n                    <div\r\n                        key='oauthEmailInfo'\r\n                        className='form-group'\r\n                    >\r\n                        <div className='padding-bottom x2'>\r\n                            <FormattedMessage\r\n                                id='user.settings.security.passwordOffice365CantUpdate'\r\n                                defaultMessage='Login occurs through Office 365. Password cannot be updated.'\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (\r\n                <SettingItemMax\r\n                    title={\r\n                        <FormattedMessage\r\n                            id='user.settings.security.password'\r\n                            defaultMessage='Password'\r\n                        />\r\n                    }\r\n                    inputs={inputs}\r\n                    submit={submit}\r\n                    saving={this.state.savingPassword}\r\n                    serverError={this.state.serverError}\r\n                    clientError={this.state.passwordError}\r\n                    updateSection={this.handleUpdateSection}\r\n                />\r\n            );\r\n        }\r\n\r\n        let describe;\r\n\r\n        if (this.props.user.auth_service === '') {\r\n            const d = new Date(this.props.user.last_password_update);\r\n\r\n            describe = (\r\n                <FormattedMessage\r\n                    id='user.settings.security.lastUpdated'\r\n                    defaultMessage='Last updated {date} at {time}'\r\n                    values={{\r\n                        date: (\r\n                            <FormattedDate\r\n                                value={d}\r\n                                day='2-digit'\r\n                                month='short'\r\n                                year='numeric'\r\n                            />\r\n                        ),\r\n                        time: (\r\n                            <FormattedTime\r\n                                value={d}\r\n                                hour12={!this.props.militaryTime}\r\n                                hour='2-digit'\r\n                                minute='2-digit'\r\n                            />\r\n                        ),\r\n                    }}\r\n                />\r\n            );\r\n        } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\r\n            describe = (\r\n                <FormattedMessage\r\n                    id='user.settings.security.loginGitlab'\r\n                    defaultMessage='Login done through GitLab'\r\n                />\r\n            );\r\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\r\n            describe = (\r\n                <FormattedMessage\r\n                    id='user.settings.security.loginLdap'\r\n                    defaultMessage='Login done through AD/LDAP'\r\n                />\r\n            );\r\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\r\n            describe = (\r\n                <FormattedMessage\r\n                    id='user.settings.security.loginSaml'\r\n                    defaultMessage='Login done through SAML'\r\n                />\r\n            );\r\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\r\n            describe = (\r\n                <FormattedMessage\r\n                    id='user.settings.security.loginGoogle'\r\n                    defaultMessage='Login done through Google Apps'\r\n                />\r\n            );\r\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\r\n            describe = (\r\n                <FormattedMessage\r\n                    id='user.settings.security.loginOffice365'\r\n                    defaultMessage='Login done through Office 365'\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <SettingItemMin\r\n                title={\r\n                    <FormattedMessage\r\n                        id='user.settings.security.password'\r\n                        defaultMessage='Password'\r\n                    />\r\n                }\r\n                describe={describe}\r\n                section={SECTION_PASSWORD}\r\n                updateSection={this.handleUpdateSection}\r\n                focused={true}\r\n            />\r\n        );\r\n    }\r\n\r\n    createSignInSection = () => {\r\n        const user = this.props.user;\r\n\r\n        if (this.props.activeSection === SECTION_SIGNIN) {\r\n            let emailOption;\r\n            let gitlabOption;\r\n            let googleOption;\r\n            let office365Option;\r\n            let ldapOption;\r\n            let samlOption;\r\n\r\n            if (user.auth_service === '') {\r\n                if (this.props.enableSignUpWithGitLab) {\r\n                    gitlabOption = (\r\n                        <div className='padding-bottom x2'>\r\n                            <Link\r\n                                className='btn btn-primary'\r\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.GITLAB_SERVICE}\r\n                            >\r\n                                <FormattedMessage\r\n                                    id='user.settings.security.switchGitlab'\r\n                                    defaultMessage='Switch to using GitLab SSO'\r\n                                />\r\n                            </Link>\r\n                            <br/>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                if (this.props.enableSignUpWithGoogle) {\r\n                    googleOption = (\r\n                        <div className='padding-bottom x2'>\r\n                            <Link\r\n                                className='btn btn-primary'\r\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.GOOGLE_SERVICE}\r\n                            >\r\n                                <FormattedMessage\r\n                                    id='user.settings.security.switchGoogle'\r\n                                    defaultMessage='Switch to using Google SSO'\r\n                                />\r\n                            </Link>\r\n                            <br/>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                if (this.props.enableSignUpWithOffice365) {\r\n                    office365Option = (\r\n                        <div className='padding-bottom x2'>\r\n                            <Link\r\n                                className='btn btn-primary'\r\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.OFFICE365_SERVICE}\r\n                            >\r\n                                <FormattedMessage\r\n                                    id='user.settings.security.switchOffice365'\r\n                                    defaultMessage='Switch to using Office 365 SSO'\r\n                                />\r\n                            </Link>\r\n                            <br/>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                if (this.props.enableLdap) {\r\n                    ldapOption = (\r\n                        <div className='padding-bottom x2'>\r\n                            <Link\r\n                                className='btn btn-primary'\r\n                                to={'/claim/email_to_ldap?email=' + encodeURIComponent(user.email)}\r\n                            >\r\n                                <FormattedMessage\r\n                                    id='user.settings.security.switchLdap'\r\n                                    defaultMessage='Switch to using AD/LDAP'\r\n                                />\r\n                            </Link>\r\n                            <br/>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                if (this.props.enableSaml) {\r\n                    samlOption = (\r\n                        <div className='padding-bottom x2'>\r\n                            <Link\r\n                                className='btn btn-primary'\r\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.SAML_SERVICE}\r\n                            >\r\n                                <FormattedMessage\r\n                                    id='user.settings.security.switchSaml'\r\n                                    defaultMessage='Switch to using SAML SSO'\r\n                                />\r\n                            </Link>\r\n                            <br/>\r\n                        </div>\r\n                    );\r\n                }\r\n            } else if (this.props.enableSignUpWithEmail) {\r\n                let link;\r\n                if (user.auth_service === Constants.LDAP_SERVICE) {\r\n                    link = '/claim/ldap_to_email?email=' + encodeURIComponent(user.email);\r\n                } else {\r\n                    link = '/claim/oauth_to_email?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service;\r\n                }\r\n\r\n                emailOption = (\r\n                    <div className='padding-bottom x2'>\r\n                        <Link\r\n                            className='btn btn-primary'\r\n                            to={link}\r\n                        >\r\n                            <FormattedMessage\r\n                                id='user.settings.security.switchEmail'\r\n                                defaultMessage='Switch to using email and password'\r\n                            />\r\n                        </Link>\r\n                        <br/>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const inputs = [];\r\n            inputs.push(\r\n                <div key='userSignInOption'>\r\n                    {emailOption}\r\n                    {gitlabOption}\r\n                    {googleOption}\r\n                    {office365Option}\r\n                    {ldapOption}\r\n                    {samlOption}\r\n                </div>\r\n            );\r\n\r\n            const extraInfo = (\r\n                <span>\r\n                    <FormattedMessage\r\n                        id='user.settings.security.oneSignin'\r\n                        defaultMessage='You may only have one sign-in method at a time. Switching sign-in method will send an email notifying you if the change was successful.'\r\n                    />\r\n                </span>\r\n            );\r\n\r\n            return (\r\n                <SettingItemMax\r\n                    title={Utils.localizeMessage('user.settings.security.method', 'Sign-in Method')}\r\n                    extraInfo={extraInfo}\r\n                    inputs={inputs}\r\n                    serverError={this.state.serverError}\r\n                    updateSection={this.handleUpdateSection}\r\n                />\r\n            );\r\n        }\r\n\r\n        let describe = (\r\n            <FormattedMessage\r\n                id='user.settings.security.emailPwd'\r\n                defaultMessage='Email and Password'\r\n            />\r\n        );\r\n        if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\r\n            describe = (\r\n                <FormattedMessage\r\n                    id='user.settings.security.gitlab'\r\n                    defaultMessage='GitLab'\r\n                />\r\n            );\r\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\r\n            describe = (\r\n                <FormattedMessage\r\n                    id='user.settings.security.google'\r\n                    defaultMessage='Google'\r\n                />\r\n            );\r\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\r\n            describe = (\r\n                <FormattedMessage\r\n                    id='user.settings.security.office365'\r\n                    defaultMessage='Office 365'\r\n                />\r\n            );\r\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\r\n            describe = (\r\n                <FormattedMessage\r\n                    id='user.settings.security.ldap'\r\n                    defaultMessage='AD/LDAP'\r\n                />\r\n            );\r\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\r\n            describe = (\r\n                <FormattedMessage\r\n                    id='user.settings.security.saml'\r\n                    defaultMessage='SAML'\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <SettingItemMin\r\n                title={Utils.localizeMessage('user.settings.security.method', 'Sign-in Method')}\r\n                describe={describe}\r\n                section={SECTION_SIGNIN}\r\n                updateSection={this.handleUpdateSection}\r\n            />\r\n        );\r\n    }\r\n\r\n    createOAuthAppsSection = () => {\r\n        if (this.props.activeSection === SECTION_APPS) {\r\n            let apps;\r\n            if (this.state.authorizedApps && this.state.authorizedApps.length > 0) {\r\n                apps = this.state.authorizedApps.map((app) => {\r\n                    const homepage = (\r\n                        <a\r\n                            href={app.homepage}\r\n                            target='_blank'\r\n                            rel='noopener noreferrer'\r\n                        >\r\n                            {app.homepage}\r\n                        </a>\r\n                    );\r\n\r\n                    return (\r\n                        <div\r\n                            key={app.id}\r\n                            className='padding-bottom x2 authorized-app'\r\n                        >\r\n                            <div className='col-sm-10'>\r\n                                <div className='authorized-app__name'>\r\n                                    {app.name}\r\n                                    <span className='authorized-app__url'>\r\n                                        {' -'} {homepage}\r\n                                    </span>\r\n                                </div>\r\n                                <div className='authorized-app__description'>{app.description}</div>\r\n                                <div className='authorized-app__deauthorize'>\r\n                                    <a\r\n                                        href='#'\r\n                                        data-app={app.id}\r\n                                        onClick={this.deauthorizeApp}\r\n                                    >\r\n                                        <FormattedMessage\r\n                                            id='user.settings.security.deauthorize'\r\n                                            defaultMessage='Deauthorize'\r\n                                        />\r\n                                    </a>\r\n                                </div>\r\n                            </div>\r\n                            <div className='col-sm-2 pull-right'>\r\n                                <img\r\n                                    alt={app.name}\r\n                                    src={app.icon_url || icon50}\r\n                                />\r\n                            </div>\r\n                            <br/>\r\n                        </div>\r\n                    );\r\n                });\r\n            } else {\r\n                apps = (\r\n                    <div className='padding-bottom x2 authorized-app'>\r\n                        <div className='setting-list__hint'>\r\n                            <FormattedMessage\r\n                                id='user.settings.security.noApps'\r\n                                defaultMessage='No OAuth 2.0 Applications are authorized.'\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            const inputs = [];\r\n            let wrapperClass;\r\n            let helpText;\r\n            if (Array.isArray(apps)) {\r\n                wrapperClass = 'authorized-apps__wrapper';\r\n\r\n                helpText = (\r\n                    <div className='authorized-apps__help'>\r\n                        <FormattedMessage\r\n                            id='user.settings.security.oauthAppsHelp'\r\n                            defaultMessage='Applications act on your behalf to access your data based on the permissions you grant them.'\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            inputs.push(\r\n                <div\r\n                    className={wrapperClass}\r\n                    key='authorizedApps'\r\n                >\r\n                    {apps}\r\n                </div>\r\n            );\r\n\r\n            const title = (\r\n                <div>\r\n                    <FormattedMessage\r\n                        id='user.settings.security.oauthApps'\r\n                        defaultMessage='OAuth 2.0 Applications'\r\n                    />\r\n                    {helpText}\r\n                </div>\r\n            );\r\n\r\n            return (\r\n                <SettingItemMax\r\n                    title={title}\r\n                    inputs={inputs}\r\n                    serverError={this.state.serverError}\r\n                    updateSection={this.handleUpdateSection}\r\n                    width='full'\r\n                    cancelButtonText={\r\n                        <FormattedMessage\r\n                            id='user.settings.security.close'\r\n                            defaultMessage='Close'\r\n                        />\r\n                    }\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <SettingItemMin\r\n                title={Utils.localizeMessage('user.settings.security.oauthApps', 'OAuth 2.0 Applications')}\r\n                describe={\r\n                    <FormattedMessage\r\n                        id='user.settings.security.oauthAppsDescription'\r\n                        defaultMessage=\"Click 'Edit' to manage your OAuth 2.0 Applications\"\r\n                    />\r\n                }\r\n                section={SECTION_APPS}\r\n                updateSection={this.handleUpdateSection}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const user = this.props.user;\r\n\r\n        const passwordSection = this.createPasswordSection();\r\n\r\n        let numMethods = 0;\r\n        numMethods = this.props.enableSignUpWithGitLab ? numMethods + 1 : numMethods;\r\n        numMethods = this.props.enableSignUpWithGoogle ? numMethods + 1 : numMethods;\r\n        numMethods = this.props.enableSignUpWithOffice365 ? numMethods + 1 : numMethods;\r\n        numMethods = this.props.enableLdap ? numMethods + 1 : numMethods;\r\n        numMethods = this.props.enableSaml ? numMethods + 1 : numMethods;\r\n\r\n        // If there are other sign-in methods and either email is enabled or the user's account is email, then allow switching\r\n        let signInSection;\r\n        if ((this.props.enableSignUpWithEmail || user.auth_service === '') &&\r\n            numMethods > 0 && this.props.experimentalEnableAuthenticationTransfer) {\r\n            signInSection = this.createSignInSection();\r\n        }\r\n\r\n        let oauthSection;\r\n        if (this.props.enableOAuthServiceProvider) {\r\n            oauthSection = this.createOAuthAppsSection();\r\n        }\r\n\r\n        let tokensSection;\r\n        if (this.props.canUseAccessTokens) {\r\n            tokensSection = (\r\n                <UserAccessTokenSection\r\n                    user={this.props.user}\r\n                    active={this.props.activeSection === SECTION_TOKENS}\r\n                    updateSection={this.handleUpdateSection}\r\n                    setRequireConfirm={this.props.setRequireConfirm}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='modal-header'>\r\n                    <FormattedMessage\r\n                        id='user.settings.security.close'\r\n                        defaultMessage='Close'\r\n                    >\r\n                        {(ariaLabel) => (\r\n                            <button\r\n                                type='button'\r\n                                className='close'\r\n                                data-dismiss='modal'\r\n                                aria-label={ariaLabel}\r\n                                onClick={this.props.closeModal}\r\n                            >\r\n                                <span aria-hidden='true'>{'×'}</span>\r\n                            </button>\r\n                        )}\r\n                    </FormattedMessage>\r\n                    <h4\r\n                        className='modal-title'\r\n                        ref='title'\r\n                    >\r\n                        <div className='modal-back'>\r\n                            <FormattedMessage\r\n                                id='generic_icons.collapse'\r\n                                defaultMessage='Collapse Icon'\r\n                            >\r\n                                {(title) => (\r\n                                    <i\r\n                                        className='fa fa-angle-left'\r\n                                        title={title}\r\n                                        onClick={this.props.collapseModal}\r\n                                    />\r\n                                )}\r\n                            </FormattedMessage>\r\n                        </div>\r\n                        <FormattedMessage\r\n                            id='user.settings.security.title'\r\n                            defaultMessage='Security Settings'\r\n                        />\r\n                    </h4>\r\n                </div>\r\n                <div className='user-settings'>\r\n                    <h3 className='tab-header'>\r\n                        <FormattedMessage\r\n                            id='user.settings.security.title'\r\n                            defaultMessage='Security Settings'\r\n                        />\r\n                    </h3>\r\n                    <div className='divider-dark first'/>\r\n                    {passwordSection}\r\n                    <div className='divider-light'/>\r\n                    <MfaSection\r\n                        active={this.props.activeSection === SECTION_MFA}\r\n                        updateSection={this.handleUpdateSection}\r\n                    />\r\n                    <div className='divider-light'/>\r\n                    {oauthSection}\r\n                    <div className='divider-light'/>\r\n                    {tokensSection}\r\n                    <div className='divider-light'/>\r\n                    {signInSection}\r\n                    <div className='divider-dark'/>\r\n                    <br/>\r\n                    <ToggleModalButton\r\n                        className='security-links color--link'\r\n                        dialogType={AccessHistoryModal}\r\n                    >\r\n                        <FormattedMessage\r\n                            id='user.settings.security.viewHistory.icon'\r\n                            defaultMessage='Access History Icon'\r\n                        >\r\n                            {(title) => (\r\n                                <i\r\n                                    className='fa fa-clock-o'\r\n                                    title={title}\r\n                                />\r\n                            )}\r\n                        </FormattedMessage>\r\n                        <FormattedMessage\r\n                            id='user.settings.security.viewHistory'\r\n                            defaultMessage='View Access History'\r\n                        />\r\n                    </ToggleModalButton>\r\n                    <ToggleModalButton\r\n                        className='security-links color--link margin-top'\r\n                        dialogType={ActivityLogModal}\r\n                    >\r\n                        <FormattedMessage\r\n                            id='user.settings.security.logoutActiveSessions.icon'\r\n                            defaultMessage='Active Sessions Icon'\r\n                        >\r\n                            {(title) => (\r\n                                <i\r\n                                    className='fa fa-clock-o'\r\n                                    title={title}\r\n                                />\r\n                            )}\r\n                        </FormattedMessage>\r\n                        <FormattedMessage\r\n                            id='user.settings.security.logoutActiveSessions'\r\n                            defaultMessage='View and Logout of Active Sessions'\r\n                        />\r\n                    </ToggleModalButton>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {getMe, updateUserPassword} from 'mattermost-redux/actions/users';\r\nimport {getAuthorizedOAuthApps, deauthorizeOAuthApp} from 'mattermost-redux/actions/integrations';\r\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\r\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\r\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\r\n\r\nimport {getPasswordConfig} from 'utils/utils.jsx';\r\nimport {Preferences} from 'utils/constants';\r\n\r\nimport SecurityTab from './user_settings_security.jsx';\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n    const config = getConfig(state);\r\n\r\n    const tokensEnabled = config.EnableUserAccessTokens === 'true';\r\n    const userHasTokenRole = UserUtils.hasUserAccessTokenRole(ownProps.user.roles) || UserUtils.isSystemAdmin(ownProps.user.roles);\r\n\r\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\r\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\r\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\r\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\r\n    const enableLdap = config.EnableLdap === 'true';\r\n    const enableSaml = config.EnableSaml === 'true';\r\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\r\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\r\n\r\n    return {\r\n        canUseAccessTokens: tokensEnabled && userHasTokenRole,\r\n        enableOAuthServiceProvider,\r\n        enableSignUpWithEmail,\r\n        enableSignUpWithGitLab,\r\n        enableSignUpWithGoogle,\r\n        enableLdap,\r\n        enableSaml,\r\n        enableSignUpWithOffice365,\r\n        experimentalEnableAuthenticationTransfer,\r\n        passwordConfig: getPasswordConfig(config),\r\n        militaryTime: getBool(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators({\r\n            getMe,\r\n            updateUserPassword,\r\n            getAuthorizedOAuthApps,\r\n            deauthorizeOAuthApp,\r\n        }, dispatch),\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SecurityTab);\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {FormattedMessage, intlShape} from 'react-intl';\r\n\r\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\r\n\r\nimport Constants from 'utils/constants.jsx';\r\nimport {isMac} from 'utils/utils.jsx';\r\nimport {t} from 'utils/i18n';\r\n\r\nimport SettingItemMax from 'components/setting_item_max.jsx';\r\nimport SettingItemMin from 'components/setting_item_min.jsx';\r\n\r\nexport default class UserSettingsSidebar extends React.Component {\r\n    static propTypes = {\r\n        actions: PropTypes.shape({\r\n\r\n            /*\r\n             * Function to save the user's preferences\r\n             */\r\n            savePreferences: PropTypes.func.isRequired,\r\n        }).isRequired,\r\n\r\n        /**\r\n         * Current user object\r\n         */\r\n        user: PropTypes.object,\r\n\r\n        /**\r\n         * The preferences for closing the unused direct messages channels\r\n         */\r\n        closeUnusedDirectMessages: PropTypes.string.isRequired,\r\n\r\n        /**\r\n         * Display the close unused direct messages channels options\r\n         */\r\n        showUnusedOption: PropTypes.bool.isRequired,\r\n\r\n        /**\r\n         * Display the channel grouping and sorting sections options\r\n         */\r\n        showChannelOrganization: PropTypes.bool.isRequired,\r\n\r\n        /**\r\n         * The preferences to show the channel switcher in the sidebar\r\n         */\r\n        channelSwitcherOption: PropTypes.string.isRequired,\r\n\r\n        /**\r\n         * Display the unread channels sections options\r\n         * The preferences to display channels in sidebar\r\n         */\r\n        sidebarPreference: PropTypes.shape({\r\n\r\n            /**\r\n             * Group channels by type or none\r\n             */\r\n            grouping: PropTypes.string.isRequired,\r\n\r\n            /**\r\n             * Sort channels by recency or alphabetical order\r\n             */\r\n            sorting: PropTypes.string.isRequired,\r\n        }).isRequired,\r\n\r\n        /**\r\n         * Option for including unread channels at top\r\n         */\r\n        unreadsAtTop: PropTypes.string.isRequired,\r\n\r\n        /**\r\n         * Option for including favorite channels at top\r\n         */\r\n        favoriteAtTop: PropTypes.string.isRequired,\r\n\r\n        updateSection: PropTypes.func,\r\n        activeSection: PropTypes.string,\r\n        closeModal: PropTypes.func.isRequired,\r\n        collapseModal: PropTypes.func.isRequired,\r\n    };\r\n\r\n    static contextTypes = {\r\n        intl: intlShape.isRequired,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = this.getStateFromProps();\r\n    }\r\n\r\n    getStateFromProps = () => {\r\n        const {\r\n            closeUnusedDirectMessages,\r\n            channelSwitcherOption,\r\n            sidebarPreference: {\r\n                grouping,\r\n                sorting,\r\n            },\r\n            unreadsAtTop,\r\n            favoriteAtTop,\r\n        } = this.props;\r\n\r\n        return {\r\n            settings: {\r\n                close_unused_direct_messages: closeUnusedDirectMessages,\r\n                channel_switcher_section: channelSwitcherOption,\r\n                grouping,\r\n                unreadsAtTop,\r\n                favoriteAtTop,\r\n                sorting,\r\n            },\r\n            isSaving: false,\r\n        };\r\n    };\r\n\r\n    trackSettingChangeIfNecessary = (setting) => {\r\n        if (this.state.settings[setting] !== this.props.sidebarPreference[setting]) {\r\n            trackEvent('settings', 'user_settings_update', {field: 'sidebar.' + setting, value: this.state.settings[setting]});\r\n        }\r\n    }\r\n\r\n    updateSetting = (setting, value) => {\r\n        const settings = this.state.settings;\r\n        settings[setting] = value;\r\n\r\n        this.setState(settings);\r\n    };\r\n\r\n    handleSubmit = (setting) => {\r\n        const {actions, user} = this.props;\r\n        const preferences = [];\r\n\r\n        if (setting === 'channel_grouping' || setting === 'channel_sorting') {\r\n            const updatedSidebarSettings = {\r\n                grouping: this.state.settings.grouping,\r\n                unreads_at_top: this.state.settings.unreadsAtTop,\r\n                favorite_at_top: this.state.settings.favoriteAtTop,\r\n                sorting: this.state.settings.sorting,\r\n            };\r\n\r\n            preferences.push({\r\n                user_id: user.id,\r\n                category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\r\n                name: '',\r\n                value: JSON.stringify(updatedSidebarSettings),\r\n            });\r\n\r\n            this.trackSettingChangeIfNecessary('grouping');\r\n            this.trackSettingChangeIfNecessary('sorting');\r\n            this.trackSettingChangeIfNecessary('unreadsAtTop');\r\n            this.trackSettingChangeIfNecessary('favoriteAtTop');\r\n        } else {\r\n            preferences.push({\r\n                user_id: user.id,\r\n                category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\r\n                name: setting,\r\n                value: this.state.settings[setting],\r\n            });\r\n\r\n            trackEvent('settings', 'user_settings_update', {field: 'sidebar.' + setting, value: this.state.settings[setting]});\r\n        }\r\n\r\n        this.setState({isSaving: true});\r\n\r\n        actions.savePreferences(user.id, preferences).then(() => {\r\n            this.updateSection('');\r\n        });\r\n    };\r\n\r\n    updateSection = (section) => {\r\n        if (!section) {\r\n            this.setState(this.getStateFromProps());\r\n        }\r\n        this.setState({isSaving: false});\r\n        this.props.updateSection(section);\r\n    };\r\n\r\n    renderAutoCloseDMLabel = (value) => {\r\n        if (value === 'after_seven_days') {\r\n            return (\r\n                <FormattedMessage\r\n                    id='user.settings.sidebar.after_seven_days'\r\n                    defaultMessage='After 7 days with no new messages'\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <FormattedMessage\r\n                id='user.settings.sidebar.never'\r\n                defaultMessage='Never'\r\n            />\r\n        );\r\n    };\r\n\r\n    renderAutoCloseDMSection = () => {\r\n        let contents;\r\n\r\n        if (this.props.activeSection === 'autoCloseDM') {\r\n            contents = (\r\n                <SettingItemMax\r\n                    title={\r\n                        <FormattedMessage\r\n                            id='user.settings.sidebar.autoCloseDMTitle'\r\n                            defaultMessage='Automatically Close Direct Messages'\r\n                        />\r\n                    }\r\n                    inputs={[\r\n                        <div key='autoCloseDMSetting'>\r\n                            <div className='radio'>\r\n                                <label>\r\n                                    <input\r\n                                        id='autoCloseDMAfterSevenDays'\r\n                                        type='radio'\r\n                                        name='autoCloseDM'\r\n                                        checked={this.state.settings.close_unused_direct_messages === 'after_seven_days'}\r\n                                        onChange={this.updateSetting.bind(this, 'close_unused_direct_messages', 'after_seven_days')}\r\n                                    />\r\n                                    <FormattedMessage\r\n                                        id='user.settings.sidebar.after_seven_days'\r\n                                        defaultMessage='After 7 days with no new messages'\r\n                                    />\r\n                                </label>\r\n                                <br/>\r\n                            </div>\r\n                            <div className='radio'>\r\n                                <label>\r\n                                    <input\r\n                                        id='autoCloseDMNever'\r\n                                        type='radio'\r\n                                        name='autoCloseDM'\r\n                                        checked={this.state.settings.close_unused_direct_messages === 'never'}\r\n                                        onChange={this.updateSetting.bind(this, 'close_unused_direct_messages', 'never')}\r\n                                    />\r\n                                    <FormattedMessage\r\n                                        id='user.settings.sidebar.never'\r\n                                        defaultMessage='Never'\r\n                                    />\r\n                                </label>\r\n                                <br/>\r\n                            </div>\r\n                            <div>\r\n                                <br/>\r\n                                <FormattedMessage\r\n                                    id='user.settings.sidebar.autoCloseDMDesc'\r\n                                    defaultMessage='Direct Message conversations can be reopened with the “+” button in the sidebar or using the Channel Switcher (CTRL+K).'\r\n                                />\r\n                            </div>\r\n                        </div>,\r\n                    ]}\r\n                    setting={'close_unused_direct_messages'}\r\n                    submit={this.handleSubmit}\r\n                    saving={this.state.isSaving}\r\n                    server_error={this.state.serverError}\r\n                    updateSection={this.updateSection}\r\n                />\r\n            );\r\n        } else {\r\n            contents = (\r\n                <SettingItemMin\r\n                    title={\r\n                        <FormattedMessage\r\n                            id='user.settings.sidebar.autoCloseDMTitle'\r\n                            defaultMessage='Automatically Close Direct Messages'\r\n                        />\r\n                    }\r\n                    describe={this.renderAutoCloseDMLabel(this.state.settings.close_unused_direct_messages)}\r\n                    section={'autoCloseDM'}\r\n                    updateSection={this.updateSection}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {contents}\r\n                <div className='divider-dark'/>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    renderOrganizationLabel = () => {\r\n        const {\r\n            sidebarPreference: {\r\n                sorting,\r\n                grouping,\r\n            },\r\n            unreadsAtTop,\r\n            favoriteAtTop,\r\n        } = this.props;\r\n\r\n        const messages = [];\r\n\r\n        if (grouping === 'by_type') {\r\n            messages.push(\r\n                <FormattedMessage\r\n                    key='by_type'\r\n                    id='user.settings.sidebar.groupByTypeShort'\r\n                    defaultMessage='Group by channel type'\r\n                />\r\n            );\r\n        } else {\r\n            messages.push(\r\n                <FormattedMessage\r\n                    key='none'\r\n                    id='user.settings.sidebar.groupByNoneShort'\r\n                    defaultMessage='No grouping'\r\n                />\r\n            );\r\n        }\r\n\r\n        let sortingId;\r\n        let sortingDefaultMessage;\r\n        if (sorting === 'alpha') {\r\n            sortingId = t('user.settings.sidebar.sortAlphaShort');\r\n            sortingDefaultMessage = 'sorted alphabetically';\r\n        } else {\r\n            sortingId = t('user.settings.sidebar.sortRecentShort');\r\n            sortingDefaultMessage = 'sorted by recency';\r\n        }\r\n\r\n        messages.push(\r\n            <span key='comma'>{', '}</span>\r\n        );\r\n\r\n        messages.push(\r\n            <FormattedMessage\r\n                key='sorting'\r\n                id={sortingId}\r\n                defaultMessage={sortingDefaultMessage}\r\n            />\r\n        );\r\n\r\n        let atTopId = null;\r\n        let atTopDefaultMessage = null;\r\n        if (unreadsAtTop === 'true' && favoriteAtTop === 'false') {\r\n            atTopId = t('user.settings.sidebar.unreadsShort');\r\n            atTopDefaultMessage = 'Unreads grouped separately';\r\n        } else if (unreadsAtTop === 'false' && favoriteAtTop === 'true') {\r\n            atTopId = t('user.settings.sidebar.favoritesShort');\r\n            atTopDefaultMessage = 'Favorites grouped separately';\r\n        } else if (unreadsAtTop === 'true' && favoriteAtTop === 'true') {\r\n            atTopId = t('user.settings.sidebar.unreadsFavoritesShort');\r\n            atTopDefaultMessage = 'Unreads and favorites grouped separately';\r\n        }\r\n\r\n        if (atTopId) {\r\n            messages.push(\r\n                <br key='break'/>\r\n            );\r\n\r\n            messages.push(\r\n                <FormattedMessage\r\n                    key='atTop'\r\n                    id={atTopId}\r\n                    defaultMessage={atTopDefaultMessage}\r\n                />\r\n            );\r\n        }\r\n\r\n        return messages;\r\n    };\r\n\r\n    renderChannelSwitcherLabel = (value) => {\r\n        if (value === 'true') {\r\n            return (\r\n                <FormattedMessage\r\n                    id='user.settings.sidebar.on'\r\n                    defaultMessage='On'\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <FormattedMessage\r\n                id='user.settings.sidebar.off'\r\n                defaultMessage='Off'\r\n            />\r\n        );\r\n    };\r\n\r\n    renderChannelOrganizationSection = () => {\r\n        const {\r\n            grouping,\r\n            sorting,\r\n        } = this.state.settings;\r\n\r\n        let contents;\r\n\r\n        if (this.props.activeSection === 'groupChannels') {\r\n            const inputs = [];\r\n\r\n            inputs.push(\r\n                <div key='groupingSectionSetting'>\r\n                    <label>\r\n                        <FormattedMessage\r\n                            id='user.settings.sidebar.groupChannelsTitle'\r\n                            defaultMessage='Channel grouping'\r\n                        />\r\n                    </label>\r\n                    <br/>\r\n                    <div className='radio'>\r\n                        <label>\r\n                            <input\r\n                                id='byTypeOption'\r\n                                type='radio'\r\n                                name='groupChannels'\r\n                                checked={grouping === 'by_type'}\r\n                                onChange={this.updateSetting.bind(this, 'grouping', 'by_type')}\r\n                            />\r\n                            <FormattedMessage\r\n                                id='user.settings.sidebar.groupByType'\r\n                                defaultMessage='Channels grouped by type'\r\n                            />\r\n                        </label>\r\n                        <br/>\r\n                    </div>\r\n                    <div className='radio'>\r\n                        <label>\r\n                            <input\r\n                                id='noneOption'\r\n                                type='radio'\r\n                                name='groupChannels'\r\n                                checked={grouping === 'none'}\r\n                                onChange={this.updateSetting.bind(this, 'grouping', 'none')}\r\n                            />\r\n                            <FormattedMessage\r\n                                id='user.settings.sidebar.groupByNone'\r\n                                defaultMessage='Combine all channel types'\r\n                            />\r\n                        </label>\r\n                        <br/>\r\n                    </div>\r\n                    <div>\r\n                        <br/>\r\n                        <FormattedMessage\r\n                            id='user.settings.sidebar.groupDesc'\r\n                            defaultMessage='Group channels by type, or combine all types into a list.'\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            inputs.push(<hr key='sortingDivider'/>);\r\n\r\n            inputs.push(\r\n                <div key='sortingOptions'>\r\n                    <label>\r\n                        <FormattedMessage\r\n                            id='user.settings.sidebar.sortChannelsTitle'\r\n                            defaultMessage='Channel sorting'\r\n                        />\r\n                    </label>\r\n                    <br/>\r\n                    <div className='radio'>\r\n                        <label>\r\n                            <input\r\n                                id='recentSectionEnabled'\r\n                                type='radio'\r\n                                name='sortChannels'\r\n                                checked={sorting === 'recent'}\r\n                                onChange={this.updateSetting.bind(this, 'sorting', 'recent')}\r\n                            />\r\n                            <FormattedMessage\r\n                                id='user.settings.sidebar.sortRecent'\r\n                                defaultMessage='Recency'\r\n                            />\r\n                        </label>\r\n                        <br/>\r\n                    </div>\r\n                    <div className='radio'>\r\n                        <label>\r\n                            <input\r\n                                id='alphaSectionEnabled'\r\n                                type='radio'\r\n                                name='sortChannels'\r\n                                checked={sorting === 'alpha'}\r\n                                onChange={this.updateSetting.bind(this, 'sorting', 'alpha')}\r\n                            />\r\n                            <FormattedMessage\r\n                                id='user.settings.sidebar.sortAlpha'\r\n                                defaultMessage='Alphabetically'\r\n                            />\r\n                        </label>\r\n                        <br/>\r\n                    </div>\r\n                    <div>\r\n                        <br/>\r\n                        <FormattedMessage\r\n                            id='user.settings.sidebar.sortDesc'\r\n                            defaultMessage='Sort channels alphabetically, or by most recent post.'\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            inputs.push(<hr key='divider'/>);\r\n\r\n            inputs.push(\r\n                <div key='unreadOption'>\r\n                    <div className='checkbox'>\r\n                        <label>\r\n                            <input\r\n                                id='unreadAtTopOption'\r\n                                type='checkbox'\r\n                                checked={this.state.settings.unreadsAtTop === 'true'}\r\n                                onChange={(e) => this.updateSetting('unreadsAtTop', (e.target.checked).toString())}\r\n                            />\r\n                            <FormattedMessage\r\n                                id='user.settings.sidebar.unreads'\r\n                                defaultMessage='Unreads grouped separately'\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                    <div>\r\n                        <br/>\r\n                        <FormattedMessage\r\n                            id='user.settings.sidebar.unreadsDesc'\r\n                            defaultMessage='Group unread channels separately until read.'\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            inputs.push(<hr key='groupingDivider'/>);\r\n\r\n            inputs.push(\r\n                <div key='favoriteOption'>\r\n                    <div className='checkbox'>\r\n                        <label>\r\n                            <input\r\n                                id='favoriteAtTopOption'\r\n                                type='checkbox'\r\n                                checked={this.state.settings.favoriteAtTop === 'true'}\r\n                                onChange={(e) => this.updateSetting('favoriteAtTop', (e.target.checked).toString())}\r\n                            />\r\n                            <FormattedMessage\r\n                                id='user.settings.sidebar.favorites'\r\n                                defaultMessage='Favorites grouped separately'\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                    <div>\r\n                        <br/>\r\n                        <FormattedMessage\r\n                            id='user.settings.sidebar.favoritesDesc'\r\n                            defaultMessage='Channels marked as favorites will be grouped separately.'\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            contents = (\r\n                <SettingItemMax\r\n                    title={\r\n                        <FormattedMessage\r\n                            id='user.settings.sidebar.groupAndSortChannelsTitle'\r\n                            defaultMessage='Channel grouping and sorting'\r\n                        />\r\n                    }\r\n                    inputs={inputs}\r\n                    setting={'channel_grouping'}\r\n                    submit={this.handleSubmit}\r\n                    saving={this.state.isSaving}\r\n                    server_error={this.state.serverError}\r\n                    updateSection={this.updateSection}\r\n                />\r\n            );\r\n        } else {\r\n            contents = (\r\n                <SettingItemMin\r\n                    title={\r\n                        <FormattedMessage\r\n                            id='user.settings.sidebar.groupAndSortChannelsTitle'\r\n                            defaultMessage='Channel grouping and sorting'\r\n                        />\r\n                    }\r\n                    describe={this.renderOrganizationLabel()}\r\n                    section={'groupChannels'}\r\n                    updateSection={this.updateSection}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {contents}\r\n                <div className='divider-light'/>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    renderChannelSwitcherSection = () => {\r\n        let channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.windows');\r\n        let channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CTRL + K.';\r\n        if (isMac()) {\r\n            channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.mac');\r\n            channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CMD + K.';\r\n        }\r\n\r\n        const helpChannelSwitcherText = (\r\n            <FormattedMessage\r\n                id={channelSwitcherSectionDescId}\r\n                defaultMessage={channelSwitcherSectionDescDefault}\r\n            />\r\n        );\r\n\r\n        if (this.props.activeSection === 'channelSwitcher') {\r\n            return (\r\n                <SettingItemMax\r\n                    title={\r\n                        <FormattedMessage\r\n                            id='user.settings.sidebar.channelSwitcherSectionTitle'\r\n                            defaultMessage='Channel Switcher'\r\n                        />\r\n                    }\r\n                    inputs={[\r\n                        <div key='channelSwitcherSectionSetting'>\r\n                            <div\r\n                                id='channelSwitcherRadioOn'\r\n                                className='radio'\r\n                            >\r\n                                <label>\r\n                                    <input\r\n                                        id='channelSwitcherSectionEnabled'\r\n                                        type='radio'\r\n                                        name='channelSwitcher'\r\n                                        checked={this.state.settings.channel_switcher_section === 'true'}\r\n                                        onChange={this.updateSetting.bind(this, 'channel_switcher_section', 'true')}\r\n                                    />\r\n                                    <FormattedMessage\r\n                                        id='user.settings.sidebar.on'\r\n                                        defaultMessage='On'\r\n                                    />\r\n                                </label>\r\n                                <br/>\r\n                            </div>\r\n                            <div\r\n                                id='channelSwitcherRadioOff'\r\n                                className='radio'\r\n                            >\r\n                                <label>\r\n                                    <input\r\n                                        id='channelSwitcherSectionOff'\r\n                                        type='radio'\r\n                                        name='channelSwitcher'\r\n                                        checked={this.state.settings.channel_switcher_section === 'false'}\r\n                                        onChange={this.updateSetting.bind(this, 'channel_switcher_section', 'false')}\r\n                                    />\r\n                                    <FormattedMessage\r\n                                        id='user.settings.sidebar.off'\r\n                                        defaultMessage='Off'\r\n                                    />\r\n                                </label>\r\n                                <br/>\r\n                            </div>\r\n                            <div id='channelSwitcherHelpText'>\r\n                                <br/>\r\n                                {helpChannelSwitcherText}\r\n                            </div>\r\n                        </div>,\r\n                    ]}\r\n                    setting={'channel_switcher_section'}\r\n                    submit={this.handleSubmit}\r\n                    saving={this.state.isSaving}\r\n                    server_error={this.state.serverError}\r\n                    updateSection={this.updateSection}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <SettingItemMin\r\n                title={\r\n                    <FormattedMessage\r\n                        id='user.settings.sidebar.channelSwitcherSectionTitle'\r\n                        defaultMessage='Channel Switcher'\r\n                    />\r\n                }\r\n                describe={this.renderChannelSwitcherLabel(this.state.settings.channel_switcher_section)}\r\n                section={'channelSwitcher'}\r\n                updateSection={this.updateSection}\r\n                focused={true}\r\n            />\r\n        );\r\n    };\r\n\r\n    render() {\r\n        const {showUnusedOption, showChannelOrganization} = this.props;\r\n        const {formatMessage} = this.context.intl;\r\n\r\n        const channelOrganizationSection = showChannelOrganization ? this.renderChannelOrganizationSection() : null;\r\n        const autoCloseDMSection = showUnusedOption ? this.renderAutoCloseDMSection() : null;\r\n        const channelSwitcherSection = this.renderChannelSwitcherSection();\r\n\r\n        return (\r\n            <div>\r\n                <div className='modal-header'>\r\n                    <button\r\n                        id='closeButton'\r\n                        type='button'\r\n                        className='close'\r\n                        data-dismiss='modal'\r\n                        aria-label='Close'\r\n                        onClick={this.props.closeModal}\r\n                    >\r\n                        <span aria-hidden='true'>{'×'}</span>\r\n                    </button>\r\n                    <h4\r\n                        className='modal-title'\r\n                        ref='title'\r\n                    >\r\n                        <div className='modal-back'>\r\n                            <i\r\n                                className='fa fa-angle-left'\r\n                                title={formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\r\n                                onClick={this.props.collapseModal}\r\n                            />\r\n                        </div>\r\n                        <FormattedMessage\r\n                            id='user.settings.sidebar.title'\r\n                            defaultMessage='Sidebar Settings'\r\n                        />\r\n                    </h4>\r\n                </div>\r\n                <div\r\n                    id='sidebarTitle'\r\n                    className='user-settings'\r\n                >\r\n                    <h3 className='tab-header'>\r\n                        <FormattedMessage\r\n                            id='user.settings.sidebar.title'\r\n                            defaultMessage='Sidebar Settings'\r\n                        />\r\n                    </h3>\r\n                    <div className='divider-dark first'/>\r\n                    {channelOrganizationSection}\r\n                    {channelSwitcherSection}\r\n                    {showUnusedOption ? <div className='divider-light'/> : <div className='divider-dark'/>}\r\n                    {autoCloseDMSection}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport {bindActionCreators} from 'redux';\r\nimport {connect} from 'react-redux';\r\n\r\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\r\nimport {Preferences} from 'mattermost-redux/constants';\r\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\r\nimport {get as getPreference, getSidebarPreferences} from 'mattermost-redux/selectors/entities/preferences';\r\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\r\n\r\nimport UserSettingsSidebar from './user_settings_sidebar.jsx';\r\n\r\nfunction mapStateToProps(state) {\r\n    const config = getConfig(state);\r\n\r\n    const closeUnusedDirectMessages = getPreference(\r\n        state,\r\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\r\n        'close_unused_direct_messages',\r\n        'after_seven_days'\r\n    );\r\n\r\n    const channelSwitcherOption = getPreference(\r\n        state,\r\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\r\n        'channel_switcher_section',\r\n        'true'\r\n    );\r\n\r\n    const sidebarPreference = getSidebarPreferences(state);\r\n\r\n    return {\r\n        closeUnusedDirectMessages,\r\n        sidebarPreference,\r\n        unreadsAtTop: sidebarPreference.unreads_at_top,\r\n        favoriteAtTop: sidebarPreference.favorite_at_top,\r\n        channelSwitcherOption,\r\n        showChannelOrganization: config.ExperimentalChannelOrganization === 'true',\r\n        showUnusedOption: config.CloseUnusedDirectMessages === 'true',\r\n        user: getCurrentUser(state),\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators({\r\n            savePreferences,\r\n        }, dispatch),\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsSidebar);\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nimport AdvancedTab from './advanced';\r\nimport DisplayTab from './display';\r\nimport GeneralTab from './general';\r\nimport NotificationsTab from './notifications';\r\nimport SecurityTab from './security';\r\nimport SidebarTab from './sidebar';\r\n\r\nexport default class UserSettings extends React.PureComponent {\r\n    static propTypes = {\r\n        user: PropTypes.object.isRequired,\r\n        activeTab: PropTypes.string,\r\n        activeSection: PropTypes.string,\r\n        prevActiveSection: PropTypes.string,\r\n        updateSection: PropTypes.func,\r\n        updateTab: PropTypes.func,\r\n        closeModal: PropTypes.func.isRequired,\r\n        collapseModal: PropTypes.func.isRequired,\r\n        setEnforceFocus: PropTypes.func.isRequired,\r\n        setRequireConfirm: PropTypes.func.isRequired,\r\n    }\r\n\r\n    render() {\r\n        if (this.props.activeTab === 'general') {\r\n            return (\r\n                <div>\r\n                    <GeneralTab\r\n                        user={this.props.user}\r\n                        activeSection={this.props.activeSection}\r\n                        prevActiveSection={this.props.prevActiveSection}\r\n                        updateSection={this.props.updateSection}\r\n                        updateTab={this.props.updateTab}\r\n                        closeModal={this.props.closeModal}\r\n                        collapseModal={this.props.collapseModal}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (this.props.activeTab === 'security') {\r\n            return (\r\n                <div>\r\n                    <SecurityTab\r\n                        user={this.props.user}\r\n                        activeSection={this.props.activeSection}\r\n                        prevActiveSection={this.props.prevActiveSection}\r\n                        updateSection={this.props.updateSection}\r\n                        closeModal={this.props.closeModal}\r\n                        collapseModal={this.props.collapseModal}\r\n                        setRequireConfirm={this.props.setRequireConfirm}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (this.props.activeTab === 'notifications') {\r\n            return (\r\n                <div>\r\n                    <NotificationsTab\r\n                        user={this.props.user}\r\n                        activeSection={this.props.activeSection}\r\n                        prevActiveSection={this.props.prevActiveSection}\r\n                        updateSection={this.props.updateSection}\r\n                        closeModal={this.props.closeModal}\r\n                        collapseModal={this.props.collapseModal}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (this.props.activeTab === 'display') {\r\n            return (\r\n                <div>\r\n                    <DisplayTab\r\n                        user={this.props.user}\r\n                        activeSection={this.props.activeSection}\r\n                        prevActiveSection={this.props.prevActiveSection}\r\n                        updateSection={this.props.updateSection}\r\n                        closeModal={this.props.closeModal}\r\n                        collapseModal={this.props.collapseModal}\r\n                        setEnforceFocus={this.props.setEnforceFocus}\r\n                        setRequireConfirm={this.props.setRequireConfirm}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (this.props.activeTab === 'sidebar') {\r\n            return (\r\n                <div>\r\n                    <SidebarTab\r\n                        activeSection={this.props.activeSection}\r\n                        prevActiveSection={this.props.prevActiveSection}\r\n                        updateSection={this.props.updateSection}\r\n                        closeModal={this.props.closeModal}\r\n                        collapseModal={this.props.collapseModal}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (this.props.activeTab === 'advanced') {\r\n            return (\r\n                <div>\r\n                    <AdvancedTab\r\n                        activeSection={this.props.activeSection}\r\n                        prevActiveSection={this.props.prevActiveSection}\r\n                        updateSection={this.props.updateSection}\r\n                        closeModal={this.props.closeModal}\r\n                        collapseModal={this.props.collapseModal}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return <div/>;\r\n    }\r\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport {connect} from 'react-redux';\r\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\r\n\r\nimport UserSettings from './user_settings.jsx';\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        user: getCurrentUser(state),\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(UserSettings);\r\n"],"sourceRoot":""}