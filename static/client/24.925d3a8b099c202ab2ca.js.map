{"version":3,"sources":["webpack:///./components/common/back_button.jsx","webpack:///./components/password_reset_send_link/password_reset_send_link.js","webpack:///./components/password_reset_send_link/index.js"],"names":["BackButton","React","PureComponent","render","props","onClick","url","title","PropTypes","string","func","PasswordResetSendLink","error","updateText","createRef","e","preventDefault","input","emailInput","current","email","value","trim","toLowerCase","isEmail","setState","data","actions","sendPasswordResetEmail","resetForm","hidden","message","update_text","state","formClass","handleSendLink","id","t","defaultMessage","shape","isRequired","mapDispatchToProps","dispatch","bindActionCreators","connect"],"mappings":"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","file":"24.925d3a8b099c202ab2ca.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default class BackButton extends React.PureComponent {\r\n    static propTypes = {\r\n\r\n        /**\r\n         * URL to return to\r\n         */\r\n        url: PropTypes.string,\r\n\r\n        /**\r\n         * An optional click handler that will trigger when the user clicks on the back button\r\n         */\r\n        onClick: PropTypes.func,\r\n    };\r\n\r\n    static defaultProps = {\r\n        url: '/',\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                id='back_button'\r\n                className='signup-header'\r\n            >\r\n                <Link\r\n                    onClick={this.props.onClick}\r\n                    to={this.props.url}\r\n                >\r\n                    <FormattedMessage\r\n                        id='generic_icons.back'\r\n                        defaultMessage='Back Icon'\r\n                    >\r\n                        {(title) => (\r\n                            <span\r\n                                id='back_button_icon'\r\n                                className='fa fa-1x fa-angle-left'\r\n                                title={title}\r\n                            />\r\n                        )}\r\n                    </FormattedMessage>\r\n                    <FormattedMessage\r\n                        id='web.header.back'\r\n                        defaultMessage='Back'\r\n                    />\r\n                </Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\n\r\nimport {isEmail} from 'mattermost-redux/utils/helpers';\r\n\r\nimport BackButton from 'components/common/back_button';\r\nimport LocalizedInput from 'components/localized_input/localized_input';\r\n\r\nimport {t} from 'utils/i18n.jsx';\r\n\r\nexport default class PasswordResetSendLink extends React.PureComponent {\r\n    static propTypes = {\r\n        actions: PropTypes.shape({\r\n            sendPasswordResetEmail: PropTypes.func.isRequired,\r\n        }).isRequired,\r\n    };\r\n\r\n    state = {\r\n        error: null,\r\n        updateText: null,\r\n    };\r\n    resetForm = React.createRef();\r\n    emailInput = React.createRef();\r\n\r\n    handleSendLink = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const input = this.emailInput.current && this.emailInput.current.input.current;\r\n        const email = input && input.value.trim().toLowerCase();\r\n        if (!email || !isEmail(email)) {\r\n            this.setState({\r\n                error: (\r\n                    <FormattedMessage\r\n                        id={'password_send.error'}\r\n                        defaultMessage={'Please enter a valid email address.'}\r\n                    />\r\n                ),\r\n            });\r\n            return;\r\n        }\r\n\r\n        // End of error checking clear error\r\n        this.setState({error: null});\r\n\r\n        const {data, error} = await this.props.actions.sendPasswordResetEmail(email);\r\n        if (data) {\r\n            this.setState({\r\n                error: null,\r\n                updateText: (\r\n                    <div\r\n                        id='passwordResetEmailSent'\r\n                        className='reset-form alert alert-success'\r\n                    >\r\n                        <FormattedMessage\r\n                            id='password_send.link'\r\n                            defaultMessage='If the account exists, a password reset email will be sent to:'\r\n                        />\r\n                        <div>\r\n                            <b>{email}</b>\r\n                        </div>\r\n                        <br/>\r\n                        <FormattedMessage\r\n                            id='password_send.checkInbox'\r\n                            defaultMessage='Please check your inbox.'\r\n                        />\r\n                    </div>\r\n                ),\r\n            });\r\n            if (this.resetForm.current) {\r\n                this.resetForm.current.hidden = true;\r\n            }\r\n        } else if (error) {\r\n            this.setState({\r\n                error: error.message,\r\n                update_text: null,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let error = null;\r\n        if (this.state.error) {\r\n            error = (\r\n                <div className='form-group has-error'>\r\n                    <label className='control-label'>{this.state.error}</label>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        let formClass = 'form-group';\r\n        if (error) {\r\n            formClass += ' has-error';\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <BackButton/>\r\n                <div className='col-sm-12'>\r\n                    <div className='signup-team__container'>\r\n                        <h3>\r\n                            <FormattedMessage\r\n                                id='password_send.title'\r\n                                defaultMessage='Password Reset'\r\n                            />\r\n                        </h3>\r\n                        {this.state.updateText}\r\n                        <form\r\n                            onSubmit={this.handleSendLink}\r\n                            ref={this.resetForm}\r\n                        >\r\n                            <p>\r\n                                <FormattedMessage\r\n                                    id='password_send.description'\r\n                                    defaultMessage='To reset your password, enter the email address you used to sign up'\r\n                                />\r\n                            </p>\r\n                            <div className={formClass}>\r\n                                <LocalizedInput\r\n                                    id='passwordResetEmailInput'\r\n                                    type='email'\r\n                                    className='form-control'\r\n                                    name='email'\r\n                                    placeholder={{id: t('password_send.email'), defaultMessage: 'Email'}}\r\n                                    ref={this.emailInput}\r\n                                    spellCheck='false'\r\n                                    autoFocus={true}\r\n                                />\r\n                            </div>\r\n                            {error}\r\n                            <button\r\n                                id='passwordResetButton'\r\n                                type='submit'\r\n                                className='btn btn-primary'\r\n                            >\r\n                                <FormattedMessage\r\n                                    id='password_send.reset'\r\n                                    defaultMessage='Reset my password'\r\n                                />\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport {bindActionCreators} from 'redux';\r\nimport {connect} from 'react-redux';\r\nimport {sendPasswordResetEmail} from 'mattermost-redux/actions/users';\r\n\r\nimport PasswordResetSendLink from './password_reset_send_link';\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    actions: bindActionCreators({\r\n        sendPasswordResetEmail,\r\n    }, dispatch),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(PasswordResetSendLink);\r\n"],"sourceRoot":""}