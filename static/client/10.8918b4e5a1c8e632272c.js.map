{"version":3,"sources":["webpack:///./actions/admin_actions.jsx","webpack:///./components/common/back_button.jsx","webpack:///./images/logo.png","webpack:///./selectors/views/admin.js","webpack:///./components/login/login_mfa.jsx","webpack:///./components/claim/components/oauth_to_email.jsx","webpack:///./components/claim/components/email_to_oauth.jsx","webpack:///./components/claim/components/ldap_to_email.jsx","webpack:///./components/claim/components/email_to_ldap.jsx","webpack:///./components/claim/claim_controller.jsx","webpack:///./components/claim/index.js"],"names":["dispatch","store","getState","saveConfig","config","success","error","data","err","AdminActions","id","server_error_id","reloadConfig","adminResetMfa","userId","UserActions","getClusterStatus","ldapTest","invalidateAllCaches","recycleDatabaseConnection","adminResetPassword","currentPassword","password","adminResetEmail","user","samlCertificateStatus","getOAuthAppInfo","clientId","bindClientFunc","clientFunc","Client4","params","allowOAuth2","responseType","redirectUri","state","scope","authorizeOAuthApp","emailToLdap","loginId","token","ldapId","ldapPassword","emailToOAuth","newType","oauthToEmail","currentService","email","follow_link","emitUserLoggedOutEvent","uploadBrandImage","brandImage","uploadLicenseFile","file","removeLicenseFile","uploadPublicSamlCertificate","uploadPrivateSamlCertificate","uploadIdpSamlCertificate","removePublicSamlCertificate","removePrivateSamlCertificate","removeIdpSamlCertificate","getStandardAnalytics","teamId","getAdvancedAnalytics","getPostsPerDayAnalytics","getUsersPerDayAnalytics","elasticsearchTest","testS3Connection","elasticsearchPurgeIndexes","setNavigationBlocked","blocked","type","ActionTypes","SET_NAVIGATION_BLOCKED","deferNavigation","onNavigationConfirmed","DEFER_NAVIGATION","cancelNavigation","CANCEL_NAVIGATION","confirmNavigation","thunkDispatch","thunkGetState","callback","getOnNavigationConfirmed","CONFIRM_NAVIGATION","invalidateAllEmailInvites","TeamActions","testSmtp","BackButton","React","PureComponent","render","props","onClick","url","title","PropTypes","string","func","getNavigationBlocked","views","admin","navigationBlock","showNavigationPrompt","LoginMfa","constructor","e","preventDefault","target","value","trim","replace","setState","serverError","saving","submit","errorClass","handleSubmit","t","defaultMessage","handleChange","localizeMessage","isRequired","OAuthToEmail","bind","ReactDOM","findDOMNode","refs","Utils","valid","passwordConfig","confirmPassword","passwordconfirm","currentType","window","location","href","message","formClass","uiType","Constants","SAML_SERVICE","toUpperCase","site","siteName","object","EmailToOAuth","preSubmit","showMfa","content","LDAPToEmail","Component","passwordError","confirmError","ldapPasswordError","ldappassword","switchLdapToEmail","then","startsWith","passwordClass","ldapPasswordClass","confimClass","passwordPlaceholder","EmailToLDAP","ldapError","emailpassword","ldapid","ldapClass","loginPlaceholder","ldapLoginFieldName","style","usernameInput","display","ClaimController","URLSearchParams","search","get","logoImage","match","actions","shape","mapStateToProps","getConfig","SiteName","LdapLoginFieldName","getPasswordConfig","mapDispatchToProps","bindActionCreators","connect"],"mappings":"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","file":"10.8918b4e5a1c8e632272c.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport * as AdminActions from 'mattermost-redux/actions/admin';\r\nimport * as UserActions from 'mattermost-redux/actions/users';\r\nimport * as TeamActions from 'mattermost-redux/actions/teams';\r\nimport {Client4} from 'mattermost-redux/client';\r\nimport {bindClientFunc} from 'mattermost-redux/actions/helpers';\r\n\r\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\r\nimport {getOnNavigationConfirmed} from 'selectors/views/admin';\r\nimport store from 'stores/redux_store.jsx';\r\nimport {ActionTypes} from 'utils/constants.jsx';\r\n\r\nconst dispatch = store.dispatch;\r\nconst getState = store.getState;\r\n\r\nexport async function saveConfig(config, success, error) {\r\n    const {data, error: err} = await AdminActions.updateConfig(config)(dispatch, getState);\r\n    if (data && success) {\r\n        success(data);\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function reloadConfig(success, error) {\r\n    const {data, error: err} = await dispatch(AdminActions.reloadConfig());\r\n    if (data && success) {\r\n        dispatch(AdminActions.getConfig());\r\n        dispatch(AdminActions.getEnvironmentConfig());\r\n        success(data);\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function adminResetMfa(userId, success, error) {\r\n    const {data, error: err} = await UserActions.updateUserMfa(userId, false)(dispatch, getState);\r\n    if (data && success) {\r\n        success(data);\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function getClusterStatus(success, error) {\r\n    const {data, error: err} = await AdminActions.getClusterStatus()(dispatch, getState);\r\n    if (data && success) {\r\n        success(data);\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function ldapTest(success, error) {\r\n    const {data, error: err} = await AdminActions.testLdap()(dispatch, getState);\r\n    if (data && success) {\r\n        success(data);\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function invalidateAllCaches(success, error) {\r\n    const {data, error: err} = await AdminActions.invalidateCaches()(dispatch, getState);\r\n    if (data && success) {\r\n        success(data);\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function recycleDatabaseConnection(success, error) {\r\n    const {data, error: err} = await AdminActions.recycleDatabase()(dispatch, getState);\r\n    if (data && success) {\r\n        success(data);\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function adminResetPassword(userId, currentPassword, password, success, error) {\r\n    const {data, error: err} = await UserActions.updateUserPassword(userId, currentPassword, password)(dispatch, getState);\r\n    if (data && success) {\r\n        success(data);\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function adminResetEmail(user, success, error) {\r\n    const {data, error: err} = await UserActions.patchUser(user)(dispatch, getState);\r\n    if (data && success) {\r\n        success(data);\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function samlCertificateStatus(success, error) {\r\n    const {data, error: err} = await AdminActions.getSamlCertificateStatus()(dispatch, getState);\r\n    if (data && success) {\r\n        success(data);\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport function getOAuthAppInfo(clientId) {\r\n    return bindClientFunc({\r\n        clientFunc: Client4.getOAuthAppInfo,\r\n        params: [clientId],\r\n    });\r\n}\r\n\r\nexport function allowOAuth2({responseType, clientId, redirectUri, state, scope}) {\r\n    return bindClientFunc({\r\n        clientFunc: Client4.authorizeOAuthApp,\r\n        params: [responseType, clientId, redirectUri, state, scope],\r\n    });\r\n}\r\n\r\nexport async function emailToLdap(loginId, password, token, ldapId, ldapPassword, success, error) {\r\n    const {data, error: err} = await UserActions.switchEmailToLdap(loginId, password, ldapId, ldapPassword, token)(dispatch, getState);\r\n    if (data && success) {\r\n        success(data);\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function emailToOAuth(loginId, password, token, newType, success, error) {\r\n    const {data, error: err} = await UserActions.switchEmailToOAuth(newType, loginId, password, token)(dispatch, getState);\r\n    if (data && success) {\r\n        success(data);\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function oauthToEmail(currentService, email, password, success, error) {\r\n    const {data, error: err} = await UserActions.switchOAuthToEmail(currentService, email, password)(dispatch, getState);\r\n    if (data) {\r\n        if (data.follow_link) {\r\n            emitUserLoggedOutEvent(data.follow_link);\r\n        }\r\n        if (success) {\r\n            success(data);\r\n        }\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function uploadBrandImage(brandImage, success, error) {\r\n    const {data, error: err} = await AdminActions.uploadBrandImage(brandImage)(dispatch, getState);\r\n    if (data && success) {\r\n        success(data);\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function uploadLicenseFile(file, success, error) {\r\n    const {data, error: err} = await AdminActions.uploadLicense(file)(dispatch, getState);\r\n    if (data && success) {\r\n        success(data);\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function removeLicenseFile(success, error) {\r\n    const {data, error: err} = await AdminActions.removeLicense()(dispatch, getState);\r\n    if (data && success) {\r\n        success(data);\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function uploadPublicSamlCertificate(file, success, error) {\r\n    const {data, error: err} = await AdminActions.uploadPublicSamlCertificate(file)(dispatch, getState);\r\n    if (data && success) {\r\n        success('saml-public.crt');\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function uploadPrivateSamlCertificate(file, success, error) {\r\n    const {data, error: err} = await AdminActions.uploadPrivateSamlCertificate(file)(dispatch, getState);\r\n    if (data && success) {\r\n        success('saml-private.key');\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function uploadIdpSamlCertificate(file, success, error) {\r\n    const {data, error: err} = await AdminActions.uploadIdpSamlCertificate(file)(dispatch, getState);\r\n    if (data && success) {\r\n        success('saml-idp.crt');\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function removePublicSamlCertificate(success, error) {\r\n    const {data, error: err} = await AdminActions.removePublicSamlCertificate()(dispatch, getState);\r\n    if (data && success) {\r\n        success(data);\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function removePrivateSamlCertificate(success, error) {\r\n    const {data, error: err} = await AdminActions.removePrivateSamlCertificate()(dispatch, getState);\r\n    if (data && success) {\r\n        success(data);\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function removeIdpSamlCertificate(success, error) {\r\n    const {data, error: err} = await AdminActions.removeIdpSamlCertificate()(dispatch, getState);\r\n    if (data && success) {\r\n        success(data);\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function getStandardAnalytics(teamId) {\r\n    await AdminActions.getStandardAnalytics(teamId)(dispatch, getState);\r\n}\r\n\r\nexport async function getAdvancedAnalytics(teamId) {\r\n    await AdminActions.getAdvancedAnalytics(teamId)(dispatch, getState);\r\n}\r\n\r\nexport async function getPostsPerDayAnalytics(teamId) {\r\n    await AdminActions.getPostsPerDayAnalytics(teamId)(dispatch, getState);\r\n}\r\n\r\nexport async function getUsersPerDayAnalytics(teamId) {\r\n    await AdminActions.getUsersPerDayAnalytics(teamId)(dispatch, getState);\r\n}\r\n\r\nexport async function elasticsearchTest(config, success, error) {\r\n    const {data, error: err} = await AdminActions.testElasticsearch(config)(dispatch, getState);\r\n    if (data && success) {\r\n        success(data);\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function testS3Connection(success, error) {\r\n    const {data, error: err} = await AdminActions.testS3Connection()(dispatch, getState);\r\n    if (data && success) {\r\n        success(data);\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function elasticsearchPurgeIndexes(success, error) {\r\n    const {data, error: err} = await AdminActions.purgeElasticsearchIndexes()(dispatch, getState);\r\n    if (data && success) {\r\n        success(data);\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport function setNavigationBlocked(blocked) {\r\n    return {\r\n        type: ActionTypes.SET_NAVIGATION_BLOCKED,\r\n        blocked,\r\n    };\r\n}\r\n\r\nexport function deferNavigation(onNavigationConfirmed) {\r\n    return {\r\n        type: ActionTypes.DEFER_NAVIGATION,\r\n        onNavigationConfirmed,\r\n    };\r\n}\r\n\r\nexport function cancelNavigation() {\r\n    return {\r\n        type: ActionTypes.CANCEL_NAVIGATION,\r\n    };\r\n}\r\n\r\nexport function confirmNavigation() {\r\n    // have to rename these because of lint no-shadow\r\n    return (thunkDispatch, thunkGetState) => {\r\n        const callback = getOnNavigationConfirmed(thunkGetState());\r\n\r\n        if (callback) {\r\n            callback();\r\n        }\r\n\r\n        thunkDispatch({\r\n            type: ActionTypes.CONFIRM_NAVIGATION,\r\n        });\r\n    };\r\n}\r\n\r\nexport async function invalidateAllEmailInvites(success, error) {\r\n    const {data, error: err} = await dispatch(TeamActions.invalidateAllEmailInvites());\r\n    if (data && success) {\r\n        success(data);\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n\r\nexport async function testSmtp(success, error) {\r\n    const {data, error: err} = await dispatch(AdminActions.testEmail());\r\n    if (data && success) {\r\n        success(data);\r\n    } else if (err && error) {\r\n        error({id: err.server_error_id, ...err});\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default class BackButton extends React.PureComponent {\r\n    static propTypes = {\r\n\r\n        /**\r\n         * URL to return to\r\n         */\r\n        url: PropTypes.string,\r\n\r\n        /**\r\n         * An optional click handler that will trigger when the user clicks on the back button\r\n         */\r\n        onClick: PropTypes.func,\r\n    };\r\n\r\n    static defaultProps = {\r\n        url: '/',\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                id='back_button'\r\n                className='signup-header'\r\n            >\r\n                <Link\r\n                    onClick={this.props.onClick}\r\n                    to={this.props.url}\r\n                >\r\n                    <FormattedMessage\r\n                        id='generic_icons.back'\r\n                        defaultMessage='Back Icon'\r\n                    >\r\n                        {(title) => (\r\n                            <span\r\n                                id='back_button_icon'\r\n                                className='fa fa-1x fa-angle-left'\r\n                                title={title}\r\n                            />\r\n                        )}\r\n                    </FormattedMessage>\r\n                    <FormattedMessage\r\n                        id='web.header.back'\r\n                        defaultMessage='Back'\r\n                    />\r\n                </Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","module.exports = __webpack_public_path__ + \"files/87b80d01a017833f1357800bfca49cea.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nexport function getNavigationBlocked(state) {\r\n    return state.views.admin.navigationBlock.blocked;\r\n}\r\n\r\nexport function showNavigationPrompt(state) {\r\n    return state.views.admin.navigationBlock.showNavigationPrompt;\r\n}\r\n\r\nexport function getOnNavigationConfirmed(state) {\r\n    return state.views.admin.navigationBlock.onNavigationConfirmed;\r\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\n\r\nimport {localizeMessage} from 'utils/utils.jsx';\r\nimport {t} from 'utils/i18n.jsx';\r\nimport SaveButton from 'components/save_button.jsx';\r\nimport LocalizedInput from 'components/localized_input/localized_input';\r\n\r\nexport default class LoginMfa extends React.PureComponent {\r\n    static propTypes = {\r\n\r\n        /*\r\n         * User's login ID\r\n         */\r\n        loginId: PropTypes.string.isRequired,\r\n\r\n        /*\r\n         * User's password\r\n         */\r\n        password: PropTypes.string.isRequired,\r\n\r\n        /*\r\n         * Function to call when submitting user credentials\r\n         */\r\n        submit: PropTypes.func.isRequired,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            saving: false,\r\n            token: '',\r\n            serverError: '',\r\n        };\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        e.preventDefault();\r\n        const token = e.target.value.trim().replace(/\\s/g, '');\r\n\r\n        if (token !== this.state.token) {\r\n            this.setState({\r\n                token,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const state = {};\r\n\r\n        state.serverError = '';\r\n        state.saving = true;\r\n        this.setState(state);\r\n\r\n        this.props.submit(\r\n            this.props.loginId,\r\n            this.props.password,\r\n            this.state.token\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let serverError;\r\n        let errorClass = '';\r\n        if (this.state.serverError) {\r\n            serverError = <label className='control-label'>{this.state.serverError}</label>;\r\n            errorClass = ' has-error';\r\n        }\r\n\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <div className='signup__email-container'>\r\n                    <p>\r\n                        <FormattedMessage\r\n                            id='login_mfa.enterToken'\r\n                            defaultMessage=\"To complete the sign in process, please enter a token from your smartphone's authenticator\"\r\n                        />\r\n                    </p>\r\n                    <div className={'form-group' + errorClass}>\r\n                        {serverError}\r\n                    </div>\r\n                    <div className={'form-group' + errorClass}>\r\n                        <LocalizedInput\r\n                            type='text'\r\n                            className='form-control'\r\n                            name='token'\r\n                            placeholder={{id: t('login_mfa.token'), defaultMessage: 'MFA Token'}}\r\n                            spellCheck='false'\r\n                            autoComplete='off'\r\n                            autoFocus={true}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <SaveButton\r\n                            saving={this.state.saving}\r\n                            disabled={this.state.saving}\r\n                            onClick={this.handleSubmit}\r\n                            defaultMessage={localizeMessage('login_mfa.submit', 'Submit')}\r\n                            savingMessage={localizeMessage('login_mfa.submitting', 'Submitting...')}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {FormattedMessage} from 'react-intl';\r\n\r\nimport {oauthToEmail} from 'actions/admin_actions.jsx';\r\nimport Constants from 'utils/constants.jsx';\r\nimport * as Utils from 'utils/utils.jsx';\r\nimport {t} from 'utils/i18n.jsx';\r\nimport LocalizedInput from 'components/localized_input/localized_input';\r\n\r\nexport default class OAuthToEmail extends React.PureComponent {\r\n    static propTypes = {\r\n        currentType: PropTypes.string,\r\n        email: PropTypes.string,\r\n        siteName: PropTypes.string,\r\n        passwordConfig: PropTypes.object,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.submit = this.submit.bind(this);\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    submit(e) {\r\n        e.preventDefault();\r\n        const state = {};\r\n\r\n        const password = ReactDOM.findDOMNode(this.refs.password).value;\r\n        if (!password) {\r\n            state.error = Utils.localizeMessage('claim.oauth_to_email.enterPwd', 'Please enter a password.');\r\n            this.setState(state);\r\n            return;\r\n        }\r\n\r\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\r\n        if (!valid && error) {\r\n            this.setState({error});\r\n            return;\r\n        }\r\n\r\n        const confirmPassword = ReactDOM.findDOMNode(this.refs.passwordconfirm).value;\r\n        if (!confirmPassword || password !== confirmPassword) {\r\n            state.error = Utils.localizeMessage('claim.oauth_to_email.pwdNotMatch', 'Passwords do not match.');\r\n            this.setState(state);\r\n            return;\r\n        }\r\n\r\n        state.error = null;\r\n        this.setState(state);\r\n\r\n        oauthToEmail(\r\n            this.props.currentType,\r\n            this.props.email,\r\n            password,\r\n            (data) => {\r\n                if (data.follow_link) {\r\n                    window.location.href = data.follow_link;\r\n                }\r\n            },\r\n            (err) => {\r\n                this.setState({error: err.message});\r\n            }\r\n        );\r\n    }\r\n    render() {\r\n        var error = null;\r\n        if (this.state.error) {\r\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\r\n        }\r\n\r\n        var formClass = 'form-group';\r\n        if (error) {\r\n            formClass += ' has-error';\r\n        }\r\n\r\n        const uiType = `${(this.props.currentType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.currentType))} SSO`;\r\n\r\n        return (\r\n            <div>\r\n                <h3>\r\n                    <FormattedMessage\r\n                        id='claim.oauth_to_email.title'\r\n                        defaultMessage='Switch {type} Account to Email'\r\n                        values={{\r\n                            type: uiType,\r\n                        }}\r\n                    />\r\n                </h3>\r\n                <form onSubmit={this.submit}>\r\n                    <p>\r\n                        <FormattedMessage\r\n                            id='claim.oauth_to_email.description'\r\n                            defaultMessage='Upon changing your account type, you will only be able to login with your email and password.'\r\n                        />\r\n                    </p>\r\n                    <p>\r\n                        <FormattedMessage\r\n                            id='claim.oauth_to_email.enterNewPwd'\r\n                            defaultMessage='Enter a new password for your {site} email account'\r\n                            values={{\r\n                                site: this.props.siteName,\r\n                            }}\r\n                        />\r\n                    </p>\r\n                    <div className={formClass}>\r\n                        <LocalizedInput\r\n                            type='password'\r\n                            className='form-control'\r\n                            name='password'\r\n                            ref='password'\r\n                            placeholder={{id: t('claim.oauth_to_email.newPwd'), defaultMessage: 'New Password'}}\r\n                            spellCheck='false'\r\n                        />\r\n                    </div>\r\n                    <div className={formClass}>\r\n                        <LocalizedInput\r\n                            type='password'\r\n                            className='form-control'\r\n                            name='passwordconfirm'\r\n                            ref='passwordconfirm'\r\n                            placeholder={{id: t('claim.oauth_to_email.confirm'), defaultMessage: 'Confirm Password'}}\r\n                            spellCheck='false'\r\n                        />\r\n                    </div>\r\n                    {error}\r\n                    <button\r\n                        type='submit'\r\n                        className='btn btn-primary'\r\n                    >\r\n                        <FormattedMessage\r\n                            id='claim.oauth_to_email.switchTo'\r\n                            defaultMessage='Switch {type} to email and password'\r\n                            values={{\r\n                                type: uiType,\r\n                            }}\r\n                        />\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {FormattedMessage} from 'react-intl';\r\n\r\nimport {emailToOAuth} from 'actions/admin_actions.jsx';\r\nimport Constants from 'utils/constants.jsx';\r\nimport * as Utils from 'utils/utils.jsx';\r\nimport {t} from 'utils/i18n.jsx';\r\nimport LoginMfa from 'components/login/login_mfa.jsx';\r\nimport LocalizedInput from 'components/localized_input/localized_input';\r\n\r\nexport default class EmailToOAuth extends React.PureComponent {\r\n    static propTypes = {\r\n        newType: PropTypes.string,\r\n        email: PropTypes.string,\r\n        siteName: PropTypes.string,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.submit = this.submit.bind(this);\r\n        this.preSubmit = this.preSubmit.bind(this);\r\n\r\n        this.state = {showMfa: false, password: ''};\r\n    }\r\n\r\n    preSubmit(e) {\r\n        e.preventDefault();\r\n        var state = {};\r\n\r\n        var password = ReactDOM.findDOMNode(this.refs.password).value;\r\n        if (!password) {\r\n            state.error = Utils.localizeMessage('claim.email_to_oauth.pwdError', 'Please enter your password.');\r\n            this.setState(state);\r\n            return;\r\n        }\r\n\r\n        this.setState({password});\r\n\r\n        state.error = null;\r\n        this.setState(state);\r\n\r\n        this.submit(this.props.email, password, '');\r\n    }\r\n\r\n    submit(loginId, password, token) {\r\n        emailToOAuth(\r\n            loginId,\r\n            password,\r\n            token,\r\n            this.props.newType,\r\n            (data) => {\r\n                if (data.follow_link) {\r\n                    window.location.href = data.follow_link;\r\n                }\r\n            },\r\n            (err) => {\r\n                if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\r\n                    this.setState({showMfa: true});\r\n                } else {\r\n                    this.setState({error: err.message, showMfa: false});\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        var error = null;\r\n        if (this.state.error) {\r\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\r\n        }\r\n\r\n        var formClass = 'form-group';\r\n        if (error) {\r\n            formClass += ' has-error';\r\n        }\r\n\r\n        const type = (this.props.newType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.newType));\r\n        const uiType = `${type} SSO`;\r\n\r\n        let content;\r\n        if (this.state.showMfa) {\r\n            content = (\r\n                <LoginMfa\r\n                    loginId={this.props.email}\r\n                    password={this.state.password}\r\n                    submit={this.submit}\r\n                />\r\n            );\r\n        } else {\r\n            content = (\r\n                <form onSubmit={this.preSubmit}>\r\n                    <p>\r\n                        <FormattedMessage\r\n                            id='claim.email_to_oauth.ssoType'\r\n                            defaultMessage='Upon claiming your account, you will only be able to login with {type} SSO'\r\n                            values={{\r\n                                type,\r\n                            }}\r\n                        />\r\n                    </p>\r\n                    <p>\r\n                        <FormattedMessage\r\n                            id='claim.email_to_oauth.ssoNote'\r\n                            defaultMessage='You must already have a valid {type} account'\r\n                            values={{\r\n                                type,\r\n                            }}\r\n                        />\r\n                    </p>\r\n                    <p>\r\n                        <FormattedMessage\r\n                            id='claim.email_to_oauth.enterPwd'\r\n                            defaultMessage='Enter the password for your {site} account'\r\n                            values={{\r\n                                site: this.props.siteName,\r\n                            }}\r\n                        />\r\n                    </p>\r\n                    <div className={formClass}>\r\n                        <LocalizedInput\r\n                            type='password'\r\n                            className='form-control'\r\n                            name='password'\r\n                            ref='password'\r\n                            placeholder={{id: t('claim.email_to_oauth.pwd'), defaultMessage: 'Password'}}\r\n                            spellCheck='false'\r\n                        />\r\n                    </div>\r\n                    {error}\r\n                    <button\r\n                        type='submit'\r\n                        className='btn btn-primary'\r\n                    >\r\n                        <FormattedMessage\r\n                            id='claim.email_to_oauth.switchTo'\r\n                            defaultMessage='Switch account to {uiType}'\r\n                            values={{\r\n                                uiType,\r\n                            }}\r\n                        />\r\n                    </button>\r\n                </form>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h3>\r\n                    <FormattedMessage\r\n                        id='claim.email_to_oauth.title'\r\n                        defaultMessage='Switch Email/Password Account to {uiType}'\r\n                        values={{\r\n                            uiType,\r\n                        }}\r\n                    />\r\n                </h3>\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\n\r\nimport * as Utils from 'utils/utils.jsx';\r\nimport {t} from 'utils/i18n.jsx';\r\nimport LoginMfa from 'components/login/login_mfa.jsx';\r\nimport LocalizedInput from 'components/localized_input/localized_input';\r\n\r\nexport default class LDAPToEmail extends React.Component {\r\n    static propTypes = {\r\n        email: PropTypes.string,\r\n        passwordConfig: PropTypes.object,\r\n        switchLdapToEmail: PropTypes.func.isRequired,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.submit = this.submit.bind(this);\r\n        this.preSubmit = this.preSubmit.bind(this);\r\n\r\n        this.state = {\r\n            passwordError: '',\r\n            confirmError: '',\r\n            ldapPasswordError: '',\r\n            serverError: '',\r\n        };\r\n    }\r\n\r\n    preSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        var state = {\r\n            passwordError: '',\r\n            confirmError: '',\r\n            ldapPasswordError: '',\r\n            serverError: '',\r\n        };\r\n\r\n        const ldapPassword = this.refs.ldappassword.value;\r\n        if (!ldapPassword) {\r\n            state.ldapPasswordError = Utils.localizeMessage('claim.ldap_to_email.ldapPasswordError', 'Please enter your AD/LDAP password.');\r\n            this.setState(state);\r\n            return;\r\n        }\r\n\r\n        const password = this.refs.password.value;\r\n        if (!password) {\r\n            state.passwordError = Utils.localizeMessage('claim.ldap_to_email.pwdError', 'Please enter your password.');\r\n            this.setState(state);\r\n            return;\r\n        }\r\n\r\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\r\n        if (!valid && error) {\r\n            this.setState({\r\n                passwordError: error,\r\n            });\r\n            return;\r\n        }\r\n\r\n        const confirmPassword = this.refs.passwordconfirm.value;\r\n        if (!confirmPassword || password !== confirmPassword) {\r\n            state.confirmError = Utils.localizeMessage('claim.ldap_to_email.pwdNotMatch', 'Passwords do not match.');\r\n            this.setState(state);\r\n            return;\r\n        }\r\n\r\n        state.password = password;\r\n        state.ldapPassword = ldapPassword;\r\n        this.setState(state);\r\n\r\n        this.submit(this.props.email, password, '', ldapPassword);\r\n    }\r\n\r\n    submit(loginId, password, token, ldapPassword) {\r\n        this.props.switchLdapToEmail(ldapPassword || this.state.ldapPassword, this.props.email, password, token).then(({data, error: err}) => {\r\n            if (data && data.follow_link) {\r\n                window.location.href = data.follow_link;\r\n            } else if (err) {\r\n                if (err.server_error_id.startsWith('model.user.is_valid.pwd')) {\r\n                    this.setState({passwordError: err.message, showMfa: false});\r\n                } else if (err.server_error_id === 'ent.ldap.do_login.invalid_password.app_error') {\r\n                    this.setState({ldapPasswordError: err.message, showMfa: false});\r\n                } else if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\r\n                    this.setState({showMfa: true});\r\n                } else {\r\n                    this.setState({serverError: err.message, showMfa: false});\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let serverError = null;\r\n        let formClass = 'form-group';\r\n        if (this.state.serverError) {\r\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\r\n            formClass += ' has-error';\r\n        }\r\n\r\n        let passwordError = null;\r\n        let passwordClass = 'form-group';\r\n        if (this.state.passwordError) {\r\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\r\n            passwordClass += ' has-error';\r\n        }\r\n\r\n        let ldapPasswordError = null;\r\n        let ldapPasswordClass = 'form-group';\r\n        if (this.state.ldapPasswordError) {\r\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\r\n            ldapPasswordClass += ' has-error';\r\n        }\r\n\r\n        let confirmError = null;\r\n        let confimClass = 'form-group';\r\n        if (this.state.confirmError) {\r\n            confirmError = <div className='form-group has-error'><label className='control-label'>{this.state.confirmError}</label></div>;\r\n            confimClass += ' has-error';\r\n        }\r\n\r\n        const passwordPlaceholder = Utils.localizeMessage('claim.ldap_to_email.ldapPwd', 'AD/LDAP Password');\r\n\r\n        let content;\r\n        if (this.state.showMfa) {\r\n            content = (\r\n                <LoginMfa\r\n                    loginId={this.props.email}\r\n                    password={this.state.password}\r\n                    submit={this.submit}\r\n                />\r\n            );\r\n        } else {\r\n            content = (\r\n                <form\r\n                    onSubmit={this.preSubmit}\r\n                    className={formClass}\r\n                >\r\n                    <p>\r\n                        <FormattedMessage\r\n                            id='claim.ldap_to_email.email'\r\n                            defaultMessage='After switching your authentication method, you will use {email} to login. Your AD/LDAP credentials will no longer allow access to Mattermost.'\r\n                            values={{\r\n                                email: this.props.email,\r\n                            }}\r\n                        />\r\n                    </p>\r\n                    <p>\r\n                        <FormattedMessage\r\n                            id='claim.ldap_to_email.enterLdapPwd'\r\n                            defaultMessage='{ldapPassword}:'\r\n                            values={{\r\n                                ldapPassword: passwordPlaceholder,\r\n                            }}\r\n                        />\r\n                    </p>\r\n                    <div className={ldapPasswordClass}>\r\n                        <input\r\n                            type='password'\r\n                            className='form-control'\r\n                            name='ldapPassword'\r\n                            ref='ldappassword'\r\n                            placeholder={passwordPlaceholder}\r\n                            spellCheck='false'\r\n                        />\r\n                    </div>\r\n                    {ldapPasswordError}\r\n                    <p>\r\n                        <FormattedMessage\r\n                            id='claim.ldap_to_email.enterPwd'\r\n                            defaultMessage='New email login password:'\r\n                        />\r\n                    </p>\r\n                    <div className={passwordClass}>\r\n                        <LocalizedInput\r\n                            type='password'\r\n                            className='form-control'\r\n                            name='password'\r\n                            ref='password'\r\n                            placeholder={{id: t('claim.ldap_to_email.pwd'), defaultMessage: 'Password'}}\r\n                            spellCheck='false'\r\n                        />\r\n                    </div>\r\n                    {passwordError}\r\n                    <div className={confimClass}>\r\n                        <LocalizedInput\r\n                            type='password'\r\n                            className='form-control'\r\n                            name='passwordconfirm'\r\n                            ref='passwordconfirm'\r\n                            placeholder={{id: t('claim.ldap_to_email.confirm'), defaultMessage: 'Confirm Password'}}\r\n                            spellCheck='false'\r\n                        />\r\n                    </div>\r\n                    {confirmError}\r\n                    <button\r\n                        type='submit'\r\n                        className='btn btn-primary'\r\n                    >\r\n                        <FormattedMessage\r\n                            id='claim.ldap_to_email.switchTo'\r\n                            defaultMessage='Switch account to email/password'\r\n                        />\r\n                    </button>\r\n                    {serverError}\r\n                </form>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h3>\r\n                    <FormattedMessage\r\n                        id='claim.ldap_to_email.title'\r\n                        defaultMessage='Switch AD/LDAP Account to Email/Password'\r\n                    />\r\n                </h3>\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {FormattedMessage} from 'react-intl';\r\n\r\nimport {emailToLdap} from 'actions/admin_actions.jsx';\r\nimport * as Utils from 'utils/utils.jsx';\r\nimport {t} from 'utils/i18n.jsx';\r\nimport LoginMfa from 'components/login/login_mfa.jsx';\r\nimport LocalizedInput from 'components/localized_input/localized_input';\r\n\r\nexport default class EmailToLDAP extends React.Component {\r\n    static propTypes = {\r\n        email: PropTypes.string,\r\n        siteName: PropTypes.string,\r\n        ldapLoginFieldName: PropTypes.string,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.submit = this.submit.bind(this);\r\n        this.preSubmit = this.preSubmit.bind(this);\r\n\r\n        this.state = {\r\n            passwordError: '',\r\n            ldapError: '',\r\n            ldapPasswordError: '',\r\n            serverError: '',\r\n            showMfa: false,\r\n        };\r\n    }\r\n\r\n    preSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        var state = {\r\n            passwordError: '',\r\n            ldapError: '',\r\n            ldapPasswordError: '',\r\n            serverError: '',\r\n        };\r\n\r\n        const password = this.refs.emailpassword.value;\r\n        if (!password) {\r\n            state.passwordError = Utils.localizeMessage('claim.email_to_ldap.pwdError', 'Please enter your password.');\r\n            this.setState(state);\r\n            return;\r\n        }\r\n\r\n        const ldapId = this.refs.ldapid.value.trim();\r\n        if (!ldapId) {\r\n            state.ldapError = Utils.localizeMessage('claim.email_to_ldap.ldapIdError', 'Please enter your AD/LDAP ID.');\r\n            this.setState(state);\r\n            return;\r\n        }\r\n\r\n        const ldapPassword = this.refs.ldappassword.value;\r\n        if (!ldapPassword) {\r\n            state.ldapPasswordError = Utils.localizeMessage('claim.email_to_ldap.ldapPasswordError', 'Please enter your AD/LDAP password.');\r\n            this.setState(state);\r\n            return;\r\n        }\r\n\r\n        state.password = password;\r\n        state.ldapId = ldapId;\r\n        state.ldapPassword = ldapPassword;\r\n        this.setState(state);\r\n\r\n        this.submit(this.props.email, password, '', ldapId, ldapPassword);\r\n    }\r\n\r\n    submit(loginId, password, token, ldapId, ldapPassword) {\r\n        emailToLdap(\r\n            loginId,\r\n            password,\r\n            token,\r\n            ldapId || this.state.ldapId,\r\n            ldapPassword || this.state.ldapPassword,\r\n            (data) => {\r\n                if (data.follow_link) {\r\n                    window.location.href = data.follow_link;\r\n                }\r\n            },\r\n            (err) => {\r\n                if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\r\n                    this.setState({showMfa: true});\r\n                } else {\r\n                    switch (err.id) {\r\n                    case 'ent.ldap.do_login.user_not_registered.app_error':\r\n                    case 'ent.ldap.do_login.user_filtered.app_error':\r\n                    case 'ent.ldap.do_login.matched_to_many_users.app_error':\r\n                        this.setState({ldapError: err.message, showMfa: false});\r\n                        break;\r\n                    case 'ent.ldap.do_login.invalid_password.app_error':\r\n                        this.setState({ldapPasswordError: err.message, showMfa: false});\r\n                        break;\r\n                    case 'api.user.check_user_password.invalid.app_error':\r\n                        this.setState({passwordError: err.message, showMfa: false});\r\n                        break;\r\n                    default:\r\n                        this.setState({serverError: err.message, showMfa: false});\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let serverError = null;\r\n        let formClass = 'form-group';\r\n        if (this.state.serverError) {\r\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\r\n            formClass += ' has-error';\r\n        }\r\n\r\n        let passwordError = null;\r\n        let passwordClass = 'form-group';\r\n        if (this.state.passwordError) {\r\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\r\n            passwordClass += ' has-error';\r\n        }\r\n\r\n        let ldapError = null;\r\n        let ldapClass = 'form-group';\r\n        if (this.state.ldapError) {\r\n            ldapError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapError}</label></div>;\r\n            ldapClass += ' has-error';\r\n        }\r\n\r\n        let ldapPasswordError = null;\r\n        let ldapPasswordClass = 'form-group';\r\n        if (this.state.ldapPasswordError) {\r\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\r\n            ldapPasswordClass += ' has-error';\r\n        }\r\n\r\n        let loginPlaceholder;\r\n        if (this.props.ldapLoginFieldName) {\r\n            loginPlaceholder = this.props.ldapLoginFieldName;\r\n        } else {\r\n            loginPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapId', 'AD/LDAP ID');\r\n        }\r\n\r\n        let content;\r\n        if (this.state.showMfa) {\r\n            content = (\r\n                <LoginMfa\r\n                    loginId={this.props.email}\r\n                    password={this.state.password}\r\n                    submit={this.submit}\r\n                />\r\n            );\r\n        } else {\r\n            content = (\r\n                <form\r\n                    onSubmit={this.preSubmit}\r\n                    className={formClass}\r\n                >\r\n                    <p>\r\n                        <FormattedMessage\r\n                            id='claim.email_to_ldap.ssoType'\r\n                            defaultMessage='Upon claiming your account, you will only be able to login with AD/LDAP'\r\n                        />\r\n                    </p>\r\n                    <p>\r\n                        <FormattedMessage\r\n                            id='claim.email_to_ldap.ssoNote'\r\n                            defaultMessage='You must already have a valid AD/LDAP account'\r\n                        />\r\n                    </p>\r\n                    <p>\r\n                        <FormattedMessage\r\n                            id='claim.email_to_ldap.enterPwd'\r\n                            defaultMessage='Enter the password for your {site} email account'\r\n                            values={{\r\n                                site: this.props.siteName,\r\n                            }}\r\n                        />\r\n                    </p>\r\n                    <input\r\n                        type='text'\r\n                        style={style.usernameInput}\r\n                        name='fakeusernameremembered'\r\n                    />\r\n                    <div className={passwordClass}>\r\n                        <LocalizedInput\r\n                            type='password'\r\n                            className='form-control'\r\n                            name='emailPassword'\r\n                            ref='emailpassword'\r\n                            autoComplete='off'\r\n                            placeholder={{id: t('claim.email_to_ldap.pwd'), defaultMessage: 'Password'}}\r\n                            spellCheck='false'\r\n                        />\r\n                    </div>\r\n                    {passwordError}\r\n                    <p>\r\n                        <FormattedMessage\r\n                            id='claim.email_to_ldap.enterLdapPwd'\r\n                            defaultMessage='Enter the ID and password for your AD/LDAP account'\r\n                        />\r\n                    </p>\r\n                    <div className={ldapClass}>\r\n                        <input\r\n                            type='text'\r\n                            className='form-control'\r\n                            name='ldapId'\r\n                            ref='ldapid'\r\n                            autoComplete='off'\r\n                            placeholder={loginPlaceholder}\r\n                            spellCheck='false'\r\n                        />\r\n                    </div>\r\n                    {ldapError}\r\n                    <div className={ldapPasswordClass}>\r\n                        <LocalizedInput\r\n                            type='password'\r\n                            className='form-control'\r\n                            name='ldapPassword'\r\n                            ref='ldappassword'\r\n                            autoComplete='off'\r\n                            placeholder={{id: t('claim.email_to_ldap.ldapPwd'), defaultMessage: 'AD/LDAP Password'}}\r\n                            spellCheck='false'\r\n                        />\r\n                    </div>\r\n                    {ldapPasswordError}\r\n                    <button\r\n                        type='submit'\r\n                        className='btn btn-primary'\r\n                    >\r\n                        <FormattedMessage\r\n                            id='claim.email_to_ldap.switchTo'\r\n                            defaultMessage='Switch account to AD/LDAP'\r\n                        />\r\n                    </button>\r\n                    {serverError}\r\n                </form>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h3>\r\n                    <FormattedMessage\r\n                        id='claim.email_to_ldap.title'\r\n                        defaultMessage='Switch Email/Password Account to AD/LDAP'\r\n                    />\r\n                </h3>\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst style = {\r\n    usernameInput: {display: 'none'},\r\n};\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\n\r\nimport logoImage from 'images/logo.png';\r\nimport BackButton from 'components/common/back_button.jsx';\r\nimport OAuthToEmail from 'components/claim/components/oauth_to_email';\r\nimport EmailToOAuth from 'components/claim/components/email_to_oauth';\r\nimport LDAPToEmail from 'components/claim/components/ldap_to_email';\r\nimport EmailToLDAP from 'components/claim/components/email_to_ldap';\r\n\r\nexport default class ClaimController extends React.PureComponent {\r\n    static propTypes = {\r\n        location: PropTypes.object.isRequired,\r\n        siteName: PropTypes.string,\r\n        ldapLoginFieldName: PropTypes.string,\r\n        passwordConfig: PropTypes.object,\r\n\r\n        /*\r\n         * Object from react-router\r\n         */\r\n        match: PropTypes.shape({\r\n            url: PropTypes.string.isRequired,\r\n        }).isRequired,\r\n\r\n        actions: PropTypes.shape({\r\n            switchLdapToEmail: PropTypes.func.isRequired,\r\n        }).isRequired,\r\n    };\r\n\r\n    render() {\r\n        const email = (new URLSearchParams(this.props.location.search)).get('email');\r\n        const newType = (new URLSearchParams(this.props.location.search)).get('new_type');\r\n        const currentType = (new URLSearchParams(this.props.location.search)).get('old_type');\r\n\r\n        return (\r\n            <div>\r\n                <BackButton/>\r\n                <div className='col-sm-12'>\r\n                    <div className='signup-team__container'>\r\n                        <img\r\n                            alt={'signup logo'}\r\n                            className='signup-team-logo'\r\n                            src={logoImage}\r\n                        />\r\n                        <div id='claim'>\r\n                            <Switch>\r\n                                <Route\r\n                                    path={`${this.props.match.url}/oauth_to_email`}\r\n                                    render={() => (\r\n                                        <OAuthToEmail\r\n                                            currentType={currentType}\r\n                                            email={email}\r\n                                            siteName={this.props.siteName}\r\n                                            passwordConfig={this.props.passwordConfig}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                                <Route\r\n                                    path={`${this.props.match.url}/email_to_oauth`}\r\n                                    render={() => (\r\n                                        <EmailToOAuth\r\n                                            newType={newType}\r\n                                            email={email}\r\n                                            siteName={this.props.siteName}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                                <Route\r\n                                    path={`${this.props.match.url}/ldap_to_email`}\r\n                                    render={() => (\r\n                                        <LDAPToEmail\r\n                                            email={email}\r\n                                            passwordConfig={this.props.passwordConfig}\r\n                                            switchLdapToEmail={this.props.actions.switchLdapToEmail}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                                <Route\r\n                                    path={`${this.props.match.url}/email_to_ldap`}\r\n                                    render={() => (\r\n                                        <EmailToLDAP\r\n                                            email={email}\r\n                                            siteName={this.props.siteName}\r\n                                            ldapLoginFieldName={this.props.ldapLoginFieldName}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Switch>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\r\n// See LICENSE.txt for license information.\r\n\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\n\r\nimport {switchLdapToEmail} from 'mattermost-redux/actions/users';\r\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\r\n\r\nimport {getPasswordConfig} from 'utils/utils.jsx';\r\n\r\nimport ClaimController from './claim_controller.jsx';\r\n\r\nfunction mapStateToProps(state) {\r\n    const config = getConfig(state);\r\n    const siteName = config.SiteName;\r\n    const ldapLoginFieldName = config.LdapLoginFieldName;\r\n\r\n    return {\r\n        siteName,\r\n        ldapLoginFieldName,\r\n        passwordConfig: getPasswordConfig(config),\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators({\r\n            switchLdapToEmail,\r\n        }, dispatch),\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ClaimController);\r\n"],"sourceRoot":""}